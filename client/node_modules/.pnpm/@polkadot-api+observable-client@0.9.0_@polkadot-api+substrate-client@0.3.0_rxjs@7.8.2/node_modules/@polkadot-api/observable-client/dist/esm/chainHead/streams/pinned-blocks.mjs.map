{"version":3,"file":"pinned-blocks.mjs","sources":["../../../../src/chainHead/streams/pinned-blocks.ts"],"sourcesContent":["import { shareLatest } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Observable,\n  Subject,\n  exhaustMap,\n  filter,\n  map,\n  merge,\n  scan,\n  timer,\n} from \"rxjs\"\nimport { withStopRecovery } from \"../enhancers\"\nimport type { FollowEvent } from \"./follow\"\nimport { Runtime, getRuntimeCreator } from \"./get-runtime-creator\"\n\nexport interface PinnedBlock {\n  hash: string\n  number: number\n  parent: string\n  children: Set<string>\n  runtime: string\n  unpinnable: boolean\n  refCount: number\n  recovering: boolean\n}\n\nexport interface BlockUsageEvent {\n  type: \"blockUsage\"\n  value: { type: \"hold\"; hash: string } | { type: \"release\"; hash: string }\n}\ninterface CleanupEvent {\n  type: \"cleanup\"\n}\n\nexport type PinnedBlocks = {\n  best: string\n  finalized: string\n  runtimes: Record<string, Runtime>\n  blocks: Map<string, PinnedBlock>\n  finalizedRuntime: Runtime\n  recovering: boolean\n}\n\nconst createRuntimeGetter = (pinned: PinnedBlocks, startAt: HexString) => {\n  return () => {\n    const runtime = pinned.runtimes[startAt]\n    if (!runtime) return pinned.blocks.has(startAt) ? startAt : null\n    const winner = [...runtime.usages].at(-1)\n    return winner ?? null\n  }\n}\n\nconst deleteBlock = (blocks: PinnedBlocks[\"blocks\"], blockHash: string) => {\n  blocks.get(blocks.get(blockHash)!.parent)?.children.delete(blockHash)\n  blocks.delete(blockHash)\n}\n\nconst deleteBlocks = (blocks: PinnedBlocks, toDelete: string[]) => {\n  toDelete.forEach((hash) => {\n    deleteBlock(blocks.blocks, hash)\n  })\n\n  Object.entries(blocks.runtimes)\n    .map(([key, value]) => ({\n      key,\n      usages: value.deleteBlocks(toDelete),\n    }))\n    .filter((x) => x.usages === 0)\n    .map((x) => x.key)\n    .forEach((unusedRuntime) => {\n      delete blocks.runtimes[unusedRuntime]\n    })\n}\n\nexport const getPinnedBlocks$ = (\n  follow$: Observable<FollowEvent>,\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  blockUsage$: Subject<BlockUsageEvent>,\n  onUnpin: (blocks: string[]) => void,\n  deleteFromCache: (block: string) => void,\n) => {\n  const cleanup$ = new Subject<void>()\n  const cleanupEvt$ = cleanup$.pipe(\n    exhaustMap(() => timer(0)),\n    map(\n      (): CleanupEvent => ({\n        type: \"cleanup\" as const,\n      }),\n    ),\n  )\n  const pinnedBlocks$: Observable<PinnedBlocks> = merge(\n    blockUsage$,\n    cleanupEvt$,\n    follow$,\n  ).pipe(\n    scan((acc, event) => {\n      const unpinAndDelete = (toUnpin: string[]) => {\n        deleteBlocks(acc, toUnpin)\n        onUnpin(toUnpin)\n      }\n\n      switch (event.type) {\n        case \"initialized\":\n          if (acc.recovering) {\n            const isConnected = event.finalizedBlockHashes.some((hash) =>\n              acc.blocks.has(hash),\n            )\n            if (!isConnected) {\n              acc = getInitialPinnedBlocks()\n            }\n          }\n\n          const [finalizedHash] = event.finalizedBlockHashes.slice(-1)\n          acc.finalized = acc.best = finalizedHash\n\n          const lastIdx = event.finalizedBlockHashes.length - 1\n          event.finalizedBlockHashes.forEach((hash, i) => {\n            const preexistingBlock = acc.blocks.get(hash)\n            if (preexistingBlock) {\n              preexistingBlock.recovering = false\n              preexistingBlock.unpinnable = i !== lastIdx\n            } else {\n              acc.blocks.set(hash, {\n                hash: hash,\n                parent:\n                  i === 0\n                    ? event.parentHash\n                    : event.finalizedBlockHashes[i - 1],\n                children: new Set(\n                  i === lastIdx ? [] : [event.finalizedBlockHashes[i + 1]],\n                ),\n                unpinnable: i !== lastIdx,\n                runtime: hash,\n                refCount: 0,\n                number: event.number + i,\n                recovering: false,\n              })\n            }\n          })\n\n          const finalizedRuntime = Object.values(acc.runtimes).find((runtime) =>\n            runtime.usages.has(finalizedHash),\n          )\n\n          acc.finalizedRuntime =\n            finalizedRuntime ??\n            (acc.runtimes[finalizedHash] = getRuntime(\n              createRuntimeGetter(acc, finalizedHash),\n            ))\n\n          return acc\n\n        case \"stop-error\":\n          for (const block of acc.blocks.values()) {\n            block.recovering = true\n          }\n          acc.recovering = true\n\n          return acc\n\n        case \"newBlock\": {\n          const { parentBlockHash: parent, blockHash: hash } = event\n          if (acc.blocks.has(hash)) {\n            acc.blocks.get(hash)!.recovering = false\n          } else {\n            const parentNode = acc.blocks.get(parent)!\n            parentNode.children.add(hash)\n            const block = {\n              hash,\n              number: parentNode.number + 1,\n              parent: parent,\n              children: new Set<string>(),\n              runtime: event.newRuntime ? hash : parentNode.runtime,\n              unpinnable: false,\n              refCount: 0,\n              recovering: false,\n            }\n            acc.blocks.set(hash, block)\n            if (event.newRuntime) {\n              // getRuntime calls getHash immediately\n              // it assumes pinnedBlocks.runtimes[hash] is empty and pinnedBlocks.blocks.has(hash)\n              acc.runtimes[hash] = getRuntime(createRuntimeGetter(acc, hash))\n            }\n            acc.runtimes[block.runtime].addBlock(hash)\n          }\n\n          return acc\n        }\n\n        case \"bestBlockChanged\": {\n          if (acc.recovering) {\n            for (const [hash, block] of acc.blocks) {\n              if (block.recovering) {\n                deleteBlock(acc.blocks, hash)\n                deleteFromCache(hash)\n              }\n            }\n            acc.recovering = false\n          }\n          acc.best = event.bestBlockHash\n          return acc\n        }\n\n        case \"finalized\": {\n          acc.finalized = event.finalizedBlockHashes.slice(-1)[0]\n          const { blocks } = acc\n\n          // This logic is only needed because of a bug on some pretty old versions\n          // of the polkadot-sdk node. However, fixing it with an enhancer\n          // was a huge PITA. Therefore, it's more pragmatic to address it here\n          if (blocks.get(acc.best)!.number < blocks.get(acc.finalized)!.number)\n            acc.best = acc.finalized\n\n          acc.finalizedRuntime =\n            acc.runtimes[blocks.get(acc.finalized)!.runtime]\n\n          event.prunedBlockHashes.forEach((hash) => {\n            const block = acc.blocks.get(hash)\n            if (block) {\n              block.unpinnable = true\n            }\n          })\n\n          let current = blocks.get(blocks.get(acc.finalized)!.parent)\n          while (current && !current.unpinnable) {\n            current.unpinnable = true\n            current = blocks.get(current.parent)\n          }\n\n          cleanup$.next()\n\n          return acc\n        }\n        case \"cleanup\": {\n          const toUnpin = [...acc.blocks.values()]\n            .filter(({ unpinnable, refCount }) => unpinnable && !refCount)\n            .map(({ hash }) => hash)\n\n          unpinAndDelete(toUnpin)\n          return acc\n        }\n        case \"blockUsage\": {\n          if (!acc.blocks.has(event.value.hash)) return acc\n\n          const block = acc.blocks.get(event.value.hash)!\n          block.refCount += event.value.type === \"hold\" ? 1 : -1\n          if (block.refCount === 0 && !block.recovering && block.unpinnable) {\n            const toUnpin = [block.hash]\n            unpinAndDelete(toUnpin)\n          }\n          return acc\n        }\n      }\n    }, getInitialPinnedBlocks()),\n    filter((x) => !!x.finalizedRuntime.runtime),\n    map((x) => ({ ...x })),\n    shareLatest,\n  )\n\n  const getRuntime = getRuntimeCreator(\n    withStopRecovery(pinnedBlocks$, call$, \"pinned-blocks\"),\n  )\n  return pinnedBlocks$\n}\n\nconst getInitialPinnedBlocks = (): PinnedBlocks => ({\n  best: \"\",\n  finalized: \"\",\n  runtimes: {},\n  blocks: new Map(),\n  finalizedRuntime: {} as Runtime,\n  recovering: false,\n})\n"],"names":[],"mappings":"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"}