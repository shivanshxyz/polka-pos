"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Dot: () => Dot,
  Ksm: () => Ksm
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Dot, Ksm;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    "use strict";
    [minified, commonTrees, tokens] = JSON.parse(`[{"dot":{"346":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"19":1,"20":31,"21":32,"22":33},"27":0,"45":1,"48":2,"50":3,"57":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":76,"56":77},"60":4,"62":5,"106":6,"109":7,"112":8,"118":9,"125":10,"127":11,"134":12,"137":13,"143":{"138":1,"139":199,"140":200,"141":106,"142":4},"144":14,"146":15,"147":16,"149":17,"152":14,"155":{"153":242,"154":243},"157":18,"159":19,"164":20,"177":{"167":1,"168":283,"169":284,"170":285,"171":1,"172":286,"173":1,"174":287,"175":288,"176":289},"181":21,"203":22,"208":23,"213":24,"214":14,"218":25,"223":26,"225":27,"228":28,"233":29,"255":30,"258":31,"262":32,"275":33,"281":34,"286":35,"288":36,"294":37,"297":38,"300":39,"302":40,"307":41,"312":42,"313":14,"314":{"MigrationProcess":482,"AutoLimits":483,"SignedMigrationMaxLimits":484},"329":43,"333":44,"335":45,"338":46,"342":47,"345":48},"645":{"18":49,"23":{"358":35,"359":36,"360":37,"361":38,"362":39,"363":40,"364":41,"365":42,"366":43,"367":38},"27":50,"45":51,"48":52,"50":53,"57":54,"60":14,"62":14,"106":55,"109":14,"112":14,"118":56,"125":57,"127":14,"134":58,"137":59,"143":{"359":68,"436":202,"437":68,"438":68,"439":68,"440":68,"441":203,"442":68,"443":204},"144":14,"146":{"444":211,"445":211,"446":212,"447":213},"147":60,"149":61,"152":{"458":235,"459":236,"460":235,"461":237,"462":235,"463":238},"155":{"464":244,"465":245,"466":245,"467":128,"468":246,"469":247,"470":248,"471":248,"472":249,"473":250},"157":{"474":255,"475":256,"476":257,"477":258},"159":62,"164":63,"177":{"436":293,"491":290,"492":291,"493":292,"494":294},"181":64,"203":65,"208":66,"213":14,"214":14,"218":67,"223":14,"225":14,"228":68,"233":14,"255":69,"258":70,"262":14,"275":71,"281":14,"286":72,"288":73,"294":74,"297":14,"300":75,"302":76,"307":77,"312":78,"313":79,"314":{"control_auto_migration":485,"continue_migrate":486,"migrate_custom_top":487,"migrate_custom_child":488,"set_signed_max_limits":489,"force_set_progress":490},"329":80,"333":81,"335":82,"338":83,"342":14,"345":14},"877":{"18":{"646":24,"647":25,"648":26,"649":27,"650":27,"651":28,"652":29},"23":{"653":44,"654":44,"655":45,"656":46,"657":47,"658":47,"659":47,"660":47,"661":47},"27":85,"45":14,"48":14,"50":86,"57":87,"60":88,"62":14,"106":89,"109":90,"112":14,"118":91,"125":92,"127":14,"134":93,"137":94,"143":95,"144":14,"146":{"741":214,"742":214,"743":215},"147":96,"149":97,"152":{"747":239,"748":26,"749":26,"750":26,"751":240,"752":241},"155":{"753":241,"754":251,"755":252,"756":253,"757":253},"157":{"758":259,"759":260,"760":261,"761":262},"159":98,"164":99,"177":100,"181":101,"203":102,"208":{"677":150,"795":356,"796":357,"797":155,"798":26},"213":103,"214":14,"218":14,"223":14,"225":104,"228":14,"233":14,"255":105,"258":14,"262":14,"275":106,"281":14,"286":107,"288":14,"294":108,"297":14,"300":109,"302":110,"307":111,"312":{"780":449,"835":473,"836":473,"837":449,"838":449,"839":449,"840":474,"841":449,"842":475,"843":449},"313":112,"314":{"677":90,"Migrated":491,"AutoMigrationFinished":26,"Halted":492},"329":113,"333":114,"335":115,"338":14,"342":14,"345":14},"974":{"18":116,"23":117,"27":14,"45":118,"48":119,"50":120,"57":121,"60":122,"62":14,"106":123,"109":14,"112":14,"118":14,"125":124,"127":14,"134":125,"137":126,"143":127,"144":14,"146":14,"147":128,"149":129,"152":130,"155":131,"157":132,"159":133,"164":134,"177":135,"181":136,"203":137,"208":120,"213":138,"214":14,"218":14,"223":14,"225":14,"228":14,"233":14,"255":139,"258":14,"262":14,"275":14,"281":14,"286":14,"288":14,"294":140,"297":14,"300":141,"302":142,"307":143,"312":144,"313":145,"314":{"MaxKeyLen":1},"329":14,"333":146,"335":14,"338":124,"342":14,"345":14},"1093":{"197":147,"976":148,"980":149,"988":{"984":559,"985":560,"986":561,"987":562},"998":150,"1001":151,"1003":152,"1005":153,"1037":154,"1045":155,"1051":156,"1054":157,"1058":158,"1063":159,"1065":160,"1068":161,"1070":162,"1075":163,"1078":{"1073":628,"1074":629,"1076":630,"1077":631},"1083":164,"1086":{"1084":636,"1085":637},"1088":165,"1092":166}},"ksm":{"346":{"18":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":642,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"23":{"19":1,"20":716,"21":32,"22":33},"27":0,"45":1,"48":2,"50":3,"57":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":644,"56":77},"60":4,"62":5,"106":6,"109":7,"112":8,"118":9,"125":10,"127":11,"134":12,"137":13,"143":{"138":1,"139":645,"140":200,"141":106,"142":4},"144":14,"146":15,"147":16,"149":17,"152":14,"155":{"153":722,"154":243},"157":18,"159":19,"164":20,"177":{"167":1,"168":283,"169":284,"170":285,"171":1,"172":286,"173":1,"174":287,"175":733,"176":289},"181":21,"203":22,"208":23,"213":24,"214":14,"218":25,"223":26,"225":27,"228":28,"233":29,"255":30,"258":31,"262":32,"275":33,"281":34,"286":35,"288":36,"297":38,"300":39,"302":40,"307":41,"312":42,"313":14,"329":43,"333":44,"335":45,"338":46,"342":47,"345":48,"1096":{"1094":106,"1095":312,"IdToIndex":647,"IndexToId":648,"Voting":649,"VotingCleanup":5},"1097":{"138":1,"139":658,"140":659,"141":106,"142":4},"1098":{"1098":664},"1099":{"204":97,"1094":1,"1095":675,"1098":674,"Pot":55,"Founder":97,"Rules":6,"Payouts":676,"MemberByIndex":677,"SuspendedMembers":675,"RoundCount":1,"Bids":678,"Candidates":679,"Skeptic":97,"Votes":680,"VoteClearCursor":681,"NextHead":682,"ChallengeRoundCount":1,"Defending":683,"DefenderVotes":684},"1100":{"155":99,"Recoverable":706,"ActiveRecoveries":707},"1101":{"QueueTotals":736,"Queues":737,"Summary":738,"Receipts":739},"1102":{"0":73,"51":55,"52":55,"53":74,"54":75,"55":644,"56":748},"1103":37},"645":{"18":49,"23":{"358":717,"359":36,"360":718,"361":38,"362":719,"363":720,"364":41,"365":42,"366":43,"367":38},"27":50,"45":51,"48":52,"50":53,"57":54,"60":14,"62":14,"106":55,"109":14,"112":14,"118":56,"125":57,"127":14,"134":58,"137":59,"143":84,"144":14,"146":{"444":211,"445":211,"446":212,"447":662},"147":60,"149":61,"152":{"458":667,"459":668,"460":667,"461":669,"462":667,"463":670},"155":{"464":723,"465":724,"466":724,"467":128,"468":725,"469":726,"470":248,"471":248,"472":249,"473":727},"157":{"474":730,"475":731,"476":257,"477":258},"159":62,"164":63,"177":{"436":735,"491":734,"492":291,"493":292,"494":294},"181":64,"203":65,"208":66,"213":14,"214":14,"218":67,"223":14,"225":14,"228":68,"233":14,"255":69,"258":70,"262":14,"275":71,"281":14,"286":72,"288":73,"297":14,"300":75,"302":76,"307":77,"312":78,"313":79,"329":80,"333":81,"335":82,"338":83,"342":14,"345":14,"1096":{"430":652,"add_member":650,"promote_member":650,"demote_member":650,"remove_member":651,"cleanup_poll":653,"exchange_member":654},"1097":84,"1098":{"set_parameter":665},"1099":{"427":128,"430":686,"607":124,"612":128,"unbid":128,"vouch":685,"unvouch":128,"defender_vote":687,"waive_repay":688,"found_society":689,"judge_suspended_member":690,"set_parameters":691,"punish_skeptic":128,"claim_membership":128,"bestow_membership":692,"kick_candidate":692,"resign_candidacy":128,"drop_candidate":692,"cleanup_candidacy":693,"cleanup_challenge":694},"1100":{"as_recovered":708,"set_recovered":709,"create_recovery":710,"initiate_recovery":711,"vouch_recovery":709,"claim_recovery":711,"close_recovery":712,"remove_recovery":128,"cancel_recovered":711},"1101":{"place_bid":741,"retract_bid":741,"fund_deficit":128,"thaw_private":742,"thaw_communal":68,"communify":68,"privatize":68},"1102":54,"1103":74},"877":{"18":{"646":24,"647":643,"648":26,"649":27,"650":27,"651":28,"652":29},"23":{"653":44,"654":44,"655":721,"656":46,"657":47,"658":47,"659":47,"660":47,"661":47},"27":85,"45":14,"48":14,"50":86,"57":87,"60":88,"62":14,"106":89,"109":90,"112":14,"118":91,"125":92,"127":14,"134":93,"137":94,"143":95,"144":14,"146":{"741":214,"742":214,"743":663},"147":96,"149":97,"152":{"747":671,"748":26,"749":26,"750":26,"751":672,"752":673},"155":{"753":673,"754":728,"755":252,"756":729,"757":729},"157":{"758":259,"759":260,"760":732,"761":262},"159":98,"164":99,"177":100,"181":101,"203":102,"208":{"677":150,"795":749,"796":357,"797":155,"798":26},"213":103,"214":14,"218":14,"223":14,"225":104,"228":14,"233":14,"255":105,"258":14,"262":14,"275":106,"281":14,"286":107,"288":14,"297":14,"300":109,"302":110,"307":111,"312":{"780":449,"835":473,"836":473,"837":449,"838":449,"839":449,"840":750,"841":449,"842":475,"843":449},"313":112,"329":113,"333":114,"335":115,"338":14,"342":14,"345":14,"1096":{"723":656,"784":655,"MemberAdded":92,"RankChanged":655,"MemberExchanged":657},"1097":{"725":205,"726":206,"727":206,"728":90,"729":660,"730":72,"731":72,"732":661,"733":72,"734":661,"735":661,"736":661,"737":661,"738":206,"739":209,"740":209},"1098":{"Updated":666},"1099":{"675":183,"Founded":695,"Bid":696,"Vouch":697,"AutoUnbid":698,"Unbid":698,"Unvouch":698,"Inducted":699,"SuspendedMemberJudgement":700,"CandidateSuspended":698,"MemberSuspended":701,"Challenged":701,"Vote":702,"DefenderVote":703,"NewParams":704,"Unfounded":695,"Elevated":705},"1100":{"RecoveryCreated":27,"RecoveryInitiated":713,"RecoveryVouched":714,"RecoveryClosed":713,"AccountRecovered":713,"RecoveryRemoved":715},"1101":{"683":744,"687":745,"BidPlaced":743,"BidRetracted":743,"BidDropped":743,"Funded":746,"Transferred":747},"1102":87,"1103":108},"974":{"18":116,"23":117,"27":14,"45":118,"48":119,"50":120,"57":121,"60":122,"62":14,"106":123,"109":14,"112":14,"118":14,"125":124,"127":14,"134":125,"137":126,"143":127,"144":14,"146":14,"147":128,"149":129,"152":130,"155":131,"157":132,"159":133,"164":134,"177":135,"181":136,"203":137,"208":120,"213":138,"214":14,"218":14,"223":14,"225":14,"228":14,"233":14,"255":139,"258":14,"262":14,"275":14,"281":14,"286":14,"288":14,"297":14,"300":141,"302":142,"307":143,"312":144,"313":145,"329":14,"333":146,"335":14,"338":124,"342":14,"345":14,"1096":14,"1097":127,"1098":14,"1099":{"905":175,"GraceStrikes":1,"PeriodSpend":55,"VotingPeriod":1,"ClaimPeriod":1,"MaxLockDuration":1,"ChallengePeriod":1,"MaxPayouts":1,"MaxBids":1},"1100":{"ConfigDepositBase":55,"FriendDepositFactor":55,"MaxFriends":1,"RecoveryDeposit":55},"1101":{"905":175,"QueueCount":1,"MaxQueueLen":1,"FifoQueueLen":1,"BasePeriod":1,"MinBid":55,"MinReceipt":55,"IntakePeriod":1,"MaxIntakeWeight":34,"ThawThrottle":740},"1102":121,"1103":140},"1093":{"197":147,"976":148,"980":149,"988":{"984":751,"985":560,"986":561,"987":562},"998":150,"1001":151,"1003":152,"1005":153,"1037":154,"1045":155,"1051":156,"1054":157,"1058":158,"1063":159,"1065":160,"1068":161,"1070":162,"1075":163,"1078":{"1073":628,"1074":629,"1076":752,"1077":753},"1083":164,"1086":{"1084":754,"1085":755},"1088":165,"1092":166}}},[{"24":48,"25":49,"26":50},{"28":55,"29":56,"30":55,"31":55,"32":6,"33":57,"34":6,"35":56,"36":1,"37":58,"38":59,"39":60,"40":61,"41":1,"42":62,"43":62,"44":63},{"46":55,"47":2},{"49":67},{"58":55,"59":95},{"61":97},{"63":1,"64":1,"65":98,"66":99,"67":55,"68":55,"69":55,"70":1,"71":100,"72":101,"73":102,"74":1,"75":1,"76":103,"77":1,"78":104,"79":1,"80":1,"81":1,"82":105,"83":106,"84":107,"85":108,"86":107,"87":109,"88":110,"89":111,"90":112,"91":113,"92":112,"93":114,"94":1,"95":1,"96":55,"97":115,"98":116,"99":117,"100":118,"101":119,"102":120,"103":1,"104":121,"105":1},{"107":158,"108":159},{"110":161,"111":61},{"73":98,"104":121,"113":1,"114":2,"115":162,"116":163,"117":164},{"29":56,"119":166,"120":167,"121":1,"122":61,"123":55,"124":168},{"116":172,"126":172},{"128":1,"129":173,"130":55,"131":121,"132":1,"133":174},{"135":188,"136":189},{},{"145":210},{"147":216,"148":55,"149":217,"150":218,"151":219},{"59":228,"149":227},{"156":254},{"158":1,"159":263,"160":5,"161":121},{"162":1,"163":106,"164":275,"165":5,"166":112},{"178":299,"179":1,"180":300},{"182":55,"183":55,"184":55,"185":1,"186":1,"187":1,"188":1,"189":308,"190":1,"191":309,"192":1,"193":310,"194":1,"195":311,"196":1,"197":5,"198":1,"199":1,"200":312,"201":1,"202":313},{"204":353,"205":354,"206":1,"207":1},{"209":358,"210":1,"211":359,"212":1},{"215":361,"216":362,"217":2},{"219":1,"220":121,"221":172,"222":370},{"224":371},{"226":375,"227":376},{"229":378,"230":379,"231":1,"232":380},{"234":381,"235":172,"236":121,"237":382,"238":5,"239":106,"240":4,"241":383,"242":384,"243":116,"244":106,"245":116,"246":4,"247":385,"248":386,"249":116,"250":116,"251":387,"252":388,"253":389,"254":390},{"256":375,"257":402},{"259":404,"260":4,"261":112},{"263":405,"264":406,"265":106,"266":106,"267":407,"268":406,"269":106,"270":408,"271":387,"272":387,"273":409,"274":410},{"276":172,"277":1,"278":423,"279":424,"280":425},{"226":428,"282":1,"283":426,"284":427,"285":429},{"97":432,"287":106},{"289":434,"290":435,"291":436,"292":437,"293":301},{"295":441,"296":442},{"255":443,"298":106,"299":1},{"301":452},{"303":1,"304":61,"305":456,"306":457},{"308":467,"309":121,"310":1,"311":1},{"315":55,"316":493,"317":389,"318":1,"319":494,"320":495,"321":496,"322":497,"323":498,"324":499,"325":500,"326":2,"327":2,"328":501},{"330":529,"331":530,"332":531},{"334":539},{"29":545,"35":545,"124":168,"336":55,"337":429},{"339":6,"340":55,"341":550},{"343":551,"344":551},{"347":17,"348":18,"349":19,"350":19,"351":20,"352":21,"353":22,"354":17,"355":23,"356":23,"357":19},{"368":51,"369":52,"370":52,"371":52,"372":53},{"373":64,"374":64,"375":65},{"376":66},{"377":68,"378":69,"379":68,"380":70,"381":68},{"380":79,"382":78,"383":78,"384":80,"385":81,"386":82,"387":83,"388":84,"389":85},{"390":122,"391":123,"392":124,"393":125,"394":126,"395":127,"396":128,"397":129,"398":128,"399":130,"400":131,"401":132,"402":128,"403":128,"404":133,"405":134,"406":128,"407":135,"408":136,"409":124,"410":134,"411":137,"412":138,"413":139,"414":140,"415":130,"416":141,"417":142,"418":143,"419":144,"420":139},{"421":165,"422":128},{"373":169,"374":169,"423":170},{"424":176,"425":177,"426":178,"427":68,"428":68,"429":68},{"430":190,"431":191,"432":192,"433":193,"434":194,"435":195},{"377":221,"448":222,"449":223,"450":224,"451":225},{"452":128,"453":229,"454":230,"455":231,"456":232,"457":233},{"478":265,"479":266,"480":267,"481":266,"482":266,"483":268,"484":266,"485":266,"486":269},{"480":277,"481":278,"482":278,"487":276,"488":279,"489":278,"490":278},{"495":302,"496":303,"497":304},{"391":315,"392":316,"393":318,"395":321,"396":326,"443":323,"498":314,"499":128,"500":317,"501":319,"502":320,"503":322,"504":324,"505":325,"506":327,"507":328,"508":329,"509":330,"510":331,"511":332,"512":326,"513":326,"514":333,"515":334,"516":334,"517":326},{"518":128,"519":128,"520":355},{"521":130,"522":130,"523":130,"524":130,"525":130,"526":130,"527":130,"528":130,"529":130,"530":130,"531":130,"532":363,"533":363,"534":130,"535":130,"536":130,"537":130,"538":130,"539":130,"540":130,"541":130,"542":130,"543":130,"544":130,"545":130,"546":130,"547":364,"548":364,"549":130,"550":130,"551":130,"552":130,"553":130,"554":130,"555":130,"556":130,"557":365,"558":366,"559":367,"560":364,"561":130,"562":130,"563":130,"564":130,"565":130,"566":368,"567":130,"568":369},{"569":377},{"570":391,"571":392,"572":393,"573":392,"574":394,"575":395,"576":396,"577":397,"578":398},{"579":403},{"580":411,"581":412,"582":413,"583":414,"584":415,"585":415,"586":416,"587":417,"588":418,"589":418,"590":419},{"591":128},{"592":433},{"593":438,"594":438},{"519":446,"595":444,"596":445,"597":447,"598":394,"599":128,"600":394,"601":391,"602":392},{"603":453,"604":394,"605":394},{"606":458,"607":459,"608":128},{"501":468,"609":469,"610":470,"611":68,"612":68,"613":468,"614":471,"615":68,"616":472},{"617":477,"618":478,"619":479},{"620":502,"621":503,"622":503,"623":504,"624":505,"625":506,"626":507,"627":507,"628":508,"629":508,"630":509,"631":508,"632":510,"633":511},{"634":533,"635":534},{"501":540,"636":540,"637":541},{"638":546,"639":546,"640":547,"641":548,"642":548,"643":549,"644":549},{"359":68,"436":646,"437":68,"438":68,"439":68,"440":68,"441":203,"442":68,"443":204},{"662":54,"663":54,"664":54},{"665":71,"666":72,"667":71},{"285":90,"668":86,"669":87,"670":88,"671":89,"672":90,"673":90,"674":91,"675":90,"676":90,"677":90,"678":90,"679":90,"680":90,"681":90,"682":92,"683":93,"684":93,"685":90,"686":90,"687":90,"688":94},{"689":96},{"66":150,"93":156,"677":147,"690":145,"691":146,"692":148,"693":149,"694":26,"695":150,"696":150,"697":151,"698":26,"699":152,"700":153,"701":154,"702":155,"703":155,"704":157},{"705":160},{"706":149},{"707":171,"708":26,"709":26},{"675":183,"710":179,"711":180,"712":181,"713":182,"714":184,"715":185,"716":186,"717":72,"718":187,"719":187,"720":72},{"721":196,"722":197,"723":198,"724":198},{"725":205,"726":206,"727":206,"728":90,"729":207,"730":72,"731":72,"732":208,"733":72,"734":208,"735":208,"736":208,"737":208,"738":206,"739":209,"740":209},{"744":226},{"745":234,"746":27},{"762":72,"763":270,"764":72,"765":271,"766":272,"767":72,"768":72,"769":72,"770":273,"771":274,"772":273},{"654":280,"711":281,"744":282,"773":280},{"677":297,"691":297,"774":295,"775":296,"776":26,"777":298},{"778":305,"779":306},{"66":336,"695":338,"696":339,"780":335,"781":337,"782":340,"783":341,"784":342,"785":343,"786":344,"787":345,"788":346,"789":347,"790":348,"791":349,"792":350,"793":351,"794":351},{"677":360,"721":360,"799":360,"800":360},{"801":372,"802":372,"803":373,"804":374},{"805":399,"806":399,"807":399,"808":399,"809":400,"810":401,"811":401,"812":401},{"813":420,"814":421,"815":422,"816":421,"817":420,"818":420,"819":422},{"820":430,"821":431,"822":399},{"823":439,"824":440},{"672":450,"825":448,"826":449,"827":451},{"828":454,"829":455},{"672":462,"673":463,"830":460,"831":461,"832":464,"833":465,"834":466},{"844":480,"845":481},{"846":512,"847":513,"848":514,"849":515,"850":516,"851":517,"852":516,"853":516,"854":518,"855":514,"856":519,"857":520,"858":521,"859":522,"860":523,"861":524,"862":514,"863":525,"864":526,"865":526,"866":526,"867":527,"868":520,"869":528},{"870":535,"871":536,"872":537,"873":538},{"874":542,"875":543,"876":544},{"878":13,"879":14,"880":1,"881":15,"882":16,"883":1},{"884":34,"885":1},{"886":55,"887":55,"888":1,"889":1},{"890":55},{"675":55},{"891":55,"892":1,"893":1,"894":1},{"895":1},{"896":1,"897":1,"898":1,"899":1,"900":1,"901":1},{"888":1,"889":1,"902":55},{"903":1,"904":1,"905":175,"906":1,"907":1},{"908":1,"909":1},{"910":55,"911":1,"912":1,"913":1,"914":201},{"915":220},{"916":55,"917":1},{"918":1},{"919":55,"920":55,"921":1,"922":1,"923":55,"924":55},{"925":55,"926":55,"927":1},{"928":55,"929":1,"930":1,"931":1,"932":264,"933":264,"934":55,"935":55,"936":1},{"937":1,"938":55},{"939":1,"940":1,"941":55,"942":1,"943":34,"944":1,"945":55,"946":55,"947":55,"948":1,"949":1,"950":34,"951":1,"952":1},{"953":301},{"905":175,"954":1,"955":1},{"95":1,"905":175},{"956":55},{"905":175,"957":55,"958":1},{"935":55,"959":55},{"960":1,"961":1},{"962":1,"963":1,"964":1,"965":1},{"905":175,"966":55,"967":1},{"968":1,"969":476},{"970":1,"971":1,"972":532,"973":532},{"981":556,"982":557,"983":558},{"975":552},{"977":553,"978":554,"979":555},{"989":563,"990":564,"991":565,"992":566,"993":567,"994":568,"995":569,"996":563,"997":566},{"989":572,"999":570,"1000":571},{"1002":573},{"1004":574},{"1006":575,"1007":576,"1008":577,"1009":578,"1010":579,"1011":580,"1012":581,"1013":582,"1014":583,"1015":584,"1016":585,"1017":586,"1018":587,"1019":588,"1020":589,"1021":590,"1022":575,"1023":591,"1024":592,"1025":593,"1026":594,"1027":595,"1028":596,"1029":581,"1030":597,"1031":598,"1032":558,"1033":599,"1034":581,"1035":600,"1036":601},{"1038":602,"1039":603,"1040":604,"1041":605,"1042":606,"1043":607,"1044":608},{"1046":609,"1047":610,"1048":611,"1049":612,"1050":613},{"1052":614,"1053":614},{"1043":617,"1055":615,"1056":616,"1057":618},{"1043":621,"1056":622,"1059":619,"1060":618,"1061":620,"1062":620},{"1064":575},{"1066":623,"1067":624},{"1069":625},{"1071":626,"1072":627,"1073":628,"1074":629},{"1079":632,"1080":633,"1081":634,"1082":635},{"1087":638},{"1089":639,"1090":640,"1091":641}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","System","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","DisabledValidators","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","CurrentIndex","QueuedChanged","QueuedKeys","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","Treasury","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","Claims","Total","Vesting","Signing","Preclaims","Utility","Proxies","Announcements","Proxy","Multisigs","Multisig","BountyCount","Bounties","BountyDescriptions","BountyApprovals","ChildBountyCount","ParentChildBounties","ChildBounties","ChildBountyDescriptions","ChildrenCuratorFees","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","Delegators","CounterForDelegators","Agents","CounterForAgents","DelegatedStaking","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","AvailabilityCores","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","OnDemand","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","Coretime","StateTrieMigration","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","withdraw_overstake","set_keys","purge_keys","note_stalled","spend_local","remove_approval","spend","payout","check_status","void_spend","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","submit","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","set_metadata","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","mint_claim","claim_attest","attest","move_claim","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","propose_bounty","approve_bounty","propose_curator","unassign_curator","accept_curator","award_bounty","claim_bounty","close_bounty","extend_bounty_expiry","add_child_bounty","award_child_bounty","claim_child_bounty","close_child_bounty","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_max_availability_timeouts","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_on_demand_ttl","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","assign_core","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","reap_page","execute_overweight","update","remove","report_double_voting","report_double_voting_unsigned","set_new_genesis","report_fork_voting","report_fork_voting_unsigned","report_future_block_voting","report_future_block_voting_unsigned","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","Noted","Requested","Cleared","IndexAssigned","IndexFreed","IndexFrozen","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","Offence","NewSession","NewAuthorities","Paused","Resumed","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","Delegated","Undelegated","Voted","VoteRemoved","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Claimed","VestingUpdated","VestingCompleted","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","BountyProposed","BountyRejected","BountyBecameActive","BountyAwarded","BountyClaimed","BountyCanceled","BountyExtended","BountyApproved","CuratorProposed","CuratorUnassigned","CuratorAccepted","Added","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","Unstaked","BatchChecked","BatchFinished","InternalError","Released","MigratedDelegation","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","Attempted","Sent","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","MaximumWeight","MaxScheduledPerBlock","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","SpendPeriod","Burn","PalletId","MaxApprovals","PayoutPeriod","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","Prefix","MinVestedTransfer","MaxVestingSchedules","batched_calls_limit","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BountyDepositBase","BountyDepositPayoutDelay","BountyUpdatePeriod","CuratorDepositMultiplier","CuratorDepositMax","CuratorDepositMin","BountyValueMinimum","DataDepositPerByte","MaximumReasonLength","MaxActiveChildBountyCount","ChildBountyValueMinimum","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","MaxPointsToBalance","MaxUnbonding","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","experimental_inflation_prediction_info","Inflation","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","member_total_balance","pool_balance","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","ParachainHost","beefy_genesis","validator_set","submit_report_double_voting_unsigned_extrinsic","submit_report_fork_voting_unsigned_extrinsic","submit_report_future_block_voting_unsigned_extrinsic","generate_key_ownership_proof","generate_ancestry_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","submit_report_equivocation_unsigned_extrinsic","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","build_state","get_preset","preset_names","GenesisBuilder","apis","MemberCount","Members","FellowshipCollective","FellowshipReferenda","Parameters","Society","Recovery","Nis","NisCounterpartBalances","OnDemandAssignmentProvider"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Dot = getChainDescriptors("dot");
    Ksm = getChainDescriptors("ksm");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    "use strict";
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/dot_metadata.ts
var dot_metadata_exports = {};
__export(dot_metadata_exports, {
  default: () => dot_metadata_default
});
var binMeta, dot_metadata_default;
var init_dot_metadata = __esm({
  ".papi/descriptors/src/dot_metadata.ts"() {
    "use strict";
    binMeta = "";
    dot_metadata_default = binMeta;
  }
});

// .papi/descriptors/src/ksm_metadata.ts
var ksm_metadata_exports = {};
__export(ksm_metadata_exports, {
  default: () => ksm_metadata_default
});
var binMeta2, ksm_metadata_default;
var init_ksm_metadata = __esm({
  ".papi/descriptors/src/ksm_metadata.ts"() {
    "use strict";
    binMeta2 = "bWV0YQ+REAAMHHNwX2NvcmUYY3J5cHRvLEFjY291bnRJZDMyAAAEAAQBIFt1ODsgMzJdAAAEAAADIAAAAAgACAAABQMADAgwZnJhbWVfc3lzdGVtLEFjY291bnRJbmZvCBROb25jZQEQLEFjY291bnREYXRhARQAFAEUbm9uY2UQARROb25jZQABJGNvbnN1bWVycxABIFJlZkNvdW50AAEkcHJvdmlkZXJzEAEgUmVmQ291bnQAASxzdWZmaWNpZW50cxABIFJlZkNvdW50AAEQZGF0YRQBLEFjY291bnREYXRhAAAQAAAFBQAUDDxwYWxsZXRfYmFsYW5jZXMUdHlwZXMsQWNjb3VudERhdGEEHEJhbGFuY2UBGAAQARBmcmVlGAEcQmFsYW5jZQABIHJlc2VydmVkGAEcQmFsYW5jZQABGGZyb3plbhgBHEJhbGFuY2UAARRmbGFncxwBKEV4dHJhRmxhZ3MAABgAAAUHABwMPHBhbGxldF9iYWxhbmNlcxR0eXBlcyhFeHRyYUZsYWdzAAAEABgBEHUxMjgAACAAAAUAACQMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2hAUGVyRGlzcGF0Y2hDbGFzcwQEVAEoAAwBGG5vcm1hbCgBBFQAASxvcGVyYXRpb25hbCgBBFQAASRtYW5kYXRvcnkoAQRUAAAoDChzcF93ZWlnaHRzJHdlaWdodF92MhhXZWlnaHQAAAgBIHJlZl90aW1lLAEMdTY0AAEocHJvb2Zfc2l6ZSwBDHU2NAAALAAABjAAMAAABQYANAg8cHJpbWl0aXZlX3R5cGVzEEgyNTYAAAQABAEgW3U4OyAzMl0AADgAAAIIADwQKHNwX3J1bnRpbWUcZ2VuZXJpYxhkaWdlc3QYRGlnZXN0AAAEARBsb2dzQAE8VmVjPERpZ2VzdEl0ZW0+AABAAAACRABEEChzcF9ydW50aW1lHGdlbmVyaWMYZGlnZXN0KERpZ2VzdEl0ZW0AARQoUHJlUnVudGltZQgASAFEQ29uc2Vuc3VzRW5naW5lSWQAADgBHFZlYzx1OD4ABgAkQ29uc2Vuc3VzCABIAURDb25zZW5zdXNFbmdpbmVJZAAAOAEcVmVjPHU4PgAEABBTZWFsCABIAURDb25zZW5zdXNFbmdpbmVJZAAAOAEcVmVjPHU4PgAFABRPdGhlcgQAOAEcVmVjPHU4PgAAAGRSdW50aW1lRW52aXJvbm1lbnRVcGRhdGVkAAgAAEgAAAMEAAAACABMAAACUABQCDBmcmFtZV9zeXN0ZW0sRXZlbnRSZWNvcmQIBEUBVARUATQADAEUcGhhc2V5CAEUUGhhc2UAARRldmVudFQBBEUAARh0b3BpY3MxAwEYVmVjPFQ+AABUCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lMFJ1bnRpbWVFdmVudAABuBhTeXN0ZW0EAFgBcGZyYW1lX3N5c3RlbTo6RXZlbnQ8UnVudGltZT4AAAAcSW5kaWNlcwQAfAF4cGFsbGV0X2luZGljZXM6OkV2ZW50PFJ1bnRpbWU+AAMAIEJhbGFuY2VzBACAAXxwYWxsZXRfYmFsYW5jZXM6OkV2ZW50PFJ1bnRpbWU+AAQASFRyYW5zYWN0aW9uUGF5bWVudAQAiAGocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQ6OkV2ZW50PFJ1bnRpbWU+ACEAHFN0YWtpbmcEAIwBeHBhbGxldF9zdGFraW5nOjpFdmVudDxSdW50aW1lPgAGACBPZmZlbmNlcwQApAFYcGFsbGV0X29mZmVuY2VzOjpFdmVudAAHABxTZXNzaW9uBACsAVRwYWxsZXRfc2Vzc2lvbjo6RXZlbnQACAAcR3JhbmRwYQQAsAFUcGFsbGV0X2dyYW5kcGE6OkV2ZW50AAoAIFRyZWFzdXJ5BADAAXxwYWxsZXRfdHJlYXN1cnk6OkV2ZW50PFJ1bnRpbWU+ABIAQENvbnZpY3Rpb25Wb3RpbmcEAE0BAaBwYWxsZXRfY29udmljdGlvbl92b3Rpbmc6OkV2ZW50PFJ1bnRpbWU+ABQAJFJlZmVyZW5kYQQAWQEBgHBhbGxldF9yZWZlcmVuZGE6OkV2ZW50PFJ1bnRpbWU+ABUAUEZlbGxvd3NoaXBDb2xsZWN0aXZlBACFBwE5AXBhbGxldF9yYW5rZWRfY29sbGVjdGl2ZTo6RXZlbnQ8UnVudGltZSwgcGFsbGV0X3JhbmtlZF9jb2xsZWN0aXZlOjoKSW5zdGFuY2UxPgAWAExGZWxsb3dzaGlwUmVmZXJlbmRhBACRBwH0cGFsbGV0X3JlZmVyZW5kYTo6RXZlbnQ8UnVudGltZSwgcGFsbGV0X3JlZmVyZW5kYTo6SW5zdGFuY2UyPgAXACRXaGl0ZWxpc3QEAJUHAYBwYWxsZXRfd2hpdGVsaXN0OjpFdmVudDxSdW50aW1lPgAsAChQYXJhbWV0ZXJzBACpBwGEcGFsbGV0X3BhcmFtZXRlcnM6OkV2ZW50PFJ1bnRpbWU+AC4AGENsYWltcwQAyQcBWGNsYWltczo6RXZlbnQ8UnVudGltZT4AEwAcVXRpbGl0eQQAzQcBVHBhbGxldF91dGlsaXR5OjpFdmVudAAYABxTb2NpZXR5BADVBwF4cGFsbGV0X3NvY2lldHk6OkV2ZW50PFJ1bnRpbWU+ABoAIFJlY292ZXJ5BADdBwF8cGFsbGV0X3JlY292ZXJ5OjpFdmVudDxSdW50aW1lPgAbABxWZXN0aW5nBADhBwF4cGFsbGV0X3Zlc3Rpbmc6OkV2ZW50PFJ1bnRpbWU+ABwAJFNjaGVkdWxlcgQA5QcBgHBhbGxldF9zY2hlZHVsZXI6OkV2ZW50PFJ1bnRpbWU+AB0AFFByb3h5BADtBwFwcGFsbGV0X3Byb3h5OjpFdmVudDxSdW50aW1lPgAeACBNdWx0aXNpZwQA8QcBfHBhbGxldF9tdWx0aXNpZzo6RXZlbnQ8UnVudGltZT4AHwAgUHJlaW1hZ2UEAPUHAXxwYWxsZXRfcHJlaW1hZ2U6OkV2ZW50PFJ1bnRpbWU+ACAAIEJvdW50aWVzBAD5BwF8cGFsbGV0X2JvdW50aWVzOjpFdmVudDxSdW50aW1lPgAjADRDaGlsZEJvdW50aWVzBAD9BwGUcGFsbGV0X2NoaWxkX2JvdW50aWVzOjpFdmVudDxSdW50aW1lPgAoAGhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZQQAAQgB0HBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZTo6RXZlbnQ8UnVudGltZT4AJQAMTmlzBAARCAFocGFsbGV0X25pczo6RXZlbnQ8UnVudGltZT4AJgBYTmlzQ291bnRlcnBhcnRCYWxhbmNlcwQAFQgB7HBhbGxldF9iYWxhbmNlczo6RXZlbnQ8UnVudGltZSwgcGFsbGV0X2JhbGFuY2VzOjpJbnN0YW5jZTI+AC0AJFZvdGVyTGlzdAQAGQgB9HBhbGxldF9iYWdzX2xpc3Q6OkV2ZW50PFJ1bnRpbWUsIHBhbGxldF9iYWdzX2xpc3Q6Okluc3RhbmNlMT4AJwA8Tm9taW5hdGlvblBvb2xzBAAdCAGccGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkV2ZW50PFJ1bnRpbWU+ACkALEZhc3RVbnN0YWtlBAAhCAGMcGFsbGV0X2Zhc3RfdW5zdGFrZTo6RXZlbnQ8UnVudGltZT4AKgBARGVsZWdhdGVkU3Rha2luZwQAJQgBoHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZzo6RXZlbnQ8UnVudGltZT4ALwA0UGFyYUluY2x1c2lvbgQAKQgBkHBhcmFjaGFpbnNfaW5jbHVzaW9uOjpFdmVudDxSdW50aW1lPgA1ABRQYXJhcwQAOQgBXHBhcmFjaGFpbnNfcGFyYXM6OkV2ZW50ADgAEEhybXAEAD0IAXxwYXJhY2hhaW5zX2hybXA6OkV2ZW50PFJ1bnRpbWU+ADwANFBhcmFzRGlzcHV0ZXMEAEEIAYxwYXJhY2hhaW5zX2Rpc3B1dGVzOjpFdmVudDxSdW50aW1lPgA+AGhPbkRlbWFuZEFzc2lnbm1lbnRQcm92aWRlcgQATQgBkHBhcmFjaGFpbnNfb25fZGVtYW5kOjpFdmVudDxSdW50aW1lPgBAACRSZWdpc3RyYXIEAFEIAXxwYXJhc19yZWdpc3RyYXI6OkV2ZW50PFJ1bnRpbWU+AEYAFFNsb3RzBABVCAFUc2xvdHM6OkV2ZW50PFJ1bnRpbWU+AEcAIEF1Y3Rpb25zBABZCAFgYXVjdGlvbnM6OkV2ZW50PFJ1bnRpbWU+AEgAJENyb3dkbG9hbgQAXQgBZGNyb3dkbG9hbjo6RXZlbnQ8UnVudGltZT4ASQAgQ29yZXRpbWUEAGEIAWBjb3JldGltZTo6RXZlbnQ8UnVudGltZT4ASgAkWGNtUGFsbGV0BABlCAFocGFsbGV0X3hjbTo6RXZlbnQ8UnVudGltZT4AYwAwTWVzc2FnZVF1ZXVlBABtCAGQcGFsbGV0X21lc3NhZ2VfcXVldWU6OkV2ZW50PFJ1bnRpbWU+AGQAJEFzc2V0UmF0ZQQAdQgBhHBhbGxldF9hc3NldF9yYXRlOjpFdmVudDxSdW50aW1lPgBlAABYDDBmcmFtZV9zeXN0ZW0YcGFsbGV0FEV2ZW50BARUAAEcQEV4dHJpbnNpY1N1Y2Nlc3MEATRkaXNwYXRjaF9pbmZvXAEwRGlzcGF0Y2hJbmZvAAAEkEFuIGV4dHJpbnNpYyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LjxFeHRyaW5zaWNGYWlsZWQIAThkaXNwYXRjaF9lcnJvcmgBNERpc3BhdGNoRXJyb3IAATRkaXNwYXRjaF9pbmZvXAEwRGlzcGF0Y2hJbmZvAAEEUEFuIGV4dHJpbnNpYyBmYWlsZWQuLENvZGVVcGRhdGVkAAIEUGA6Y29kZWAgd2FzIHVwZGF0ZWQuKE5ld0FjY291bnQEARxhY2NvdW50AAEwVDo6QWNjb3VudElkAAMEaEEgbmV3IGFjY291bnQgd2FzIGNyZWF0ZWQuNEtpbGxlZEFjY291bnQEARxhY2NvdW50AAEwVDo6QWNjb3VudElkAAQEWEFuIGFjY291bnQgd2FzIHJlYXBlZC4gUmVtYXJrZWQIARhzZW5kZXIAATBUOjpBY2NvdW50SWQAARBoYXNoNAEcVDo6SGFzaAAFBHBPbiBvbi1jaGFpbiByZW1hcmsgaGFwcGVuZWQuRFVwZ3JhZGVBdXRob3JpemVkCAEkY29kZV9oYXNoNAEcVDo6SGFzaAABNGNoZWNrX3ZlcnNpb24gARBib29sAAYEaEFuIHVwZ3JhZGUgd2FzIGF1dGhvcml6ZWQuBHBFdmVudCBmb3IgdGhlIFN5c3RlbSBwYWxsZXQuXAw0ZnJhbWVfc3VwcG9ydCBkaXNwYXRjaDBEaXNwYXRjaEluZm8AAAwBGHdlaWdodCgBGFdlaWdodAABFGNsYXNzYAE0RGlzcGF0Y2hDbGFzcwABIHBheXNfZmVlZAEQUGF5cwAAYAw0ZnJhbWVfc3VwcG9ydCBkaXNwYXRjaDREaXNwYXRjaENsYXNzAAEMGE5vcm1hbAAAACxPcGVyYXRpb25hbAABACRNYW5kYXRvcnkAAgAAZAw0ZnJhbWVfc3VwcG9ydCBkaXNwYXRjaBBQYXlzAAEIDFllcwAAAAhObwABAABoCChzcF9ydW50aW1lNERpc3BhdGNoRXJyb3IAATgUT3RoZXIAAAAwQ2Fubm90TG9va3VwAAEAJEJhZE9yaWdpbgACABhNb2R1bGUEAGwBLE1vZHVsZUVycm9yAAMARENvbnN1bWVyUmVtYWluaW5nAAQALE5vUHJvdmlkZXJzAAUAQFRvb01hbnlDb25zdW1lcnMABgAUVG9rZW4EAHABKFRva2VuRXJyb3IABwAoQXJpdGhtZXRpYwQAdAE8QXJpdGhtZXRpY0Vycm9yAAgANFRyYW5zYWN0aW9uYWwEAHgBSFRyYW5zYWN0aW9uYWxFcnJvcgAJACRFeGhhdXN0ZWQACgAoQ29ycnVwdGlvbgALACxVbmF2YWlsYWJsZQAMADhSb290Tm90QWxsb3dlZAANAABsCChzcF9ydW50aW1lLE1vZHVsZUVycm9yAAAIARRpbmRleAgBCHU4AAEUZXJyb3JIAYxbdTg7IE1BWF9NT0RVTEVfRVJST1JfRU5DT0RFRF9TSVpFXQAAcAgoc3BfcnVudGltZShUb2tlbkVycm9yAAEoQEZ1bmRzVW5hdmFpbGFibGUAAAAwT25seVByb3ZpZGVyAAEAMEJlbG93TWluaW11bQACADBDYW5ub3RDcmVhdGUAAwAwVW5rbm93bkFzc2V0AAQAGEZyb3plbgAFACxVbnN1cHBvcnRlZAAGAEBDYW5ub3RDcmVhdGVIb2xkAAcANE5vdEV4cGVuZGFibGUACAAcQmxvY2tlZAAJAAB0CDRzcF9hcml0aG1ldGljPEFyaXRobWV0aWNFcnJvcgABDCRVbmRlcmZsb3cAAAAgT3ZlcmZsb3cAAQA4RGl2aXNpb25CeVplcm8AAgAAeAgoc3BfcnVudGltZUhUcmFuc2FjdGlvbmFsRXJyb3IAAQgwTGltaXRSZWFjaGVkAAAAHE5vTGF5ZXIAAQAAfAw4cGFsbGV0X2luZGljZXMYcGFsbGV0FEV2ZW50BARUAAEMNEluZGV4QXNzaWduZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARRpbmRleBABPFQ6OkFjY291bnRJbmRleAAABHRBIGFjY291bnQgaW5kZXggd2FzIGFzc2lnbmVkLihJbmRleEZyZWVkBAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgAAQS8QSBhY2NvdW50IGluZGV4IGhhcyBiZWVuIGZyZWVkIHVwICh1bmFzc2lnbmVkKS4sSW5kZXhGcm96ZW4IARRpbmRleBABPFQ6OkFjY291bnRJbmRleAABDHdobwABMFQ6OkFjY291bnRJZAACBOhBIGFjY291bnQgaW5kZXggaGFzIGJlZW4gZnJvemVuIHRvIGl0cyBjdXJyZW50IGFjY291bnQgSUQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0gAw8cGFsbGV0X2JhbGFuY2VzGHBhbGxldBRFdmVudAgEVAAESQABWBxFbmRvd2VkCAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAABMGZyZWVfYmFsYW5jZRgBKFQ6OkJhbGFuY2UAAAS4QW4gYWNjb3VudCB3YXMgY3JlYXRlZCB3aXRoIHNvbWUgZnJlZSBiYWxhbmNlLiBEdXN0TG9zdAgBHGFjY291bnQAATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAEIPQFBbiBhY2NvdW50IHdhcyByZW1vdmVkIHdob3NlIGJhbGFuY2Ugd2FzIG5vbi16ZXJvIGJ1dCBiZWxvdyBFeGlzdGVudGlhbERlcG9zaXQseHJlc3VsdGluZyBpbiBhbiBvdXRyaWdodCBsb3NzLiBUcmFuc2ZlcgwBEGZyb20AATBUOjpBY2NvdW50SWQAAQh0bwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAAgRMVHJhbnNmZXIgc3VjY2VlZGVkLihCYWxhbmNlU2V0CAEMd2hvAAEwVDo6QWNjb3VudElkAAEQZnJlZRgBKFQ6OkJhbGFuY2UAAwRoQSBiYWxhbmNlIHdhcyBzZXQgYnkgcm9vdC4gUmVzZXJ2ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAQE4FNvbWUgYmFsYW5jZSB3YXMgcmVzZXJ2ZWQgKG1vdmVkIGZyb20gZnJlZSB0byByZXNlcnZlZCkuKFVucmVzZXJ2ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAUE6FNvbWUgYmFsYW5jZSB3YXMgdW5yZXNlcnZlZCAobW92ZWQgZnJvbSByZXNlcnZlZCB0byBmcmVlKS5IUmVzZXJ2ZVJlcGF0cmlhdGVkEAEQZnJvbQABMFQ6OkFjY291bnRJZAABCHRvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQABSGRlc3RpbmF0aW9uX3N0YXR1c4QBGFN0YXR1cwAGCE0BU29tZSBiYWxhbmNlIHdhcyBtb3ZlZCBmcm9tIHRoZSByZXNlcnZlIG9mIHRoZSBmaXJzdCBhY2NvdW50IHRvIHRoZSBzZWNvbmQgYWNjb3VudC7YRmluYWwgYXJndW1lbnQgaW5kaWNhdGVzIHRoZSBkZXN0aW5hdGlvbiBiYWxhbmNlIHR5cGUuHERlcG9zaXQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAcE2FNvbWUgYW1vdW50IHdhcyBkZXBvc2l0ZWQgKGUuZy4gZm9yIHRyYW5zYWN0aW9uIGZlZXMpLiBXaXRoZHJhdwgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UACAQdAVNvbWUgYW1vdW50IHdhcyB3aXRoZHJhd24gZnJvbSB0aGUgYWNjb3VudCAoZS5nLiBmb3IgdHJhbnNhY3Rpb24gZmVlcykuHFNsYXNoZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAkEAQFTb21lIGFtb3VudCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBhY2NvdW50IChlLmcuIGZvciBtaXNiZWhhdmlvcikuGE1pbnRlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UACgScU29tZSBhbW91bnQgd2FzIG1pbnRlZCBpbnRvIGFuIGFjY291bnQuGEJ1cm5lZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UACwScU29tZSBhbW91bnQgd2FzIGJ1cm5lZCBmcm9tIGFuIGFjY291bnQuJFN1c3BlbmRlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UADAQVAVNvbWUgYW1vdW50IHdhcyBzdXNwZW5kZWQgZnJvbSBhbiBhY2NvdW50IChpdCBjYW4gYmUgcmVzdG9yZWQgbGF0ZXIpLiBSZXN0b3JlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UADQSkU29tZSBhbW91bnQgd2FzIHJlc3RvcmVkIGludG8gYW4gYWNjb3VudC4gVXBncmFkZWQEAQx3aG8AATBUOjpBY2NvdW50SWQADgRgQW4gYWNjb3VudCB3YXMgdXBncmFkZWQuGElzc3VlZAQBGGFtb3VudBgBKFQ6OkJhbGFuY2UADwQtAVRvdGFsIGlzc3VhbmNlIHdhcyBpbmNyZWFzZWQgYnkgYGFtb3VudGAsIGNyZWF0aW5nIGEgY3JlZGl0IHRvIGJlIGJhbGFuY2VkLiRSZXNjaW5kZWQEARhhbW91bnQYAShUOjpCYWxhbmNlABAEJQFUb3RhbCBpc3N1YW5jZSB3YXMgZGVjcmVhc2VkIGJ5IGBhbW91bnRgLCBjcmVhdGluZyBhIGRlYnQgdG8gYmUgYmFsYW5jZWQuGExvY2tlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAEQRgU29tZSBiYWxhbmNlIHdhcyBsb2NrZWQuIFVubG9ja2VkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQASBGhTb21lIGJhbGFuY2Ugd2FzIHVubG9ja2VkLhhGcm96ZW4IAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlABMEYFNvbWUgYmFsYW5jZSB3YXMgZnJvemVuLhhUaGF3ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlABQEYFNvbWUgYmFsYW5jZSB3YXMgdGhhd2VkLkxUb3RhbElzc3VhbmNlRm9yY2VkCAEMb2xkGAEoVDo6QmFsYW5jZQABDG5ldxgBKFQ6OkJhbGFuY2UAFQSsVGhlIGBUb3RhbElzc3VhbmNlYCB3YXMgZm9yY2VmdWxseSBjaGFuZ2VkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldIQUNGZyYW1lX3N1cHBvcnQYdHJhaXRzGHRva2VucxBtaXNjNEJhbGFuY2VTdGF0dXMAAQgQRnJlZQAAACBSZXNlcnZlZAABAACIDGhwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudBhwYWxsZXQURXZlbnQEBFQAAQRIVHJhbnNhY3Rpb25GZWVQYWlkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEoYWN0dWFsX2ZlZRgBMEJhbGFuY2VPZjxUPgABDHRpcBgBMEJhbGFuY2VPZjxUPgAACFkBQSB0cmFuc2FjdGlvbiBmZWUgYGFjdHVhbF9mZWVgLCBvZiB3aGljaCBgdGlwYCB3YXMgYWRkZWQgdG8gdGhlIG1pbmltdW0gaW5jbHVzaW9uIGZlZSxcaGFzIGJlZW4gcGFpZCBieSBgd2hvYC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXSMEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0FEV2ZW50BARUAAFIHEVyYVBhaWQMASRlcmFfaW5kZXgQASBFcmFJbmRleAABQHZhbGlkYXRvcl9wYXlvdXQYATBCYWxhbmNlT2Y8VD4AASRyZW1haW5kZXIYATBCYWxhbmNlT2Y8VD4AAAhVAVRoZSBlcmEgcGF5b3V0IGhhcyBiZWVuIHNldDsgdGhlIGZpcnN0IGJhbGFuY2UgaXMgdGhlIHZhbGlkYXRvci1wYXlvdXQ7IHRoZSBzZWNvbmQgaXPAdGhlIHJlbWFpbmRlciBmcm9tIHRoZSBtYXhpbXVtIGFtb3VudCBvZiByZXdhcmQuIFJld2FyZGVkDAEUc3Rhc2gAATBUOjpBY2NvdW50SWQAARBkZXN0kAF8UmV3YXJkRGVzdGluYXRpb248VDo6QWNjb3VudElkPgABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABBA0BVGhlIG5vbWluYXRvciBoYXMgYmVlbiByZXdhcmRlZCBieSB0aGlzIGFtb3VudCB0byB0aGlzIGRlc3RpbmF0aW9uLhxTbGFzaGVkCAEYc3Rha2VyAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAIEHQFBIHN0YWtlciAodmFsaWRhdG9yIG9yIG5vbWluYXRvcikgaGFzIGJlZW4gc2xhc2hlZCBieSB0aGUgZ2l2ZW4gYW1vdW50LjRTbGFzaFJlcG9ydGVkDAEkdmFsaWRhdG9yAAEwVDo6QWNjb3VudElkAAEgZnJhY3Rpb26UARxQZXJiaWxsAAEkc2xhc2hfZXJhEAEgRXJhSW5kZXgAAwhZAUEgc2xhc2ggZm9yIHRoZSBnaXZlbiB2YWxpZGF0b3IsIGZvciB0aGUgZ2l2ZW4gcGVyY2VudGFnZSBvZiB0aGVpciBzdGFrZSwgYXQgdGhlIGdpdmVuVGVyYSBhcyBiZWVuIHJlcG9ydGVkLmhPbGRTbGFzaGluZ1JlcG9ydERpc2NhcmRlZAQBNHNlc3Npb25faW5kZXgQATBTZXNzaW9uSW5kZXgABAgZAUFuIG9sZCBzbGFzaGluZyByZXBvcnQgZnJvbSBhIHByaW9yIGVyYSB3YXMgZGlzY2FyZGVkIGJlY2F1c2UgaXQgY291bGREbm90IGJlIHByb2Nlc3NlZC44U3Rha2Vyc0VsZWN0ZWQABQSEQSBuZXcgc2V0IG9mIHN0YWtlcnMgd2FzIGVsZWN0ZWQuGEJvbmRlZAgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAYQ0EFuIGFjY291bnQgaGFzIGJvbmRlZCB0aGlzIGFtb3VudC4gXFtzdGFzaCwgYW1vdW50XF0ATQFOT1RFOiBUaGlzIGV2ZW50IGlzIG9ubHkgZW1pdHRlZCB3aGVuIGZ1bmRzIGFyZSBib25kZWQgdmlhIGEgZGlzcGF0Y2hhYmxlLiBOb3RhYmx5LCEBaXQgd2lsbCBub3QgYmUgZW1pdHRlZCBmb3Igc3Rha2luZyByZXdhcmRzIHdoZW4gdGhleSBhcmUgYWRkZWQgdG8gc3Rha2UuIFVuYm9uZGVkCAEUc3Rhc2gAATBUOjpBY2NvdW50SWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4ABwSQQW4gYWNjb3VudCBoYXMgdW5ib25kZWQgdGhpcyBhbW91bnQuJFdpdGhkcmF3bggBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAgIWQFBbiBhY2NvdW50IGhhcyBjYWxsZWQgYHdpdGhkcmF3X3VuYm9uZGVkYCBhbmQgcmVtb3ZlZCB1bmJvbmRpbmcgY2h1bmtzIHdvcnRoIGBCYWxhbmNlYGRmcm9tIHRoZSB1bmxvY2tpbmcgcXVldWUuGEtpY2tlZAgBJG5vbWluYXRvcgABMFQ6OkFjY291bnRJZAABFHN0YXNoAAEwVDo6QWNjb3VudElkAAkEtEEgbm9taW5hdG9yIGhhcyBiZWVuIGtpY2tlZCBmcm9tIGEgdmFsaWRhdG9yLlRTdGFraW5nRWxlY3Rpb25GYWlsZWQACgSsVGhlIGVsZWN0aW9uIGZhaWxlZC4gTm8gbmV3IGVyYSBpcyBwbGFubmVkLhxDaGlsbGVkBAEUc3Rhc2gAATBUOjpBY2NvdW50SWQACwQhAUFuIGFjY291bnQgaGFzIHN0b3BwZWQgcGFydGljaXBhdGluZyBhcyBlaXRoZXIgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yLjRQYXlvdXRTdGFydGVkCAEkZXJhX2luZGV4EAEgRXJhSW5kZXgAATx2YWxpZGF0b3Jfc3Rhc2gAATBUOjpBY2NvdW50SWQADASYVGhlIHN0YWtlcnMnIHJld2FyZHMgYXJlIGdldHRpbmcgcGFpZC5EVmFsaWRhdG9yUHJlZnNTZXQIARRzdGFzaAABMFQ6OkFjY291bnRJZAABFHByZWZzmAE4VmFsaWRhdG9yUHJlZnMADQSYQSB2YWxpZGF0b3IgaGFzIHNldCB0aGVpciBwcmVmZXJlbmNlcy5oU25hcHNob3RWb3RlcnNTaXplRXhjZWVkZWQEARBzaXplEAEMdTMyAA4EaFZvdGVycyBzaXplIGxpbWl0IHJlYWNoZWQubFNuYXBzaG90VGFyZ2V0c1NpemVFeGNlZWRlZAQBEHNpemUQAQx1MzIADwRsVGFyZ2V0cyBzaXplIGxpbWl0IHJlYWNoZWQuIEZvcmNlRXJhBAEQbW9kZaABHEZvcmNpbmcAEAR0QSBuZXcgZm9yY2UgZXJhIG1vZGUgd2FzIHNldC5kQ29udHJvbGxlckJhdGNoRGVwcmVjYXRlZAQBIGZhaWx1cmVzEAEMdTMyABEEpFJlcG9ydCBvZiBhIGNvbnRyb2xsZXIgYmF0Y2ggZGVwcmVjYXRpb24uBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0kAg4cGFsbGV0X3N0YWtpbmdEUmV3YXJkRGVzdGluYXRpb24EJEFjY291bnRJZAEAARQYU3Rha2VkAAAAFFN0YXNoAAEAKENvbnRyb2xsZXIAAgAcQWNjb3VudAQAAAEkQWNjb3VudElkAAMAEE5vbmUABAAAlAw0c3BfYXJpdGhtZXRpYyhwZXJfdGhpbmdzHFBlcmJpbGwAAAQAEAEMdTMyAACYCDhwYWxsZXRfc3Rha2luZzhWYWxpZGF0b3JQcmVmcwAACAEoY29tbWlzc2lvbpwBHFBlcmJpbGwAARxibG9ja2VkIAEQYm9vbAAAnAAABpQAoAg4cGFsbGV0X3N0YWtpbmccRm9yY2luZwABEChOb3RGb3JjaW5nAAAAIEZvcmNlTmV3AAEAJEZvcmNlTm9uZQACACxGb3JjZUFsd2F5cwADAACkDDxwYWxsZXRfb2ZmZW5jZXMYcGFsbGV0FEV2ZW50AAEEHE9mZmVuY2UIARBraW5kqAEQS2luZAABIHRpbWVzbG90OAE4T3BhcXVlVGltZVNsb3QAAAxRAVRoZXJlIGlzIGFuIG9mZmVuY2UgcmVwb3J0ZWQgb2YgdGhlIGdpdmVuIGBraW5kYCBoYXBwZW5lZCBhdCB0aGUgYHNlc3Npb25faW5kZXhgIGFuZDUBKGtpbmQtc3BlY2lmaWMpIHRpbWUgc2xvdC4gVGhpcyBldmVudCBpcyBub3QgZGVwb3NpdGVkIGZvciBkdXBsaWNhdGUgc2xhc2hlcy5MXFtraW5kLCB0aW1lc2xvdFxdLgQwRXZlbnRzIHR5cGUuqAAAAxAAAAAIAKwMOHBhbGxldF9zZXNzaW9uGHBhbGxldBRFdmVudAABBChOZXdTZXNzaW9uBAE0c2Vzc2lvbl9pbmRleBABMFNlc3Npb25JbmRleAAACDkBTmV3IHNlc3Npb24gaGFzIGhhcHBlbmVkLiBOb3RlIHRoYXQgdGhlIGFyZ3VtZW50IGlzIHRoZSBzZXNzaW9uIGluZGV4LCBub3QgdGhlnGJsb2NrIG51bWJlciBhcyB0aGUgdHlwZSBtaWdodCBzdWdnZXN0LgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldLAMOHBhbGxldF9ncmFuZHBhGHBhbGxldBRFdmVudAABDDhOZXdBdXRob3JpdGllcwQBNGF1dGhvcml0eV9zZXS0ATRBdXRob3JpdHlMaXN0AAAEjE5ldyBhdXRob3JpdHkgc2V0IGhhcyBiZWVuIGFwcGxpZWQuGFBhdXNlZAABBJhDdXJyZW50IGF1dGhvcml0eSBzZXQgaGFzIGJlZW4gcGF1c2VkLhxSZXN1bWVkAAIEnEN1cnJlbnQgYXV0aG9yaXR5IHNldCBoYXMgYmVlbiByZXN1bWVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldLQAAAK4ALgAAAQIvDAAvAxQc3BfY29uc2Vuc3VzX2dyYW5kcGEMYXBwGFB1YmxpYwAABAAEATxlZDI1NTE5OjpQdWJsaWMAAMAMPHBhbGxldF90cmVhc3VyeRhwYWxsZXQURXZlbnQIBFQABEkAATAgU3BlbmRpbmcEAUBidWRnZXRfcmVtYWluaW5nGAE8QmFsYW5jZU9mPFQsIEk+AAAE5FdlIGhhdmUgZW5kZWQgYSBzcGVuZCBwZXJpb2QgYW5kIHdpbGwgbm93IGFsbG9jYXRlIGZ1bmRzLhxBd2FyZGVkDAE4cHJvcG9zYWxfaW5kZXgQATRQcm9wb3NhbEluZGV4AAEUYXdhcmQYATxCYWxhbmNlT2Y8VCwgST4AARxhY2NvdW50AAEwVDo6QWNjb3VudElkAAEEfFNvbWUgZnVuZHMgaGF2ZSBiZWVuIGFsbG9jYXRlZC4UQnVybnQEASxidXJudF9mdW5kcxgBPEJhbGFuY2VPZjxULCBJPgACBIhTb21lIG9mIG91ciBmdW5kcyBoYXZlIGJlZW4gYnVybnQuIFJvbGxvdmVyBAFAcm9sbG92ZXJfYmFsYW5jZRgBPEJhbGFuY2VPZjxULCBJPgADBC0BU3BlbmRpbmcgaGFzIGZpbmlzaGVkOyB0aGlzIGlzIHRoZSBhbW91bnQgdGhhdCByb2xscyBvdmVyIHVudGlsIG5leHQgc3BlbmQuHERlcG9zaXQEARR2YWx1ZRgBPEJhbGFuY2VPZjxULCBJPgAEBHxTb21lIGZ1bmRzIGhhdmUgYmVlbiBkZXBvc2l0ZWQuNFNwZW5kQXBwcm92ZWQMAThwcm9wb3NhbF9pbmRleBABNFByb3Bvc2FsSW5kZXgAARhhbW91bnQYATxCYWxhbmNlT2Y8VCwgST4AASxiZW5lZmljaWFyeQABMFQ6OkFjY291bnRJZAAFBJxBIG5ldyBzcGVuZCBwcm9wb3NhbCBoYXMgYmVlbiBhcHByb3ZlZC48VXBkYXRlZEluYWN0aXZlCAEscmVhY3RpdmF0ZWQYATxCYWxhbmNlT2Y8VCwgST4AASxkZWFjdGl2YXRlZBgBPEJhbGFuY2VPZjxULCBJPgAGBMxUaGUgaW5hY3RpdmUgZnVuZHMgb2YgdGhlIHBhbGxldCBoYXZlIGJlZW4gdXBkYXRlZC5IQXNzZXRTcGVuZEFwcHJvdmVkGAEUaW5kZXgQAShTcGVuZEluZGV4AAEoYXNzZXRfa2luZMQBMFQ6OkFzc2V0S2luZAABGGFtb3VudBgBUEFzc2V0QmFsYW5jZU9mPFQsIEk+AAEsYmVuZWZpY2lhcnktAQE4VDo6QmVuZWZpY2lhcnkAASh2YWxpZF9mcm9tEAFEQmxvY2tOdW1iZXJGb3I8VD4AASRleHBpcmVfYXQQAURCbG9ja051bWJlckZvcjxUPgAHBLRBIG5ldyBhc3NldCBzcGVuZCBwcm9wb3NhbCBoYXMgYmVlbiBhcHByb3ZlZC5AQXNzZXRTcGVuZFZvaWRlZAQBFGluZGV4EAEoU3BlbmRJbmRleAAIBHRBbiBhcHByb3ZlZCBzcGVuZCB3YXMgdm9pZGVkLhBQYWlkCAEUaW5kZXgQAShTcGVuZEluZGV4AAEocGF5bWVudF9pZDABZDxUOjpQYXltYXN0ZXIgYXMgUGF5Pjo6SWQACQRMQSBwYXltZW50IGhhcHBlbmVkLjRQYXltZW50RmFpbGVkCAEUaW5kZXgQAShTcGVuZEluZGV4AAEocGF5bWVudF9pZDABZDxUOjpQYXltYXN0ZXIgYXMgUGF5Pjo6SWQACgSQQSBwYXltZW50IGZhaWxlZCBhbmQgY2FuIGJlIHJldHJpZWQuOFNwZW5kUHJvY2Vzc2VkBAEUaW5kZXgQAShTcGVuZEluZGV4AAsITQFBIHNwZW5kIHdhcyBwcm9jZXNzZWQgYW5kIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmFnZS4gSXQgbWlnaHQgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseXBwYWlkIG9yIGl0IG1heSBoYXZlIGV4cGlyZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0xAxccG9sa2Fkb3RfcnVudGltZV9jb21tb24UaW1wbHNcVmVyc2lvbmVkTG9jYXRhYmxlQXNzZXQAAQgIVjMIASBsb2NhdGlvbsgBRHhjbTo6djM6OkxvY2F0aW9uAAEgYXNzZXRfaWTwAUB4Y206OnYzOjpBc3NldElkAAMACFY0CAEgbG9jYXRpb270AUR4Y206OnY0OjpMb2NhdGlvbgABIGFzc2V0X2lkKQEBQHhjbTo6djQ6OkFzc2V0SWQABAAAyBAsc3RhZ2luZ194Y20IdjM0bXVsdGlsb2NhdGlvbjRNdWx0aUxvY2F0aW9uAAAIARxwYXJlbnRzCAEIdTgAASBpbnRlcmlvcswBJEp1bmN0aW9ucwAAzBAMeGNtCHYzJGp1bmN0aW9ucyRKdW5jdGlvbnMAASQQSGVyZQAAAAhYMQQA0AEgSnVuY3Rpb24AAQAIWDIIANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgACAAhYMwwA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgADAAhYNBAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24ABAAIWDUUANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAFAAhYNhgA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAGAAhYNxwA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24ABwAIWDggANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAA0AEgSnVuY3Rpb24AANABIEp1bmN0aW9uAADQASBKdW5jdGlvbgAIAADQEAx4Y20IdjMganVuY3Rpb24gSnVuY3Rpb24AASgkUGFyYWNoYWluBADUAQx1MzIAAAAsQWNjb3VudElkMzIIARxuZXR3b3Jr2AFET3B0aW9uPE5ldHdvcmtJZD4AAQhpZAQBIFt1ODsgMzJdAAEAOEFjY291bnRJbmRleDY0CAEcbmV0d29ya9gBRE9wdGlvbjxOZXR3b3JrSWQ+AAEUaW5kZXgsAQx1NjQAAgAwQWNjb3VudEtleTIwCAEcbmV0d29ya9gBRE9wdGlvbjxOZXR3b3JrSWQ+AAEMa2V54AEgW3U4OyAyMF0AAwA4UGFsbGV0SW5zdGFuY2UEAAgBCHU4AAQAMEdlbmVyYWxJbmRleAQA5AEQdTEyOAAFAChHZW5lcmFsS2V5CAEYbGVuZ3RoCAEIdTgAARBkYXRhBAEgW3U4OyAzMl0ABgAkT25seUNoaWxkAAcAJFBsdXJhbGl0eQgBCGlk6AEYQm9keUlkAAEQcGFydOwBIEJvZHlQYXJ0AAgAPEdsb2JhbENvbnNlbnN1cwQA3AEkTmV0d29ya0lkAAkAANQAAAYQANgEGE9wdGlvbgQEVAHcAQgQTm9uZQAAABBTb21lBADcAAABAADcEAx4Y20IdjMganVuY3Rpb24kTmV0d29ya0lkAAEsJEJ5R2VuZXNpcwQABAEgW3U4OyAzMl0AAAAYQnlGb3JrCAEwYmxvY2tfbnVtYmVyMAEMdTY0AAEoYmxvY2tfaGFzaAQBIFt1ODsgMzJdAAEAIFBvbGthZG90AAIAGEt1c2FtYQADABxXZXN0ZW5kAAQAGFJvY29jbwAFABhXb2NvY28ABgAgRXRoZXJldW0EASBjaGFpbl9pZCwBDHU2NAAHACxCaXRjb2luQ29yZQAIACxCaXRjb2luQ2FzaAAJAEBQb2xrYWRvdEJ1bGxldGluAAoAAOAAAAMUAAAACADkAAAGGADoEAx4Y20IdjMganVuY3Rpb24YQm9keUlkAAEoEFVuaXQAAAAcTW9uaWtlcgQASAEcW3U4OyA0XQABABRJbmRleAQA1AEMdTMyAAIAJEV4ZWN1dGl2ZQADACRUZWNobmljYWwABAAsTGVnaXNsYXRpdmUABQAgSnVkaWNpYWwABgAcRGVmZW5zZQAHADhBZG1pbmlzdHJhdGlvbgAIACBUcmVhc3VyeQAJAADsEAx4Y20IdjMganVuY3Rpb24gQm9keVBhcnQAARQUVm9pY2UAAAAcTWVtYmVycwQBFGNvdW501AEMdTMyAAEAIEZyYWN0aW9uCAEMbm9t1AEMdTMyAAEUZGVub23UAQx1MzIAAgBEQXRMZWFzdFByb3BvcnRpb24IAQxub23UAQx1MzIAARRkZW5vbdQBDHUzMgADAEhNb3JlVGhhblByb3BvcnRpb24IAQxub23UAQx1MzIAARRkZW5vbdQBDHUzMgAEAADwEAx4Y20IdjMobXVsdGlhc3NldBxBc3NldElkAAEIIENvbmNyZXRlBADIATRNdWx0aUxvY2F0aW9uAAAAIEFic3RyYWN0BAAEASBbdTg7IDMyXQABAAD0ECxzdGFnaW5nX3hjbQh2NCBsb2NhdGlvbiBMb2NhdGlvbgAACAEccGFyZW50cwgBCHU4AAEgaW50ZXJpb3L4ASRKdW5jdGlvbnMAAPgQLHN0YWdpbmdfeGNtCHY0JGp1bmN0aW9ucyRKdW5jdGlvbnMAASQQSGVyZQAAAAhYMQQA/AFIQXJjPFtKdW5jdGlvbjsgMV0+AAEACFgyBAANAQFIQXJjPFtKdW5jdGlvbjsgMl0+AAIACFgzBAARAQFIQXJjPFtKdW5jdGlvbjsgM10+AAMACFg0BAAVAQFIQXJjPFtKdW5jdGlvbjsgNF0+AAQACFg1BAAZAQFIQXJjPFtKdW5jdGlvbjsgNV0+AAUACFg2BAAdAQFIQXJjPFtKdW5jdGlvbjsgNl0+AAYACFg3BAAhAQFIQXJjPFtKdW5jdGlvbjsgN10+AAcACFg4BAAlAQFIQXJjPFtKdW5jdGlvbjsgOF0+AAgAAPwAAAMBAAAAAQEAAQEQLHN0YWdpbmdfeGNtCHY0IGp1bmN0aW9uIEp1bmN0aW9uAAEoJFBhcmFjaGFpbgQA1AEMdTMyAAAALEFjY291bnRJZDMyCAEcbmV0d29yawUBAURPcHRpb248TmV0d29ya0lkPgABCGlkBAEgW3U4OyAzMl0AAQA4QWNjb3VudEluZGV4NjQIARxuZXR3b3JrBQEBRE9wdGlvbjxOZXR3b3JrSWQ+AAEUaW5kZXgsAQx1NjQAAgAwQWNjb3VudEtleTIwCAEcbmV0d29yawUBAURPcHRpb248TmV0d29ya0lkPgABDGtleeABIFt1ODsgMjBdAAMAOFBhbGxldEluc3RhbmNlBAAIAQh1OAAEADBHZW5lcmFsSW5kZXgEAOQBEHUxMjgABQAoR2VuZXJhbEtleQgBGGxlbmd0aAgBCHU4AAEQZGF0YQQBIFt1ODsgMzJdAAYAJE9ubHlDaGlsZAAHACRQbHVyYWxpdHkIAQhpZOgBGEJvZHlJZAABEHBhcnTsASBCb2R5UGFydAAIADxHbG9iYWxDb25zZW5zdXMEAAkBASROZXR3b3JrSWQACQAABQEEGE9wdGlvbgQEVAEJAQEIEE5vbmUAAAAQU29tZQQACQEAAAEAAAkBECxzdGFnaW5nX3hjbQh2NCBqdW5jdGlvbiROZXR3b3JrSWQAASwkQnlHZW5lc2lzBAAEASBbdTg7IDMyXQAAABhCeUZvcmsIATBibG9ja19udW1iZXIwAQx1NjQAAShibG9ja19oYXNoBAEgW3U4OyAzMl0AAQAgUG9sa2Fkb3QAAgAYS3VzYW1hAAMAHFdlc3RlbmQABAAYUm9jb2NvAAUAGFdvY29jbwAGACBFdGhlcmV1bQQBIGNoYWluX2lkLAEMdTY0AAcALEJpdGNvaW5Db3JlAAgALEJpdGNvaW5DYXNoAAkAQFBvbGthZG90QnVsbGV0aW4ACgAADQEAAAMCAAAAAQEAEQEAAAMDAAAAAQEAFQEAAAMEAAAAAQEAGQEAAAMFAAAAAQEAHQEAAAMGAAAAAQEAIQEAAAMHAAAAAQEAJQEAAAMIAAAAAQEAKQEQLHN0YWdpbmdfeGNtCHY0FGFzc2V0HEFzc2V0SWQAAAQA9AEgTG9jYXRpb24AAC0BCAx4Y21EVmVyc2lvbmVkTG9jYXRpb24AAQwIVjIEADEBAUR2Mjo6TXVsdGlMb2NhdGlvbgABAAhWMwQAyAFEdjM6Ok11bHRpTG9jYXRpb24AAwAIVjQEAPQBMHY0OjpMb2NhdGlvbgAEAAAxARAMeGNtCHYyNG11bHRpbG9jYXRpb240TXVsdGlMb2NhdGlvbgAACAEccGFyZW50cwgBCHU4AAEgaW50ZXJpb3I1AQEkSnVuY3Rpb25zAAA1ARAMeGNtCHYyNG11bHRpbG9jYXRpb24kSnVuY3Rpb25zAAEkEEhlcmUAAAAIWDEEADkBASBKdW5jdGlvbgABAAhYMggAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AAgAIWDMMADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AAwAIWDQQADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAEAAhYNRQAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24ABQAIWDYYADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24ABgAIWDccADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAHAAhYOCAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24AADkBASBKdW5jdGlvbgAAOQEBIEp1bmN0aW9uAAA5AQEgSnVuY3Rpb24ACAAAOQEQDHhjbQh2MiBqdW5jdGlvbiBKdW5jdGlvbgABJCRQYXJhY2hhaW4EANQBDHUzMgAAACxBY2NvdW50SWQzMggBHG5ldHdvcms9AQEkTmV0d29ya0lkAAEIaWQEASBbdTg7IDMyXQABADhBY2NvdW50SW5kZXg2NAgBHG5ldHdvcms9AQEkTmV0d29ya0lkAAEUaW5kZXgsAQx1NjQAAgAwQWNjb3VudEtleTIwCAEcbmV0d29yaz0BASROZXR3b3JrSWQAAQxrZXngASBbdTg7IDIwXQADADhQYWxsZXRJbnN0YW5jZQQACAEIdTgABAAwR2VuZXJhbEluZGV4BADkARB1MTI4AAUAKEdlbmVyYWxLZXkEAEEBAYBXZWFrQm91bmRlZFZlYzx1OCwgQ29uc3RVMzI8MzI+PgAGACRPbmx5Q2hpbGQABwAkUGx1cmFsaXR5CAEIaWRFAQEYQm9keUlkAAEQcGFydEkBASBCb2R5UGFydAAIAAA9AQwMeGNtCHYyJE5ldHdvcmtJZAABEAxBbnkAAAAUTmFtZWQEAEEBAYBXZWFrQm91bmRlZFZlYzx1OCwgQ29uc3RVMzI8MzI+PgABACBQb2xrYWRvdAACABhLdXNhbWEAAwAAQQEMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAEIBFMAAAQAOAEYVmVjPFQ+AABFAQwMeGNtCHYyGEJvZHlJZAABKBBVbml0AAAAFE5hbWVkBABBAQGAV2Vha0JvdW5kZWRWZWM8dTgsIENvbnN0VTMyPDMyPj4AAQAUSW5kZXgEANQBDHUzMgACACRFeGVjdXRpdmUAAwAkVGVjaG5pY2FsAAQALExlZ2lzbGF0aXZlAAUAIEp1ZGljaWFsAAYAHERlZmVuc2UABwA4QWRtaW5pc3RyYXRpb24ACAAgVHJlYXN1cnkACQAASQEMDHhjbQh2MiBCb2R5UGFydAABFBRWb2ljZQAAABxNZW1iZXJzBAEUY291bnTUAQx1MzIAAQAgRnJhY3Rpb24IAQxub23UAQx1MzIAARRkZW5vbdQBDHUzMgACAERBdExlYXN0UHJvcG9ydGlvbggBDG5vbdQBDHUzMgABFGRlbm9t1AEMdTMyAAMASE1vcmVUaGFuUHJvcG9ydGlvbggBDG5vbdQBDHUzMgABFGRlbm9t1AEMdTMyAAQAAE0BDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcYcGFsbGV0FEV2ZW50CARUAARJAAEQJERlbGVnYXRlZAgAAAEwVDo6QWNjb3VudElkAAAAATBUOjpBY2NvdW50SWQAAAQdAUFuIGFjY291bnQgaGFzIGRlbGVnYXRlZCB0aGVpciB2b3RlIHRvIGFub3RoZXIgYWNjb3VudC4gXFt3aG8sIHRhcmdldFxdLFVuZGVsZWdhdGVkBAAAATBUOjpBY2NvdW50SWQAAQT0QW4gXFthY2NvdW50XF0gaGFzIGNhbmNlbGxlZCBhIHByZXZpb3VzIGRlbGVnYXRpb24gb3BlcmF0aW9uLhRWb3RlZAgBDHdobwABMFQ6OkFjY291bnRJZAABEHZvdGVRAQFwQWNjb3VudFZvdGU8QmFsYW5jZU9mPFQsIEk+PgACBGRBbiBhY2NvdW50IHRoYXQgaGFzIHZvdGVkLFZvdGVSZW1vdmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEQdm90ZVEBAXBBY2NvdW50Vm90ZTxCYWxhbmNlT2Y8VCwgST4+AAMEYEEgdm90ZSB0aGF0IGJlZW4gcmVtb3ZlZAR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldFEBDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcQdm90ZSxBY2NvdW50Vm90ZQQcQmFsYW5jZQEYAQwgU3RhbmRhcmQIARB2b3RlVQEBEFZvdGUAARxiYWxhbmNlGAEcQmFsYW5jZQAAABRTcGxpdAgBDGF5ZRgBHEJhbGFuY2UAAQxuYXkYARxCYWxhbmNlAAEAMFNwbGl0QWJzdGFpbgwBDGF5ZRgBHEJhbGFuY2UAAQxuYXkYARxCYWxhbmNlAAEcYWJzdGFpbhgBHEJhbGFuY2UAAgAAVQEMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxB2b3RlEFZvdGUAAAQACAAAAFkBDEBwYWxsZXRfcmVmZXJlbmRhGHBhbGxldBRFdmVudAgEVAAESQABQCRTdWJtaXR0ZWQMARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0cmFja10BATxUcmFja0lkT2Y8VCwgST4EJQFUaGUgdHJhY2sgKGFuZCBieSBleHRlbnNpb24gcHJvcG9zYWwgZGlzcGF0Y2ggb3JpZ2luKSBvZiB0aGlzIHJlZmVyZW5kdW0uASBwcm9wb3NhbGEBAUxCb3VuZGVkQ2FsbE9mPFQsIEk+BIBUaGUgcHJvcG9zYWwgZm9yIHRoZSByZWZlcmVuZHVtLgAEgEEgcmVmZXJlbmR1bSBoYXMgYmVlbiBzdWJtaXR0ZWQuVERlY2lzaW9uRGVwb3NpdFBsYWNlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuAQSUVGhlIGRlY2lzaW9uIGRlcG9zaXQgaGFzIGJlZW4gcGxhY2VkLlxEZWNpc2lvbkRlcG9zaXRSZWZ1bmRlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuAgScVGhlIGRlY2lzaW9uIGRlcG9zaXQgaGFzIGJlZW4gcmVmdW5kZWQuOERlcG9zaXRTbGFzaGVkCAEMd2hvAAEwVDo6QWNjb3VudElkBIxUaGUgYWNjb3VudCB3aG8gcGxhY2VkIHRoZSBkZXBvc2l0LgEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+BIRUaGUgYW1vdW50IHBsYWNlZCBieSB0aGUgYWNjb3VudC4DBGxBIGRlcG9zaXQgaGFzIGJlZW4gc2xhc2hlZC48RGVjaXNpb25TdGFydGVkEAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdHJhY2tdAQE8VHJhY2tJZE9mPFQsIEk+BCUBVGhlIHRyYWNrIChhbmQgYnkgZXh0ZW5zaW9uIHByb3Bvc2FsIGRpc3BhdGNoIG9yaWdpbikgb2YgdGhpcyByZWZlcmVuZHVtLgEgcHJvcG9zYWxhAQFMQm91bmRlZENhbGxPZjxULCBJPgSAVGhlIHByb3Bvc2FsIGZvciB0aGUgcmVmZXJlbmR1bS4BFHRhbGx5gQcBIFQ6OlRhbGx5BLhUaGUgY3VycmVudCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uBAS8QSByZWZlcmVuZHVtIGhhcyBtb3ZlZCBpbnRvIHRoZSBkZWNpZGluZyBwaGFzZS44Q29uZmlybVN0YXJ0ZWQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uBQA4Q29uZmlybUFib3J0ZWQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uBgAkQ29uZmlybWVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmBBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uBwQhAUEgcmVmZXJlbmR1bSBoYXMgZW5kZWQgaXRzIGNvbmZpcm1hdGlvbiBwaGFzZSBhbmQgaXMgcmVhZHkgZm9yIGFwcHJvdmFsLiBBcHByb3ZlZAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4IBA0BQSByZWZlcmVuZHVtIGhhcyBiZWVuIGFwcHJvdmVkIGFuZCBpdHMgcHJvcG9zYWwgaGFzIGJlZW4gc2NoZWR1bGVkLiBSZWplY3RlZAgBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BFHRhbGx5gQcBIFQ6OlRhbGx5BLBUaGUgZmluYWwgdGFsbHkgb2Ygdm90ZXMgaW4gdGhpcyByZWZlcmVuZHVtLgkErEEgcHJvcG9zYWwgaGFzIGJlZW4gcmVqZWN0ZWQgYnkgcmVmZXJlbmR1bS4gVGltZWRPdXQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0YWxseYEHASBUOjpUYWxseQSwVGhlIGZpbmFsIHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4KBNhBIHJlZmVyZW5kdW0gaGFzIGJlZW4gdGltZWQgb3V0IHdpdGhvdXQgYmVpbmcgZGVjaWRlZC4kQ2FuY2VsbGVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmBBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uCwSAQSByZWZlcmVuZHVtIGhhcyBiZWVuIGNhbmNlbGxlZC4YS2lsbGVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmBBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uDAR0QSByZWZlcmVuZHVtIGhhcyBiZWVuIGtpbGxlZC5kU3VibWlzc2lvbkRlcG9zaXRSZWZ1bmRlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuDQSkVGhlIHN1Ym1pc3Npb24gZGVwb3NpdCBoYXMgYmVlbiByZWZ1bmRlZC4sTWV0YWRhdGFTZXQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARBoYXNoNAEcVDo6SGFzaAQ4UHJlaW1hZ2UgaGFzaC4OBJxNZXRhZGF0YSBmb3IgYSByZWZlcmVuZHVtIGhhcyBiZWVuIHNldC48TWV0YWRhdGFDbGVhcmVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEQaGFzaDQBHFQ6Okhhc2gEOFByZWltYWdlIGhhc2guDwSsTWV0YWRhdGEgZm9yIGEgcmVmZXJlbmR1bSBoYXMgYmVlbiBjbGVhcmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldF0BAAAFBABhARA0ZnJhbWVfc3VwcG9ydBh0cmFpdHMkcHJlaW1hZ2VzHEJvdW5kZWQIBFQBZQEESAF5BwEMGExlZ2FjeQQBEGhhc2g0ASRIOjpPdXRwdXQAAAAYSW5saW5lBAB9BwE0Qm91bmRlZElubGluZQABABhMb29rdXAIARBoYXNoNAEkSDo6T3V0cHV0AAEMbGVuEAEMdTMyAAIAAGUBCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lLFJ1bnRpbWVDYWxsAAHMGFN5c3RlbQQAaQEBrQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U3lzdGVtLCBSdW50aW1lPgAAABBCYWJlBAB5AQGlAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxCYWJlLCBSdW50aW1lPgABACRUaW1lc3RhbXAEAJ0BAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFRpbWVzdGFtcCwgUnVudGltZT4AAgAcSW5kaWNlcwQAoQEBsQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8SW5kaWNlcywgUnVudGltZT4AAwAgQmFsYW5jZXMEALEBAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEJhbGFuY2VzLCBSdW50aW1lPgAEABxTdGFraW5nBAC9AQGxAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTdGFraW5nLCBSdW50aW1lPgAGABxTZXNzaW9uBAD5AQGxAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTZXNzaW9uLCBSdW50aW1lPgAIABxHcmFuZHBhBAAVAgGxAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxHcmFuZHBhLCBSdW50aW1lPgAKACBUcmVhc3VyeQQAQQIBtQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VHJlYXN1cnksIFJ1bnRpbWU+ABIAQENvbnZpY3Rpb25Wb3RpbmcEAEkCAdUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENvbnZpY3Rpb25Wb3RpbmcsIFJ1bnRpbWU+ABQAJFJlZmVyZW5kYQQAVQIBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UmVmZXJlbmRhLCBSdW50aW1lPgAVAFBGZWxsb3dzaGlwQ29sbGVjdGl2ZQQAfQIB5QFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8RmVsbG93c2hpcENvbGxlY3RpdmUsIFJ1bnRpbWU+ABYATEZlbGxvd3NoaXBSZWZlcmVuZGEEAIECAeEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEZlbGxvd3NoaXBSZWZlcmVuZGEsIFJ1bnRpbWU+ABcAJFdoaXRlbGlzdAQAhQIBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8V2hpdGVsaXN0LCBSdW50aW1lPgAsAChQYXJhbWV0ZXJzBACJAgG9AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhbWV0ZXJzLCBSdW50aW1lPgAuABhDbGFpbXMEANECAa0Bc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENsYWltcywgUnVudGltZT4AEwAcVXRpbGl0eQQA8QIBsQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VXRpbGl0eSwgUnVudGltZT4AGAAcU29jaWV0eQQA+QIBsQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U29jaWV0eSwgUnVudGltZT4AGgAgUmVjb3ZlcnkEAP0CAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFJlY292ZXJ5LCBSdW50aW1lPgAbABxWZXN0aW5nBAABAwGxAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxWZXN0aW5nLCBSdW50aW1lPgAcACRTY2hlZHVsZXIEAAkDAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFNjaGVkdWxlciwgUnVudGltZT4AHQAUUHJveHkEABUDAakBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFByb3h5LCBSdW50aW1lPgAeACBNdWx0aXNpZwQAIQMBtQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8TXVsdGlzaWcsIFJ1bnRpbWU+AB8AIFByZWltYWdlBAAtAwG1AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQcmVpbWFnZSwgUnVudGltZT4AIAAgQm91bnRpZXMEADUDAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEJvdW50aWVzLCBSdW50aW1lPgAjADRDaGlsZEJvdW50aWVzBAA5AwHJAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxDaGlsZEJvdW50aWVzLCBSdW50aW1lPgAoAGhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZQQAPQMB/QFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8RWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2UsIFJ1bnRpbWU+ACUADE5pcwQAkQQBoQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8TmlzLCBSdW50aW1lPgAmAFhOaXNDb3VudGVycGFydEJhbGFuY2VzBACVBAHtAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxOaXNDb3VudGVycGFydEJhbGFuY2VzLCBSdW50aW1lPgAtACRWb3Rlckxpc3QEAJkEAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFZvdGVyTGlzdCwgUnVudGltZT4AJwA8Tm9taW5hdGlvblBvb2xzBACdBAHRAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxOb21pbmF0aW9uUG9vbHMsIFJ1bnRpbWU+ACkALEZhc3RVbnN0YWtlBADRBAHBAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxGYXN0VW5zdGFrZSwgUnVudGltZT4AKgA0Q29uZmlndXJhdGlvbgQA1QQByQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8Q29uZmlndXJhdGlvbiwgUnVudGltZT4AMwAsUGFyYXNTaGFyZWQEAPkEAcEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzU2hhcmVkLCBSdW50aW1lPgA0ADRQYXJhSW5jbHVzaW9uBAD9BAHJAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhSW5jbHVzaW9uLCBSdW50aW1lPgA1ADBQYXJhSW5oZXJlbnQEAAEFAcUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFJbmhlcmVudCwgUnVudGltZT4ANgAUUGFyYXMEAI0FAakBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzLCBSdW50aW1lPgA4ACxJbml0aWFsaXplcgQAlQUBwQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8SW5pdGlhbGl6ZXIsIFJ1bnRpbWU+ADkAEEhybXAEAJkFAaUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEhybXAsIFJ1bnRpbWU+ADwANFBhcmFzRGlzcHV0ZXMEAKEFAckBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzRGlzcHV0ZXMsIFJ1bnRpbWU+AD4ANFBhcmFzU2xhc2hpbmcEAKUFAckBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFzU2xhc2hpbmcsIFJ1bnRpbWU+AD8AaE9uRGVtYW5kQXNzaWdubWVudFByb3ZpZGVyBAC1BQH9AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxPbkRlbWFuZEFzc2lnbm1lbnRQcm92aWRlciwgUnVudGltZT4AQAAkUmVnaXN0cmFyBAC5BQG5AXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxSZWdpc3RyYXIsIFJ1bnRpbWU+AEYAFFNsb3RzBAC9BQGpAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTbG90cywgUnVudGltZT4ARwAgQXVjdGlvbnMEAMEFAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEF1Y3Rpb25zLCBSdW50aW1lPgBIACRDcm93ZGxvYW4EAMkFAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENyb3dkbG9hbiwgUnVudGltZT4ASQAgQ29yZXRpbWUEAN0FAbUBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENvcmV0aW1lLCBSdW50aW1lPgBKACRYY21QYWxsZXQEAPEFAbkBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFhjbVBhbGxldCwgUnVudGltZT4AYwAwTWVzc2FnZVF1ZXVlBAAtBwHFAXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxNZXNzYWdlUXVldWUsIFJ1bnRpbWU+AGQAJEFzc2V0UmF0ZQQAOQcBuQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8QXNzZXRSYXRlLCBSdW50aW1lPgBlABRCZWVmeQQAQQcBqQFzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8QmVlZnksIFJ1bnRpbWU+AMgAAGkBDDBmcmFtZV9zeXN0ZW0YcGFsbGV0EENhbGwEBFQAASwYcmVtYXJrBAEYcmVtYXJrOAEcVmVjPHU4PgAADGhNYWtlIHNvbWUgb24tY2hhaW4gcmVtYXJrLgCIQ2FuIGJlIGV4ZWN1dGVkIGJ5IGV2ZXJ5IGBvcmlnaW5gLjhzZXRfaGVhcF9wYWdlcwQBFHBhZ2VzMAEMdTY0AAEE+FNldCB0aGUgbnVtYmVyIG9mIHBhZ2VzIGluIHRoZSBXZWJBc3NlbWJseSBlbnZpcm9ubWVudCdzIGhlYXAuIHNldF9jb2RlBAEQY29kZTgBHFZlYzx1OD4AAgRkU2V0IHRoZSBuZXcgcnVudGltZSBjb2RlLlxzZXRfY29kZV93aXRob3V0X2NoZWNrcwQBEGNvZGU4ARxWZWM8dTg+AAMQGQFTZXQgdGhlIG5ldyBydW50aW1lIGNvZGUgd2l0aG91dCBkb2luZyBhbnkgY2hlY2tzIG9mIHRoZSBnaXZlbiBgY29kZWAuAFEBTm90ZSB0aGF0IHJ1bnRpbWUgdXBncmFkZXMgd2lsbCBub3QgcnVuIGlmIHRoaXMgaXMgY2FsbGVkIHdpdGggYSBub3QtaW5jcmVhc2luZyBzcGVjIHZlcnNpb24hLHNldF9zdG9yYWdlBAEUaXRlbXNtAQE0VmVjPEtleVZhbHVlPgAEBGhTZXQgc29tZSBpdGVtcyBvZiBzdG9yYWdlLjBraWxsX3N0b3JhZ2UEARBrZXlzdQEBIFZlYzxLZXk+AAUEdEtpbGwgc29tZSBpdGVtcyBmcm9tIHN0b3JhZ2UuLGtpbGxfcHJlZml4CAEYcHJlZml4OAEMS2V5AAEcc3Via2V5cxABDHUzMgAGEBEBS2lsbCBhbGwgc3RvcmFnZSBpdGVtcyB3aXRoIGEga2V5IHRoYXQgc3RhcnRzIHdpdGggdGhlIGdpdmVuIHByZWZpeC4AOQEqKk5PVEU6KiogV2UgcmVseSBvbiB0aGUgUm9vdCBvcmlnaW4gdG8gcHJvdmlkZSB1cyB0aGUgbnVtYmVyIG9mIHN1YmtleXMgdW5kZXI9AXRoZSBwcmVmaXggd2UgYXJlIHJlbW92aW5nIHRvIGFjY3VyYXRlbHkgY2FsY3VsYXRlIHRoZSB3ZWlnaHQgb2YgdGhpcyBmdW5jdGlvbi5EcmVtYXJrX3dpdGhfZXZlbnQEARhyZW1hcms4ARxWZWM8dTg+AAcEpE1ha2Ugc29tZSBvbi1jaGFpbiByZW1hcmsgYW5kIGVtaXQgZXZlbnQuRGF1dGhvcml6ZV91cGdyYWRlBAEkY29kZV9oYXNoNAEcVDo6SGFzaAAJEGEBQXV0aG9yaXplIGFuIHVwZ3JhZGUgdG8gYSBnaXZlbiBgY29kZV9oYXNoYCBmb3IgdGhlIHJ1bnRpbWUuIFRoZSBydW50aW1lIGNhbiBiZSBzdXBwbGllZBhsYXRlci4AfFRoaXMgY2FsbCByZXF1aXJlcyBSb290IG9yaWdpbi6AYXV0aG9yaXplX3VwZ3JhZGVfd2l0aG91dF9jaGVja3MEASRjb2RlX2hhc2g0ARxUOjpIYXNoAAogYQFBdXRob3JpemUgYW4gdXBncmFkZSB0byBhIGdpdmVuIGBjb2RlX2hhc2hgIGZvciB0aGUgcnVudGltZS4gVGhlIHJ1bnRpbWUgY2FuIGJlIHN1cHBsaWVkGGxhdGVyLgBdAVdBUk5JTkc6IFRoaXMgYXV0aG9yaXplcyBhbiB1cGdyYWRlIHRoYXQgd2lsbCB0YWtlIHBsYWNlIHdpdGhvdXQgYW55IHNhZmV0eSBjaGVja3MsIGZvclkBZXhhbXBsZSB0aGF0IHRoZSBzcGVjIG5hbWUgcmVtYWlucyB0aGUgc2FtZSBhbmQgdGhhdCB0aGUgdmVyc2lvbiBudW1iZXIgaW5jcmVhc2VzLiBOb3TwcmVjb21tZW5kZWQgZm9yIG5vcm1hbCB1c2UuIFVzZSBgYXV0aG9yaXplX3VwZ3JhZGVgIGluc3RlYWQuAHxUaGlzIGNhbGwgcmVxdWlyZXMgUm9vdCBvcmlnaW4uYGFwcGx5X2F1dGhvcml6ZWRfdXBncmFkZQQBEGNvZGU4ARxWZWM8dTg+AAskVQFQcm92aWRlIHRoZSBwcmVpbWFnZSAocnVudGltZSBiaW5hcnkpIGBjb2RlYCBmb3IgYW4gdXBncmFkZSB0aGF0IGhhcyBiZWVuIGF1dGhvcml6ZWQuAEkBSWYgdGhlIGF1dGhvcml6YXRpb24gcmVxdWlyZWQgYSB2ZXJzaW9uIGNoZWNrLCB0aGlzIGNhbGwgd2lsbCBlbnN1cmUgdGhlIHNwZWMgbmFtZehyZW1haW5zIHVuY2hhbmdlZCBhbmQgdGhhdCB0aGUgc3BlYyB2ZXJzaW9uIGhhcyBpbmNyZWFzZWQuAFkBRGVwZW5kaW5nIG9uIHRoZSBydW50aW1lJ3MgYE9uU2V0Q29kZWAgY29uZmlndXJhdGlvbiwgdGhpcyBmdW5jdGlvbiBtYXkgZGlyZWN0bHkgYXBwbHkRAXRoZSBuZXcgYGNvZGVgIGluIHRoZSBzYW1lIGJsb2NrIG9yIGF0dGVtcHQgdG8gc2NoZWR1bGUgdGhlIHVwZ3JhZGUuAGBBbGwgb3JpZ2lucyBhcmUgYWxsb3dlZC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMubQEAAAJxAQBxAQAABAg4OAB1AQAAAjgAeQEMLHBhbGxldF9iYWJlGHBhbGxldBBDYWxsBARUAAEMTHJlcG9ydF9lcXVpdm9jYXRpb24IAUhlcXVpdm9jYXRpb25fcHJvb2Z9AQGQQm94PEVxdWl2b2NhdGlvblByb29mPEhlYWRlckZvcjxUPj4+AAE8a2V5X293bmVyX3Byb29mjQEBQFQ6OktleU93bmVyUHJvb2YAABAJAVJlcG9ydCBhdXRob3JpdHkgZXF1aXZvY2F0aW9uL21pc2JlaGF2aW9yLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeQUBdGhlIGVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2YNAWFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci4gSWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlIHdpbGwwYmUgcmVwb3J0ZWQucHJlcG9ydF9lcXVpdm9jYXRpb25fdW5zaWduZWQIAUhlcXVpdm9jYXRpb25fcHJvb2Z9AQGQQm94PEVxdWl2b2NhdGlvblByb29mPEhlYWRlckZvcjxUPj4+AAE8a2V5X293bmVyX3Byb29mjQEBQFQ6OktleU93bmVyUHJvb2YAASAJAVJlcG9ydCBhdXRob3JpdHkgZXF1aXZvY2F0aW9uL21pc2JlaGF2aW9yLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeQUBdGhlIGVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2YNAWFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci4gSWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlIHdpbGwwYmUgcmVwb3J0ZWQuDQFUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx5FQFibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2gVAWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbiRyZXBvcnRlci5IcGxhbl9jb25maWdfY2hhbmdlBAEYY29uZmlnkQEBUE5leHRDb25maWdEZXNjcmlwdG9yAAIQXQFQbGFuIGFuIGVwb2NoIGNvbmZpZyBjaGFuZ2UuIFRoZSBlcG9jaCBjb25maWcgY2hhbmdlIGlzIHJlY29yZGVkIGFuZCB3aWxsIGJlIGVuYWN0ZWQgb25RAXRoZSBuZXh0IGNhbGwgdG8gYGVuYWN0X2Vwb2NoX2NoYW5nZWAuIFRoZSBjb25maWcgd2lsbCBiZSBhY3RpdmF0ZWQgb25lIGVwb2NoIGFmdGVyLlkBTXVsdGlwbGUgY2FsbHMgdG8gdGhpcyBtZXRob2Qgd2lsbCByZXBsYWNlIGFueSBleGlzdGluZyBwbGFubmVkIGNvbmZpZyBjaGFuZ2UgdGhhdCBoYWRUbm90IGJlZW4gZW5hY3RlZCB5ZXQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLn0BCEhzcF9jb25zZW5zdXNfc2xvdHNERXF1aXZvY2F0aW9uUHJvb2YIGEhlYWRlcgGBAQhJZAGFAQAQASBvZmZlbmRlcoUBAQhJZAABEHNsb3SJAQEQU2xvdAABMGZpcnN0X2hlYWRlcoEBARhIZWFkZXIAATRzZWNvbmRfaGVhZGVygQEBGEhlYWRlcgAAgQEQKHNwX3J1bnRpbWUcZ2VuZXJpYxhoZWFkZXIYSGVhZGVyCBhOdW1iZXIBEBBIYXNoAAAUASxwYXJlbnRfaGFzaDQBMEhhc2g6Ok91dHB1dAABGG51bWJlctQBGE51bWJlcgABKHN0YXRlX3Jvb3Q0ATBIYXNoOjpPdXRwdXQAATxleHRyaW5zaWNzX3Jvb3Q0ATBIYXNoOjpPdXRwdXQAARhkaWdlc3Q8ARhEaWdlc3QAAIUBDERzcF9jb25zZW5zdXNfYmFiZQxhcHAYUHVibGljAAAEAAQBPHNyMjU1MTk6OlB1YmxpYwAAiQEISHNwX2NvbnNlbnN1c19zbG90cxBTbG90AAAEADABDHU2NAAAjQEIKHNwX3Nlc3Npb248TWVtYmVyc2hpcFByb29mAAAMARxzZXNzaW9uEAEwU2Vzc2lvbkluZGV4AAEodHJpZV9ub2Rlc3UBATBWZWM8VmVjPHU4Pj4AATx2YWxpZGF0b3JfY291bnQQAThWYWxpZGF0b3JDb3VudAAAkQEMRHNwX2NvbnNlbnN1c19iYWJlHGRpZ2VzdHNQTmV4dENvbmZpZ0Rlc2NyaXB0b3IAAQQIVjEIAQRjlQEBKCh1NjQsIHU2NCkAATRhbGxvd2VkX3Nsb3RzmQEBMEFsbG93ZWRTbG90cwABAACVAQAABAgwMACZAQhEc3BfY29uc2Vuc3VzX2JhYmUwQWxsb3dlZFNsb3RzAAEMMFByaW1hcnlTbG90cwAAAHRQcmltYXJ5QW5kU2Vjb25kYXJ5UGxhaW5TbG90cwABAGxQcmltYXJ5QW5kU2Vjb25kYXJ5VlJGU2xvdHMAAgAAnQEMQHBhbGxldF90aW1lc3RhbXAYcGFsbGV0EENhbGwEBFQAAQQMc2V0BAEMbm93LAEkVDo6TW9tZW50AABMVFNldCB0aGUgY3VycmVudCB0aW1lLgBVAVRoaXMgY2FsbCBzaG91bGQgYmUgaW52b2tlZCBleGFjdGx5IG9uY2UgcGVyIGJsb2NrLiBJdCB3aWxsIHBhbmljIGF0IHRoZSBmaW5hbGl6YXRpb27UcGhhc2UsIGlmIHRoaXMgY2FsbCBoYXNuJ3QgYmVlbiBpbnZva2VkIGJ5IHRoYXQgdGltZS4AQQFUaGUgdGltZXN0YW1wIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gdGhlIHByZXZpb3VzIG9uZSBieSB0aGUgYW1vdW50IHNwZWNpZmllZCBieWhbYENvbmZpZzo6TWluaW11bVBlcmlvZGBdLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX05vbmVfLgBRAVRoaXMgZGlzcGF0Y2ggY2xhc3MgaXMgX01hbmRhdG9yeV8gdG8gZW5zdXJlIGl0IGdldHMgZXhlY3V0ZWQgaW4gdGhlIGJsb2NrLiBCZSBhd2FyZVEBdGhhdCBjaGFuZ2luZyB0aGUgY29tcGxleGl0eSBvZiB0aGlzIGNhbGwgY291bGQgcmVzdWx0IGV4aGF1c3RpbmcgdGhlIHJlc291cmNlcyBpbiBhhGJsb2NrIHRvIGV4ZWN1dGUgYW55IG90aGVyIGNhbGxzLgA0IyMgQ29tcGxleGl0eTEBLSBgTygxKWAgKE5vdGUgdGhhdCBpbXBsZW1lbnRhdGlvbnMgb2YgYE9uVGltZXN0YW1wU2V0YCBtdXN0IGFsc28gYmUgYE8oMSlgKVUBLSAxIHN0b3JhZ2UgcmVhZCBhbmQgMSBzdG9yYWdlIG11dGF0aW9uIChjb2RlYyBgTygxKWAgYmVjYXVzZSBvZiBgRGlkVXBkYXRlOjp0YWtlYCBpbkAgIGBvbl9maW5hbGl6ZWAp1C0gMSBldmVudCBoYW5kbGVyIGBvbl90aW1lc3RhbXBfc2V0YC4gTXVzdCBiZSBgTygxKWAuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLqEBDDhwYWxsZXRfaW5kaWNlcxhwYWxsZXQQQ2FsbAQEVAABFBRjbGFpbQQBFGluZGV4EAE8VDo6QWNjb3VudEluZGV4AAAwmEFzc2lnbiBhbiBwcmV2aW91c2x5IHVuYXNzaWduZWQgaW5kZXguANxQYXltZW50OiBgRGVwb3NpdGAgaXMgcmVzZXJ2ZWQgZnJvbSB0aGUgc2VuZGVyIGFjY291bnQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4A8C0gYGluZGV4YDogdGhlIGluZGV4IHRvIGJlIGNsYWltZWQuIFRoaXMgbXVzdCBub3QgYmUgaW4gdXNlLgCQRW1pdHMgYEluZGV4QXNzaWduZWRgIGlmIHN1Y2Nlc3NmdWwuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLiB0cmFuc2ZlcggBDG5ld6UBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFGluZGV4EAE8VDo6QWNjb3VudEluZGV4AAEwXQFBc3NpZ24gYW4gaW5kZXggYWxyZWFkeSBvd25lZCBieSB0aGUgc2VuZGVyIHRvIGFub3RoZXIgYWNjb3VudC4gVGhlIGJhbGFuY2UgcmVzZXJ2YXRpb264aXMgZWZmZWN0aXZlbHkgdHJhbnNmZXJyZWQgdG8gdGhlIG5ldyBhY2NvdW50LgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACUBLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgcmUtYXNzaWduZWQuIFRoaXMgbXVzdCBiZSBvd25lZCBieSB0aGUgc2VuZGVyLl0BLSBgbmV3YDogdGhlIG5ldyBvd25lciBvZiB0aGUgaW5kZXguIFRoaXMgZnVuY3Rpb24gaXMgYSBuby1vcCBpZiBpdCBpcyBlcXVhbCB0byBzZW5kZXIuAJBFbWl0cyBgSW5kZXhBc3NpZ25lZGAgaWYgc3VjY2Vzc2Z1bC4ANCMjIENvbXBsZXhpdHkkLSBgTygxKWAuEGZyZWUEARRpbmRleBABPFQ6OkFjY291bnRJbmRleAACMJRGcmVlIHVwIGFuIGluZGV4IG93bmVkIGJ5IHRoZSBzZW5kZXIuAF0BUGF5bWVudDogQW55IHByZXZpb3VzIGRlcG9zaXQgcGxhY2VkIGZvciB0aGUgaW5kZXggaXMgdW5yZXNlcnZlZCBpbiB0aGUgc2VuZGVyIGFjY291bnQuAFUBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHRoZSBzZW5kZXIgbXVzdCBvd24gdGhlIGluZGV4LgANAS0gYGluZGV4YDogdGhlIGluZGV4IHRvIGJlIGZyZWVkLiBUaGlzIG11c3QgYmUgb3duZWQgYnkgdGhlIHNlbmRlci4AhEVtaXRzIGBJbmRleEZyZWVkYCBpZiBzdWNjZXNzZnVsLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC44Zm9yY2VfdHJhbnNmZXIMAQxuZXelAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARRpbmRleBABPFQ6OkFjY291bnRJbmRleAABGGZyZWV6ZSABEGJvb2wAAzRVAUZvcmNlIGFuIGluZGV4IHRvIGFuIGFjY291bnQuIFRoaXMgZG9lc24ndCByZXF1aXJlIGEgZGVwb3NpdC4gSWYgdGhlIGluZGV4IGlzIGFscmVhZHnoaGVsZCwgdGhlbiBhbnkgZGVwb3NpdCBpcyByZWltYnVyc2VkIHRvIGl0cyBjdXJyZW50IG93bmVyLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgCkLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgKHJlLSlhc3NpZ25lZC5dAS0gYG5ld2A6IHRoZSBuZXcgb3duZXIgb2YgdGhlIGluZGV4LiBUaGlzIGZ1bmN0aW9uIGlzIGEgbm8tb3AgaWYgaXQgaXMgZXF1YWwgdG8gc2VuZGVyLkEBLSBgZnJlZXplYDogaWYgc2V0IHRvIGB0cnVlYCwgd2lsbCBmcmVlemUgdGhlIGluZGV4IHNvIGl0IGNhbm5vdCBiZSB0cmFuc2ZlcnJlZC4AkEVtaXRzIGBJbmRleEFzc2lnbmVkYCBpZiBzdWNjZXNzZnVsLgA0IyMgQ29tcGxleGl0eSQtIGBPKDEpYC4YZnJlZXplBAEUaW5kZXgQATxUOjpBY2NvdW50SW5kZXgABDBBAUZyZWV6ZSBhbiBpbmRleCBzbyBpdCB3aWxsIGFsd2F5cyBwb2ludCB0byB0aGUgc2VuZGVyIGFjY291bnQuIFRoaXMgY29uc3VtZXMgdGhlIGRlcG9zaXQuAFkBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHRoZSBzaWduaW5nIGFjY291bnQgbXVzdCBoYXZlIGFsbm9uLWZyb3plbiBhY2NvdW50IGBpbmRleGAuAKwtIGBpbmRleGA6IHRoZSBpbmRleCB0byBiZSBmcm96ZW4gaW4gcGxhY2UuAIhFbWl0cyBgSW5kZXhGcm96ZW5gIGlmIHN1Y2Nlc3NmdWwuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6lAQwoc3BfcnVudGltZTBtdWx0aWFkZHJlc3MwTXVsdGlBZGRyZXNzCCRBY2NvdW50SWQBADBBY2NvdW50SW5kZXgBqQEBFAhJZAQAAAEkQWNjb3VudElkAAAAFEluZGV4BACtAQEwQWNjb3VudEluZGV4AAEADFJhdwQAOAEcVmVjPHU4PgACACRBZGRyZXNzMzIEAAQBIFt1ODsgMzJdAAMAJEFkZHJlc3MyMAQA4AEgW3U4OyAyMF0ABAAAqQEAAAQAAK0BAAAGqQEAsQEMPHBhbGxldF9iYWxhbmNlcxhwYWxsZXQQQ2FsbAgEVAAESQABJFB0cmFuc2Zlcl9hbGxvd19kZWF0aAgBEGRlc3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZeQBKFQ6OkJhbGFuY2UAABzUVHJhbnNmZXIgc29tZSBsaXF1aWQgZnJlZSBiYWxhbmNlIHRvIGFub3RoZXIgYWNjb3VudC4ANQFgdHJhbnNmZXJfYWxsb3dfZGVhdGhgIHdpbGwgc2V0IHRoZSBgRnJlZUJhbGFuY2VgIG9mIHRoZSBzZW5kZXIgYW5kIHJlY2VpdmVyLhEBSWYgdGhlIHNlbmRlcidzIGFjY291bnQgaXMgYmVsb3cgdGhlIGV4aXN0ZW50aWFsIGRlcG9zaXQgYXMgYSByZXN1bHSwb2YgdGhlIHRyYW5zZmVyLCB0aGUgYWNjb3VudCB3aWxsIGJlIHJlYXBlZC4AFQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBgU2lnbmVkYCBieSB0aGUgdHJhbnNhY3Rvci44Zm9yY2VfdHJhbnNmZXIMARhzb3VyY2WlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARBkZXN0pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEUdmFsdWXkAShUOjpCYWxhbmNlAAIIYQFFeGFjdGx5IGFzIGB0cmFuc2Zlcl9hbGxvd19kZWF0aGAsIGV4Y2VwdCB0aGUgb3JpZ2luIG11c3QgYmUgcm9vdCBhbmQgdGhlIHNvdXJjZSBhY2NvdW50RG1heSBiZSBzcGVjaWZpZWQuTHRyYW5zZmVyX2tlZXBfYWxpdmUIARBkZXN0pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEUdmFsdWXkAShUOjpCYWxhbmNlAAMYWQFTYW1lIGFzIHRoZSBbYHRyYW5zZmVyX2FsbG93X2RlYXRoYF0gY2FsbCwgYnV0IHdpdGggYSBjaGVjayB0aGF0IHRoZSB0cmFuc2ZlciB3aWxsIG5vdGBraWxsIHRoZSBvcmlnaW4gYWNjb3VudC4A6Dk5JSBvZiB0aGUgdGltZSB5b3Ugd2FudCBbYHRyYW5zZmVyX2FsbG93X2RlYXRoYF0gaW5zdGVhZC4A8FtgdHJhbnNmZXJfYWxsb3dfZGVhdGhgXTogc3RydWN0LlBhbGxldC5odG1sI21ldGhvZC50cmFuc2ZlcjB0cmFuc2Zlcl9hbGwIARBkZXN0pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEoa2VlcF9hbGl2ZSABEGJvb2wABDwFAVRyYW5zZmVyIHRoZSBlbnRpcmUgdHJhbnNmZXJhYmxlIGJhbGFuY2UgZnJvbSB0aGUgY2FsbGVyIGFjY291bnQuAFkBTk9URTogVGhpcyBmdW5jdGlvbiBvbmx5IGF0dGVtcHRzIHRvIHRyYW5zZmVyIF90cmFuc2ZlcmFibGVfIGJhbGFuY2VzLiBUaGlzIG1lYW5zIHRoYXRhAWFueSBsb2NrZWQsIHJlc2VydmVkLCBvciBleGlzdGVudGlhbCBkZXBvc2l0cyAod2hlbiBga2VlcF9hbGl2ZWAgaXMgYHRydWVgKSwgd2lsbCBub3QgYmVdAXRyYW5zZmVycmVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIGVuc3VyZSB0aGF0IHRoaXMgZnVuY3Rpb24gcmVzdWx0cyBpbiBhIGtpbGxlZCBhY2NvdW50LEUBeW91IG1pZ2h0IG5lZWQgdG8gcHJlcGFyZSB0aGUgYWNjb3VudCBieSByZW1vdmluZyBhbnkgcmVmZXJlbmNlIGNvdW50ZXJzLCBzdG9yYWdlQGRlcG9zaXRzLCBldGMuLi4AwFRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgU2lnbmVkLgCgLSBgZGVzdGA6IFRoZSByZWNpcGllbnQgb2YgdGhlIHRyYW5zZmVyLlkBLSBga2VlcF9hbGl2ZWA6IEEgYm9vbGVhbiB0byBkZXRlcm1pbmUgaWYgdGhlIGB0cmFuc2Zlcl9hbGxgIG9wZXJhdGlvbiBzaG91bGQgc2VuZCBhbGxNASAgb2YgdGhlIGZ1bmRzIHRoZSBhY2NvdW50IGhhcywgY2F1c2luZyB0aGUgc2VuZGVyIGFjY291bnQgdG8gYmUga2lsbGVkIChmYWxzZSksIG9yWQEgIHRyYW5zZmVyIGV2ZXJ5dGhpbmcgZXhjZXB0IGF0IGxlYXN0IHRoZSBleGlzdGVudGlhbCBkZXBvc2l0LCB3aGljaCB3aWxsIGd1YXJhbnRlZSB0b5wgIGtlZXAgdGhlIHNlbmRlciBhY2NvdW50IGFsaXZlICh0cnVlKS48Zm9yY2VfdW5yZXNlcnZlCAEMd2hvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEYYW1vdW50GAEoVDo6QmFsYW5jZQAFDLBVbnJlc2VydmUgc29tZSBiYWxhbmNlIGZyb20gYSB1c2VyIGJ5IGZvcmNlLgBsQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IFJPT1QuQHVwZ3JhZGVfYWNjb3VudHMEAQx3aG+1AQFEVmVjPFQ6OkFjY291bnRJZD4ABiBwVXBncmFkZSBhIHNwZWNpZmllZCBhY2NvdW50LgB0LSBgb3JpZ2luYDogTXVzdCBiZSBgU2lnbmVkYC6QLSBgd2hvYDogVGhlIGFjY291bnQgdG8gYmUgdXBncmFkZWQuAFUBVGhpcyB3aWxsIHdhaXZlIHRoZSB0cmFuc2FjdGlvbiBmZWUgaWYgYXQgbGVhc3QgYWxsIGJ1dCAxMCUgb2YgdGhlIGFjY291bnRzIG5lZWRlZCB0b0EBYmUgdXBncmFkZWQuIChXZSBsZXQgc29tZSBub3QgaGF2ZSB0byBiZSB1cGdyYWRlZCBqdXN0IGluIG9yZGVyIHRvIGFsbG93IGZvciB0aGVYcG9zc2liaWxpdHkgb2YgY2h1cm4pLkRmb3JjZV9zZXRfYmFsYW5jZQgBDHdob6UBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABIG5ld19mcmVl5AEoVDo6QmFsYW5jZQAIDKxTZXQgdGhlIHJlZ3VsYXIgYmFsYW5jZSBvZiBhIGdpdmVuIGFjY291bnQuALBUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgaXMgYHJvb3RgLmxmb3JjZV9hZGp1c3RfdG90YWxfaXNzdWFuY2UIASRkaXJlY3Rpb265AQFMQWRqdXN0bWVudERpcmVjdGlvbgABFGRlbHRh5AEoVDo6QmFsYW5jZQAJFLhBZGp1c3QgdGhlIHRvdGFsIGlzc3VhbmNlIGluIGEgc2F0dXJhdGluZyB3YXkuAPxDYW4gb25seSBiZSBjYWxsZWQgYnkgcm9vdCBhbmQgYWx3YXlzIG5lZWRzIGEgcG9zaXRpdmUgYGRlbHRhYC4AJCMgRXhhbXBsZRBidXJuCAEUdmFsdWXkAShUOjpCYWxhbmNlAAEoa2VlcF9hbGl2ZSABEGJvb2wAChz8QnVybiB0aGUgc3BlY2lmaWVkIGxpcXVpZCBmcmVlIGJhbGFuY2UgZnJvbSB0aGUgb3JpZ2luIGFjY291bnQuACUBSWYgdGhlIG9yaWdpbidzIGFjY291bnQgZW5kcyB1cCBiZWxvdyB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdCBhcyBhIHJlc3VsdAkBb2YgdGhlIGJ1cm4gYW5kIGBrZWVwX2FsaXZlYCBpcyBmYWxzZSwgdGhlIGFjY291bnQgd2lsbCBiZSByZWFwZWQuAFEBVW5saWtlIHNlbmRpbmcgZnVuZHMgdG8gYSBfYnVybl8gYWRkcmVzcywgd2hpY2ggbWVyZWx5IG1ha2VzIHRoZSBmdW5kcyBpbmFjY2Vzc2libGUsIQF0aGlzIGBidXJuYCBvcGVyYXRpb24gd2lsbCByZWR1Y2UgdG90YWwgaXNzdWFuY2UgYnkgdGhlIGFtb3VudCBfYnVybmVkXy4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMutQEAAAIAALkBDDxwYWxsZXRfYmFsYW5jZXMUdHlwZXNMQWRqdXN0bWVudERpcmVjdGlvbgABCCBJbmNyZWFzZQAAACBEZWNyZWFzZQABAAC9ARA4cGFsbGV0X3N0YWtpbmcYcGFsbGV0GHBhbGxldBBDYWxsBARUAAF8EGJvbmQIARR2YWx1ZeQBMEJhbGFuY2VPZjxUPgABFHBheWVlkAF8UmV3YXJkRGVzdGluYXRpb248VDo6QWNjb3VudElkPgAAQGEBVGFrZSB0aGUgb3JpZ2luIGFjY291bnQgYXMgYSBzdGFzaCBhbmQgbG9jayB1cCBgdmFsdWVgIG9mIGl0cyBiYWxhbmNlLiBgY29udHJvbGxlcmAgd2lsbIBiZSB0aGUgYWNjb3VudCB0aGF0IGNvbnRyb2xzIGl0LgAtAWB2YWx1ZWAgbXVzdCBiZSBtb3JlIHRoYW4gdGhlIGBtaW5pbXVtX2JhbGFuY2VgIHNwZWNpZmllZCBieSBgVDo6Q3VycmVuY3lgLgAhAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBzdGFzaCBhY2NvdW50LgA8RW1pdHMgYEJvbmRlZGAuNCMjIENvbXBsZXhpdHnQLSBJbmRlcGVuZGVudCBvZiB0aGUgYXJndW1lbnRzLiBNb2RlcmF0ZSBjb21wbGV4aXR5LhwtIE8oMSkuZC0gVGhyZWUgZXh0cmEgREIgZW50cmllcy4ATQFOT1RFOiBUd28gb2YgdGhlIHN0b3JhZ2Ugd3JpdGVzIChgU2VsZjo6Ym9uZGVkYCwgYFNlbGY6OnBheWVlYCkgYXJlIF9uZXZlcl8gY2xlYW5lZFkBdW5sZXNzIHRoZSBgb3JpZ2luYCBmYWxscyBiZWxvdyBfZXhpc3RlbnRpYWwgZGVwb3NpdF8gKG9yIGVxdWFsIHRvIDApIGFuZCBnZXRzIHJlbW92ZWQgYXMgZHVzdC4oYm9uZF9leHRyYQQBOG1heF9hZGRpdGlvbmFs5AEwQmFsYW5jZU9mPFQ+AAE4YQFBZGQgc29tZSBleHRyYSBhbW91bnQgdGhhdCBoYXZlIGFwcGVhcmVkIGluIHRoZSBzdGFzaCBgZnJlZV9iYWxhbmNlYCBpbnRvIHRoZSBiYWxhbmNlIHVwMGZvciBzdGFraW5nLgBRAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBzdGFzaCwgbm90IHRoZSBjb250cm9sbGVyLgBNAVVzZSB0aGlzIGlmIHRoZXJlIGFyZSBhZGRpdGlvbmFsIGZ1bmRzIGluIHlvdXIgc3Rhc2ggYWNjb3VudCB0aGF0IHlvdSB3aXNoIHRvIGJvbmQuVQFVbmxpa2UgW2Bib25kYF0oU2VsZjo6Ym9uZCkgb3IgW2B1bmJvbmRgXShTZWxmOjp1bmJvbmQpIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW1wb3NlvGFueSBsaW1pdGF0aW9uIG9uIHRoZSBhbW91bnQgdGhhdCBjYW4gYmUgYWRkZWQuADxFbWl0cyBgQm9uZGVkYC4ANCMjIENvbXBsZXhpdHnkLSBJbmRlcGVuZGVudCBvZiB0aGUgYXJndW1lbnRzLiBJbnNpZ25pZmljYW50IGNvbXBsZXhpdHkuHC0gTygxKS4YdW5ib25kBAEUdmFsdWXkATBCYWxhbmNlT2Y8VD4AAkxRAVNjaGVkdWxlIGEgcG9ydGlvbiBvZiB0aGUgc3Rhc2ggdG8gYmUgdW5sb2NrZWQgcmVhZHkgZm9yIHRyYW5zZmVyIG91dCBhZnRlciB0aGUgYm9uZPxwZXJpb2QgZW5kcy4gSWYgdGhpcyBsZWF2ZXMgYW4gYW1vdW50IGFjdGl2ZWx5IGJvbmRlZCBsZXNzIHRoYW4hAVQ6OkN1cnJlbmN5OjptaW5pbXVtX2JhbGFuY2UoKSwgdGhlbiBpdCBpcyBpbmNyZWFzZWQgdG8gdGhlIGZ1bGwgYW1vdW50LgBRAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBjb250cm9sbGVyLCBub3QgdGhlIHN0YXNoLgBFAU9uY2UgdGhlIHVubG9jayBwZXJpb2QgaXMgZG9uZSwgeW91IGNhbiBjYWxsIGB3aXRoZHJhd191bmJvbmRlZGAgdG8gYWN0dWFsbHkgbW92Zbx0aGUgZnVuZHMgb3V0IG9mIG1hbmFnZW1lbnQgcmVhZHkgZm9yIHRyYW5zZmVyLgAxAU5vIG1vcmUgdGhhbiBhIGxpbWl0ZWQgbnVtYmVyIG9mIHVubG9ja2luZyBjaHVua3MgKHNlZSBgTWF4VW5sb2NraW5nQ2h1bmtzYClBAWNhbiBjby1leGlzdHMgYXQgdGhlIHNhbWUgdGltZS4gSWYgdGhlcmUgYXJlIG5vIHVubG9ja2luZyBjaHVua3Mgc2xvdHMgYXZhaWxhYmxlRQFbYENhbGw6OndpdGhkcmF3X3VuYm9uZGVkYF0gaXMgY2FsbGVkIHRvIHJlbW92ZSBzb21lIG9mIHRoZSBjaHVua3MgKGlmIHBvc3NpYmxlKS4AOQFJZiBhIHVzZXIgZW5jb3VudGVycyB0aGUgYEluc3VmZmljaWVudEJvbmRgIGVycm9yIHdoZW4gY2FsbGluZyB0aGlzIGV4dHJpbnNpYywZAXRoZXkgc2hvdWxkIGNhbGwgYGNoaWxsYCBmaXJzdCBpbiBvcmRlciB0byBmcmVlIHVwIHRoZWlyIGJvbmRlZCBmdW5kcy4AREVtaXRzIGBVbmJvbmRlZGAuAJRTZWUgYWxzbyBbYENhbGw6OndpdGhkcmF3X3VuYm9uZGVkYF0uRHdpdGhkcmF3X3VuYm9uZGVkBAFIbnVtX3NsYXNoaW5nX3NwYW5zEAEMdTMyAANcKQFSZW1vdmUgYW55IHVubG9ja2VkIGNodW5rcyBmcm9tIHRoZSBgdW5sb2NraW5nYCBxdWV1ZSBmcm9tIG91ciBtYW5hZ2VtZW50LgBVAVRoaXMgZXNzZW50aWFsbHkgZnJlZXMgdXAgdGhhdCBiYWxhbmNlIHRvIGJlIHVzZWQgYnkgdGhlIHN0YXNoIGFjY291bnQgdG8gZG8gd2hhdGV2ZXIkaXQgd2FudHMuABUBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIuAEhFbWl0cyBgV2l0aGRyYXduYC4AaFNlZSBhbHNvIFtgQ2FsbDo6dW5ib25kYF0uADQjIyBQYXJhbWV0ZXJzAFEBLSBgbnVtX3NsYXNoaW5nX3NwYW5zYCBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBtZXRhZGF0YSBzbGFzaGluZyBzcGFucyB0byBjbGVhciB3aGVuVQF0aGlzIGNhbGwgcmVzdWx0cyBpbiBhIGNvbXBsZXRlIHJlbW92YWwgb2YgYWxsIHRoZSBkYXRhIHJlbGF0ZWQgdG8gdGhlIHN0YXNoIGFjY291bnQuPQFJbiB0aGlzIGNhc2UsIHRoZSBgbnVtX3NsYXNoaW5nX3NwYW5zYCBtdXN0IGJlIGxhcmdlciBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mXQFzbGFzaGluZyBzcGFucyBhc3NvY2lhdGVkIHdpdGggdGhlIHN0YXNoIGFjY291bnQgaW4gdGhlIFtgU2xhc2hpbmdTcGFuc2BdIHN0b3JhZ2UgdHlwZSwlAW90aGVyd2lzZSB0aGUgY2FsbCB3aWxsIGZhaWwuIFRoZSBjYWxsIHdlaWdodCBpcyBkaXJlY3RseSBwcm9wb3J0aW9uYWwgdG9UYG51bV9zbGFzaGluZ19zcGFuc2AuADQjIyBDb21wbGV4aXR52E8oUykgd2hlcmUgUyBpcyB0aGUgbnVtYmVyIG9mIHNsYXNoaW5nIHNwYW5zIHRvIHJlbW92ZQkBTk9URTogV2VpZ2h0IGFubm90YXRpb24gaXMgdGhlIGtpbGwgc2NlbmFyaW8sIHdlIHJlZnVuZCBvdGhlcndpc2UuIHZhbGlkYXRlBAEUcHJlZnOYAThWYWxpZGF0b3JQcmVmcwAEFOREZWNsYXJlIHRoZSBkZXNpcmUgdG8gdmFsaWRhdGUgZm9yIHRoZSBvcmlnaW4gY29udHJvbGxlci4A2EVmZmVjdHMgd2lsbCBiZSBmZWx0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXJhLgBRAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBjb250cm9sbGVyLCBub3QgdGhlIHN0YXNoLiBub21pbmF0ZQQBHHRhcmdldHPBAQFkVmVjPEFjY291bnRJZExvb2t1cE9mPFQ+PgAFKA0BRGVjbGFyZSB0aGUgZGVzaXJlIHRvIG5vbWluYXRlIGB0YXJnZXRzYCBmb3IgdGhlIG9yaWdpbiBjb250cm9sbGVyLgDYRWZmZWN0cyB3aWxsIGJlIGZlbHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBlcmEuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guADQjIyBDb21wbGV4aXR5LQEtIFRoZSB0cmFuc2FjdGlvbidzIGNvbXBsZXhpdHkgaXMgcHJvcG9ydGlvbmFsIHRvIHRoZSBzaXplIG9mIGB0YXJnZXRzYCAoTikFAXdoaWNoIGlzIGNhcHBlZCBhdCBDb21wYWN0QXNzaWdubWVudHM6OkxJTUlUIChUOjpNYXhOb21pbmF0aW9ucyku1C0gQm90aCB0aGUgcmVhZHMgYW5kIHdyaXRlcyBmb2xsb3cgYSBzaW1pbGFyIHBhdHRlcm4uFGNoaWxsAAYoxERlY2xhcmUgbm8gZGVzaXJlIHRvIGVpdGhlciB2YWxpZGF0ZSBvciBub21pbmF0ZS4A2EVmZmVjdHMgd2lsbCBiZSBmZWx0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXJhLgBRAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBjb250cm9sbGVyLCBub3QgdGhlIHN0YXNoLgA0IyMgQ29tcGxleGl0eeQtIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS5QLSBDb250YWlucyBvbmUgcmVhZC7ELSBXcml0ZXMgYXJlIGxpbWl0ZWQgdG8gdGhlIGBvcmlnaW5gIGFjY291bnQga2V5LiRzZXRfcGF5ZWUEARRwYXllZZABfFJld2FyZERlc3RpbmF0aW9uPFQ6OkFjY291bnRJZD4ABzC0KFJlLSlzZXQgdGhlIHBheW1lbnQgdGFyZ2V0IGZvciBhIGNvbnRyb2xsZXIuAFEBRWZmZWN0cyB3aWxsIGJlIGZlbHQgaW5zdGFudGx5IChhcyBzb29uIGFzIHRoaXMgZnVuY3Rpb24gaXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSkuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guADQjIyBDb21wbGV4aXR5GC0gTygxKeQtIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS6ULSBDb250YWlucyBhIGxpbWl0ZWQgbnVtYmVyIG9mIHJlYWRzLsQtIFdyaXRlcyBhcmUgbGltaXRlZCB0byB0aGUgYG9yaWdpbmAgYWNjb3VudCBrZXkuJC0tLS0tLS0tLThzZXRfY29udHJvbGxlcgAIOEUBKFJlLSlzZXRzIHRoZSBjb250cm9sbGVyIG9mIGEgc3Rhc2ggdG8gdGhlIHN0YXNoIGl0c2VsZi4gVGhpcyBmdW5jdGlvbiBwcmV2aW91c2x5TQFhY2NlcHRlZCBhIGBjb250cm9sbGVyYCBhcmd1bWVudCB0byBzZXQgdGhlIGNvbnRyb2xsZXIgdG8gYW4gYWNjb3VudCBvdGhlciB0aGFuIHRoZVkBc3Rhc2ggaXRzZWxmLiBUaGlzIGZ1bmN0aW9uYWxpdHkgaGFzIG5vdyBiZWVuIHJlbW92ZWQsIG5vdyBvbmx5IHNldHRpbmcgdGhlIGNvbnRyb2xsZXKMdG8gdGhlIHN0YXNoLCBpZiBpdCBpcyBub3QgYWxyZWFkeS4AUQFFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS4AUQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgc3Rhc2gsIG5vdCB0aGUgY29udHJvbGxlci4ANCMjIENvbXBsZXhpdHkQTygxKeQtIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS6ULSBDb250YWlucyBhIGxpbWl0ZWQgbnVtYmVyIG9mIHJlYWRzLsQtIFdyaXRlcyBhcmUgbGltaXRlZCB0byB0aGUgYG9yaWdpbmAgYWNjb3VudCBrZXkuTHNldF92YWxpZGF0b3JfY291bnQEAQxuZXfUAQx1MzIACRiQU2V0cyB0aGUgaWRlYWwgbnVtYmVyIG9mIHZhbGlkYXRvcnMuAIRUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC4ANCMjIENvbXBsZXhpdHkQTygxKWBpbmNyZWFzZV92YWxpZGF0b3JfY291bnQEAShhZGRpdGlvbmFs1AEMdTMyAAoc6EluY3JlbWVudHMgdGhlIGlkZWFsIG51bWJlciBvZiB2YWxpZGF0b3JzIHVwIHRvIG1heGltdW0gb2aMYEVsZWN0aW9uUHJvdmlkZXJCYXNlOjpNYXhXaW5uZXJzYC4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgA0IyMgQ29tcGxleGl0eZhTYW1lIGFzIFtgU2VsZjo6c2V0X3ZhbGlkYXRvcl9jb3VudGBdLlRzY2FsZV92YWxpZGF0b3JfY291bnQEARhmYWN0b3LFAQEcUGVyY2VudAALHBEBU2NhbGUgdXAgdGhlIGlkZWFsIG51bWJlciBvZiB2YWxpZGF0b3JzIGJ5IGEgZmFjdG9yIHVwIHRvIG1heGltdW0gb2aMYEVsZWN0aW9uUHJvdmlkZXJCYXNlOjpNYXhXaW5uZXJzYC4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgA0IyMgQ29tcGxleGl0eZhTYW1lIGFzIFtgU2VsZjo6c2V0X3ZhbGlkYXRvcl9jb3VudGBdLjRmb3JjZV9ub19lcmFzAAw0rEZvcmNlIHRoZXJlIHRvIGJlIG5vIG5ldyBlcmFzIGluZGVmaW5pdGVseS4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgAkIyBXYXJuaW5nABkBVGhlIGVsZWN0aW9uIHByb2Nlc3Mgc3RhcnRzIG11bHRpcGxlIGJsb2NrcyBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgZXJhLjkBVGh1cyB0aGUgZWxlY3Rpb24gcHJvY2VzcyBtYXkgYmUgb25nb2luZyB3aGVuIHRoaXMgaXMgY2FsbGVkLiBJbiB0aGlzIGNhc2UgdGhl3GVsZWN0aW9uIHdpbGwgY29udGludWUgdW50aWwgdGhlIG5leHQgZXJhIGlzIHRyaWdnZXJlZC4ANCMjIENvbXBsZXhpdHk8LSBObyBhcmd1bWVudHMuOC0gV2VpZ2h0OiBPKDEpNGZvcmNlX25ld19lcmEADThJAUZvcmNlIHRoZXJlIHRvIGJlIGEgbmV3IGVyYSBhdCB0aGUgZW5kIG9mIHRoZSBuZXh0IHNlc3Npb24uIEFmdGVyIHRoaXMsIGl0IHdpbGwgYmWccmVzZXQgdG8gbm9ybWFsIChub24tZm9yY2VkKSBiZWhhdmlvdXIuAIRUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC4AJCMgV2FybmluZwAZAVRoZSBlbGVjdGlvbiBwcm9jZXNzIHN0YXJ0cyBtdWx0aXBsZSBibG9ja3MgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIGVyYS5JAUlmIHRoaXMgaXMgY2FsbGVkIGp1c3QgYmVmb3JlIGEgbmV3IGVyYSBpcyB0cmlnZ2VyZWQsIHRoZSBlbGVjdGlvbiBwcm9jZXNzIG1heSBub3SMaGF2ZSBlbm91Z2ggYmxvY2tzIHRvIGdldCBhIHJlc3VsdC4ANCMjIENvbXBsZXhpdHk8LSBObyBhcmd1bWVudHMuOC0gV2VpZ2h0OiBPKDEpRHNldF9pbnZ1bG5lcmFibGVzBAE0aW52dWxuZXJhYmxlc7UBAURWZWM8VDo6QWNjb3VudElkPgAODMhTZXQgdGhlIHZhbGlkYXRvcnMgd2hvIGNhbm5vdCBiZSBzbGFzaGVkIChpZiBhbnkpLgCEVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuNGZvcmNlX3Vuc3Rha2UIARRzdGFzaAABMFQ6OkFjY291bnRJZAABSG51bV9zbGFzaGluZ19zcGFucxABDHUzMgAPIAkBRm9yY2UgYSBjdXJyZW50IHN0YWtlciB0byBiZWNvbWUgY29tcGxldGVseSB1bnN0YWtlZCwgaW1tZWRpYXRlbHkuAIRUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC4ANCMjIFBhcmFtZXRlcnMARQEtIGBudW1fc2xhc2hpbmdfc3BhbnNgOiBSZWZlciB0byBjb21tZW50cyBvbiBbYENhbGw6OndpdGhkcmF3X3VuYm9uZGVkYF0gZm9yIG1vcmUgZGV0YWlscy5QZm9yY2VfbmV3X2VyYV9hbHdheXMAECQBAUZvcmNlIHRoZXJlIHRvIGJlIGEgbmV3IGVyYSBhdCB0aGUgZW5kIG9mIHNlc3Npb25zIGluZGVmaW5pdGVseS4AhFRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LgAkIyBXYXJuaW5nABkBVGhlIGVsZWN0aW9uIHByb2Nlc3Mgc3RhcnRzIG11bHRpcGxlIGJsb2NrcyBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgZXJhLkkBSWYgdGhpcyBpcyBjYWxsZWQganVzdCBiZWZvcmUgYSBuZXcgZXJhIGlzIHRyaWdnZXJlZCwgdGhlIGVsZWN0aW9uIHByb2Nlc3MgbWF5IG5vdIxoYXZlIGVub3VnaCBibG9ja3MgdG8gZ2V0IGEgcmVzdWx0LlRjYW5jZWxfZGVmZXJyZWRfc2xhc2gIAQxlcmEQASBFcmFJbmRleAABNHNsYXNoX2luZGljZXPJAQEgVmVjPHUzMj4AERSUQ2FuY2VsIGVuYWN0bWVudCBvZiBhIGRlZmVycmVkIHNsYXNoLgCYQ2FuIGJlIGNhbGxlZCBieSB0aGUgYFQ6OkFkbWluT3JpZ2luYC4AAQFQYXJhbWV0ZXJzOiBlcmEgYW5kIGluZGljZXMgb2YgdGhlIHNsYXNoZXMgZm9yIHRoYXQgZXJhIHRvIGtpbGwuOHBheW91dF9zdGFrZXJzCAE8dmFsaWRhdG9yX3N0YXNoAAEwVDo6QWNjb3VudElkAAEMZXJhEAEgRXJhSW5kZXgAEjQZAVBheSBvdXQgbmV4dCBwYWdlIG9mIHRoZSBzdGFrZXJzIGJlaGluZCBhIHZhbGlkYXRvciBmb3IgdGhlIGdpdmVuIGVyYS4A6C0gYHZhbGlkYXRvcl9zdGFzaGAgaXMgdGhlIHN0YXNoIGFjY291bnQgb2YgdGhlIHZhbGlkYXRvci4xAS0gYGVyYWAgbWF5IGJlIGFueSBlcmEgYmV0d2VlbiBgW2N1cnJlbnRfZXJhIC0gaGlzdG9yeV9kZXB0aDsgY3VycmVudF9lcmFdYC4AVQFUaGUgb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLiBBbnkgYWNjb3VudCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLCBldmVuIGlmdGl0IGlzIG5vdCBvbmUgb2YgdGhlIHN0YWtlcnMuAEkBVGhlIHJld2FyZCBwYXlvdXQgY291bGQgYmUgcGFnZWQgaW4gY2FzZSB0aGVyZSBhcmUgdG9vIG1hbnkgbm9taW5hdG9ycyBiYWNraW5nIHRoZV0BYHZhbGlkYXRvcl9zdGFzaGAuIFRoaXMgY2FsbCB3aWxsIHBheW91dCB1bnBhaWQgcGFnZXMgaW4gYW4gYXNjZW5kaW5nIG9yZGVyLiBUbyBjbGFpbSBhtHNwZWNpZmljIHBhZ2UsIHVzZSBgcGF5b3V0X3N0YWtlcnNfYnlfcGFnZWAuYADwSWYgYWxsIHBhZ2VzIGFyZSBjbGFpbWVkLCBpdCByZXR1cm5zIGFuIGVycm9yIGBJbnZhbGlkUGFnZWAuGHJlYm9uZAQBFHZhbHVl5AEwQmFsYW5jZU9mPFQ+ABMc3FJlYm9uZCBhIHBvcnRpb24gb2YgdGhlIHN0YXNoIHNjaGVkdWxlZCB0byBiZSB1bmxvY2tlZC4A1FRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBzaWduZWQgYnkgdGhlIGNvbnRyb2xsZXIuADQjIyBDb21wbGV4aXR50C0gVGltZSBjb21wbGV4aXR5OiBPKEwpLCB3aGVyZSBMIGlzIHVubG9ja2luZyBjaHVua3OILSBCb3VuZGVkIGJ5IGBNYXhVbmxvY2tpbmdDaHVua3NgLihyZWFwX3N0YXNoCAEUc3Rhc2gAATBUOjpBY2NvdW50SWQAAUhudW1fc2xhc2hpbmdfc3BhbnMQAQx1MzIAFEhdAVJlbW92ZSBhbGwgZGF0YSBzdHJ1Y3R1cmVzIGNvbmNlcm5pbmcgYSBzdGFrZXIvc3Rhc2ggb25jZSBpdCBpcyBhdCBhIHN0YXRlIHdoZXJlIGl0IGNhbgUBYmUgY29uc2lkZXJlZCBgZHVzdGAgaW4gdGhlIHN0YWtpbmcgc3lzdGVtLiBUaGUgcmVxdWlyZW1lbnRzIGFyZToABQExLiB0aGUgYHRvdGFsX2JhbGFuY2VgIG9mIHRoZSBzdGFzaCBpcyBiZWxvdyBleGlzdGVudGlhbCBkZXBvc2l0LhEBMi4gb3IsIHRoZSBgbGVkZ2VyLnRvdGFsYCBvZiB0aGUgc3Rhc2ggaXMgYmVsb3cgZXhpc3RlbnRpYWwgZGVwb3NpdC5hATMuIG9yLCBleGlzdGVudGlhbCBkZXBvc2l0IGlzIHplcm8gYW5kIGVpdGhlciBgdG90YWxfYmFsYW5jZWAgb3IgYGxlZGdlci50b3RhbGAgaXMgemVyby4AVQFUaGUgZm9ybWVyIGNhbiBoYXBwZW4gaW4gY2FzZXMgbGlrZSBhIHNsYXNoOyB0aGUgbGF0dGVyIHdoZW4gYSBmdWxseSB1bmJvbmRlZCBhY2NvdW50CQFpcyBzdGlsbCByZWNlaXZpbmcgc3Rha2luZyByZXdhcmRzIGluIGBSZXdhcmREZXN0aW5hdGlvbjo6U3Rha2VkYC4AMQFJdCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZSwgYXMgbG9uZyBhcyBgc3Rhc2hgIG1lZXRzIHRoZSBhYm92ZSByZXF1aXJlbWVudHMuANxSZWZ1bmRzIHRoZSB0cmFuc2FjdGlvbiBmZWVzIHVwb24gc3VjY2Vzc2Z1bCBleGVjdXRpb24uADQjIyBQYXJhbWV0ZXJzAEUBLSBgbnVtX3NsYXNoaW5nX3NwYW5zYDogUmVmZXIgdG8gY29tbWVudHMgb24gW2BDYWxsOjp3aXRoZHJhd191bmJvbmRlZGBdIGZvciBtb3JlIGRldGFpbHMuEGtpY2sEAQx3aG/BAQFkVmVjPEFjY291bnRJZExvb2t1cE9mPFQ+PgAVLOBSZW1vdmUgdGhlIGdpdmVuIG5vbWluYXRpb25zIGZyb20gdGhlIGNhbGxpbmcgdmFsaWRhdG9yLgDYRWZmZWN0cyB3aWxsIGJlIGZlbHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBlcmEuAFEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guAE0BLSBgd2hvYDogQSBsaXN0IG9mIG5vbWluYXRvciBzdGFzaCBhY2NvdW50cyB3aG8gYXJlIG5vbWluYXRpbmcgdGhpcyB2YWxpZGF0b3Igd2hpY2jAICBzaG91bGQgbm8gbG9uZ2VyIGJlIG5vbWluYXRpbmcgdGhpcyB2YWxpZGF0b3IuAFUBTm90ZTogTWFraW5nIHRoaXMgY2FsbCBvbmx5IG1ha2VzIHNlbnNlIGlmIHlvdSBmaXJzdCBzZXQgdGhlIHZhbGlkYXRvciBwcmVmZXJlbmNlcyB0b3hibG9jayBhbnkgZnVydGhlciBub21pbmF0aW9ucy5Mc2V0X3N0YWtpbmdfY29uZmlncxwBSG1pbl9ub21pbmF0b3JfYm9uZM0BAVhDb25maWdPcDxCYWxhbmNlT2Y8VD4+AAFIbWluX3ZhbGlkYXRvcl9ib25kzQEBWENvbmZpZ09wPEJhbGFuY2VPZjxUPj4AAUxtYXhfbm9taW5hdG9yX2NvdW500QEBNENvbmZpZ09wPHUzMj4AAUxtYXhfdmFsaWRhdG9yX2NvdW500QEBNENvbmZpZ09wPHUzMj4AATxjaGlsbF90aHJlc2hvbGTVAQFEQ29uZmlnT3A8UGVyY2VudD4AAThtaW5fY29tbWlzc2lvbtkBAURDb25maWdPcDxQZXJiaWxsPgABSG1heF9zdGFrZWRfcmV3YXJkc9UBAURDb25maWdPcDxQZXJjZW50PgAWRKxVcGRhdGUgdGhlIHZhcmlvdXMgc3Rha2luZyBjb25maWd1cmF0aW9ucyAuACUBKiBgbWluX25vbWluYXRvcl9ib25kYDogVGhlIG1pbmltdW0gYWN0aXZlIGJvbmQgbmVlZGVkIHRvIGJlIGEgbm9taW5hdG9yLiUBKiBgbWluX3ZhbGlkYXRvcl9ib25kYDogVGhlIG1pbmltdW0gYWN0aXZlIGJvbmQgbmVlZGVkIHRvIGJlIGEgdmFsaWRhdG9yLlUBKiBgbWF4X25vbWluYXRvcl9jb3VudGA6IFRoZSBtYXggbnVtYmVyIG9mIHVzZXJzIHdobyBjYW4gYmUgYSBub21pbmF0b3IgYXQgb25jZS4gV2hlbpggIHNldCB0byBgTm9uZWAsIG5vIGxpbWl0IGlzIGVuZm9yY2VkLlUBKiBgbWF4X3ZhbGlkYXRvcl9jb3VudGA6IFRoZSBtYXggbnVtYmVyIG9mIHVzZXJzIHdobyBjYW4gYmUgYSB2YWxpZGF0b3IgYXQgb25jZS4gV2hlbpggIHNldCB0byBgTm9uZWAsIG5vIGxpbWl0IGlzIGVuZm9yY2VkLlkBKiBgY2hpbGxfdGhyZXNob2xkYDogVGhlIHJhdGlvIG9mIGBtYXhfbm9taW5hdG9yX2NvdW50YCBvciBgbWF4X3ZhbGlkYXRvcl9jb3VudGAgd2hpY2gZASAgc2hvdWxkIGJlIGZpbGxlZCBpbiBvcmRlciBmb3IgdGhlIGBjaGlsbF9vdGhlcmAgdHJhbnNhY3Rpb24gdG8gd29yay5hASogYG1pbl9jb21taXNzaW9uYDogVGhlIG1pbmltdW0gYW1vdW50IG9mIGNvbW1pc3Npb24gdGhhdCBlYWNoIHZhbGlkYXRvcnMgbXVzdCBtYWludGFpbi5VASAgVGhpcyBpcyBjaGVja2VkIG9ubHkgdXBvbiBjYWxsaW5nIGB2YWxpZGF0ZWAuIEV4aXN0aW5nIHZhbGlkYXRvcnMgYXJlIG5vdCBhZmZlY3RlZC4AxFJ1bnRpbWVPcmlnaW4gbXVzdCBiZSBSb290IHRvIGNhbGwgdGhpcyBmdW5jdGlvbi4ANQFOT1RFOiBFeGlzdGluZyBub21pbmF0b3JzIGFuZCB2YWxpZGF0b3JzIHdpbGwgbm90IGJlIGFmZmVjdGVkIGJ5IHRoaXMgdXBkYXRlLhEBdG8ga2ljayBwZW9wbGUgdW5kZXIgdGhlIG5ldyBsaW1pdHMsIGBjaGlsbF9vdGhlcmAgc2hvdWxkIGJlIGNhbGxlZC4sY2hpbGxfb3RoZXIEARRzdGFzaAABMFQ6OkFjY291bnRJZAAXaEEBRGVjbGFyZSBhIGBjb250cm9sbGVyYCB0byBzdG9wIHBhcnRpY2lwYXRpbmcgYXMgZWl0aGVyIGEgdmFsaWRhdG9yIG9yIG5vbWluYXRvci4A2EVmZmVjdHMgd2lsbCBiZSBmZWx0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXJhLgBBAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLCBidXQgY2FuIGJlIGNhbGxlZCBieSBhbnlvbmUuAFkBSWYgdGhlIGNhbGxlciBpcyB0aGUgc2FtZSBhcyB0aGUgY29udHJvbGxlciBiZWluZyB0YXJnZXRlZCwgdGhlbiBubyBmdXJ0aGVyIGNoZWNrcyBhcmXYZW5mb3JjZWQsIGFuZCB0aGlzIGZ1bmN0aW9uIGJlaGF2ZXMganVzdCBsaWtlIGBjaGlsbGAuAF0BSWYgdGhlIGNhbGxlciBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgY29udHJvbGxlciBiZWluZyB0YXJnZXRlZCwgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zMG11c3QgYmUgbWV0OgAdASogYGNvbnRyb2xsZXJgIG11c3QgYmVsb25nIHRvIGEgbm9taW5hdG9yIHdobyBoYXMgYmVjb21lIG5vbi1kZWNvZGFibGUsAAxPcjoAPQEqIEEgYENoaWxsVGhyZXNob2xkYCBtdXN0IGJlIHNldCBhbmQgY2hlY2tlZCB3aGljaCBkZWZpbmVzIGhvdyBjbG9zZSB0byB0aGUgbWF4VQEgIG5vbWluYXRvcnMgb3IgdmFsaWRhdG9ycyB3ZSBtdXN0IHJlYWNoIGJlZm9yZSB1c2VycyBjYW4gc3RhcnQgY2hpbGxpbmcgb25lLWFub3RoZXIuWQEqIEEgYE1heE5vbWluYXRvckNvdW50YCBhbmQgYE1heFZhbGlkYXRvckNvdW50YCBtdXN0IGJlIHNldCB3aGljaCBpcyB1c2VkIHRvIGRldGVybWluZZAgIGhvdyBjbG9zZSB3ZSBhcmUgdG8gdGhlIHRocmVzaG9sZC5dASogQSBgTWluTm9taW5hdG9yQm9uZGAgYW5kIGBNaW5WYWxpZGF0b3JCb25kYCBtdXN0IGJlIHNldCBhbmQgY2hlY2tlZCwgd2hpY2ggZGV0ZXJtaW5lc1EBICBpZiB0aGlzIGlzIGEgcGVyc29uIHRoYXQgc2hvdWxkIGJlIGNoaWxsZWQgYmVjYXVzZSB0aGV5IGhhdmUgbm90IG1ldCB0aGUgdGhyZXNob2xkQCAgYm9uZCByZXF1aXJlZC4AVQFUaGlzIGNhbiBiZSBoZWxwZnVsIGlmIGJvbmQgcmVxdWlyZW1lbnRzIGFyZSB1cGRhdGVkLCBhbmQgd2UgbmVlZCB0byByZW1vdmUgb2xkIHVzZXJzmHdobyBkbyBub3Qgc2F0aXNmeSB0aGVzZSByZXF1aXJlbWVudHMuaGZvcmNlX2FwcGx5X21pbl9jb21taXNzaW9uBAE8dmFsaWRhdG9yX3N0YXNoAAEwVDo6QWNjb3VudElkABgMRQFGb3JjZSBhIHZhbGlkYXRvciB0byBoYXZlIGF0IGxlYXN0IHRoZSBtaW5pbXVtIGNvbW1pc3Npb24uIFRoaXMgd2lsbCBub3QgYWZmZWN0IGFhAXZhbGlkYXRvciB3aG8gYWxyZWFkeSBoYXMgYSBjb21taXNzaW9uIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbWluaW11bS4gQW55IGFjY291bnQ4Y2FuIGNhbGwgdGhpcy5Ic2V0X21pbl9jb21taXNzaW9uBAEMbmV3lAEcUGVyYmlsbAAZECUBU2V0cyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tbWlzc2lvbiB0aGF0IGVhY2ggdmFsaWRhdG9ycyBtdXN0IG1haW50YWluLgBZAVRoaXMgY2FsbCBoYXMgbG93ZXIgcHJpdmlsZWdlIHJlcXVpcmVtZW50cyB0aGFuIGBzZXRfc3Rha2luZ19jb25maWdgIGFuZCBjYW4gYmUgY2FsbGVkzGJ5IHRoZSBgVDo6QWRtaW5PcmlnaW5gLiBSb290IGNhbiBhbHdheXMgY2FsbCB0aGlzLlhwYXlvdXRfc3Rha2Vyc19ieV9wYWdlDAE8dmFsaWRhdG9yX3N0YXNoAAEwVDo6QWNjb3VudElkAAEMZXJhEAEgRXJhSW5kZXgAARBwYWdlEAEQUGFnZQAaRDEBUGF5IG91dCBhIHBhZ2Ugb2YgdGhlIHN0YWtlcnMgYmVoaW5kIGEgdmFsaWRhdG9yIGZvciB0aGUgZ2l2ZW4gZXJhIGFuZCBwYWdlLgDoLSBgdmFsaWRhdG9yX3N0YXNoYCBpcyB0aGUgc3Rhc2ggYWNjb3VudCBvZiB0aGUgdmFsaWRhdG9yLjEBLSBgZXJhYCBtYXkgYmUgYW55IGVyYSBiZXR3ZWVuIGBbY3VycmVudF9lcmEgLSBoaXN0b3J5X2RlcHRoOyBjdXJyZW50X2VyYV1gLjEBLSBgcGFnZWAgaXMgdGhlIHBhZ2UgaW5kZXggb2Ygbm9taW5hdG9ycyB0byBwYXkgb3V0IHdpdGggdmFsdWUgYmV0d2VlbiAwIGFuZLAgIGBudW1fbm9taW5hdG9ycyAvIFQ6Ok1heEV4cG9zdXJlUGFnZVNpemVgLgBVAVRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uIEFueSBhY2NvdW50IGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24sIGV2ZW4gaWZ0aXQgaXMgbm90IG9uZSBvZiB0aGUgc3Rha2Vycy4APQFJZiBhIHZhbGlkYXRvciBoYXMgbW9yZSB0aGFuIFtgQ29uZmlnOjpNYXhFeHBvc3VyZVBhZ2VTaXplYF0gbm9taW5hdG9ycyBiYWNraW5nKQF0aGVtLCB0aGVuIHRoZSBsaXN0IG9mIG5vbWluYXRvcnMgaXMgcGFnZWQsIHdpdGggZWFjaCBwYWdlIGJlaW5nIGNhcHBlZCBhdFUBW2BDb25maWc6Ok1heEV4cG9zdXJlUGFnZVNpemVgLl0gSWYgYSB2YWxpZGF0b3IgaGFzIG1vcmUgdGhhbiBvbmUgcGFnZSBvZiBub21pbmF0b3JzLEkBdGhlIGNhbGwgbmVlZHMgdG8gYmUgbWFkZSBmb3IgZWFjaCBwYWdlIHNlcGFyYXRlbHkgaW4gb3JkZXIgZm9yIGFsbCB0aGUgbm9taW5hdG9yc1UBYmFja2luZyBhIHZhbGlkYXRvciB0byByZWNlaXZlIHRoZSByZXdhcmQuIFRoZSBub21pbmF0b3JzIGFyZSBub3Qgc29ydGVkIGFjcm9zcyBwYWdlc2EBYW5kIHNvIGl0IHNob3VsZCBub3QgYmUgYXNzdW1lZCB0aGUgaGlnaGVzdCBzdGFrZXIgd291bGQgYmUgb24gdGhlIHRvcG1vc3QgcGFnZSBhbmQgdmljZUkBdmVyc2EuIElmIHJld2FyZHMgYXJlIG5vdCBjbGFpbWVkIGluIFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLCB0aGV5IGFyZSBsb3N0LjB1cGRhdGVfcGF5ZWUEAShjb250cm9sbGVyAAEwVDo6QWNjb3VudElkABsY4E1pZ3JhdGVzIGFuIGFjY291bnQncyBgUmV3YXJkRGVzdGluYXRpb246OkNvbnRyb2xsZXJgIHRvpGBSZXdhcmREZXN0aW5hdGlvbjo6QWNjb3VudChjb250cm9sbGVyKWAuAFEBRWZmZWN0cyB3aWxsIGJlIGZlbHQgaW5zdGFudGx5IChhcyBzb29uIGFzIHRoaXMgZnVuY3Rpb24gaXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSkuADEBVGhpcyB3aWxsIHdhaXZlIHRoZSB0cmFuc2FjdGlvbiBmZWUgaWYgdGhlIGBwYXllZWAgaXMgc3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkLmhkZXByZWNhdGVfY29udHJvbGxlcl9iYXRjaAQBLGNvbnRyb2xsZXJz3QEB9EJvdW5kZWRWZWM8VDo6QWNjb3VudElkLCBUOjpNYXhDb250cm9sbGVyc0luRGVwcmVjYXRpb25CYXRjaD4AHBxdAVVwZGF0ZXMgYSBiYXRjaCBvZiBjb250cm9sbGVyIGFjY291bnRzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgc3Rhc2ggYWNjb3VudCBpZiB0aGV5IGFyZWEBbm90IHRoZSBzYW1lLiBJZ25vcmVzIGFueSBjb250cm9sbGVyIGFjY291bnRzIHRoYXQgZG8gbm90IGV4aXN0LCBhbmQgZG9lcyBub3Qgb3BlcmF0ZSBpZrh0aGUgc3Rhc2ggYW5kIGNvbnRyb2xsZXIgYXJlIGFscmVhZHkgdGhlIHNhbWUuAFEBRWZmZWN0cyB3aWxsIGJlIGZlbHQgaW5zdGFudGx5IChhcyBzb29uIGFzIHRoaXMgZnVuY3Rpb24gaXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSkuALRUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgYFQ6OkFkbWluT3JpZ2luYC44cmVzdG9yZV9sZWRnZXIQARRzdGFzaAABMFQ6OkFjY291bnRJZAABQG1heWJlX2NvbnRyb2xsZXLhAQFQT3B0aW9uPFQ6OkFjY291bnRJZD4AASxtYXliZV90b3RhbOUBAVBPcHRpb248QmFsYW5jZU9mPFQ+PgABPG1heWJlX3VubG9ja2luZ+kBARUBT3B0aW9uPEJvdW5kZWRWZWM8VW5sb2NrQ2h1bms8QmFsYW5jZU9mPFQ+PiwgVDo6Ck1heFVubG9ja2luZ0NodW5rcz4+AB0sBQFSZXN0b3JlcyB0aGUgc3RhdGUgb2YgYSBsZWRnZXIgd2hpY2ggaXMgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLgDcVGhlIHJlcXVpcmVtZW50cyB0byByZXN0b3JlIGEgbGVkZ2VyIGFyZSB0aGUgZm9sbG93aW5nOmQqIFRoZSBzdGFzaCBpcyBib25kZWQ7IG9yDQEqIFRoZSBzdGFzaCBpcyBub3QgYm9uZGVkIGJ1dCBpdCBoYXMgYSBzdGFraW5nIGxvY2sgbGVmdCBiZWhpbmQ7IG9yJQEqIElmIHRoZSBzdGFzaCBoYXMgYW4gYXNzb2NpYXRlZCBsZWRnZXIgYW5kIGl0cyBzdGF0ZSBpcyBpbmNvbnNpc3RlbnQ7IG9yHQEqIElmIHRoZSBsZWRnZXIgaXMgbm90IGNvcnJ1cHRlZCAqYnV0KiBpdHMgc3Rha2luZyBsb2NrIGlzIG91dCBvZiBzeW5jLgBhAVRoZSBgbWF5YmVfKmAgaW5wdXQgcGFyYW1ldGVycyB3aWxsIG92ZXJ3cml0ZSB0aGUgY29ycmVzcG9uZGluZyBkYXRhIGFuZCBtZXRhZGF0YSBvZiB0aGVZAWxlZGdlciBhc3NvY2lhdGVkIHdpdGggdGhlIHN0YXNoLiBJZiB0aGUgaW5wdXQgcGFyYW1ldGVycyBhcmUgbm90IHNldCwgdGhlIGxlZGdlciB3aWxskGJlIHJlc2V0IHZhbHVlcyBmcm9tIG9uLWNoYWluIHN0YXRlLkh3aXRoZHJhd19vdmVyc3Rha2UEARRzdGFzaAABMFQ6OkFjY291bnRJZAAgGA0BQWRqdXN0cyB0aGUgc3Rha2luZyBsZWRnZXIgYnkgd2l0aGRyYXdpbmcgYW55IGV4Y2VzcyBzdGFrZWQgYW1vdW50LgAhAVRoaXMgZnVuY3Rpb24gY29ycmVjdHMgY2FzZXMgd2hlcmUgYSB1c2VyJ3MgcmVjb3JkZWQgc3Rha2UgaW4gdGhlIGxlZGdlckEBZXhjZWVkcyB0aGVpciBhY3R1YWwgc3Rha2VkIGZ1bmRzLiBUaGlzIHNpdHVhdGlvbiBjYW4gYXJpc2UgZHVlIHRvIGNhc2VzIHN1Y2ggYXNNAWV4dGVybmFsIHNsYXNoaW5nIGJ5IGFub3RoZXIgcGFsbGV0LCBsZWFkaW5nIHRvIGFuIGluY29uc2lzdGVuY3kgYmV0d2VlbiB0aGUgbGVkZ2VyVGFuZCB0aGUgYWN0dWFsIHN0YWtlLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7BAQAAAqUBAMUBDDRzcF9hcml0aG1ldGljKHBlcl90aGluZ3McUGVyY2VudAAABAAIAQh1OAAAyQEAAAIQAM0BEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0IENvbmZpZ09wBARUARgBDBBOb29wAAAADFNldAQAGAEEVAABABhSZW1vdmUAAgAA0QEQOHBhbGxldF9zdGFraW5nGHBhbGxldBhwYWxsZXQgQ29uZmlnT3AEBFQBEAEMEE5vb3AAAAAMU2V0BAAQAQRUAAEAGFJlbW92ZQACAADVARA4cGFsbGV0X3N0YWtpbmcYcGFsbGV0GHBhbGxldCBDb25maWdPcAQEVAHFAQEMEE5vb3AAAAAMU2V0BADFAQEEVAABABhSZW1vdmUAAgAA2QEQOHBhbGxldF9zdGFraW5nGHBhbGxldBhwYWxsZXQgQ29uZmlnT3AEBFQBlAEMEE5vb3AAAAAMU2V0BACUAQRUAAEAGFJlbW92ZQACAADdAQxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQAEUwAABAC1AQEYVmVjPFQ+AADhAQQYT3B0aW9uBARUAQABCBBOb25lAAAAEFNvbWUEAAAAAAEAAOUBBBhPcHRpb24EBFQBGAEIEE5vbmUAAAAQU29tZQQAGAAAAQAA6QEEGE9wdGlvbgQEVAHtAQEIEE5vbmUAAAAQU29tZQQA7QEAAAEAAO0BDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQB8QEEUwAABAD1AQEYVmVjPFQ+AADxAQg4cGFsbGV0X3N0YWtpbmcsVW5sb2NrQ2h1bmsEHEJhbGFuY2UBGAAIARR2YWx1ZeQBHEJhbGFuY2UAAQxlcmHUASBFcmFJbmRleAAA9QEAAALxAQD5AQw4cGFsbGV0X3Nlc3Npb24YcGFsbGV0EENhbGwEBFQAAQggc2V0X2tleXMIARBrZXlz/QEBHFQ6OktleXMAARRwcm9vZjgBHFZlYzx1OD4AACTkU2V0cyB0aGUgc2Vzc2lvbiBrZXkocykgb2YgdGhlIGZ1bmN0aW9uIGNhbGxlciB0byBga2V5c2AuHQFBbGxvd3MgYW4gYWNjb3VudCB0byBzZXQgaXRzIHNlc3Npb24ga2V5IHByaW9yIHRvIGJlY29taW5nIGEgdmFsaWRhdG9yLsBUaGlzIGRvZXNuJ3QgdGFrZSBlZmZlY3QgdW50aWwgdGhlIG5leHQgc2Vzc2lvbi4A0FRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHNpZ25lZC4ANCMjIENvbXBsZXhpdHlZAS0gYE8oMSlgLiBBY3R1YWwgY29zdCBkZXBlbmRzIG9uIHRoZSBudW1iZXIgb2YgbGVuZ3RoIG9mIGBUOjpLZXlzOjprZXlfaWRzKClgIHdoaWNoIGlzICAgZml4ZWQuKHB1cmdlX2tleXMAATDIUmVtb3ZlcyBhbnkgc2Vzc2lvbiBrZXkocykgb2YgdGhlIGZ1bmN0aW9uIGNhbGxlci4AwFRoaXMgZG9lc24ndCB0YWtlIGVmZmVjdCB1bnRpbCB0aGUgbmV4dCBzZXNzaW9uLgBVAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIFNpZ25lZCBhbmQgdGhlIGFjY291bnQgbXVzdCBiZSBlaXRoZXIgYmVdAWNvbnZlcnRpYmxlIHRvIGEgdmFsaWRhdG9yIElEIHVzaW5nIHRoZSBjaGFpbidzIHR5cGljYWwgYWRkcmVzc2luZyBzeXN0ZW0gKHRoaXMgdXN1YWxseVEBbWVhbnMgYmVpbmcgYSBjb250cm9sbGVyIGFjY291bnQpIG9yIGRpcmVjdGx5IGNvbnZlcnRpYmxlIGludG8gYSB2YWxpZGF0b3IgSUQgKHdoaWNolHVzdWFsbHkgbWVhbnMgYmVpbmcgYSBzdGFzaCBhY2NvdW50KS4ANCMjIENvbXBsZXhpdHk9AS0gYE8oMSlgIGluIG51bWJlciBvZiBrZXkgdHlwZXMuIEFjdHVhbCBjb3N0IGRlcGVuZHMgb24gdGhlIG51bWJlciBvZiBsZW5ndGggb2aYICBgVDo6S2V5czo6a2V5X2lkcygpYCB3aGljaCBpcyBmaXhlZC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMu/QEIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWUsU2Vzc2lvbktleXMAABgBHGdyYW5kcGG8AdA8R3JhbmRwYSBhcyAkY3JhdGU6OkJvdW5kVG9SdW50aW1lQXBwUHVibGljPjo6UHVibGljAAEQYmFiZYUBAcQ8QmFiZSBhcyAkY3JhdGU6OkJvdW5kVG9SdW50aW1lQXBwUHVibGljPjo6UHVibGljAAE4cGFyYV92YWxpZGF0b3IBAgHgPEluaXRpYWxpemVyIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWMAATxwYXJhX2Fzc2lnbm1lbnQFAgHwPFBhcmFTZXNzaW9uSW5mbyBhcyAkY3JhdGU6OkJvdW5kVG9SdW50aW1lQXBwUHVibGljPjo6UHVibGljAAFMYXV0aG9yaXR5X2Rpc2NvdmVyeQkCAfw8QXV0aG9yaXR5RGlzY292ZXJ5IGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWMAARRiZWVmeQ0CAcg8QmVlZnkgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpYwAAAQIQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjg0dmFsaWRhdG9yX2FwcBhQdWJsaWMAAAQABAE8c3IyNTUxOTo6UHVibGljAAAFAhBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODhhc3NpZ25tZW50X2FwcBhQdWJsaWMAAAQABAE8c3IyNTUxOTo6UHVibGljAAAJAgxYc3BfYXV0aG9yaXR5X2Rpc2NvdmVyeQxhcHAYUHVibGljAAAEAAQBPHNyMjU1MTk6OlB1YmxpYwAADQIMSHNwX2NvbnNlbnN1c19iZWVmeTBlY2RzYV9jcnlwdG8YUHVibGljAAAEABECATRlY2RzYTo6UHVibGljAAARAgAAAyEAAAAIABUCDDhwYWxsZXRfZ3JhbmRwYRhwYWxsZXQQQ2FsbAQEVAABDExyZXBvcnRfZXF1aXZvY2F0aW9uCAFIZXF1aXZvY2F0aW9uX3Byb29mGQIByEJveDxFcXVpdm9jYXRpb25Qcm9vZjxUOjpIYXNoLCBCbG9ja051bWJlckZvcjxUPj4+AAE8a2V5X293bmVyX3Byb29mjQEBQFQ6OktleU93bmVyUHJvb2YAABAJAVJlcG9ydCB2b3RlciBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5IHRoZfRlcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29m+GFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci4gSWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlRHdpbGwgYmUgcmVwb3J0ZWQucHJlcG9ydF9lcXVpdm9jYXRpb25fdW5zaWduZWQIAUhlcXVpdm9jYXRpb25fcHJvb2YZAgHIQm94PEVxdWl2b2NhdGlvblByb29mPFQ6Okhhc2gsIEJsb2NrTnVtYmVyRm9yPFQ+Pj4AATxrZXlfb3duZXJfcHJvb2aNAQFAVDo6S2V5T3duZXJQcm9vZgABJAkBUmVwb3J0IHZvdGVyIGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhl9GVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2b4YWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2VEd2lsbCBiZSByZXBvcnRlZC4ADQFUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx5FQFibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2gVAWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbiRyZXBvcnRlci4wbm90ZV9zdGFsbGVkCAEUZGVsYXkQAURCbG9ja051bWJlckZvcjxUPgABbGJlc3RfZmluYWxpemVkX2Jsb2NrX251bWJlchABREJsb2NrTnVtYmVyRm9yPFQ+AAIwPQFOb3RlIHRoYXQgdGhlIGN1cnJlbnQgYXV0aG9yaXR5IHNldCBvZiB0aGUgR1JBTkRQQSBmaW5hbGl0eSBnYWRnZXQgaGFzIHN0YWxsZWQuAGEBVGhpcyB3aWxsIHRyaWdnZXIgYSBmb3JjZWQgYXV0aG9yaXR5IHNldCBjaGFuZ2UgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBzZXNzaW9uLCB0b2EBYmUgZW5hY3RlZCBgZGVsYXlgIGJsb2NrcyBhZnRlciB0aGF0LiBUaGUgYGRlbGF5YCBzaG91bGQgYmUgaGlnaCBlbm91Z2ggdG8gc2FmZWx5IGFzc3VtZUkBdGhhdCB0aGUgYmxvY2sgc2lnbmFsbGluZyB0aGUgZm9yY2VkIGNoYW5nZSB3aWxsIG5vdCBiZSByZS1vcmdlZCBlLmcuIDEwMDAgYmxvY2tzLl0BVGhlIGJsb2NrIHByb2R1Y3Rpb24gcmF0ZSAod2hpY2ggbWF5IGJlIHNsb3dlZCBkb3duIGJlY2F1c2Ugb2YgZmluYWxpdHkgbGFnZ2luZykgc2hvdWxkUQFiZSB0YWtlbiBpbnRvIGFjY291bnQgd2hlbiBjaG9vc2luZyB0aGUgYGRlbGF5YC4gVGhlIEdSQU5EUEEgdm90ZXJzIGJhc2VkIG9uIHRoZSBuZXdVAWF1dGhvcml0eSB3aWxsIHN0YXJ0IHZvdGluZyBvbiB0b3Agb2YgYGJlc3RfZmluYWxpemVkX2Jsb2NrX251bWJlcmAgZm9yIG5ldyBmaW5hbGl6ZWRNAWJsb2Nrcy4gYGJlc3RfZmluYWxpemVkX2Jsb2NrX251bWJlcmAgc2hvdWxkIGJlIHRoZSBoaWdoZXN0IG9mIHRoZSBsYXRlc3QgZmluYWxpemVkxGJsb2NrIG9mIGFsbCB2YWxpZGF0b3JzIG9mIHRoZSBuZXcgYXV0aG9yaXR5IHNldC4AWE9ubHkgY2FsbGFibGUgYnkgcm9vdC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuGQIIUHNwX2NvbnNlbnN1c19ncmFuZHBhREVxdWl2b2NhdGlvblByb29mCARIATQETgEQAAgBGHNldF9pZDABFFNldElkAAEwZXF1aXZvY2F0aW9uHQIBSEVxdWl2b2NhdGlvbjxILCBOPgAAHQIIUHNwX2NvbnNlbnN1c19ncmFuZHBhMEVxdWl2b2NhdGlvbggESAE0BE4BEAEIHFByZXZvdGUEACECAYkBZmluYWxpdHlfZ3JhbmRwYTo6RXF1aXZvY2F0aW9uPEF1dGhvcml0eUlkLCBmaW5hbGl0eV9ncmFuZHBhOjpQcmV2b3RlPApILCBOPiwgQXV0aG9yaXR5U2lnbmF0dXJlLD4AAAAkUHJlY29tbWl0BAA1AgGRAWZpbmFsaXR5X2dyYW5kcGE6OkVxdWl2b2NhdGlvbjxBdXRob3JpdHlJZCwgZmluYWxpdHlfZ3JhbmRwYTo6UHJlY29tbWl0CjxILCBOPiwgQXV0aG9yaXR5U2lnbmF0dXJlLD4AAQAAIQIIQGZpbmFsaXR5X2dyYW5kcGEwRXF1aXZvY2F0aW9uDAhJZAG8BFYBJQIEUwEpAgAQATByb3VuZF9udW1iZXIwAQx1NjQAASBpZGVudGl0ebwBCElkAAEUZmlyc3QxAgEYKFYsIFMpAAEYc2Vjb25kMQIBGChWLCBTKQAAJQIIQGZpbmFsaXR5X2dyYW5kcGEcUHJldm90ZQgESAE0BE4BEAAIASx0YXJnZXRfaGFzaDQBBEgAATR0YXJnZXRfbnVtYmVyEAEETgAAKQIMUHNwX2NvbnNlbnN1c19ncmFuZHBhDGFwcCRTaWduYXR1cmUAAAQALQIBSGVkMjU1MTk6OlNpZ25hdHVyZQAALQIAAANAAAAACAAxAgAABAglAikCADUCCEBmaW5hbGl0eV9ncmFuZHBhMEVxdWl2b2NhdGlvbgwISWQBvARWATkCBFMBKQIAEAEwcm91bmRfbnVtYmVyMAEMdTY0AAEgaWRlbnRpdHm8AQhJZAABFGZpcnN0PQIBGChWLCBTKQABGHNlY29uZD0CARgoViwgUykAADkCCEBmaW5hbGl0eV9ncmFuZHBhJFByZWNvbW1pdAgESAE0BE4BEAAIASx0YXJnZXRfaGFzaDQBBEgAATR0YXJnZXRfbnVtYmVyEAEETgAAPQIAAAQIOQIpAgBBAgw8cGFsbGV0X3RyZWFzdXJ5GHBhbGxldBBDYWxsCARUAARJAAEYLHNwZW5kX2xvY2FsCAEYYW1vdW505AE8QmFsYW5jZU9mPFQsIEk+AAEsYmVuZWZpY2lhcnmlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AA0S4UHJvcG9zZSBhbmQgYXBwcm92ZSBhIHNwZW5kIG9mIHRyZWFzdXJ5IGZ1bmRzLgBIIyMgRGlzcGF0Y2ggT3JpZ2luAEUBTXVzdCBiZSBbYENvbmZpZzo6U3BlbmRPcmlnaW5gXSB3aXRoIHRoZSBgU3VjY2Vzc2AgdmFsdWUgYmVpbmcgYXQgbGVhc3QgYGFtb3VudGAuACwjIyMgRGV0YWlsc0UBTk9URTogRm9yIHJlY29yZC1rZWVwaW5nIHB1cnBvc2VzLCB0aGUgcHJvcG9zZXIgaXMgZGVlbWVkIHRvIGJlIGVxdWl2YWxlbnQgdG8gdGhlMGJlbmVmaWNpYXJ5LgA4IyMjIFBhcmFtZXRlcnNBAS0gYGFtb3VudGA6IFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZnJvbSB0aGUgdHJlYXN1cnkgdG8gdGhlIGBiZW5lZmljaWFyeWAu6C0gYGJlbmVmaWNpYXJ5YDogVGhlIGRlc3RpbmF0aW9uIGFjY291bnQgZm9yIHRoZSB0cmFuc2Zlci4AJCMjIEV2ZW50cwC0RW1pdHMgW2BFdmVudDo6U3BlbmRBcHByb3ZlZGBdIGlmIHN1Y2Nlc3NmdWwuPHJlbW92ZV9hcHByb3ZhbAQBLHByb3Bvc2FsX2lk1AE0UHJvcG9zYWxJbmRleAAEVC0BRm9yY2UgYSBwcmV2aW91c2x5IGFwcHJvdmVkIHByb3Bvc2FsIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgYXBwcm92YWwgcXVldWUuAEgjIyBEaXNwYXRjaCBPcmlnaW4AhE11c3QgYmUgW2BDb25maWc6OlJlamVjdE9yaWdpbmBdLgAoIyMgRGV0YWlscwDAVGhlIG9yaWdpbmFsIGRlcG9zaXQgd2lsbCBubyBsb25nZXIgYmUgcmV0dXJuZWQuADgjIyMgUGFyYW1ldGVyc6AtIGBwcm9wb3NhbF9pZGA6IFRoZSBpbmRleCBvZiBhIHByb3Bvc2FsADgjIyMgQ29tcGxleGl0eawtIE8oQSkgd2hlcmUgYEFgIGlzIHRoZSBudW1iZXIgb2YgYXBwcm92YWxzACgjIyMgRXJyb3JzRQEtIFtgRXJyb3I6OlByb3Bvc2FsTm90QXBwcm92ZWRgXTogVGhlIGBwcm9wb3NhbF9pZGAgc3VwcGxpZWQgd2FzIG5vdCBmb3VuZCBpbiB0aGVRASAgYXBwcm92YWwgcXVldWUsIGkuZS4sIHRoZSBwcm9wb3NhbCBoYXMgbm90IGJlZW4gYXBwcm92ZWQuIFRoaXMgY291bGQgYWxzbyBtZWFuIHRoZVkBICBwcm9wb3NhbCBkb2VzIG5vdCBleGlzdCBhbHRvZ2V0aGVyLCB0aHVzIHRoZXJlIGlzIG5vIHdheSBpdCB3b3VsZCBoYXZlIGJlZW4gYXBwcm92ZWRUICBpbiB0aGUgZmlyc3QgcGxhY2UuFHNwZW5kEAEoYXNzZXRfa2luZMQBREJveDxUOjpBc3NldEtpbmQ+AAEYYW1vdW505AFQQXNzZXRCYWxhbmNlT2Y8VCwgST4AASxiZW5lZmljaWFyeS0BAXhCb3g8QmVuZWZpY2lhcnlMb29rdXBPZjxULCBJPj4AASh2YWxpZF9mcm9tRQIBZE9wdGlvbjxCbG9ja051bWJlckZvcjxUPj4ABWi4UHJvcG9zZSBhbmQgYXBwcm92ZSBhIHNwZW5kIG9mIHRyZWFzdXJ5IGZ1bmRzLgBIIyMgRGlzcGF0Y2ggT3JpZ2luAB0BTXVzdCBiZSBbYENvbmZpZzo6U3BlbmRPcmlnaW5gXSB3aXRoIHRoZSBgU3VjY2Vzc2AgdmFsdWUgYmVpbmcgYXQgbGVhc3RVAWBhbW91bnRgIG9mIGBhc3NldF9raW5kYCBpbiB0aGUgbmF0aXZlIGFzc2V0LiBUaGUgYW1vdW50IG9mIGBhc3NldF9raW5kYCBpcyBjb252ZXJ0ZWTUZm9yIGFzc2VydGlvbiB1c2luZyB0aGUgW2BDb25maWc6OkJhbGFuY2VDb252ZXJ0ZXJgXS4AKCMjIERldGFpbHMASQFDcmVhdGUgYW4gYXBwcm92ZWQgc3BlbmQgZm9yIHRyYW5zZmVycmluZyBhIHNwZWNpZmljIGBhbW91bnRgIG9mIGBhc3NldF9raW5kYCB0byBhYQFkZXNpZ25hdGVkIGJlbmVmaWNpYXJ5LiBUaGUgc3BlbmQgbXVzdCBiZSBjbGFpbWVkIHVzaW5nIHRoZSBgcGF5b3V0YCBkaXNwYXRjaGFibGUgd2l0aGludHRoZSBbYENvbmZpZzo6UGF5b3V0UGVyaW9kYF0uADgjIyMgUGFyYW1ldGVycxUBLSBgYXNzZXRfa2luZGA6IEFuIGluZGljYXRvciBvZiB0aGUgc3BlY2lmaWMgYXNzZXQgY2xhc3MgdG8gYmUgc3BlbnQuQQEtIGBhbW91bnRgOiBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkIGZyb20gdGhlIHRyZWFzdXJ5IHRvIHRoZSBgYmVuZWZpY2lhcnlgLrgtIGBiZW5lZmljaWFyeWA6IFRoZSBiZW5lZmljaWFyeSBvZiB0aGUgc3BlbmQuVQEtIGB2YWxpZF9mcm9tYDogVGhlIGJsb2NrIG51bWJlciBmcm9tIHdoaWNoIHRoZSBzcGVuZCBjYW4gYmUgY2xhaW1lZC4gSXQgY2FuIHJlZmVyIHRvGQEgIHRoZSBwYXN0IGlmIHRoZSByZXN1bHRpbmcgc3BlbmQgaGFzIG5vdCB5ZXQgZXhwaXJlZCBhY2NvcmRpbmcgdG8gdGhlRQEgIFtgQ29uZmlnOjpQYXlvdXRQZXJpb2RgXS4gSWYgYE5vbmVgLCB0aGUgc3BlbmQgY2FuIGJlIGNsYWltZWQgaW1tZWRpYXRlbHkgYWZ0ZXIsICBhcHByb3ZhbC4AJCMjIEV2ZW50cwDIRW1pdHMgW2BFdmVudDo6QXNzZXRTcGVuZEFwcHJvdmVkYF0gaWYgc3VjY2Vzc2Z1bC4YcGF5b3V0BAEUaW5kZXgQAShTcGVuZEluZGV4AAZMOENsYWltIGEgc3BlbmQuAEgjIyBEaXNwYXRjaCBPcmlnaW4AOE11c3QgYmUgc2lnbmVkACgjIyBEZXRhaWxzAFUBU3BlbmRzIG11c3QgYmUgY2xhaW1lZCB3aXRoaW4gc29tZSB0ZW1wb3JhbCBib3VuZHMuIEEgc3BlbmQgbWF5IGJlIGNsYWltZWQgd2l0aGluIG9uZdRbYENvbmZpZzo6UGF5b3V0UGVyaW9kYF0gZnJvbSB0aGUgYHZhbGlkX2Zyb21gIGJsb2NrLlUBSW4gY2FzZSBvZiBhIHBheW91dCBmYWlsdXJlLCB0aGUgc3BlbmQgc3RhdHVzIG11c3QgYmUgdXBkYXRlZCB3aXRoIHRoZSBgY2hlY2tfc3RhdHVzYNxkaXNwYXRjaGFibGUgYmVmb3JlIHJldHJ5aW5nIHdpdGggdGhlIGN1cnJlbnQgZnVuY3Rpb24uADgjIyMgUGFyYW1ldGVyc2wtIGBpbmRleGA6IFRoZSBzcGVuZCBpbmRleC4AJCMjIEV2ZW50cwCQRW1pdHMgW2BFdmVudDo6UGFpZGBdIGlmIHN1Y2Nlc3NmdWwuMGNoZWNrX3N0YXR1cwQBFGluZGV4EAEoU3BlbmRJbmRleAAHTCkBQ2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgc3BlbmQgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSBzdG9yYWdlIGlmIHByb2Nlc3NlZC4ASCMjIERpc3BhdGNoIE9yaWdpbgA8TXVzdCBiZSBzaWduZWQuACgjIyBEZXRhaWxzAAEBVGhlIHN0YXR1cyBjaGVjayBpcyBhIHByZXJlcXVpc2l0ZSBmb3IgcmV0cnlpbmcgYSBmYWlsZWQgcGF5b3V0LkkBSWYgYSBzcGVuZCBoYXMgZWl0aGVyIHN1Y2NlZWRlZCBvciBleHBpcmVkLCBpdCBpcyByZW1vdmVkIGZyb20gdGhlIHN0b3JhZ2UgYnkgdGhpc+xmdW5jdGlvbi4gSW4gc3VjaCBpbnN0YW5jZXMsIHRyYW5zYWN0aW9uIGZlZXMgYXJlIHJlZnVuZGVkLgA4IyMjIFBhcmFtZXRlcnNsLSBgaW5kZXhgOiBUaGUgc3BlbmQgaW5kZXguACQjIyBFdmVudHMA+EVtaXRzIFtgRXZlbnQ6OlBheW1lbnRGYWlsZWRgXSBpZiB0aGUgc3BlbmQgcGF5b3V0IGhhcyBmYWlsZWQuAQFFbWl0cyBbYEV2ZW50OjpTcGVuZFByb2Nlc3NlZGBdIGlmIHRoZSBzcGVuZCBwYXlvdXQgaGFzIHN1Y2NlZWQuKHZvaWRfc3BlbmQEARRpbmRleBABKFNwZW5kSW5kZXgACEB8Vm9pZCBwcmV2aW91c2x5IGFwcHJvdmVkIHNwZW5kLgBIIyMgRGlzcGF0Y2ggT3JpZ2luAIRNdXN0IGJlIFtgQ29uZmlnOjpSZWplY3RPcmlnaW5gXS4AKCMjIERldGFpbHMAHQFBIHNwZW5kIHZvaWQgaXMgb25seSBwb3NzaWJsZSBpZiB0aGUgcGF5b3V0IGhhcyBub3QgYmVlbiBhdHRlbXB0ZWQgeWV0LgA4IyMjIFBhcmFtZXRlcnNsLSBgaW5kZXhgOiBUaGUgc3BlbmQgaW5kZXguACQjIyBFdmVudHMAwEVtaXRzIFtgRXZlbnQ6OkFzc2V0U3BlbmRWb2lkZWRgXSBpZiBzdWNjZXNzZnVsLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy5FAgQYT3B0aW9uBARUARABCBBOb25lAAAAEFNvbWUEABAAAAEAAEkCDGBwYWxsZXRfY29udmljdGlvbl92b3RpbmcYcGFsbGV0EENhbGwIBFQABEkAARgQdm90ZQgBKHBvbGxfaW5kZXjUAURQb2xsSW5kZXhPZjxULCBJPgABEHZvdGVRAQFwQWNjb3VudFZvdGU8QmFsYW5jZU9mPFQsIEk+PgAAJBkBVm90ZSBpbiBhIHBvbGwuIElmIGB2b3RlLmlzX2F5ZSgpYCwgdGhlIHZvdGUgaXMgdG8gZW5hY3QgdGhlIHByb3Bvc2FsO7hvdGhlcndpc2UgaXQgaXMgYSB2b3RlIHRvIGtlZXAgdGhlIHN0YXR1cyBxdW8uAMhUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgDILSBgcG9sbF9pbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgcG9sbCB0byB2b3RlIGZvci6ELSBgdm90ZWA6IFRoZSB2b3RlIGNvbmZpZ3VyYXRpb24uABUBV2VpZ2h0OiBgTyhSKWAgd2hlcmUgUiBpcyB0aGUgbnVtYmVyIG9mIHBvbGxzIHRoZSB2b3RlciBoYXMgdm90ZWQgb24uIGRlbGVnYXRlEAEUY2xhc3NdAQE0Q2xhc3NPZjxULCBJPgABCHRvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEoY29udmljdGlvbk0CAShDb252aWN0aW9uAAEcYmFsYW5jZRgBPEJhbGFuY2VPZjxULCBJPgABXE0BRGVsZWdhdGUgdGhlIHZvdGluZyBwb3dlciAod2l0aCBzb21lIGdpdmVuIGNvbnZpY3Rpb24pIG9mIHRoZSBzZW5kaW5nIGFjY291bnQgZm9yIGFocGFydGljdWxhciBjbGFzcyBvZiBwb2xscy4AVQFUaGUgYmFsYW5jZSBkZWxlZ2F0ZWQgaXMgbG9ja2VkIGZvciBhcyBsb25nIGFzIGl0J3MgZGVsZWdhdGVkLCBhbmQgdGhlcmVhZnRlciBmb3IgdGhlyHRpbWUgYXBwcm9wcmlhdGUgZm9yIHRoZSBjb252aWN0aW9uJ3MgbG9jayBwZXJpb2QuAF0BVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXywgYW5kIHRoZSBzaWduaW5nIGFjY291bnQgbXVzdCBlaXRoZXI6dCAgLSBiZSBkZWxlZ2F0aW5nIGFscmVhZHk7IG9yRQEgIC0gaGF2ZSBubyB2b3RpbmcgYWN0aXZpdHkgKGlmIHRoZXJlIGlzLCB0aGVuIGl0IHdpbGwgbmVlZCB0byBiZSByZW1vdmVkIHRocm91Z2hMICAgIGByZW1vdmVfdm90ZWApLgBFAS0gYHRvYDogVGhlIGFjY291bnQgd2hvc2Ugdm90aW5nIHRoZSBgdGFyZ2V0YCBhY2NvdW50J3Mgdm90aW5nIHBvd2VyIHdpbGwgZm9sbG93Ll0BLSBgY2xhc3NgOiBUaGUgY2xhc3Mgb2YgcG9sbHMgdG8gZGVsZWdhdGUuIFRvIGRlbGVnYXRlIG11bHRpcGxlIGNsYXNzZXMsIG11bHRpcGxlIGNhbGxzgCAgdG8gdGhpcyBmdW5jdGlvbiBhcmUgcmVxdWlyZWQuVQEtIGBjb252aWN0aW9uYDogVGhlIGNvbnZpY3Rpb24gdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBkZWxlZ2F0ZWQgdm90ZXMuIFdoZW4gdGhlQQEgIGFjY291bnQgaXMgdW5kZWxlZ2F0ZWQsIHRoZSBmdW5kcyB3aWxsIGJlIGxvY2tlZCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgcGVyaW9kLmEBLSBgYmFsYW5jZWA6IFRoZSBhbW91bnQgb2YgdGhlIGFjY291bnQncyBiYWxhbmNlIHRvIGJlIHVzZWQgaW4gZGVsZWdhdGluZy4gVGhpcyBtdXN0IG5vdLQgIGJlIG1vcmUgdGhhbiB0aGUgYWNjb3VudCdzIGN1cnJlbnQgYmFsYW5jZS4ASEVtaXRzIGBEZWxlZ2F0ZWRgLgAlAVdlaWdodDogYE8oUilgIHdoZXJlIFIgaXMgdGhlIG51bWJlciBvZiBwb2xscyB0aGUgdm90ZXIgZGVsZWdhdGluZyB0byBoYXNNASAgdm90ZWQgb24uIFdlaWdodCBpcyBpbml0aWFsbHkgY2hhcmdlZCBhcyBpZiBtYXhpbXVtIHZvdGVzLCBidXQgaXMgcmVmdW5kZWQgbGF0ZXIuKHVuZGVsZWdhdGUEARRjbGFzc10BATRDbGFzc09mPFQsIEk+AAI4TQFVbmRlbGVnYXRlIHRoZSB2b3RpbmcgcG93ZXIgb2YgdGhlIHNlbmRpbmcgYWNjb3VudCBmb3IgYSBwYXJ0aWN1bGFyIGNsYXNzIG9mIHBvbGxzLgBdAVRva2VucyBtYXkgYmUgdW5sb2NrZWQgZm9sbG93aW5nIG9uY2UgYW4gYW1vdW50IG9mIHRpbWUgY29uc2lzdGVudCB3aXRoIHRoZSBsb2NrIHBlcmlvZAkBb2YgdGhlIGNvbnZpY3Rpb24gd2l0aCB3aGljaCB0aGUgZGVsZWdhdGlvbiB3YXMgaXNzdWVkIGhhcyBwYXNzZWQuAEUBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNpZ25pbmcgYWNjb3VudCBtdXN0IGJlVGN1cnJlbnRseSBkZWxlZ2F0aW5nLgDwLSBgY2xhc3NgOiBUaGUgY2xhc3Mgb2YgcG9sbHMgdG8gcmVtb3ZlIHRoZSBkZWxlZ2F0aW9uIGZyb20uAFBFbWl0cyBgVW5kZWxlZ2F0ZWRgLgAlAVdlaWdodDogYE8oUilgIHdoZXJlIFIgaXMgdGhlIG51bWJlciBvZiBwb2xscyB0aGUgdm90ZXIgZGVsZWdhdGluZyB0byBoYXNNASAgdm90ZWQgb24uIFdlaWdodCBpcyBpbml0aWFsbHkgY2hhcmdlZCBhcyBpZiBtYXhpbXVtIHZvdGVzLCBidXQgaXMgcmVmdW5kZWQgbGF0ZXIuGHVubG9jawgBFGNsYXNzXQEBNENsYXNzT2Y8VCwgST4AARh0YXJnZXSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAyRdAVJlbW92ZSB0aGUgbG9jayBjYXVzZWQgYnkgcHJpb3Igdm90aW5nL2RlbGVnYXRpbmcgd2hpY2ggaGFzIGV4cGlyZWQgd2l0aGluIGEgcGFydGljdWxhchhjbGFzcy4AyFRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAKAtIGBjbGFzc2A6IFRoZSBjbGFzcyBvZiBwb2xscyB0byB1bmxvY2suuC0gYHRhcmdldGA6IFRoZSBhY2NvdW50IHRvIHJlbW92ZSB0aGUgbG9jayBvbi4AvFdlaWdodDogYE8oUilgIHdpdGggUiBudW1iZXIgb2Ygdm90ZSBvZiB0YXJnZXQuLHJlbW92ZV92b3RlCAEUY2xhc3NRAgFUT3B0aW9uPENsYXNzT2Y8VCwgST4+AAEUaW5kZXgQAURQb2xsSW5kZXhPZjxULCBJPgAEdGRSZW1vdmUgYSB2b3RlIGZvciBhIHBvbGwuAAxJZjpwLSB0aGUgcG9sbCB3YXMgY2FuY2VsbGVkLCBvcmQtIHRoZSBwb2xsIGlzIG9uZ29pbmcsIG9yeC0gdGhlIHBvbGwgaGFzIGVuZGVkIHN1Y2ggdGhhdPwgIC0gdGhlIHZvdGUgb2YgdGhlIGFjY291bnQgd2FzIGluIG9wcG9zaXRpb24gdG8gdGhlIHJlc3VsdDsgb3LUICAtIHRoZXJlIHdhcyBubyBjb252aWN0aW9uIHRvIHRoZSBhY2NvdW50J3Mgdm90ZTsgb3KEICAtIHRoZSBhY2NvdW50IG1hZGUgYSBzcGxpdCB2b3RlXQEuLi50aGVuIHRoZSB2b3RlIGlzIHJlbW92ZWQgY2xlYW5seSBhbmQgYSBmb2xsb3dpbmcgY2FsbCB0byBgdW5sb2NrYCBtYXkgcmVzdWx0IGluIG1vcmVYZnVuZHMgYmVpbmcgYXZhaWxhYmxlLgCQSWYsIGhvd2V2ZXIsIHRoZSBwb2xsIGhhcyBlbmRlZCBhbmQ67C0gaXQgZmluaXNoZWQgY29ycmVzcG9uZGluZyB0byB0aGUgdm90ZSBvZiB0aGUgYWNjb3VudCwgYW5k3C0gdGhlIGFjY291bnQgbWFkZSBhIHN0YW5kYXJkIHZvdGUgd2l0aCBjb252aWN0aW9uLCBhbmS8LSB0aGUgbG9jayBwZXJpb2Qgb2YgdGhlIGNvbnZpY3Rpb24gaXMgbm90IG92ZXJZAS4uLnRoZW4gdGhlIGxvY2sgd2lsbCBiZSBhZ2dyZWdhdGVkIGludG8gdGhlIG92ZXJhbGwgYWNjb3VudCdzIGxvY2ssIHdoaWNoIG1heSBpbnZvbHZlWQEqb3ZlcmxvY2tpbmcqICh3aGVyZSB0aGUgdHdvIGxvY2tzIGFyZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIGxvY2sgdGhhdCBpcyB0aGUgbWF4aW11beRvZiBib3RoIHRoZSBhbW91bnQgbG9ja2VkIGFuZCB0aGUgdGltZSBpcyBpdCBsb2NrZWQgZm9yKS4ASQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLCBhbmQgdGhlIHNpZ25lciBtdXN0IGhhdmUgYSB2b3RlcHJlZ2lzdGVyZWQgZm9yIHBvbGwgYGluZGV4YC4A3C0gYGluZGV4YDogVGhlIGluZGV4IG9mIHBvbGwgb2YgdGhlIHZvdGUgdG8gYmUgcmVtb3ZlZC5VAS0gYGNsYXNzYDogT3B0aW9uYWwgcGFyYW1ldGVyLCBpZiBnaXZlbiBpdCBpbmRpY2F0ZXMgdGhlIGNsYXNzIG9mIHRoZSBwb2xsLiBGb3IgcG9sbHPwICB3aGljaCBoYXZlIGZpbmlzaGVkIG9yIGFyZSBjYW5jZWxsZWQsIHRoaXMgbXVzdCBiZSBgU29tZWAuAEUBV2VpZ2h0OiBgTyhSICsgbG9nIFIpYCB3aGVyZSBSIGlzIHRoZSBudW1iZXIgb2YgcG9sbHMgdGhhdCBgdGFyZ2V0YCBoYXMgdm90ZWQgb24u2CAgV2VpZ2h0IGlzIGNhbGN1bGF0ZWQgZm9yIHRoZSBtYXhpbXVtIG51bWJlciBvZiB2b3RlLkRyZW1vdmVfb3RoZXJfdm90ZQwBGHRhcmdldKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFGNsYXNzXQEBNENsYXNzT2Y8VCwgST4AARRpbmRleBABRFBvbGxJbmRleE9mPFQsIEk+AAVAZFJlbW92ZSBhIHZvdGUgZm9yIGEgcG9sbC4ATQFJZiB0aGUgYHRhcmdldGAgaXMgZXF1YWwgdG8gdGhlIHNpZ25lciwgdGhlbiB0aGlzIGZ1bmN0aW9uIGlzIGV4YWN0bHkgZXF1aXZhbGVudCB0by0BYHJlbW92ZV92b3RlYC4gSWYgbm90IGVxdWFsIHRvIHRoZSBzaWduZXIsIHRoZW4gdGhlIHZvdGUgbXVzdCBoYXZlIGV4cGlyZWQsJQFlaXRoZXIgYmVjYXVzZSB0aGUgcG9sbCB3YXMgY2FuY2VsbGVkLCBiZWNhdXNlIHRoZSB2b3RlciBsb3N0IHRoZSBwb2xsIG9ymGJlY2F1c2UgdGhlIGNvbnZpY3Rpb24gcGVyaW9kIGlzIG92ZXIuAMhUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgBhAS0gYHRhcmdldGA6IFRoZSBhY2NvdW50IG9mIHRoZSB2b3RlIHRvIGJlIHJlbW92ZWQ7IHRoaXMgYWNjb3VudCBtdXN0IGhhdmUgdm90ZWQgZm9yIHBvbGwoICBgaW5kZXhgLtwtIGBpbmRleGA6IFRoZSBpbmRleCBvZiBwb2xsIG9mIHRoZSB2b3RlIHRvIGJlIHJlbW92ZWQuhC0gYGNsYXNzYDogVGhlIGNsYXNzIG9mIHRoZSBwb2xsLgBFAVdlaWdodDogYE8oUiArIGxvZyBSKWAgd2hlcmUgUiBpcyB0aGUgbnVtYmVyIG9mIHBvbGxzIHRoYXQgYHRhcmdldGAgaGFzIHZvdGVkIG9uLtggIFdlaWdodCBpcyBjYWxjdWxhdGVkIGZvciB0aGUgbWF4aW11bSBudW1iZXIgb2Ygdm90ZS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuTQIMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZyhjb252aWN0aW9uKENvbnZpY3Rpb24AARwQTm9uZQAAACBMb2NrZWQxeAABACBMb2NrZWQyeAACACBMb2NrZWQzeAADACBMb2NrZWQ0eAAEACBMb2NrZWQ1eAAFACBMb2NrZWQ2eAAGAABRAgQYT3B0aW9uBARUAV0BAQgQTm9uZQAAABBTb21lBABdAQAAAQAAVQIMQHBhbGxldF9yZWZlcmVuZGEYcGFsbGV0EENhbGwIBFQABEkAASQYc3VibWl0DAE8cHJvcG9zYWxfb3JpZ2luWQIBXEJveDxQYWxsZXRzT3JpZ2luT2Y8VD4+AAEgcHJvcG9zYWxhAQFMQm91bmRlZENhbGxPZjxULCBJPgABQGVuYWN0bWVudF9tb21lbnR1AgF8RGlzcGF0Y2hUaW1lPEJsb2NrTnVtYmVyRm9yPFQ+PgAAJLBQcm9wb3NlIGEgcmVmZXJlbmR1bSBvbiBhIHByaXZpbGVnZWQgYWN0aW9uLgBZAS0gYG9yaWdpbmA6IG11c3QgYmUgYFN1Ym1pdE9yaWdpbmAgYW5kIHRoZSBhY2NvdW50IG11c3QgaGF2ZSBgU3VibWlzc2lvbkRlcG9zaXRgIGZ1bmRzMCAgYXZhaWxhYmxlLi0BLSBgcHJvcG9zYWxfb3JpZ2luYDogVGhlIG9yaWdpbiBmcm9tIHdoaWNoIHRoZSBwcm9wb3NhbCBzaG91bGQgYmUgZXhlY3V0ZWQubC0gYHByb3Bvc2FsYDogVGhlIHByb3Bvc2FsLhUBLSBgZW5hY3RtZW50X21vbWVudGA6IFRoZSBtb21lbnQgdGhhdCB0aGUgcHJvcG9zYWwgc2hvdWxkIGJlIGVuYWN0ZWQuAEhFbWl0cyBgU3VibWl0dGVkYC5YcGxhY2VfZGVjaXNpb25fZGVwb3NpdAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAEgrFBvc3QgdGhlIERlY2lzaW9uIERlcG9zaXQgZm9yIGEgcmVmZXJlbmR1bS4AOQEtIGBvcmlnaW5gOiBtdXN0IGJlIGBTaWduZWRgIGFuZCB0aGUgYWNjb3VudCBtdXN0IGhhdmUgZnVuZHMgYXZhaWxhYmxlIGZvciB0aGWgICByZWZlcmVuZHVtJ3MgdHJhY2sncyBEZWNpc2lvbiBEZXBvc2l0LlEBLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgdGhlIHN1Ym1pdHRlZCByZWZlcmVuZHVtIHdob3NlIERlY2lzaW9uIERlcG9zaXQgaXMgeWV0IHRvIGJlJCAgcG9zdGVkLgB4RW1pdHMgYERlY2lzaW9uRGVwb3NpdFBsYWNlZGAuXHJlZnVuZF9kZWNpc2lvbl9kZXBvc2l0BAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgAAhwpAVJlZnVuZCB0aGUgRGVjaXNpb24gRGVwb3NpdCBmb3IgYSBjbG9zZWQgcmVmZXJlbmR1bSBiYWNrIHRvIHRoZSBkZXBvc2l0b3IuAJwtIGBvcmlnaW5gOiBtdXN0IGJlIGBTaWduZWRgIG9yIGBSb290YC5NAS0gYGluZGV4YDogVGhlIGluZGV4IG9mIGEgY2xvc2VkIHJlZmVyZW5kdW0gd2hvc2UgRGVjaXNpb24gRGVwb3NpdCBoYXMgbm90IHlldCBiZWVuLCAgcmVmdW5kZWQuAIBFbWl0cyBgRGVjaXNpb25EZXBvc2l0UmVmdW5kZWRgLhhjYW5jZWwEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAADGHRDYW5jZWwgYW4gb25nb2luZyByZWZlcmVuZHVtLgCcLSBgb3JpZ2luYDogbXVzdCBiZSB0aGUgYENhbmNlbE9yaWdpbmAu3C0gYGluZGV4YDogVGhlIGluZGV4IG9mIHRoZSByZWZlcmVuZHVtIHRvIGJlIGNhbmNlbGxlZC4ASEVtaXRzIGBDYW5jZWxsZWRgLhBraWxsBAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgABBjQQ2FuY2VsIGFuIG9uZ29pbmcgcmVmZXJlbmR1bSBhbmQgc2xhc2ggdGhlIGRlcG9zaXRzLgCULSBgb3JpZ2luYDogbXVzdCBiZSB0aGUgYEtpbGxPcmlnaW5gLtwtIGBpbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgcmVmZXJlbmR1bSB0byBiZSBjYW5jZWxsZWQuAJBFbWl0cyBgS2lsbGVkYCBhbmQgYERlcG9zaXRTbGFzaGVkYC5AbnVkZ2VfcmVmZXJlbmR1bQQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAUQHQFBZHZhbmNlIGEgcmVmZXJlbmR1bSBvbnRvIGl0cyBuZXh0IGxvZ2ljYWwgc3RhdGUuIE9ubHkgdXNlZCBpbnRlcm5hbGx5LgBsLSBgb3JpZ2luYDogbXVzdCBiZSBgUm9vdGAupC0gYGluZGV4YDogdGhlIHJlZmVyZW5kdW0gdG8gYmUgYWR2YW5jZWQuSG9uZV9mZXdlcl9kZWNpZGluZwQBFHRyYWNrXQEBPFRyYWNrSWRPZjxULCBJPgAGJAkBQWR2YW5jZSBhIHRyYWNrIG9udG8gaXRzIG5leHQgbG9naWNhbCBzdGF0ZS4gT25seSB1c2VkIGludGVybmFsbHkuAGwtIGBvcmlnaW5gOiBtdXN0IGJlIGBSb290YC6QLSBgdHJhY2tgOiB0aGUgdHJhY2sgdG8gYmUgYWR2YW5jZWQuAFEBQWN0aW9uIGl0ZW0gZm9yIHdoZW4gdGhlcmUgaXMgbm93IG9uZSBmZXdlciByZWZlcmVuZHVtIGluIHRoZSBkZWNpZGluZyBwaGFzZSBhbmQgdGhlFQFgRGVjaWRpbmdDb3VudGAgaXMgbm90IHlldCB1cGRhdGVkLiBUaGlzIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIGVpdGhlcjolAS0gYmVnaW4gZGVjaWRpbmcgYW5vdGhlciByZWZlcmVuZHVtIChhbmQgbGVhdmUgYERlY2lkaW5nQ291bnRgIGFsb25lKTsgb3JwLSBkZWNyZW1lbnQgYERlY2lkaW5nQ291bnRgLmRyZWZ1bmRfc3VibWlzc2lvbl9kZXBvc2l0BAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgABxwxAVJlZnVuZCB0aGUgU3VibWlzc2lvbiBEZXBvc2l0IGZvciBhIGNsb3NlZCByZWZlcmVuZHVtIGJhY2sgdG8gdGhlIGRlcG9zaXRvci4AnC0gYG9yaWdpbmA6IG11c3QgYmUgYFNpZ25lZGAgb3IgYFJvb3RgLlUBLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgYSBjbG9zZWQgcmVmZXJlbmR1bSB3aG9zZSBTdWJtaXNzaW9uIERlcG9zaXQgaGFzIG5vdCB5ZXQgYmVlbiwgIHJlZnVuZGVkLgCIRW1pdHMgYFN1Ym1pc3Npb25EZXBvc2l0UmVmdW5kZWRgLjBzZXRfbWV0YWRhdGEIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAABKG1heWJlX2hhc2h5AgE8T3B0aW9uPFQ6Okhhc2g+AAgcmFNldCBvciBjbGVhciBtZXRhZGF0YSBvZiBhIHJlZmVyZW5kdW0uACxQYXJhbWV0ZXJzOkUBLSBgb3JpZ2luYDogTXVzdCBiZSBgU2lnbmVkYCBieSBhIGNyZWF0b3Igb2YgYSByZWZlcmVuZHVtIG9yIGJ5IGFueW9uZSB0byBjbGVhciBhkCAgbWV0YWRhdGEgb2YgYSBmaW5pc2hlZCByZWZlcmVuZHVtLg0BLSBgaW5kZXhgOiAgVGhlIGluZGV4IG9mIGEgcmVmZXJlbmR1bSB0byBzZXQgb3IgY2xlYXIgbWV0YWRhdGEgZm9yLlEBLSBgbWF5YmVfaGFzaGA6IFRoZSBoYXNoIG9mIGFuIG9uLWNoYWluIHN0b3JlZCBwcmVpbWFnZS4gYE5vbmVgIHRvIGNsZWFyIGEgbWV0YWRhdGEuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLlkCCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lME9yaWdpbkNhbGxlcgABFBhzeXN0ZW0EAF0CAXRmcmFtZV9zeXN0ZW06Ok9yaWdpbjxSdW50aW1lPgAAABxPcmlnaW5zBABhAgF0cGFsbGV0X2N1c3RvbV9vcmlnaW5zOjpPcmlnaW4AKwBAUGFyYWNoYWluc09yaWdpbgQAZQIBZHBhcmFjaGFpbnNfb3JpZ2luOjpPcmlnaW4AMgAkWGNtUGFsbGV0BABtAgFIcGFsbGV0X3hjbTo6T3JpZ2luAGMAEFZvaWQEAHECAUEBc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OgpfX3ByaXZhdGU6OlZvaWQABAAAXQIMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2gkUmF3T3JpZ2luBCRBY2NvdW50SWQBAAEMEFJvb3QAAAAYU2lnbmVkBAAAASRBY2NvdW50SWQAAQAQTm9uZQACAABhAhRYc3RhZ2luZ19rdXNhbWFfcnVudGltZShnb3Zlcm5hbmNlHG9yaWdpbnNUcGFsbGV0X2N1c3RvbV9vcmlnaW5zGE9yaWdpbgABcDBTdGFraW5nQWRtaW4AAAAkVHJlYXN1cmVyAAEAPEZlbGxvd3NoaXBBZG1pbgACADBHZW5lcmFsQWRtaW4AAwAwQXVjdGlvbkFkbWluAAQAKExlYXNlQWRtaW4ABQBMUmVmZXJlbmR1bUNhbmNlbGxlcgAGAEBSZWZlcmVuZHVtS2lsbGVyAAcALFNtYWxsVGlwcGVyAAgAJEJpZ1RpcHBlcgAJADBTbWFsbFNwZW5kZXIACgA0TWVkaXVtU3BlbmRlcgALAChCaWdTcGVuZGVyAAwARFdoaXRlbGlzdGVkQ2FsbGVyAA0ATEZlbGxvd3NoaXBJbml0aWF0ZXMADgAcRmVsbG93cwAPAERGZWxsb3dzaGlwRXhwZXJ0cwAQAERGZWxsb3dzaGlwTWFzdGVycwARADhGZWxsb3dzaGlwMURhbgASADhGZWxsb3dzaGlwMkRhbgATADhGZWxsb3dzaGlwM0RhbgAUADhGZWxsb3dzaGlwNERhbgAVADhGZWxsb3dzaGlwNURhbgAWADhGZWxsb3dzaGlwNkRhbgAXADhGZWxsb3dzaGlwN0RhbgAYADhGZWxsb3dzaGlwOERhbgAZADhGZWxsb3dzaGlwOURhbgAaADRXaXNoRm9yQ2hhbmdlABsAAGUCEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMYb3JpZ2luGHBhbGxldBhPcmlnaW4AAQQkUGFyYWNoYWluBABpAgEYUGFyYUlkAAAAAGkCDHRwb2xrYWRvdF9wYXJhY2hhaW5fcHJpbWl0aXZlcyhwcmltaXRpdmVzCElkAAAEABABDHUzMgAAbQIMKHBhbGxldF94Y20YcGFsbGV0GE9yaWdpbgABCAxYY20EAPQBIExvY2F0aW9uAAAAIFJlc3BvbnNlBAD0ASBMb2NhdGlvbgABAABxAggcc3BfY29yZRBWb2lkAAEAAHUCEDRmcmFtZV9zdXBwb3J0GHRyYWl0cyBzY2hlZHVsZTBEaXNwYXRjaFRpbWUELEJsb2NrTnVtYmVyARABCAhBdAQAEAEsQmxvY2tOdW1iZXIAAAAUQWZ0ZXIEABABLEJsb2NrTnVtYmVyAAEAAHkCBBhPcHRpb24EBFQBNAEIEE5vbmUAAAAQU29tZQQANAAAAQAAfQIMYHBhbGxldF9yYW5rZWRfY29sbGVjdGl2ZRhwYWxsZXQQQ2FsbAgEVAAESQABHChhZGRfbWVtYmVyBAEMd2hvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAAYXEludHJvZHVjZSBhIG5ldyBtZW1iZXIuAJAtIGBvcmlnaW5gOiBNdXN0IGJlIHRoZSBgQWRkT3JpZ2luYC7oLSBgd2hvYDogQWNjb3VudCBvZiBub24tbWVtYmVyIHdoaWNoIHdpbGwgYmVjb21lIGEgbWVtYmVyLgA4V2VpZ2h0OiBgTygxKWA4cHJvbW90ZV9tZW1iZXIEAQx3aG+lAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARjASW5jcmVtZW50IHRoZSByYW5rIG9mIGFuIGV4aXN0aW5nIG1lbWJlciBieSBvbmUuAKAtIGBvcmlnaW5gOiBNdXN0IGJlIHRoZSBgUHJvbW90ZU9yaWdpbmAukC0gYHdob2A6IEFjY291bnQgb2YgZXhpc3RpbmcgbWVtYmVyLgA4V2VpZ2h0OiBgTygxKWA0ZGVtb3RlX21lbWJlcgQBDHdob6UBAVBBY2NvdW50SWRMb29rdXBPZjxUPgACHF0BRGVjcmVtZW50IHRoZSByYW5rIG9mIGFuIGV4aXN0aW5nIG1lbWJlciBieSBvbmUuIElmIHRoZSBtZW1iZXIgaXMgYWxyZWFkeSBhdCByYW5rIHplcm8sfHRoZW4gdGhleSBhcmUgcmVtb3ZlZCBlbnRpcmVseS4AnC0gYG9yaWdpbmA6IE11c3QgYmUgdGhlIGBEZW1vdGVPcmlnaW5gLvgtIGB3aG9gOiBBY2NvdW50IG9mIGV4aXN0aW5nIG1lbWJlciBvZiByYW5rIGdyZWF0ZXIgdGhhbiB6ZXJvLgAJAVdlaWdodDogYE8oMSlgLCBsZXNzIGlmIHRoZSBtZW1iZXIncyBpbmRleCBpcyBoaWdoZXN0IGluIGl0cyByYW5rLjRyZW1vdmVfbWVtYmVyCAEMd2hvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEgbWluX3JhbmtdAQEQUmFuawADHGxSZW1vdmUgdGhlIG1lbWJlciBlbnRpcmVseS4AnC0gYG9yaWdpbmA6IE11c3QgYmUgdGhlIGBSZW1vdmVPcmlnaW5gLvgtIGB3aG9gOiBBY2NvdW50IG9mIGV4aXN0aW5nIG1lbWJlciBvZiByYW5rIGdyZWF0ZXIgdGhhbiB6ZXJvLsAtIGBtaW5fcmFua2A6IFRoZSByYW5rIG9mIHRoZSBtZW1iZXIgb3IgZ3JlYXRlci4AWFdlaWdodDogYE8obWluX3JhbmspYC4Qdm90ZQgBEHBvbGwQAURQb2xsSW5kZXhPZjxULCBJPgABDGF5ZSABEGJvb2wABCzwQWRkIGFuIGF5ZSBvciBuYXkgdm90ZSBmb3IgdGhlIHNlbmRlciB0byB0aGUgZ2l2ZW4gcHJvcG9zYWwuAMQtIGBvcmlnaW5gOiBNdXN0IGJlIGBTaWduZWRgIGJ5IGEgbWVtYmVyIGFjY291bnQurC0gYHBvbGxgOiBJbmRleCBvZiBhIHBvbGwgd2hpY2ggaXMgb25nb2luZy4pAS0gYGF5ZWA6IGB0cnVlYCBpZiB0aGUgdm90ZSBpcyB0byBhcHByb3ZlIHRoZSBwcm9wb3NhbCwgYGZhbHNlYCBvdGhlcndpc2UuAEUBVHJhbnNhY3Rpb24gZmVlcyBhcmUgYmUgd2FpdmVkIGlmIHRoZSBtZW1iZXIgaXMgdm90aW5nIG9uIGFueSBwYXJ0aWN1bGFyIHByb3Bvc2FsUQFmb3IgdGhlIGZpcnN0IHRpbWUgYW5kIHRoZSBjYWxsIGlzIHN1Y2Nlc3NmdWwuIFN1YnNlcXVlbnQgdm90ZSBjaGFuZ2VzIHdpbGwgY2hhcmdlIGEQZmVlLgA1AVdlaWdodDogYE8oMSlgLCBsZXNzIGlmIHRoZXJlIHdhcyBubyBwcmV2aW91cyB2b3RlIG9uIHRoZSBwb2xsIGJ5IHRoZSBtZW1iZXIuMGNsZWFudXBfcG9sbAgBKHBvbGxfaW5kZXgQAURQb2xsSW5kZXhPZjxULCBJPgABDG1heBABDHUzMgAFKNRSZW1vdmUgdm90ZXMgZnJvbSB0aGUgZ2l2ZW4gcG9sbC4gSXQgbXVzdCBoYXZlIGVuZGVkLgCwLSBgb3JpZ2luYDogTXVzdCBiZSBgU2lnbmVkYCBieSBhbnkgYWNjb3VudC5JAS0gYHBvbGxfaW5kZXhgOiBJbmRleCBvZiBhIHBvbGwgd2hpY2ggaXMgY29tcGxldGVkIGFuZCBmb3Igd2hpY2ggdm90ZXMgY29udGludWUgdG8gICBleGlzdC78LSBgbWF4YDogTWF4aW11bSBudW1iZXIgb2Ygdm90ZSBpdGVtcyBmcm9tIHJlbW92ZSBpbiB0aGlzIGNhbGwuAOxUcmFuc2FjdGlvbiBmZWVzIGFyZSB3YWl2ZWQgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsLgAVAVdlaWdodCBgTyhtYXgpYCAobGVzcyBpZiB0aGVyZSBhcmUgZmV3ZXIgaXRlbXMgdG8gcmVtb3ZlIHRoYW4gYG1heGApLjxleGNoYW5nZV9tZW1iZXIIAQx3aG+lAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARxuZXdfd2hvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAYUBQFFeGNoYW5nZXMgYSBtZW1iZXIgd2l0aCBhIG5ldyBhY2NvdW50IGFuZCB0aGUgc2FtZSBleGlzdGluZyByYW5rLgCkLSBgb3JpZ2luYDogTXVzdCBiZSB0aGUgYEV4Y2hhbmdlT3JpZ2luYC45AS0gYHdob2A6IEFjY291bnQgb2YgZXhpc3RpbmcgbWVtYmVyIG9mIHJhbmsgZ3JlYXRlciB0aGFuIHplcm8gdG8gYmUgZXhjaGFuZ2VkLlkBLSBgbmV3X3dob2A6IE5ldyBBY2NvdW50IG9mIGV4aXN0aW5nIG1lbWJlciBvZiByYW5rIGdyZWF0ZXIgdGhhbiB6ZXJvIHRvIGV4Y2hhbmdlZCB0by4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMugQIMQHBhbGxldF9yZWZlcmVuZGEYcGFsbGV0EENhbGwIBFQABEkAASQYc3VibWl0DAE8cHJvcG9zYWxfb3JpZ2luWQIBXEJveDxQYWxsZXRzT3JpZ2luT2Y8VD4+AAEgcHJvcG9zYWxhAQFMQm91bmRlZENhbGxPZjxULCBJPgABQGVuYWN0bWVudF9tb21lbnR1AgF8RGlzcGF0Y2hUaW1lPEJsb2NrTnVtYmVyRm9yPFQ+PgAAJLBQcm9wb3NlIGEgcmVmZXJlbmR1bSBvbiBhIHByaXZpbGVnZWQgYWN0aW9uLgBZAS0gYG9yaWdpbmA6IG11c3QgYmUgYFN1Ym1pdE9yaWdpbmAgYW5kIHRoZSBhY2NvdW50IG11c3QgaGF2ZSBgU3VibWlzc2lvbkRlcG9zaXRgIGZ1bmRzMCAgYXZhaWxhYmxlLi0BLSBgcHJvcG9zYWxfb3JpZ2luYDogVGhlIG9yaWdpbiBmcm9tIHdoaWNoIHRoZSBwcm9wb3NhbCBzaG91bGQgYmUgZXhlY3V0ZWQubC0gYHByb3Bvc2FsYDogVGhlIHByb3Bvc2FsLhUBLSBgZW5hY3RtZW50X21vbWVudGA6IFRoZSBtb21lbnQgdGhhdCB0aGUgcHJvcG9zYWwgc2hvdWxkIGJlIGVuYWN0ZWQuAEhFbWl0cyBgU3VibWl0dGVkYC5YcGxhY2VfZGVjaXNpb25fZGVwb3NpdAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAEgrFBvc3QgdGhlIERlY2lzaW9uIERlcG9zaXQgZm9yIGEgcmVmZXJlbmR1bS4AOQEtIGBvcmlnaW5gOiBtdXN0IGJlIGBTaWduZWRgIGFuZCB0aGUgYWNjb3VudCBtdXN0IGhhdmUgZnVuZHMgYXZhaWxhYmxlIGZvciB0aGWgICByZWZlcmVuZHVtJ3MgdHJhY2sncyBEZWNpc2lvbiBEZXBvc2l0LlEBLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgdGhlIHN1Ym1pdHRlZCByZWZlcmVuZHVtIHdob3NlIERlY2lzaW9uIERlcG9zaXQgaXMgeWV0IHRvIGJlJCAgcG9zdGVkLgB4RW1pdHMgYERlY2lzaW9uRGVwb3NpdFBsYWNlZGAuXHJlZnVuZF9kZWNpc2lvbl9kZXBvc2l0BAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgAAhwpAVJlZnVuZCB0aGUgRGVjaXNpb24gRGVwb3NpdCBmb3IgYSBjbG9zZWQgcmVmZXJlbmR1bSBiYWNrIHRvIHRoZSBkZXBvc2l0b3IuAJwtIGBvcmlnaW5gOiBtdXN0IGJlIGBTaWduZWRgIG9yIGBSb290YC5NAS0gYGluZGV4YDogVGhlIGluZGV4IG9mIGEgY2xvc2VkIHJlZmVyZW5kdW0gd2hvc2UgRGVjaXNpb24gRGVwb3NpdCBoYXMgbm90IHlldCBiZWVuLCAgcmVmdW5kZWQuAIBFbWl0cyBgRGVjaXNpb25EZXBvc2l0UmVmdW5kZWRgLhhjYW5jZWwEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAADGHRDYW5jZWwgYW4gb25nb2luZyByZWZlcmVuZHVtLgCcLSBgb3JpZ2luYDogbXVzdCBiZSB0aGUgYENhbmNlbE9yaWdpbmAu3C0gYGluZGV4YDogVGhlIGluZGV4IG9mIHRoZSByZWZlcmVuZHVtIHRvIGJlIGNhbmNlbGxlZC4ASEVtaXRzIGBDYW5jZWxsZWRgLhBraWxsBAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgABBjQQ2FuY2VsIGFuIG9uZ29pbmcgcmVmZXJlbmR1bSBhbmQgc2xhc2ggdGhlIGRlcG9zaXRzLgCULSBgb3JpZ2luYDogbXVzdCBiZSB0aGUgYEtpbGxPcmlnaW5gLtwtIGBpbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgcmVmZXJlbmR1bSB0byBiZSBjYW5jZWxsZWQuAJBFbWl0cyBgS2lsbGVkYCBhbmQgYERlcG9zaXRTbGFzaGVkYC5AbnVkZ2VfcmVmZXJlbmR1bQQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4AAUQHQFBZHZhbmNlIGEgcmVmZXJlbmR1bSBvbnRvIGl0cyBuZXh0IGxvZ2ljYWwgc3RhdGUuIE9ubHkgdXNlZCBpbnRlcm5hbGx5LgBsLSBgb3JpZ2luYDogbXVzdCBiZSBgUm9vdGAupC0gYGluZGV4YDogdGhlIHJlZmVyZW5kdW0gdG8gYmUgYWR2YW5jZWQuSG9uZV9mZXdlcl9kZWNpZGluZwQBFHRyYWNrXQEBPFRyYWNrSWRPZjxULCBJPgAGJAkBQWR2YW5jZSBhIHRyYWNrIG9udG8gaXRzIG5leHQgbG9naWNhbCBzdGF0ZS4gT25seSB1c2VkIGludGVybmFsbHkuAGwtIGBvcmlnaW5gOiBtdXN0IGJlIGBSb290YC6QLSBgdHJhY2tgOiB0aGUgdHJhY2sgdG8gYmUgYWR2YW5jZWQuAFEBQWN0aW9uIGl0ZW0gZm9yIHdoZW4gdGhlcmUgaXMgbm93IG9uZSBmZXdlciByZWZlcmVuZHVtIGluIHRoZSBkZWNpZGluZyBwaGFzZSBhbmQgdGhlFQFgRGVjaWRpbmdDb3VudGAgaXMgbm90IHlldCB1cGRhdGVkLiBUaGlzIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIGVpdGhlcjolAS0gYmVnaW4gZGVjaWRpbmcgYW5vdGhlciByZWZlcmVuZHVtIChhbmQgbGVhdmUgYERlY2lkaW5nQ291bnRgIGFsb25lKTsgb3JwLSBkZWNyZW1lbnQgYERlY2lkaW5nQ291bnRgLmRyZWZ1bmRfc3VibWlzc2lvbl9kZXBvc2l0BAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgABxwxAVJlZnVuZCB0aGUgU3VibWlzc2lvbiBEZXBvc2l0IGZvciBhIGNsb3NlZCByZWZlcmVuZHVtIGJhY2sgdG8gdGhlIGRlcG9zaXRvci4AnC0gYG9yaWdpbmA6IG11c3QgYmUgYFNpZ25lZGAgb3IgYFJvb3RgLlUBLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgYSBjbG9zZWQgcmVmZXJlbmR1bSB3aG9zZSBTdWJtaXNzaW9uIERlcG9zaXQgaGFzIG5vdCB5ZXQgYmVlbiwgIHJlZnVuZGVkLgCIRW1pdHMgYFN1Ym1pc3Npb25EZXBvc2l0UmVmdW5kZWRgLjBzZXRfbWV0YWRhdGEIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleAABKG1heWJlX2hhc2h5AgE8T3B0aW9uPFQ6Okhhc2g+AAgcmFNldCBvciBjbGVhciBtZXRhZGF0YSBvZiBhIHJlZmVyZW5kdW0uACxQYXJhbWV0ZXJzOkUBLSBgb3JpZ2luYDogTXVzdCBiZSBgU2lnbmVkYCBieSBhIGNyZWF0b3Igb2YgYSByZWZlcmVuZHVtIG9yIGJ5IGFueW9uZSB0byBjbGVhciBhkCAgbWV0YWRhdGEgb2YgYSBmaW5pc2hlZCByZWZlcmVuZHVtLg0BLSBgaW5kZXhgOiAgVGhlIGluZGV4IG9mIGEgcmVmZXJlbmR1bSB0byBzZXQgb3IgY2xlYXIgbWV0YWRhdGEgZm9yLlEBLSBgbWF5YmVfaGFzaGA6IFRoZSBoYXNoIG9mIGFuIG9uLWNoYWluIHN0b3JlZCBwcmVpbWFnZS4gYE5vbmVgIHRvIGNsZWFyIGEgbWV0YWRhdGEuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLoUCDEBwYWxsZXRfd2hpdGVsaXN0GHBhbGxldBBDYWxsBARUAAEQOHdoaXRlbGlzdF9jYWxsBAEkY2FsbF9oYXNoNAEcVDo6SGFzaAAAAFxyZW1vdmVfd2hpdGVsaXN0ZWRfY2FsbAQBJGNhbGxfaGFzaDQBHFQ6Okhhc2gAAQBkZGlzcGF0Y2hfd2hpdGVsaXN0ZWRfY2FsbAwBJGNhbGxfaGFzaDQBHFQ6Okhhc2gAAUBjYWxsX2VuY29kZWRfbGVuEAEMdTMyAAFMY2FsbF93ZWlnaHRfd2l0bmVzcygBGFdlaWdodAACAJxkaXNwYXRjaF93aGl0ZWxpc3RlZF9jYWxsX3dpdGhfcHJlaW1hZ2UEARBjYWxsZQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AAwAEDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuiQIMRHBhbGxldF9wYXJhbWV0ZXJzGHBhbGxldBBDYWxsBARUAAEENHNldF9wYXJhbWV0ZXIEASRrZXlfdmFsdWWNAgFQVDo6UnVudGltZVBhcmFtZXRlcnMAABB0U2V0IHRoZSB2YWx1ZSBvZiBhIHBhcmFtZXRlci4AVQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIGBBZG1pbk9yaWdpbmAgZm9yIHRoZSBnaXZlbiBga2V5YC4gVmFsdWVzIGJliGRlbGV0ZWQgYnkgc2V0dGluZyB0aGVtIHRvIGBOb25lYC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMujQIIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWVEUnVudGltZVBhcmFtZXRlcnMAAQgkSW5mbGF0aW9uBACRAgGUZHluYW1pY19wYXJhbXM6OmluZmxhdGlvbjo6UGFyYW1ldGVycwAAACBUcmVhc3VyeQQAtQIBkGR5bmFtaWNfcGFyYW1zOjp0cmVhc3VyeTo6UGFyYW1ldGVycwABAACRAhBYc3RhZ2luZ19rdXNhbWFfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb24oUGFyYW1ldGVycwABFDBNaW5JbmZsYXRpb24IAJUCATBNaW5JbmZsYXRpb24AAJkCAUxPcHRpb248UGVycXVpbnRpbGw+AAAAME1heEluZmxhdGlvbggAoQIBME1heEluZmxhdGlvbgAAmQIBTE9wdGlvbjxQZXJxdWludGlsbD4AAQAoSWRlYWxTdGFrZQgApQIBKElkZWFsU3Rha2UAAJkCAUxPcHRpb248UGVycXVpbnRpbGw+AAIAHEZhbGxvZmYIAKkCARxGYWxsb2ZmAACZAgFMT3B0aW9uPFBlcnF1aW50aWxsPgADADxVc2VBdWN0aW9uU2xvdHMIAK0CATxVc2VBdWN0aW9uU2xvdHMAALECATBPcHRpb248Ym9vbD4ABAAAlQIQWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uME1pbkluZmxhdGlvbgAAAACZAgQYT3B0aW9uBARUAZ0CAQgQTm9uZQAAABBTb21lBACdAgAAAQAAnQIMNHNwX2FyaXRobWV0aWMocGVyX3RoaW5ncyxQZXJxdWludGlsbAAABAAwAQx1NjQAAKECEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zJGluZmxhdGlvbjBNYXhJbmZsYXRpb24AAAAApQIQWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uKElkZWFsU3Rha2UAAAAAqQIQWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uHEZhbGxvZmYAAAAArQIQWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWU4ZHluYW1pY19wYXJhbXMkaW5mbGF0aW9uPFVzZUF1Y3Rpb25TbG90cwAAAACxAgQYT3B0aW9uBARUASABCBBOb25lAAAAEFNvbWUEACAAAAEAALUCEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zIHRyZWFzdXJ5KFBhcmFtZXRlcnMAAQgsQnVyblBvcnRpb24IALkCASxCdXJuUG9ydGlvbgAAvQIBPE9wdGlvbjxQZXJtaWxsPgAAADxCdXJuRGVzdGluYXRpb24IAMUCATxCdXJuRGVzdGluYXRpb24AAMkCAXhPcHRpb248QnVybkRlc3RpbmF0aW9uQWNjb3VudD4AAQAAuQIQWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWU4ZHluYW1pY19wYXJhbXMgdHJlYXN1cnksQnVyblBvcnRpb24AAAAAvQIEGE9wdGlvbgQEVAHBAgEIEE5vbmUAAAAQU29tZQQAwQIAAAEAAMECDDRzcF9hcml0aG1ldGljKHBlcl90aGluZ3McUGVybWlsbAAABAAQAQx1MzIAAMUCEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zIHRyZWFzdXJ5PEJ1cm5EZXN0aW5hdGlvbgAAAADJAgQYT3B0aW9uBARUAc0CAQgQTm9uZQAAABBTb21lBADNAgAAAQAAzQIIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWVYQnVybkRlc3RpbmF0aW9uQWNjb3VudAAABADhAQFET3B0aW9uPEFjY291bnRJZD4AANECEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhhjbGFpbXMYcGFsbGV0EENhbGwEBFQAARQUY2xhaW0IARBkZXN0AAEwVDo6QWNjb3VudElkAAFIZXRoZXJldW1fc2lnbmF0dXJl1QIBOEVjZHNhU2lnbmF0dXJlAABgiE1ha2UgYSBjbGFpbSB0byBjb2xsZWN0IHlvdXIgRE9Ucy4AxFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9Ob25lXy4AUFVuc2lnbmVkIFZhbGlkYXRpb246BQFBIGNhbGwgdG8gY2xhaW0gaXMgZGVlbWVkIHZhbGlkIGlmIHRoZSBzaWduYXR1cmUgcHJvdmlkZWQgbWF0Y2hlc3x0aGUgZXhwZWN0ZWQgc2lnbmVkIG1lc3NhZ2Ugb2Y6AGg+IEV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOpQ+IChjb25maWd1cmVkIHByZWZpeCBzdHJpbmcpKGFkZHJlc3MpAKRhbmQgYGFkZHJlc3NgIG1hdGNoZXMgdGhlIGBkZXN0YCBhY2NvdW50LgAsUGFyYW1ldGVyczrYLSBgZGVzdGA6IFRoZSBkZXN0aW5hdGlvbiBhY2NvdW50IHRvIHBheW91dCB0aGUgY2xhaW0uXQEtIGBldGhlcmV1bV9zaWduYXR1cmVgOiBUaGUgc2lnbmF0dXJlIG9mIGFuIGV0aGVyZXVtIHNpZ25lZCBtZXNzYWdlIG1hdGNoaW5nIHRoZSBmb3JtYXRIICBkZXNjcmliZWQgYWJvdmUuACA8d2VpZ2h0PvxUaGUgd2VpZ2h0IG9mIHRoaXMgY2FsbCBpcyBpbnZhcmlhbnQgb3ZlciB0aGUgaW5wdXQgcGFyYW1ldGVycy7gV2VpZ2h0IGluY2x1ZGVzIGxvZ2ljIHRvIHZhbGlkYXRlIHVuc2lnbmVkIGBjbGFpbWAgY2FsbC4AWFRvdGFsIENvbXBsZXhpdHk6IE8oMSkkPC93ZWlnaHQ+KG1pbnRfY2xhaW0QAQx3aG/dAgE8RXRoZXJldW1BZGRyZXNzAAEUdmFsdWUYATBCYWxhbmNlT2Y8VD4AAUB2ZXN0aW5nX3NjaGVkdWxl4QIB3E9wdGlvbjwoQmFsYW5jZU9mPFQ+LCBCYWxhbmNlT2Y8VD4sIEJsb2NrTnVtYmVyRm9yPFQ+KT4AASRzdGF0ZW1lbnTpAgFUT3B0aW9uPFN0YXRlbWVudEtpbmQ+AAE8hE1pbnQgYSBuZXcgY2xhaW0gdG8gY29sbGVjdCBET1RzLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgAsUGFyYW1ldGVyczrwLSBgd2hvYDogVGhlIEV0aGVyZXVtIGFkZHJlc3MgYWxsb3dlZCB0byBjb2xsZWN0IHRoaXMgY2xhaW0uzC0gYHZhbHVlYDogVGhlIG51bWJlciBvZiBET1RzIHRoYXQgd2lsbCBiZSBjbGFpbWVkLgkBLSBgdmVzdGluZ19zY2hlZHVsZWA6IEFuIG9wdGlvbmFsIHZlc3Rpbmcgc2NoZWR1bGUgZm9yIHRoZXNlIERPVHMuACA8d2VpZ2h0PvxUaGUgd2VpZ2h0IG9mIHRoaXMgY2FsbCBpcyBpbnZhcmlhbnQgb3ZlciB0aGUgaW5wdXQgcGFyYW1ldGVycy4dAVdlIGFzc3VtZSB3b3JzdCBjYXNlIHRoYXQgYm90aCB2ZXN0aW5nIGFuZCBzdGF0ZW1lbnQgaXMgYmVpbmcgaW5zZXJ0ZWQuAFhUb3RhbCBDb21wbGV4aXR5OiBPKDEpJDwvd2VpZ2h0PjBjbGFpbV9hdHRlc3QMARBkZXN0AAEwVDo6QWNjb3VudElkAAFIZXRoZXJldW1fc2lnbmF0dXJl1QIBOEVjZHNhU2lnbmF0dXJlAAEkc3RhdGVtZW50OAEcVmVjPHU4PgACbORNYWtlIGEgY2xhaW0gdG8gY29sbGVjdCB5b3VyIERPVHMgYnkgc2lnbmluZyBhIHN0YXRlbWVudC4AxFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9Ob25lXy4AUFVuc2lnbmVkIFZhbGlkYXRpb246KQFBIGNhbGwgdG8gYGNsYWltX2F0dGVzdGAgaXMgZGVlbWVkIHZhbGlkIGlmIHRoZSBzaWduYXR1cmUgcHJvdmlkZWQgbWF0Y2hlc3x0aGUgZXhwZWN0ZWQgc2lnbmVkIG1lc3NhZ2Ugb2Y6AGg+IEV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOsA+IChjb25maWd1cmVkIHByZWZpeCBzdHJpbmcpKGFkZHJlc3MpKHN0YXRlbWVudCkASQFhbmQgYGFkZHJlc3NgIG1hdGNoZXMgdGhlIGBkZXN0YCBhY2NvdW50OyB0aGUgYHN0YXRlbWVudGAgbXVzdCBtYXRjaCB0aGF0IHdoaWNoIGlzwGV4cGVjdGVkIGFjY29yZGluZyB0byB5b3VyIHB1cmNoYXNlIGFycmFuZ2VtZW50LgAsUGFyYW1ldGVyczrYLSBgZGVzdGA6IFRoZSBkZXN0aW5hdGlvbiBhY2NvdW50IHRvIHBheW91dCB0aGUgY2xhaW0uXQEtIGBldGhlcmV1bV9zaWduYXR1cmVgOiBUaGUgc2lnbmF0dXJlIG9mIGFuIGV0aGVyZXVtIHNpZ25lZCBtZXNzYWdlIG1hdGNoaW5nIHRoZSBmb3JtYXRIICBkZXNjcmliZWQgYWJvdmUuOQEtIGBzdGF0ZW1lbnRgOiBUaGUgaWRlbnRpdHkgb2YgdGhlIHN0YXRlbWVudCB3aGljaCBpcyBiZWluZyBhdHRlc3RlZCB0byBpbiB0aGUwICBzaWduYXR1cmUuACA8d2VpZ2h0PvxUaGUgd2VpZ2h0IG9mIHRoaXMgY2FsbCBpcyBpbnZhcmlhbnQgb3ZlciB0aGUgaW5wdXQgcGFyYW1ldGVycy78V2VpZ2h0IGluY2x1ZGVzIGxvZ2ljIHRvIHZhbGlkYXRlIHVuc2lnbmVkIGBjbGFpbV9hdHRlc3RgIGNhbGwuAFhUb3RhbCBDb21wbGV4aXR5OiBPKDEpJDwvd2VpZ2h0PhhhdHRlc3QEASRzdGF0ZW1lbnQ4ARxWZWM8dTg+AANM9EF0dGVzdCB0byBhIHN0YXRlbWVudCwgbmVlZGVkIHRvIGZpbmFsaXplIHRoZSBjbGFpbXMgcHJvY2Vzcy4AGQFXQVJOSU5HOiBJbnNlY3VyZSB1bmxlc3MgeW91ciBjaGFpbiBpbmNsdWRlcyBgUHJldmFsaWRhdGVBdHRlc3RzYCBhcyBhSGBTaWduZWRFeHRlbnNpb25gLgBQVW5zaWduZWQgVmFsaWRhdGlvbjopAUEgY2FsbCB0byBhdHRlc3QgaXMgZGVlbWVkIHZhbGlkIGlmIHRoZSBzZW5kZXIgaGFzIGEgYFByZWNsYWltYCByZWdpc3RlcmVk9GFuZCBwcm92aWRlcyBhIGBzdGF0ZW1lbnRgIHdoaWNoIGlzIGV4cGVjdGVkIGZvciB0aGUgYWNjb3VudC4ALFBhcmFtZXRlcnM6OQEtIGBzdGF0ZW1lbnRgOiBUaGUgaWRlbnRpdHkgb2YgdGhlIHN0YXRlbWVudCB3aGljaCBpcyBiZWluZyBhdHRlc3RlZCB0byBpbiB0aGUwICBzaWduYXR1cmUuACA8d2VpZ2h0PvxUaGUgd2VpZ2h0IG9mIHRoaXMgY2FsbCBpcyBpbnZhcmlhbnQgb3ZlciB0aGUgaW5wdXQgcGFyYW1ldGVycy7wV2VpZ2h0IGluY2x1ZGVzIGxvZ2ljIHRvIGRvIHByZS12YWxpZGF0aW9uIG9uIGBhdHRlc3RgIGNhbGwuAFhUb3RhbCBDb21wbGV4aXR5OiBPKDEpJDwvd2VpZ2h0Pihtb3ZlX2NsYWltDAEMb2xk3QIBPEV0aGVyZXVtQWRkcmVzcwABDG5ld90CATxFdGhlcmV1bUFkZHJlc3MAAThtYXliZV9wcmVjbGFpbeEBAVBPcHRpb248VDo6QWNjb3VudElkPgAEAAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7VAgxccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zOEVjZHNhU2lnbmF0dXJlAAAEANkCASBbdTg7IDY1XQAA2QIAAANBAAAACADdAgxccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zPEV0aGVyZXVtQWRkcmVzcwAABADgASBbdTg7IDIwXQAA4QIEGE9wdGlvbgQEVAHlAgEIEE5vbmUAAAAQU29tZQQA5QIAAAEAAOUCAAAEDBgYEADpAgQYT3B0aW9uBARUAe0CAQgQTm9uZQAAABBTb21lBADtAgAAAQAA7QIMXHBvbGthZG90X3J1bnRpbWVfY29tbW9uGGNsYWltczRTdGF0ZW1lbnRLaW5kAAEIHFJlZ3VsYXIAAAAQU2FmdAABAADxAgw4cGFsbGV0X3V0aWxpdHkYcGFsbGV0EENhbGwEBFQAARgUYmF0Y2gEARRjYWxsc/UCAXxWZWM8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AABIfFNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscy4AsE1heSBiZSBjYWxsZWQgZnJvbSBhbnkgb3JpZ2luIGV4Y2VwdCBgTm9uZWAuAF0BLSBgY2FsbHNgOiBUaGUgY2FsbHMgdG8gYmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBzYW1lIG9yaWdpbi4gVGhlIG51bWJlciBvZiBjYWxsIG11c3Qgbm90OQEgIGV4Y2VlZCB0aGUgY29uc3RhbnQ6IGBiYXRjaGVkX2NhbGxzX2xpbWl0YCAoYXZhaWxhYmxlIGluIGNvbnN0YW50IG1ldGFkYXRhKS4AVQFJZiBvcmlnaW4gaXMgcm9vdCB0aGVuIHRoZSBjYWxscyBhcmUgZGlzcGF0Y2hlZCB3aXRob3V0IGNoZWNraW5nIG9yaWdpbiBmaWx0ZXIuIChUaGlz7GluY2x1ZGVzIGJ5cGFzc2luZyBgZnJhbWVfc3lzdGVtOjpDb25maWc6OkJhc2VDYWxsRmlsdGVyYCkuADQjIyBDb21wbGV4aXR50C0gTyhDKSB3aGVyZSBDIGlzIHRoZSBudW1iZXIgb2YgY2FsbHMgdG8gYmUgYmF0Y2hlZC4AVQFUaGlzIHdpbGwgcmV0dXJuIGBPa2AgaW4gYWxsIGNpcmN1bXN0YW5jZXMuIFRvIGRldGVybWluZSB0aGUgc3VjY2VzcyBvZiB0aGUgYmF0Y2gsIGFuMQFldmVudCBpcyBkZXBvc2l0ZWQuIElmIGEgY2FsbCBmYWlsZWQgYW5kIHRoZSBiYXRjaCB3YXMgaW50ZXJydXB0ZWQsIHRoZW4gdGhlVQFgQmF0Y2hJbnRlcnJ1cHRlZGAgZXZlbnQgaXMgZGVwb3NpdGVkLCBhbG9uZyB3aXRoIHRoZSBudW1iZXIgb2Ygc3VjY2Vzc2Z1bCBjYWxscyBtYWRlTQFhbmQgdGhlIGVycm9yIG9mIHRoZSBmYWlsZWQgY2FsbC4gSWYgYWxsIHdlcmUgc3VjY2Vzc2Z1bCwgdGhlbiB0aGUgYEJhdGNoQ29tcGxldGVkYExldmVudCBpcyBkZXBvc2l0ZWQuNGFzX2Rlcml2YXRpdmUIARRpbmRleF0BAQx1MTYAARBjYWxsZQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AATTcU2VuZCBhIGNhbGwgdGhyb3VnaCBhbiBpbmRleGVkIHBzZXVkb255bSBvZiB0aGUgc2VuZGVyLgBVAUZpbHRlciBmcm9tIG9yaWdpbiBhcmUgcGFzc2VkIGFsb25nLiBUaGUgY2FsbCB3aWxsIGJlIGRpc3BhdGNoZWQgd2l0aCBhbiBvcmlnaW4gd2hpY2i8dXNlIHRoZSBzYW1lIGZpbHRlciBhcyB0aGUgb3JpZ2luIG9mIHRoaXMgY2FsbC4ARQFOT1RFOiBJZiB5b3UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbnkgYWNjb3VudC1iYXNlZCBmaWx0ZXJpbmcgaXMgbm90IGhvbm9yZWQgKGkuZS5hAWJlY2F1c2UgeW91IGV4cGVjdCBgcHJveHlgIHRvIGhhdmUgYmVlbiB1c2VkIHByaW9yIGluIHRoZSBjYWxsIHN0YWNrIGFuZCB5b3UgZG8gbm90IHdhbnRRAXRoZSBjYWxsIHJlc3RyaWN0aW9ucyB0byBhcHBseSB0byBhbnkgc3ViLWFjY291bnRzKSwgdGhlbiB1c2UgYGFzX211bHRpX3RocmVzaG9sZF8xYHxpbiB0aGUgTXVsdGlzaWcgcGFsbGV0IGluc3RlYWQuAPROT1RFOiBQcmlvciB0byB2ZXJzaW9uICoxMiwgdGhpcyB3YXMgY2FsbGVkIGBhc19saW1pdGVkX3N1YmAuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4kYmF0Y2hfYWxsBAEUY2FsbHP1AgF8VmVjPDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgACNOxTZW5kIGEgYmF0Y2ggb2YgZGlzcGF0Y2ggY2FsbHMgYW5kIGF0b21pY2FsbHkgZXhlY3V0ZSB0aGVtLiEBVGhlIHdob2xlIHRyYW5zYWN0aW9uIHdpbGwgcm9sbGJhY2sgYW5kIGZhaWwgaWYgYW55IG9mIHRoZSBjYWxscyBmYWlsZWQuALBNYXkgYmUgY2FsbGVkIGZyb20gYW55IG9yaWdpbiBleGNlcHQgYE5vbmVgLgBdAS0gYGNhbGxzYDogVGhlIGNhbGxzIHRvIGJlIGRpc3BhdGNoZWQgZnJvbSB0aGUgc2FtZSBvcmlnaW4uIFRoZSBudW1iZXIgb2YgY2FsbCBtdXN0IG5vdDkBICBleGNlZWQgdGhlIGNvbnN0YW50OiBgYmF0Y2hlZF9jYWxsc19saW1pdGAgKGF2YWlsYWJsZSBpbiBjb25zdGFudCBtZXRhZGF0YSkuAFUBSWYgb3JpZ2luIGlzIHJvb3QgdGhlbiB0aGUgY2FsbHMgYXJlIGRpc3BhdGNoZWQgd2l0aG91dCBjaGVja2luZyBvcmlnaW4gZmlsdGVyLiAoVGhpc+xpbmNsdWRlcyBieXBhc3NpbmcgYGZyYW1lX3N5c3RlbTo6Q29uZmlnOjpCYXNlQ2FsbEZpbHRlcmApLgA0IyMgQ29tcGxleGl0edAtIE8oQykgd2hlcmUgQyBpcyB0aGUgbnVtYmVyIG9mIGNhbGxzIHRvIGJlIGJhdGNoZWQuLGRpc3BhdGNoX2FzCAEkYXNfb3JpZ2luWQIBVEJveDxUOjpQYWxsZXRzT3JpZ2luPgABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgADGMhEaXNwYXRjaGVzIGEgZnVuY3Rpb24gY2FsbCB3aXRoIGEgcHJvdmlkZWQgb3JpZ2luLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgA0IyMgQ29tcGxleGl0eRwtIE8oMSkuLGZvcmNlX2JhdGNoBAEUY2FsbHP1AgF8VmVjPDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAENHxTZW5kIGEgYmF0Y2ggb2YgZGlzcGF0Y2ggY2FsbHMu1FVubGlrZSBgYmF0Y2hgLCBpdCBhbGxvd3MgZXJyb3JzIGFuZCB3b24ndCBpbnRlcnJ1cHQuALBNYXkgYmUgY2FsbGVkIGZyb20gYW55IG9yaWdpbiBleGNlcHQgYE5vbmVgLgBdAS0gYGNhbGxzYDogVGhlIGNhbGxzIHRvIGJlIGRpc3BhdGNoZWQgZnJvbSB0aGUgc2FtZSBvcmlnaW4uIFRoZSBudW1iZXIgb2YgY2FsbCBtdXN0IG5vdDkBICBleGNlZWQgdGhlIGNvbnN0YW50OiBgYmF0Y2hlZF9jYWxsc19saW1pdGAgKGF2YWlsYWJsZSBpbiBjb25zdGFudCBtZXRhZGF0YSkuAE0BSWYgb3JpZ2luIGlzIHJvb3QgdGhlbiB0aGUgY2FsbHMgYXJlIGRpc3BhdGNoIHdpdGhvdXQgY2hlY2tpbmcgb3JpZ2luIGZpbHRlci4gKFRoaXPsaW5jbHVkZXMgYnlwYXNzaW5nIGBmcmFtZV9zeXN0ZW06OkNvbmZpZzo6QmFzZUNhbGxGaWx0ZXJgKS4ANCMjIENvbXBsZXhpdHnQLSBPKEMpIHdoZXJlIEMgaXMgdGhlIG51bWJlciBvZiBjYWxscyB0byBiZSBiYXRjaGVkLix3aXRoX3dlaWdodAgBEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgABGHdlaWdodCgBGFdlaWdodAAFGMREaXNwYXRjaCBhIGZ1bmN0aW9uIGNhbGwgd2l0aCBhIHNwZWNpZmllZCB3ZWlnaHQuAC0BVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGVjayB0aGUgd2VpZ2h0IG9mIHRoZSBjYWxsLCBhbmQgaW5zdGVhZCBhbGxvd3MgdGhluFJvb3Qgb3JpZ2luIHRvIHNwZWNpZnkgdGhlIHdlaWdodCBvZiB0aGUgY2FsbC4AxFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9Sb290Xy4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMu9QIAAAJlAQD5Agw4cGFsbGV0X3NvY2lldHkYcGFsbGV0EENhbGwIBFQABEkAAVAMYmlkBAEUdmFsdWUYATxCYWxhbmNlT2Y8VCwgST4AACTcQSB1c2VyIG91dHNpZGUgb2YgdGhlIHNvY2lldHkgY2FuIG1ha2UgYSBiaWQgZm9yIGVudHJ5LgBhAVBheW1lbnQ6IFRoZSBncm91cCdzIENhbmRpZGF0ZSBEZXBvc2l0IHdpbGwgYmUgcmVzZXJ2ZWQgZm9yIG1ha2luZyBhIGJpZC4gSXQgaXMgcmV0dXJuZWTsd2hlbiB0aGUgYmlkIGJlY29tZXMgYSBtZW1iZXIsIG9yIGlmIHRoZSBiaWQgY2FsbHMgYHVuYmlkYC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgAsUGFyYW1ldGVyczpVAS0gYHZhbHVlYDogQSBvbmUgdGltZSBwYXltZW50IHRoZSBiaWQgd291bGQgbGlrZSB0byByZWNlaXZlIHdoZW4gam9pbmluZyB0aGUgc29jaWV0eS4UdW5iaWQAARzUQSBiaWRkZXIgY2FuIHJlbW92ZSB0aGVpciBiaWQgZm9yIGVudHJ5IGludG8gc29jaWV0eS78QnkgZG9pbmcgc28sIHRoZXkgd2lsbCBoYXZlIHRoZWlyIGNhbmRpZGF0ZSBkZXBvc2l0IHJldHVybmVkIG9ygHRoZXkgd2lsbCB1bnZvdWNoIHRoZWlyIHZvdWNoZXIuAPhQYXltZW50OiBUaGUgYmlkIGRlcG9zaXQgaXMgdW5yZXNlcnZlZCBpZiB0aGUgdXNlciBtYWRlIGEgYmlkLgABAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBhIGJpZGRlci4Udm91Y2gMAQx3aG+lAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZRgBPEJhbGFuY2VPZjxULCBJPgABDHRpcBgBPEJhbGFuY2VPZjxULCBJPgACREEBQXMgYSBtZW1iZXIsIHZvdWNoIGZvciBzb21lb25lIHRvIGpvaW4gc29jaWV0eSBieSBwbGFjaW5nIGEgYmlkIG9uIHRoZWlyIGJlaGFsZi4AUQFUaGVyZSBpcyBubyBkZXBvc2l0IHJlcXVpcmVkIHRvIHZvdWNoIGZvciBhIG5ldyBiaWQsIGJ1dCBhIG1lbWJlciBjYW4gb25seSB2b3VjaCBmb3JZAW9uZSBiaWQgYXQgYSB0aW1lLiBJZiB0aGUgYmlkIGJlY29tZXMgYSBzdXNwZW5kZWQgY2FuZGlkYXRlIGFuZCB1bHRpbWF0ZWx5IHJlamVjdGVkIGJ5PQF0aGUgc3VzcGVuc2lvbiBqdWRnZW1lbnQgb3JpZ2luLCB0aGUgbWVtYmVyIHdpbGwgYmUgYmFubmVkIGZyb20gdm91Y2hpbmcgYWdhaW4uAFUBQXMgYSB2b3VjaGluZyBtZW1iZXIsIHlvdSBjYW4gY2xhaW0gYSB0aXAgaWYgdGhlIGNhbmRpZGF0ZSBpcyBhY2NlcHRlZC4gVGhpcyB0aXAgd2lsbE0BYmUgcGFpZCBhcyBhIHBvcnRpb24gb2YgdGhlIHJld2FyZCB0aGUgbWVtYmVyIHdpbGwgcmVjZWl2ZSBmb3Igam9pbmluZyB0aGUgc29jaWV0eS4AAQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgYSBtZW1iZXIuACxQYXJhbWV0ZXJzOsgtIGB3aG9gOiBUaGUgdXNlciB3aG8geW91IHdvdWxkIGxpa2UgdG8gdm91Y2ggZm9yLk0BLSBgdmFsdWVgOiBUaGUgdG90YWwgcmV3YXJkIHRvIGJlIHBhaWQgYmV0d2VlbiB5b3UgYW5kIHRoZSBjYW5kaWRhdGUgaWYgdGhleSBiZWNvbWVgYSBtZW1iZXIgaW4gdGhlIHNvY2lldHkuRQEtIGB0aXBgOiBZb3VyIGN1dCBvZiB0aGUgdG90YWwgYHZhbHVlYCBwYXlvdXQgd2hlbiB0aGUgY2FuZGlkYXRlIGlzIGluZHVjdGVkIGludG8RAXRoZSBzb2NpZXR5LiBUaXBzIGxhcmdlciB0aGFuIGB2YWx1ZWAgd2lsbCBiZSBzYXR1cmF0ZWQgdXBvbiBwYXlvdXQuHHVudm91Y2gAAxwpAUFzIGEgdm91Y2hpbmcgbWVtYmVyLCB1bnZvdWNoIGEgYmlkLiBUaGlzIG9ubHkgd29ya3Mgd2hpbGUgdm91Y2hlZCB1c2VyIGlzkG9ubHkgYSBiaWRkZXIgKGFuZCBub3QgYSBjYW5kaWRhdGUpLgAlAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBhIHZvdWNoaW5nIG1lbWJlci4ALFBhcmFtZXRlcnM6KQEtIGBwb3NgOiBQb3NpdGlvbiBpbiB0aGUgYEJpZHNgIHZlY3RvciBvZiB0aGUgYmlkIHdobyBzaG91bGQgYmUgdW52b3VjaGVkLhB2b3RlCAEkY2FuZGlkYXRlpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEcYXBwcm92ZSABEGJvb2wABCCEQXMgYSBtZW1iZXIsIHZvdGUgb24gYSBjYW5kaWRhdGUuAAEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIGEgbWVtYmVyLgAsUGFyYW1ldGVyczoJAS0gYGNhbmRpZGF0ZWA6IFRoZSBjYW5kaWRhdGUgdGhhdCB0aGUgbWVtYmVyIHdvdWxkIGxpa2UgdG8gYmlkIG9uLkUBLSBgYXBwcm92ZWA6IEEgYm9vbGVhbiB3aGljaCBzYXlzIGlmIHRoZSBjYW5kaWRhdGUgc2hvdWxkIGJlIGFwcHJvdmVkIChgdHJ1ZWApIG9yVCAgcmVqZWN0ZWQgKGBmYWxzZWApLjRkZWZlbmRlcl92b3RlBAEcYXBwcm92ZSABEGJvb2wABRyIQXMgYSBtZW1iZXIsIHZvdGUgb24gdGhlIGRlZmVuZGVyLgABAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBhIG1lbWJlci4ALFBhcmFtZXRlcnM68C0gYGFwcHJvdmVgOiBBIGJvb2xlYW4gd2hpY2ggc2F5cyBpZiB0aGUgY2FuZGlkYXRlIHNob3VsZCBiZaBhcHByb3ZlZCAoYHRydWVgKSBvciByZWplY3RlZCAoYGZhbHNlYCkuGHBheW91dAAGKEEBVHJhbnNmZXIgdGhlIGZpcnN0IG1hdHVyZWQgcGF5b3V0IGZvciB0aGUgc2VuZGVyIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVjb3Jkcy4AQQFOT1RFOiBUaGlzIGV4dHJpbnNpYyBuZWVkcyB0byBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgdG8gY2xhaW0gbXVsdGlwbGUgbWF0dXJlZCBwYXlvdXRzLgAdAVBheW1lbnQ6IFRoZSBtZW1iZXIgd2lsbCByZWNlaXZlIGEgcGF5bWVudCBlcXVhbCB0byB0aGVpciBmaXJzdCBtYXR1cmVkdHBheW91dCB0byB0aGVpciBmcmVlIGJhbGFuY2UuABEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIGEgbWVtYmVyIHdpdGhIcGF5b3V0cyByZW1haW5pbmcuLHdhaXZlX3JlcGF5BAEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+AAcITQFSZXBheSB0aGUgcGF5bWVudCBwcmV2aW91c2x5IGdpdmVuIHRvIHRoZSBtZW1iZXIgd2l0aCB0aGUgc2lnbmVkIG9yaWdpbiwgcmVtb3ZlIGFueeRwZW5kaW5nIHBheW1lbnRzLCBhbmQgZWxldmF0ZSB0aGVtIGZyb20gcmFuayAwIHRvIHJhbmsgMS40Zm91bmRfc29jaWV0eRgBHGZvdW5kZXKlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASxtYXhfbWVtYmVycxABDHUzMgABKG1heF9pbnRha2UQAQx1MzIAASxtYXhfc3RyaWtlcxABDHUzMgABRGNhbmRpZGF0ZV9kZXBvc2l0GAE8QmFsYW5jZU9mPFQsIEk+AAEUcnVsZXM4ARxWZWM8dTg+AAhESEZvdW5kIHRoZSBzb2NpZXR5LgDsVGhpcyBpcyBkb25lIGFzIGEgZGlzY3JldGUgYWN0aW9uIGluIG9yZGVyIHRvIGFsbG93IGZvciB0aGUVAXBhbGxldCB0byBiZSBpbmNsdWRlZCBpbnRvIGEgcnVubmluZyBjaGFpbiBhbmQgY2FuIG9ubHkgYmUgZG9uZSBvbmNlLgAZAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGZyb20gdGhlIF9Gb3VuZGVyU2V0T3JpZ2luXy4ALFBhcmFtZXRlcnM6FQEtIGBmb3VuZGVyYCAtIFRoZSBmaXJzdCBtZW1iZXIgYW5kIGhlYWQgb2YgdGhlIG5ld2x5IGZvdW5kZWQgc29jaWV0eS4RAS0gYG1heF9tZW1iZXJzYCAtIFRoZSBpbml0aWFsIG1heCBudW1iZXIgb2YgbWVtYmVycyBmb3IgdGhlIHNvY2lldHkuEQEtIGBtYXhfaW50YWtlYCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjYW5kaWRhdGVzIHBlciBpbnRha2UgcGVyaW9kLkkBLSBgbWF4X3N0cmlrZXNgOiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc3RyaWtlcyBhIG1lbWJlciBtYXkgZ2V0IGJlZm9yZSB0aGV5IGJlY29tZdggIHN1c3BlbmRlZCBhbmQgbWF5IG9ubHkgYmUgcmVpbnN0YXRlZCBieSB0aGUgZm91bmRlci5ZAS0gYGNhbmRpZGF0ZV9kZXBvc2l0YDogVGhlIGRlcG9zaXQgcmVxdWlyZWQgdG8gbWFrZSBhIGJpZCBmb3IgbWVtYmVyc2hpcCBvZiB0aGUgZ3JvdXAu8C0gYHJ1bGVzYCAtIFRoZSBydWxlcyBvZiB0aGlzIHNvY2lldHkgY29uY2VybmluZyBtZW1iZXJzaGlwLgBAQ29tcGxleGl0eTogTygxKSBkaXNzb2x2ZQAJFLBEaXNzb2x2ZSB0aGUgc29jaWV0eSBhbmQgcmVtb3ZlIGFsbCBtZW1iZXJzLgBZAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIFNpZ25lZCwgYW5kIHRoZSBzaWduaW5nIGFjY291bnQgbXVzdCBiZSBib3RoVQF0aGUgYEZvdW5kZXJgIGFuZCB0aGUgYEhlYWRgLiBUaGlzIGltcGxpZXMgdGhhdCBpdCBtYXkgb25seSBiZSBkb25lIHdoZW4gdGhlcmUgaXMgb25lHG1lbWJlci5YanVkZ2Vfc3VzcGVuZGVkX21lbWJlcggBDHdob6UBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABHGZvcmdpdmUgARBib29sAAo4KQFBbGxvdyBzdXNwZW5zaW9uIGp1ZGdlbWVudCBvcmlnaW4gdG8gbWFrZSBqdWRnZW1lbnQgb24gYSBzdXNwZW5kZWQgbWVtYmVyLgBVAUlmIGEgc3VzcGVuZGVkIG1lbWJlciBpcyBmb3JnaXZlbiwgd2Ugc2ltcGx5IGFkZCB0aGVtIGJhY2sgYXMgYSBtZW1iZXIsIG5vdCBhZmZlY3RpbmfIYW55IG9mIHRoZSBleGlzdGluZyBzdG9yYWdlIGl0ZW1zIGZvciB0aGF0IG1lbWJlci4ARQFJZiBhIHN1c3BlbmRlZCBtZW1iZXIgaXMgcmVqZWN0ZWQsIHJlbW92ZSBhbGwgYXNzb2NpYXRlZCBzdG9yYWdlIGl0ZW1zLCBpbmNsdWRpbmf8dGhlaXIgcGF5b3V0cywgYW5kIHJlbW92ZSBhbnkgdm91Y2hlZCBiaWRzIHRoZXkgY3VycmVudGx5IGhhdmUuAAkBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgU2lnbmVkIGZyb20gdGhlIEZvdW5kZXIuACxQYXJhbWV0ZXJzOrAtIGB3aG9gIC0gVGhlIHN1c3BlbmRlZCBtZW1iZXIgdG8gYmUganVkZ2VkLlUBLSBgZm9yZ2l2ZWAgLSBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHdoZXRoZXIgdGhlIHN1c3BlbnNpb24ganVkZ2VtZW50IG9yaWdpbiBmb3JnaXZlc8wgIChgdHJ1ZWApIG9yIHJlamVjdHMgKGBmYWxzZWApIGEgc3VzcGVuZGVkIG1lbWJlci44c2V0X3BhcmFtZXRlcnMQASxtYXhfbWVtYmVycxABDHUzMgABKG1heF9pbnRha2UQAQx1MzIAASxtYXhfc3RyaWtlcxABDHUzMgABRGNhbmRpZGF0ZV9kZXBvc2l0GAE8QmFsYW5jZU9mPFQsIEk+AAswYQFDaGFuZ2UgdGhlIG1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgaW4gc29jaWV0eSBhbmQgdGhlIG1heGltdW0gbnVtYmVyIG9mIG5ldyBjYW5kaWRhdGVzaGluIGEgc2luZ2xlIGludGFrZSBwZXJpb2QuAAEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgU2lnbmVkIGJ5IHRoZSBGb3VuZGVyLgAsUGFyYW1ldGVyczpVAS0gYG1heF9tZW1iZXJzYCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtZW1iZXJzIGZvciB0aGUgc29jaWV0eS4gVGhpcyBtdXN0IGJlIG5vIGxlc3OUICB0aGFuIHRoZSBjdXJyZW50IG51bWJlciBvZiBtZW1iZXJzLhEBLSBgbWF4X2ludGFrZWAgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2FuZGlkYXRlcyBwZXIgaW50YWtlIHBlcmlvZC5JAS0gYG1heF9zdHJpa2VzYDogVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0cmlrZXMgYSBtZW1iZXIgbWF5IGdldCBiZWZvcmUgdGhleSBiZWNvbWXYICBzdXNwZW5kZWQgYW5kIG1heSBvbmx5IGJlIHJlaW5zdGF0ZWQgYnkgdGhlIGZvdW5kZXIuWQEtIGBjYW5kaWRhdGVfZGVwb3NpdGA6IFRoZSBkZXBvc2l0IHJlcXVpcmVkIHRvIG1ha2UgYSBiaWQgZm9yIG1lbWJlcnNoaXAgb2YgdGhlIGdyb3VwLjhwdW5pc2hfc2tlcHRpYwAMCFUBUHVuaXNoIHRoZSBza2VwdGljIHdpdGggYSBzdHJpa2UgaWYgdGhleSBkaWQgbm90IHZvdGUgb24gYSBjYW5kaWRhdGUuIENhbGxhYmxlIGJ5IHRoZShjYW5kaWRhdGUuQGNsYWltX21lbWJlcnNoaXAADQgNAVRyYW5zZm9ybSBhbiBhcHByb3ZlZCBjYW5kaWRhdGUgaW50byBhIG1lbWJlci4gQ2FsbGFibGUgb25seSBieSB0aGX4dGhlIGNhbmRpZGF0ZSwgYW5kIG9ubHkgYWZ0ZXIgdGhlIHBlcmlvZCBmb3Igdm90aW5nIGhhcyBlbmRlZC5EYmVzdG93X21lbWJlcnNoaXAEASRjYW5kaWRhdGUAATBUOjpBY2NvdW50SWQADgxhAVRyYW5zZm9ybSBhbiBhcHByb3ZlZCBjYW5kaWRhdGUgaW50byBhIG1lbWJlci4gQ2FsbGFibGUgb25seSBieSB0aGUgU2lnbmVkIG9yaWdpbiBvZiB0aGVZAUZvdW5kZXIsIG9ubHkgYWZ0ZXIgdGhlIHBlcmlvZCBmb3Igdm90aW5nIGhhcyBlbmRlZCBhbmQgb25seSB3aGVuIHRoZSBjYW5kaWRhdGUgaXMgbm90RGNsZWFybHkgcmVqZWN0ZWQuOGtpY2tfY2FuZGlkYXRlBAEkY2FuZGlkYXRlAAEwVDo6QWNjb3VudElkAA8UXQFSZW1vdmUgdGhlIGNhbmRpZGF0ZSdzIGFwcGxpY2F0aW9uIGZyb20gdGhlIHNvY2lldHkuIENhbGxhYmxlIG9ubHkgYnkgdGhlIFNpZ25lZCBvcmlnaW5VAW9mIHRoZSBGb3VuZGVyLCBvbmx5IGFmdGVyIHRoZSBwZXJpb2QgZm9yIHZvdGluZyBoYXMgZW5kZWQsIGFuZCBvbmx5IHdoZW4gdGhleSBkbyBub3RYaGF2ZSBhIGNsZWFyIGFwcHJvdmFsLgC4QW55IGJpZCBkZXBvc2l0IGlzIGxvc3QgYW5kIHZvdWNoZXIgaXMgYmFubmVkLkByZXNpZ25fY2FuZGlkYWN5ABAMUQFSZW1vdmUgdGhlIGNhbmRpZGF0ZSdzIGFwcGxpY2F0aW9uIGZyb20gdGhlIHNvY2lldHkuIENhbGxhYmxlIG9ubHkgYnkgdGhlIGNhbmRpZGF0ZS4AuEFueSBiaWQgZGVwb3NpdCBpcyBsb3N0IGFuZCB2b3VjaGVyIGlzIGJhbm5lZC44ZHJvcF9jYW5kaWRhdGUEASRjYW5kaWRhdGUAATBUOjpBY2NvdW50SWQAERQtAVJlbW92ZSBhIGBjYW5kaWRhdGVgJ3MgZmFpbGVkIGFwcGxpY2F0aW9uIGZyb20gdGhlIHNvY2lldHkuIENhbGxhYmxlIGJ5IGFueRkBc2lnbmVkIG9yaWdpbiBidXQgb25seSBhdCB0aGUgZW5kIG9mIHRoZSBzdWJzZXF1ZW50IHJvdW5kIGFuZCBvbmx5IGZvcsBhIGNhbmRpZGF0ZSB3aXRoIG1vcmUgcmVqZWN0aW9ucyB0aGFuIGFwcHJvdmFscy4AyFRoZSBiaWQgZGVwb3NpdCBpcyBsb3N0IGFuZCB0aGUgdm91Y2hlciBpcyBiYW5uZWQuRGNsZWFudXBfY2FuZGlkYWN5CAEkY2FuZGlkYXRlAAEwVDo6QWNjb3VudElkAAEMbWF4EAEMdTMyABIM5FJlbW92ZSB1cCB0byBgbWF4YCBzdGFsZSB2b3RlcyBmb3IgdGhlIGdpdmVuIGBjYW5kaWRhdGVgLgBZAU1heSBiZSBjYWxsZWQgYnkgYW55IFNpZ25lZCBvcmlnaW4sIGJ1dCBvbmx5IGFmdGVyIHRoZSBjYW5kaWRhdGUncyBjYW5kaWRhY3kgaXMgZW5kZWQuRGNsZWFudXBfY2hhbGxlbmdlCAE8Y2hhbGxlbmdlX3JvdW5kEAEoUm91bmRJbmRleAABDG1heBABDHUzMgATDD0BUmVtb3ZlIHVwIHRvIGBtYXhgIHN0YWxlIHZvdGVzIGZvciB0aGUgZGVmZW5kZXIgaW4gdGhlIGdpdmVuIGBjaGFsbGVuZ2Vfcm91bmRgLgBBAU1heSBiZSBjYWxsZWQgYnkgYW55IFNpZ25lZCBvcmlnaW4sIGJ1dCBvbmx5IGFmdGVyIHRoZSBjaGFsbGVuZ2Ugcm91bmQgaXMgZW5kZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLv0CDDxwYWxsZXRfcmVjb3ZlcnkYcGFsbGV0EENhbGwEBFQAASQwYXNfcmVjb3ZlcmVkCAEcYWNjb3VudKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAAIKBTZW5kIGEgY2FsbCB0aHJvdWdoIGEgcmVjb3ZlcmVkIGFjY291bnQuABEBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHJlZ2lzdGVyZWQgdG/kYmUgYWJsZSB0byBtYWtlIGNhbGxzIG9uIGJlaGFsZiBvZiB0aGUgcmVjb3ZlcmVkIGFjY291bnQuACxQYXJhbWV0ZXJzOiEBLSBgYWNjb3VudGA6IFRoZSByZWNvdmVyZWQgYWNjb3VudCB5b3Ugd2FudCB0byBtYWtlIGEgY2FsbCBvbi1iZWhhbGYtb2Yu/C0gYGNhbGxgOiBUaGUgY2FsbCB5b3Ugd2FudCB0byBtYWtlIHdpdGggdGhlIHJlY292ZXJlZCBhY2NvdW50LjRzZXRfcmVjb3ZlcmVkCAEQbG9zdKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABHHJlc2N1ZXKlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASAZAUFsbG93IFJPT1QgdG8gYnlwYXNzIHRoZSByZWNvdmVyeSBwcm9jZXNzIGFuZCBzZXQgYW4gYSByZXNjdWVyIGFjY291bnRwZm9yIGEgbG9zdCBhY2NvdW50IGRpcmVjdGx5LgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1JPT1RfLgAsUGFyYW1ldGVyczq0LSBgbG9zdGA6IFRoZSAibG9zdCBhY2NvdW50IiB0byBiZSByZWNvdmVyZWQuGQEtIGByZXNjdWVyYDogVGhlICJyZXNjdWVyIGFjY291bnQiIHdoaWNoIGNhbiBjYWxsIGFzIHRoZSBsb3N0IGFjY291bnQuPGNyZWF0ZV9yZWNvdmVyeQwBHGZyaWVuZHO1AQFEVmVjPFQ6OkFjY291bnRJZD4AASR0aHJlc2hvbGRdAQEMdTE2AAEwZGVsYXlfcGVyaW9kEAFEQmxvY2tOdW1iZXJGb3I8VD4AAkBZAUNyZWF0ZSBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24gZm9yIHlvdXIgYWNjb3VudC4gVGhpcyBtYWtlcyB5b3VyIGFjY291bnQgcmVjb3ZlcmFibGUuAC0BUGF5bWVudDogYENvbmZpZ0RlcG9zaXRCYXNlYCArIGBGcmllbmREZXBvc2l0RmFjdG9yYCAqICNfb2ZfZnJpZW5kcyBiYWxhbmNlRQF3aWxsIGJlIHJlc2VydmVkIGZvciBzdG9yaW5nIHRoZSByZWNvdmVyeSBjb25maWd1cmF0aW9uLiBUaGlzIGRlcG9zaXQgaXMgcmV0dXJuZWS4aW4gZnVsbCB3aGVuIHRoZSB1c2VyIGNhbGxzIGByZW1vdmVfcmVjb3ZlcnlgLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACxQYXJhbWV0ZXJzOkkBLSBgZnJpZW5kc2A6IEEgbGlzdCBvZiBmcmllbmRzIHlvdSB0cnVzdCB0byB2b3VjaCBmb3IgcmVjb3ZlcnkgYXR0ZW1wdHMuIFNob3VsZCBiZaggIG9yZGVyZWQgYW5kIGNvbnRhaW4gbm8gZHVwbGljYXRlIHZhbHVlcy5ZAS0gYHRocmVzaG9sZGA6IFRoZSBudW1iZXIgb2YgZnJpZW5kcyB0aGF0IG11c3Qgdm91Y2ggZm9yIGEgcmVjb3ZlcnkgYXR0ZW1wdCBiZWZvcmUgdGhlVQEgIGFjY291bnQgY2FuIGJlIHJlY292ZXJlZC4gU2hvdWxkIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbGVuZ3RoIG9mIHRoZSBsaXN0IG9mKCAgZnJpZW5kcy5NAS0gYGRlbGF5X3BlcmlvZGA6IFRoZSBudW1iZXIgb2YgYmxvY2tzIGFmdGVyIGEgcmVjb3ZlcnkgYXR0ZW1wdCBpcyBpbml0aWFsaXplZCB0aGF00CAgbmVlZHMgdG8gcGFzcyBiZWZvcmUgdGhlIGFjY291bnQgY2FuIGJlIHJlY292ZXJlZC5EaW5pdGlhdGVfcmVjb3ZlcnkEARxhY2NvdW50pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAMs6EluaXRpYXRlIHRoZSBwcm9jZXNzIGZvciByZWNvdmVyaW5nIGEgcmVjb3ZlcmFibGUgYWNjb3VudC4AGQFQYXltZW50OiBgUmVjb3ZlcnlEZXBvc2l0YCBiYWxhbmNlIHdpbGwgYmUgcmVzZXJ2ZWQgZm9yIGluaXRpYXRpbmcgdGhlIQFyZWNvdmVyeSBwcm9jZXNzLiBUaGlzIGRlcG9zaXQgd2lsbCBhbHdheXMgYmUgcmVwYXRyaWF0ZWQgdG8gdGhlIGFjY291bnS0dHJ5aW5nIHRvIGJlIHJlY292ZXJlZC4gU2VlIGBjbG9zZV9yZWNvdmVyeWAuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4ALFBhcmFtZXRlcnM6QQEtIGBhY2NvdW50YDogVGhlIGxvc3QgYWNjb3VudCB0aGF0IHlvdSB3YW50IHRvIHJlY292ZXIuIFRoaXMgYWNjb3VudCBuZWVkcyB0byBiZcwgIHJlY292ZXJhYmxlIChpLmUuIGhhdmUgYSByZWNvdmVyeSBjb25maWd1cmF0aW9uKS44dm91Y2hfcmVjb3ZlcnkIARBsb3N0pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEccmVzY3VlcqUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAEMCUBQWxsb3cgYSAiZnJpZW5kIiBvZiBhIHJlY292ZXJhYmxlIGFjY291bnQgdG8gdm91Y2ggZm9yIGFuIGFjdGl2ZSByZWNvdmVyeWRwcm9jZXNzIGZvciB0aGF0IGFjY291bnQuACUBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIG11c3QgYmUgYSAiZnJpZW5kInBmb3IgdGhlIHJlY292ZXJhYmxlIGFjY291bnQuACxQYXJhbWV0ZXJzOtAtIGBsb3N0YDogVGhlIGxvc3QgYWNjb3VudCB0aGF0IHlvdSB3YW50IHRvIHJlY292ZXIuWQEtIGByZXNjdWVyYDogVGhlIGFjY291bnQgdHJ5aW5nIHRvIHJlc2N1ZSB0aGUgbG9zdCBhY2NvdW50IHRoYXQgeW91IHdhbnQgdG8gdm91Y2ggZm9yLgAhAVRoZSBjb21iaW5hdGlvbiBvZiB0aGVzZSB0d28gcGFyYW1ldGVycyBtdXN0IHBvaW50IHRvIGFuIGFjdGl2ZSByZWNvdmVyeSBwcm9jZXNzLjhjbGFpbV9yZWNvdmVyeQQBHGFjY291bnSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4ABSTwQWxsb3cgYSBzdWNjZXNzZnVsIHJlc2N1ZXIgdG8gY2xhaW0gdGhlaXIgcmVjb3ZlcmVkIGFjY291bnQuACkBVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIG11c3QgYmUgYSAicmVzY3VlciIZAXdobyBoYXMgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCB0aGUgYWNjb3VudCByZWNvdmVyeSBwcm9jZXNzOiBjb2xsZWN0ZWQtAWB0aHJlc2hvbGRgIG9yIG1vcmUgdm91Y2hlcywgd2FpdGVkIGBkZWxheV9wZXJpb2RgIGJsb2NrcyBzaW5jZSBpbml0aWF0aW9uLgAsUGFyYW1ldGVyczpdAS0gYGFjY291bnRgOiBUaGUgbG9zdCBhY2NvdW50IHRoYXQgeW91IHdhbnQgdG8gY2xhaW0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHJlY292ZXJlZCBieRggIHlvdS44Y2xvc2VfcmVjb3ZlcnkEARxyZXNjdWVypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAYsEQFBcyB0aGUgY29udHJvbGxlciBvZiBhIHJlY292ZXJhYmxlIGFjY291bnQsIGNsb3NlIGFuIGFjdGl2ZSByZWNvdmVyeWRwcm9jZXNzIGZvciB5b3VyIGFjY291bnQuAB0BUGF5bWVudDogQnkgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCB0aGUgcmVjb3ZlcmFibGUgYWNjb3VudCB3aWxsIHJlY2VpdmX0dGhlIHJlY292ZXJ5IGRlcG9zaXQgYFJlY292ZXJ5RGVwb3NpdGAgcGxhY2VkIGJ5IHRoZSByZXNjdWVyLgABAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBtdXN0IGJlIGHscmVjb3ZlcmFibGUgYWNjb3VudCB3aXRoIGFuIGFjdGl2ZSByZWNvdmVyeSBwcm9jZXNzIGZvciBpdC4ALFBhcmFtZXRlcnM6DQEtIGByZXNjdWVyYDogVGhlIGFjY291bnQgdHJ5aW5nIHRvIHJlc2N1ZSB0aGlzIHJlY292ZXJhYmxlIGFjY291bnQuPHJlbW92ZV9yZWNvdmVyeQAHLFkBUmVtb3ZlIHRoZSByZWNvdmVyeSBwcm9jZXNzIGZvciB5b3VyIGFjY291bnQuIFJlY292ZXJlZCBhY2NvdW50cyBhcmUgc3RpbGwgYWNjZXNzaWJsZS4AEQFOT1RFOiBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0byBjYWxsIGBjbG9zZV9yZWNvdmVyeWAgb24gYWxsIGFjdGl2ZQUBcmVjb3ZlcnkgYXR0ZW1wdHMgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBlbHNlIGl0IHdpbGwgZmFpbC4AIQFQYXltZW50OiBCeSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gdGhlIHJlY292ZXJhYmxlIGFjY291bnQgd2lsbCB1bnJlc2VydmWUdGhlaXIgcmVjb3ZlcnkgY29uZmlndXJhdGlvbiBkZXBvc2l0LvAoYENvbmZpZ0RlcG9zaXRCYXNlYCArIGBGcmllbmREZXBvc2l0RmFjdG9yYCAqICNfb2ZfZnJpZW5kcykAAQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgbXVzdCBiZSBh4HJlY292ZXJhYmxlIGFjY291bnQgKGkuZS4gaGFzIGEgcmVjb3ZlcnkgY29uZmlndXJhdGlvbikuQGNhbmNlbF9yZWNvdmVyZWQEARxhY2NvdW50pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAgc3ENhbmNlbCB0aGUgYWJpbGl0eSB0byB1c2UgYGFzX3JlY292ZXJlZGAgZm9yIGBhY2NvdW50YC4AEQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgcmVnaXN0ZXJlZCB0b+RiZSBhYmxlIHRvIG1ha2UgY2FsbHMgb24gYmVoYWxmIG9mIHRoZSByZWNvdmVyZWQgYWNjb3VudC4ALFBhcmFtZXRlcnM6FQEtIGBhY2NvdW50YDogVGhlIHJlY292ZXJlZCBhY2NvdW50IHlvdSBhcmUgYWJsZSB0byBjYWxsIG9uLWJlaGFsZi1vZi4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuAQMMOHBhbGxldF92ZXN0aW5nGHBhbGxldBBDYWxsBARUAAEYEHZlc3QAACS4VW5sb2NrIGFueSB2ZXN0ZWQgZnVuZHMgb2YgdGhlIHNlbmRlciBhY2NvdW50LgBdAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgaGF2ZSBmdW5kcyBzdGlsbGRsb2NrZWQgdW5kZXIgdGhpcyBwYWxsZXQuANBFbWl0cyBlaXRoZXIgYFZlc3RpbmdDb21wbGV0ZWRgIG9yIGBWZXN0aW5nVXBkYXRlZGAuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLih2ZXN0X290aGVyBAEYdGFyZ2V0pQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEsuFVubG9jayBhbnkgdmVzdGVkIGZ1bmRzIG9mIGEgYHRhcmdldGAgYWNjb3VudC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgBRAS0gYHRhcmdldGA6IFRoZSBhY2NvdW50IHdob3NlIHZlc3RlZCBmdW5kcyBzaG91bGQgYmUgdW5sb2NrZWQuIE11c3QgaGF2ZSBmdW5kcyBzdGlsbGRsb2NrZWQgdW5kZXIgdGhpcyBwYWxsZXQuANBFbWl0cyBlaXRoZXIgYFZlc3RpbmdDb21wbGV0ZWRgIG9yIGBWZXN0aW5nVXBkYXRlZGAuADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLjx2ZXN0ZWRfdHJhbnNmZXIIARh0YXJnZXSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASBzY2hlZHVsZQUDAbBWZXN0aW5nSW5mbzxCYWxhbmNlT2Y8VD4sIEJsb2NrTnVtYmVyRm9yPFQ+PgACNGRDcmVhdGUgYSB2ZXN0ZWQgdHJhbnNmZXIuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AzC0gYHRhcmdldGA6IFRoZSBhY2NvdW50IHJlY2VpdmluZyB0aGUgdmVzdGVkIGZ1bmRzLvAtIGBzY2hlZHVsZWA6IFRoZSB2ZXN0aW5nIHNjaGVkdWxlIGF0dGFjaGVkIHRvIHRoZSB0cmFuc2Zlci4AXEVtaXRzIGBWZXN0aW5nQ3JlYXRlZGAuAPxOT1RFOiBUaGlzIHdpbGwgdW5sb2NrIGFsbCBzY2hlZHVsZXMgdGhyb3VnaCB0aGUgY3VycmVudCBibG9jay4ANCMjIENvbXBsZXhpdHkkLSBgTygxKWAuVGZvcmNlX3Zlc3RlZF90cmFuc2ZlcgwBGHNvdXJjZaUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABGHRhcmdldKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABIHNjaGVkdWxlBQMBsFZlc3RpbmdJbmZvPEJhbGFuY2VPZjxUPiwgQmxvY2tOdW1iZXJGb3I8VD4+AAM4YEZvcmNlIGEgdmVzdGVkIHRyYW5zZmVyLgDEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLgDoLSBgc291cmNlYDogVGhlIGFjY291bnQgd2hvc2UgZnVuZHMgc2hvdWxkIGJlIHRyYW5zZmVycmVkLhEBLSBgdGFyZ2V0YDogVGhlIGFjY291bnQgdGhhdCBzaG91bGQgYmUgdHJhbnNmZXJyZWQgdGhlIHZlc3RlZCBmdW5kcy7wLSBgc2NoZWR1bGVgOiBUaGUgdmVzdGluZyBzY2hlZHVsZSBhdHRhY2hlZCB0byB0aGUgdHJhbnNmZXIuAFxFbWl0cyBgVmVzdGluZ0NyZWF0ZWRgLgD8Tk9URTogVGhpcyB3aWxsIHVubG9jayBhbGwgc2NoZWR1bGVzIHRocm91Z2ggdGhlIGN1cnJlbnQgYmxvY2suADQjIyBDb21wbGV4aXR5JC0gYE8oMSlgLjxtZXJnZV9zY2hlZHVsZXMIATxzY2hlZHVsZTFfaW5kZXgQAQx1MzIAATxzY2hlZHVsZTJfaW5kZXgQAQx1MzIABFRdAU1lcmdlIHR3byB2ZXN0aW5nIHNjaGVkdWxlcyB0b2dldGhlciwgY3JlYXRpbmcgYSBuZXcgdmVzdGluZyBzY2hlZHVsZSB0aGF0IHVubG9ja3Mgb3ZlclUBdGhlIGhpZ2hlc3QgcG9zc2libGUgc3RhcnQgYW5kIGVuZCBibG9ja3MuIElmIGJvdGggc2NoZWR1bGVzIGhhdmUgYWxyZWFkeSBzdGFydGVkIHRoZVkBY3VycmVudCBibG9jayB3aWxsIGJlIHVzZWQgYXMgdGhlIHNjaGVkdWxlIHN0YXJ0OyB3aXRoIHRoZSBjYXZlYXQgdGhhdCBpZiBvbmUgc2NoZWR1bGVdAWlzIGZpbmlzaGVkIGJ5IHRoZSBjdXJyZW50IGJsb2NrLCB0aGUgb3RoZXIgd2lsbCBiZSB0cmVhdGVkIGFzIHRoZSBuZXcgbWVyZ2VkIHNjaGVkdWxlLCx1bm1vZGlmaWVkLgD4Tk9URTogSWYgYHNjaGVkdWxlMV9pbmRleCA9PSBzY2hlZHVsZTJfaW5kZXhgIHRoaXMgaXMgYSBuby1vcC5BAU5PVEU6IFRoaXMgd2lsbCB1bmxvY2sgYWxsIHNjaGVkdWxlcyB0aHJvdWdoIHRoZSBjdXJyZW50IGJsb2NrIHByaW9yIHRvIG1lcmdpbmcuYQFOT1RFOiBJZiBib3RoIHNjaGVkdWxlcyBoYXZlIGVuZGVkIGJ5IHRoZSBjdXJyZW50IGJsb2NrLCBubyBuZXcgc2NoZWR1bGUgd2lsbCBiZSBjcmVhdGVkZGFuZCBib3RoIHdpbGwgYmUgcmVtb3ZlZC4AbE1lcmdlZCBzY2hlZHVsZSBhdHRyaWJ1dGVzOjUBLSBgc3RhcnRpbmdfYmxvY2tgOiBgTUFYKHNjaGVkdWxlMS5zdGFydGluZ19ibG9jaywgc2NoZWR1bGVkMi5zdGFydGluZ19ibG9jayxIICBjdXJyZW50X2Jsb2NrKWAuIQEtIGBlbmRpbmdfYmxvY2tgOiBgTUFYKHNjaGVkdWxlMS5lbmRpbmdfYmxvY2ssIHNjaGVkdWxlMi5lbmRpbmdfYmxvY2spYC5ZAS0gYGxvY2tlZGA6IGBzY2hlZHVsZTEubG9ja2VkX2F0KGN1cnJlbnRfYmxvY2spICsgc2NoZWR1bGUyLmxvY2tlZF9hdChjdXJyZW50X2Jsb2NrKWAuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4A6C0gYHNjaGVkdWxlMV9pbmRleGA6IGluZGV4IG9mIHRoZSBmaXJzdCBzY2hlZHVsZSB0byBtZXJnZS7sLSBgc2NoZWR1bGUyX2luZGV4YDogaW5kZXggb2YgdGhlIHNlY29uZCBzY2hlZHVsZSB0byBtZXJnZS50Zm9yY2VfcmVtb3ZlX3Zlc3Rpbmdfc2NoZWR1bGUIARh0YXJnZXSlAQGMPFQ6Okxvb2t1cCBhcyBTdGF0aWNMb29rdXA+OjpTb3VyY2UAAThzY2hlZHVsZV9pbmRleBABDHUzMgAFGHxGb3JjZSByZW1vdmUgYSB2ZXN0aW5nIHNjaGVkdWxlAMRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8uAMgtIGB0YXJnZXRgOiBBbiBhY2NvdW50IHRoYXQgaGFzIGEgdmVzdGluZyBzY2hlZHVsZRUBLSBgc2NoZWR1bGVfaW5kZXhgOiBUaGUgdmVzdGluZyBzY2hlZHVsZSBpbmRleCB0aGF0IHNob3VsZCBiZSByZW1vdmVkBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLgUDDDhwYWxsZXRfdmVzdGluZzB2ZXN0aW5nX2luZm8sVmVzdGluZ0luZm8IHEJhbGFuY2UBGCxCbG9ja051bWJlcgEQAAwBGGxvY2tlZBgBHEJhbGFuY2UAASRwZXJfYmxvY2sYARxCYWxhbmNlAAE4c3RhcnRpbmdfYmxvY2sQASxCbG9ja051bWJlcgAACQMMQHBhbGxldF9zY2hlZHVsZXIYcGFsbGV0EENhbGwEBFQAASggc2NoZWR1bGUQARB3aGVuEAFEQmxvY2tOdW1iZXJGb3I8VD4AAThtYXliZV9wZXJpb2RpYw0DAaxPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlckZvcjxUPj4+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxsZQEBfEJveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4AAARwQW5vbnltb3VzbHkgc2NoZWR1bGUgYSB0YXNrLhhjYW5jZWwIARB3aGVuEAFEQmxvY2tOdW1iZXJGb3I8VD4AARRpbmRleBABDHUzMgABBJRDYW5jZWwgYW4gYW5vbnltb3VzbHkgc2NoZWR1bGVkIHRhc2suOHNjaGVkdWxlX25hbWVkFAEIaWQEASBUYXNrTmFtZQABEHdoZW4QAURCbG9ja051bWJlckZvcjxUPgABOG1heWJlX3BlcmlvZGljDQMBrE9wdGlvbjxzY2hlZHVsZTo6UGVyaW9kPEJsb2NrTnVtYmVyRm9yPFQ+Pj4AASBwcmlvcml0eQgBSHNjaGVkdWxlOjpQcmlvcml0eQABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgACBFhTY2hlZHVsZSBhIG5hbWVkIHRhc2suMGNhbmNlbF9uYW1lZAQBCGlkBAEgVGFza05hbWUAAwR4Q2FuY2VsIGEgbmFtZWQgc2NoZWR1bGVkIHRhc2suOHNjaGVkdWxlX2FmdGVyEAEUYWZ0ZXIQAURCbG9ja051bWJlckZvcjxUPgABOG1heWJlX3BlcmlvZGljDQMBrE9wdGlvbjxzY2hlZHVsZTo6UGVyaW9kPEJsb2NrTnVtYmVyRm9yPFQ+Pj4AASBwcmlvcml0eQgBSHNjaGVkdWxlOjpQcmlvcml0eQABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAEBKhBbm9ueW1vdXNseSBzY2hlZHVsZSBhIHRhc2sgYWZ0ZXIgYSBkZWxheS5Qc2NoZWR1bGVfbmFtZWRfYWZ0ZXIUAQhpZAQBIFRhc2tOYW1lAAEUYWZ0ZXIQAURCbG9ja051bWJlckZvcjxUPgABOG1heWJlX3BlcmlvZGljDQMBrE9wdGlvbjxzY2hlZHVsZTo6UGVyaW9kPEJsb2NrTnVtYmVyRm9yPFQ+Pj4AASBwcmlvcml0eQgBSHNjaGVkdWxlOjpQcmlvcml0eQABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAFBJBTY2hlZHVsZSBhIG5hbWVkIHRhc2sgYWZ0ZXIgYSBkZWxheS4kc2V0X3JldHJ5DAEQdGFzaxEDAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AARxyZXRyaWVzCAEIdTgAARhwZXJpb2QQAURCbG9ja051bWJlckZvcjxUPgAGMFkBU2V0IGEgcmV0cnkgY29uZmlndXJhdGlvbiBmb3IgYSB0YXNrIHNvIHRoYXQsIGluIGNhc2UgaXRzIHNjaGVkdWxlZCBydW4gZmFpbHMsIGl0IHdpbGxVAWJlIHJldHJpZWQgYWZ0ZXIgYHBlcmlvZGAgYmxvY2tzLCBmb3IgYSB0b3RhbCBhbW91bnQgb2YgYHJldHJpZXNgIHJldHJpZXMgb3IgdW50aWwgaXQkc3VjY2VlZHMuAFUBVGFza3Mgd2hpY2ggbmVlZCB0byBiZSBzY2hlZHVsZWQgZm9yIGEgcmV0cnkgYXJlIHN0aWxsIHN1YmplY3QgdG8gd2VpZ2h0IG1ldGVyaW5nIGFuZFEBYWdlbmRhIHNwYWNlLCBzYW1lIGFzIGEgcmVndWxhciB0YXNrLiBJZiBhIHBlcmlvZGljIHRhc2sgZmFpbHMsIGl0IHdpbGwgYmUgc2NoZWR1bGVkkG5vcm1hbGx5IHdoaWxlIHRoZSB0YXNrIGlzIHJldHJ5aW5nLgBRAVRhc2tzIHNjaGVkdWxlZCBhcyBhIHJlc3VsdCBvZiBhIHJldHJ5IGZvciBhIHBlcmlvZGljIHRhc2sgYXJlIHVubmFtZWQsIG5vbi1wZXJpb2RpYz0BY2xvbmVzIG9mIHRoZSBvcmlnaW5hbCB0YXNrLiBUaGVpciByZXRyeSBjb25maWd1cmF0aW9uIHdpbGwgYmUgZGVyaXZlZCBmcm9tIHRoZU0Bb3JpZ2luYWwgdGFzaydzIGNvbmZpZ3VyYXRpb24sIGJ1dCB3aWxsIGhhdmUgYSBsb3dlciB2YWx1ZSBmb3IgYHJlbWFpbmluZ2AgdGhhbiB0aGVkb3JpZ2luYWwgYHRvdGFsX3JldHJpZXNgLjxzZXRfcmV0cnlfbmFtZWQMAQhpZAQBIFRhc2tOYW1lAAEccmV0cmllcwgBCHU4AAEYcGVyaW9kEAFEQmxvY2tOdW1iZXJGb3I8VD4ABzBdAVNldCBhIHJldHJ5IGNvbmZpZ3VyYXRpb24gZm9yIGEgbmFtZWQgdGFzayBzbyB0aGF0LCBpbiBjYXNlIGl0cyBzY2hlZHVsZWQgcnVuIGZhaWxzLCBpdF0Bd2lsbCBiZSByZXRyaWVkIGFmdGVyIGBwZXJpb2RgIGJsb2NrcywgZm9yIGEgdG90YWwgYW1vdW50IG9mIGByZXRyaWVzYCByZXRyaWVzIG9yIHVudGlsMGl0IHN1Y2NlZWRzLgBVAVRhc2tzIHdoaWNoIG5lZWQgdG8gYmUgc2NoZWR1bGVkIGZvciBhIHJldHJ5IGFyZSBzdGlsbCBzdWJqZWN0IHRvIHdlaWdodCBtZXRlcmluZyBhbmRRAWFnZW5kYSBzcGFjZSwgc2FtZSBhcyBhIHJlZ3VsYXIgdGFzay4gSWYgYSBwZXJpb2RpYyB0YXNrIGZhaWxzLCBpdCB3aWxsIGJlIHNjaGVkdWxlZJBub3JtYWxseSB3aGlsZSB0aGUgdGFzayBpcyByZXRyeWluZy4AUQFUYXNrcyBzY2hlZHVsZWQgYXMgYSByZXN1bHQgb2YgYSByZXRyeSBmb3IgYSBwZXJpb2RpYyB0YXNrIGFyZSB1bm5hbWVkLCBub24tcGVyaW9kaWM9AWNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdGFzay4gVGhlaXIgcmV0cnkgY29uZmlndXJhdGlvbiB3aWxsIGJlIGRlcml2ZWQgZnJvbSB0aGVNAW9yaWdpbmFsIHRhc2sncyBjb25maWd1cmF0aW9uLCBidXQgd2lsbCBoYXZlIGEgbG93ZXIgdmFsdWUgZm9yIGByZW1haW5pbmdgIHRoYW4gdGhlZG9yaWdpbmFsIGB0b3RhbF9yZXRyaWVzYC4wY2FuY2VsX3JldHJ5BAEQdGFzaxEDAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4ACASoUmVtb3ZlcyB0aGUgcmV0cnkgY29uZmlndXJhdGlvbiBvZiBhIHRhc2suSGNhbmNlbF9yZXRyeV9uYW1lZAQBCGlkBAEgVGFza05hbWUACQS8Q2FuY2VsIHRoZSByZXRyeSBjb25maWd1cmF0aW9uIG9mIGEgbmFtZWQgdGFzay4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuDQMEGE9wdGlvbgQEVAERAwEIEE5vbmUAAAAQU29tZQQAEQMAAAEAABEDAAAECBAQABUDDDBwYWxsZXRfcHJveHkYcGFsbGV0EENhbGwEBFQAASgUcHJveHkMARByZWFspQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAFAZm9yY2VfcHJveHlfdHlwZRkDAVBPcHRpb248VDo6UHJveHlUeXBlPgABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAAJE0BRGlzcGF0Y2ggdGhlIGdpdmVuIGBjYWxsYCBmcm9tIGFuIGFjY291bnQgdGhhdCB0aGUgc2VuZGVyIGlzIGF1dGhvcmlzZWQgZm9yIHRocm91Z2gwYGFkZF9wcm94eWAuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4ALFBhcmFtZXRlcnM6DQEtIGByZWFsYDogVGhlIGFjY291bnQgdGhhdCB0aGUgcHJveHkgd2lsbCBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2YuYQEtIGBmb3JjZV9wcm94eV90eXBlYDogU3BlY2lmeSB0aGUgZXhhY3QgcHJveHkgdHlwZSB0byBiZSB1c2VkIGFuZCBjaGVja2VkIGZvciB0aGlzIGNhbGwu0C0gYGNhbGxgOiBUaGUgY2FsbCB0byBiZSBtYWRlIGJ5IHRoZSBgcmVhbGAgYWNjb3VudC4kYWRkX3Byb3h5DAEgZGVsZWdhdGWlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAShwcm94eV90eXBlHQMBMFQ6OlByb3h5VHlwZQABFGRlbGF5EAFEQmxvY2tOdW1iZXJGb3I8VD4AASRFAVJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlciB0aGF0IGlzIGFibGUgdG8gbWFrZSBjYWxscyBvbiBpdHMgYmVoYWxmLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACxQYXJhbWV0ZXJzOhEBLSBgcHJveHlgOiBUaGUgYWNjb3VudCB0aGF0IHRoZSBgY2FsbGVyYCB3b3VsZCBsaWtlIHRvIG1ha2UgYSBwcm94eS78LSBgcHJveHlfdHlwZWA6IFRoZSBwZXJtaXNzaW9ucyBhbGxvd2VkIGZvciB0aGlzIHByb3h5IGFjY291bnQuTQEtIGBkZWxheWA6IFRoZSBhbm5vdW5jZW1lbnQgcGVyaW9kIHJlcXVpcmVkIG9mIHRoZSBpbml0aWFsIHByb3h5LiBXaWxsIGdlbmVyYWxseSBiZRR6ZXJvLjByZW1vdmVfcHJveHkMASBkZWxlZ2F0ZaUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABKHByb3h5X3R5cGUdAwEwVDo6UHJveHlUeXBlAAEUZGVsYXkQAURCbG9ja051bWJlckZvcjxUPgACHKhVbnJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlci4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgAsUGFyYW1ldGVyczolAS0gYHByb3h5YDogVGhlIGFjY291bnQgdGhhdCB0aGUgYGNhbGxlcmAgd291bGQgbGlrZSB0byByZW1vdmUgYXMgYSBwcm94eS5BAS0gYHByb3h5X3R5cGVgOiBUaGUgcGVybWlzc2lvbnMgY3VycmVudGx5IGVuYWJsZWQgZm9yIHRoZSByZW1vdmVkIHByb3h5IGFjY291bnQuOHJlbW92ZV9wcm94aWVzAAMYtFVucmVnaXN0ZXIgYWxsIHByb3h5IGFjY291bnRzIGZvciB0aGUgc2VuZGVyLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAEEBV0FSTklORzogVGhpcyBtYXkgYmUgY2FsbGVkIG9uIGFjY291bnRzIGNyZWF0ZWQgYnkgYHB1cmVgLCBob3dldmVyIGlmIGRvbmUsIHRoZW5ZAXRoZSB1bnJlc2VydmVkIGZlZXMgd2lsbCBiZSBpbmFjY2Vzc2libGUuICoqQWxsIGFjY2VzcyB0byB0aGlzIGFjY291bnQgd2lsbCBiZSBsb3N0LioqLGNyZWF0ZV9wdXJlDAEocHJveHlfdHlwZR0DATBUOjpQcm94eVR5cGUAARRkZWxheRABREJsb2NrTnVtYmVyRm9yPFQ+AAEUaW5kZXhdAQEMdTE2AARIOQFTcGF3biBhIGZyZXNoIG5ldyBhY2NvdW50IHRoYXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvdGhlcndpc2UgaW5hY2Nlc3NpYmxlLCBhbmT8aW5pdGlhbGl6ZSBpdCB3aXRoIGEgcHJveHkgb2YgYHByb3h5X3R5cGVgIGZvciBgb3JpZ2luYCBzZW5kZXIuAGxSZXF1aXJlcyBhIGBTaWduZWRgIG9yaWdpbi4AUQEtIGBwcm94eV90eXBlYDogVGhlIHR5cGUgb2YgdGhlIHByb3h5IHRoYXQgdGhlIHNlbmRlciB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgb3ZlciB0aGVNAW5ldyBhY2NvdW50LiBUaGlzIHdpbGwgYWxtb3N0IGFsd2F5cyBiZSB0aGUgbW9zdCBwZXJtaXNzaXZlIGBQcm94eVR5cGVgIHBvc3NpYmxlIHRveGFsbG93IGZvciBtYXhpbXVtIGZsZXhpYmlsaXR5LlEBLSBgaW5kZXhgOiBBIGRpc2FtYmlndWF0aW9uIGluZGV4LCBpbiBjYXNlIHRoaXMgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluIHRoZSBzYW1lXQF0cmFuc2FjdGlvbiAoZS5nLiB3aXRoIGB1dGlsaXR5OjpiYXRjaGApLiBVbmxlc3MgeW91J3JlIHVzaW5nIGBiYXRjaGAgeW91IHByb2JhYmx5IGp1c3RAd2FudCB0byB1c2UgYDBgLk0BLSBgZGVsYXlgOiBUaGUgYW5ub3VuY2VtZW50IHBlcmlvZCByZXF1aXJlZCBvZiB0aGUgaW5pdGlhbCBwcm94eS4gV2lsbCBnZW5lcmFsbHkgYmUUemVyby4AUQFGYWlscyB3aXRoIGBEdXBsaWNhdGVgIGlmIHRoaXMgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQgaW4gdGhpcyB0cmFuc2FjdGlvbiwgZnJvbSB0aGWYc2FtZSBzZW5kZXIsIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycy4A5EZhaWxzIGlmIHRoZXJlIGFyZSBpbnN1ZmZpY2llbnQgZnVuZHMgdG8gcGF5IGZvciBkZXBvc2l0LiRraWxsX3B1cmUUARxzcGF3bmVypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEocHJveHlfdHlwZR0DATBUOjpQcm94eVR5cGUAARRpbmRleF0BAQx1MTYAARhoZWlnaHTUAURCbG9ja051bWJlckZvcjxUPgABJGV4dF9pbmRleNQBDHUzMgAFQKBSZW1vdmVzIGEgcHJldmlvdXNseSBzcGF3bmVkIHB1cmUgcHJveHkuAEkBV0FSTklORzogKipBbGwgYWNjZXNzIHRvIHRoaXMgYWNjb3VudCB3aWxsIGJlIGxvc3QuKiogQW55IGZ1bmRzIGhlbGQgaW4gaXQgd2lsbCBiZTRpbmFjY2Vzc2libGUuAFkBUmVxdWlyZXMgYSBgU2lnbmVkYCBvcmlnaW4sIGFuZCB0aGUgc2VuZGVyIGFjY291bnQgbXVzdCBoYXZlIGJlZW4gY3JlYXRlZCBieSBhIGNhbGwgdG+UYHB1cmVgIHdpdGggY29ycmVzcG9uZGluZyBwYXJhbWV0ZXJzLgA5AS0gYHNwYXduZXJgOiBUaGUgYWNjb3VudCB0aGF0IG9yaWdpbmFsbHkgY2FsbGVkIGBwdXJlYCB0byBjcmVhdGUgdGhpcyBhY2NvdW50LjkBLSBgaW5kZXhgOiBUaGUgZGlzYW1iaWd1YXRpb24gaW5kZXggb3JpZ2luYWxseSBwYXNzZWQgdG8gYHB1cmVgLiBQcm9iYWJseSBgMGAu7C0gYHByb3h5X3R5cGVgOiBUaGUgcHJveHkgdHlwZSBvcmlnaW5hbGx5IHBhc3NlZCB0byBgcHVyZWAuKQEtIGBoZWlnaHRgOiBUaGUgaGVpZ2h0IG9mIHRoZSBjaGFpbiB3aGVuIHRoZSBjYWxsIHRvIGBwdXJlYCB3YXMgcHJvY2Vzc2VkLjUBLSBgZXh0X2luZGV4YDogVGhlIGV4dHJpbnNpYyBpbmRleCBpbiB3aGljaCB0aGUgY2FsbCB0byBgcHVyZWAgd2FzIHByb2Nlc3NlZC4ANQFGYWlscyB3aXRoIGBOb1Blcm1pc3Npb25gIGluIGNhc2UgdGhlIGNhbGxlciBpcyBub3QgYSBwcmV2aW91c2x5IGNyZWF0ZWQgcHVyZdxhY2NvdW50IHdob3NlIGBwdXJlYCBjYWxsIGhhcyBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMuIGFubm91bmNlCAEQcmVhbKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABJGNhbGxfaGFzaDQBNENhbGxIYXNoT2Y8VD4ABjwFAVB1Ymxpc2ggdGhlIGhhc2ggb2YgYSBwcm94eS1jYWxsIHRoYXQgd2lsbCBiZSBtYWRlIGluIHRoZSBmdXR1cmUuAF0BVGhpcyBtdXN0IGJlIGNhbGxlZCBzb21lIG51bWJlciBvZiBibG9ja3MgYmVmb3JlIHRoZSBjb3JyZXNwb25kaW5nIGBwcm94eWAgaXMgYXR0ZW1wdGVkJQFpZiB0aGUgZGVsYXkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm94eSByZWxhdGlvbnNoaXAgaXMgZ3JlYXRlciB0aGFuIHplcm8uABEBTm8gbW9yZSB0aGFuIGBNYXhQZW5kaW5nYCBhbm5vdW5jZW1lbnRzIG1heSBiZSBtYWRlIGF0IGFueSBvbmUgdGltZS4ACQFUaGlzIHdpbGwgdGFrZSBhIGRlcG9zaXQgb2YgYEFubm91bmNlbWVudERlcG9zaXRGYWN0b3JgIGFzIHdlbGwgYXMZAWBBbm5vdW5jZW1lbnREZXBvc2l0QmFzZWAgaWYgdGhlcmUgYXJlIG5vIG90aGVyIHBlbmRpbmcgYW5ub3VuY2VtZW50cy4AJQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgYSBwcm94eSBvZiBgcmVhbGAuACxQYXJhbWV0ZXJzOg0BLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLhUBLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgbWFkZSBieSB0aGUgYHJlYWxgIGFjY291bnQuTHJlbW92ZV9hbm5vdW5jZW1lbnQIARByZWFspQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkY2FsbF9oYXNoNAE0Q2FsbEhhc2hPZjxUPgAHKHBSZW1vdmUgYSBnaXZlbiBhbm5vdW5jZW1lbnQuAFkBTWF5IGJlIGNhbGxlZCBieSBhIHByb3h5IGFjY291bnQgdG8gcmVtb3ZlIGEgY2FsbCB0aGV5IHByZXZpb3VzbHkgYW5ub3VuY2VkIGFuZCByZXR1cm4wdGhlIGRlcG9zaXQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4ALFBhcmFtZXRlcnM6DQEtIGByZWFsYDogVGhlIGFjY291bnQgdGhhdCB0aGUgcHJveHkgd2lsbCBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2YuFQEtIGBjYWxsX2hhc2hgOiBUaGUgaGFzaCBvZiB0aGUgY2FsbCB0byBiZSBtYWRlIGJ5IHRoZSBgcmVhbGAgYWNjb3VudC5McmVqZWN0X2Fubm91bmNlbWVudAgBIGRlbGVnYXRlpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEkY2FsbF9oYXNoNAE0Q2FsbEhhc2hPZjxUPgAIKLBSZW1vdmUgdGhlIGdpdmVuIGFubm91bmNlbWVudCBvZiBhIGRlbGVnYXRlLgBhAU1heSBiZSBjYWxsZWQgYnkgYSB0YXJnZXQgKHByb3hpZWQpIGFjY291bnQgdG8gcmVtb3ZlIGEgY2FsbCB0aGF0IG9uZSBvZiB0aGVpciBkZWxlZ2F0ZXMlAShgZGVsZWdhdGVgKSBoYXMgYW5ub3VuY2VkIHRoZXkgd2FudCB0byBleGVjdXRlLiBUaGUgZGVwb3NpdCBpcyByZXR1cm5lZC4AzFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLgAsUGFyYW1ldGVyczr0LSBgZGVsZWdhdGVgOiBUaGUgYWNjb3VudCB0aGF0IHByZXZpb3VzbHkgYW5ub3VuY2VkIHRoZSBjYWxsLrwtIGBjYWxsX2hhc2hgOiBUaGUgaGFzaCBvZiB0aGUgY2FsbCB0byBiZSBtYWRlLjxwcm94eV9hbm5vdW5jZWQQASBkZWxlZ2F0ZaUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABEHJlYWylAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAUBmb3JjZV9wcm94eV90eXBlGQMBUE9wdGlvbjxUOjpQcm94eVR5cGU+AAEQY2FsbGUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAksTQFEaXNwYXRjaCB0aGUgZ2l2ZW4gYGNhbGxgIGZyb20gYW4gYWNjb3VudCB0aGF0IHRoZSBzZW5kZXIgaXMgYXV0aG9yaXplZCBmb3IgdGhyb3VnaDBgYWRkX3Byb3h5YC4AqFJlbW92ZXMgYW55IGNvcnJlc3BvbmRpbmcgYW5ub3VuY2VtZW50KHMpLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uACxQYXJhbWV0ZXJzOg0BLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLmEBLSBgZm9yY2VfcHJveHlfdHlwZWA6IFNwZWNpZnkgdGhlIGV4YWN0IHByb3h5IHR5cGUgdG8gYmUgdXNlZCBhbmQgY2hlY2tlZCBmb3IgdGhpcyBjYWxsLtAtIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgbWFkZSBieSB0aGUgYHJlYWxgIGFjY291bnQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLhkDBBhPcHRpb24EBFQBHQMBCBBOb25lAAAAEFNvbWUEAB0DAAABAAAdAwhYc3RhZ2luZ19rdXNhbWFfcnVudGltZSRQcm94eVR5cGUAASgMQW55AAAALE5vblRyYW5zZmVyAAEAKEdvdmVybmFuY2UAAgAcU3Rha2luZwADACxDYW5jZWxQcm94eQAFABxBdWN0aW9uAAYAHFNvY2lldHkABwA8Tm9taW5hdGlvblBvb2xzAAgAMFNwb2tlc3BlcnNvbgAJAEBQYXJhUmVnaXN0cmF0aW9uAAoAACEDDDxwYWxsZXRfbXVsdGlzaWcYcGFsbGV0EENhbGwEBFQAARBQYXNfbXVsdGlfdGhyZXNob2xkXzEIAURvdGhlcl9zaWduYXRvcmllc7UBAURWZWM8VDo6QWNjb3VudElkPgABEGNhbGxlAQF8Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPgAAMFEBSW1tZWRpYXRlbHkgZGlzcGF0Y2ggYSBtdWx0aS1zaWduYXR1cmUgY2FsbCB1c2luZyBhIHNpbmdsZSBhcHByb3ZhbCBmcm9tIHRoZSBjYWxsZXIuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4APQEtIGBvdGhlcl9zaWduYXRvcmllc2A6IFRoZSBhY2NvdW50cyAob3RoZXIgdGhhbiB0aGUgc2VuZGVyKSB3aG8gYXJlIHBhcnQgb2YgdGhlAQFtdWx0aS1zaWduYXR1cmUsIGJ1dCBkbyBub3QgcGFydGljaXBhdGUgaW4gdGhlIGFwcHJvdmFsIHByb2Nlc3MuiC0gYGNhbGxgOiBUaGUgY2FsbCB0byBiZSBleGVjdXRlZC4AuFJlc3VsdCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkaXNwYXRjaGVkIHJlc3VsdC4ANCMjIENvbXBsZXhpdHkZAU8oWiArIEMpIHdoZXJlIFogaXMgdGhlIGxlbmd0aCBvZiB0aGUgY2FsbCBhbmQgQyBpdHMgZXhlY3V0aW9uIHdlaWdodC4gYXNfbXVsdGkUASR0aHJlc2hvbGRdAQEMdTE2AAFEb3RoZXJfc2lnbmF0b3JpZXO1AQFEVmVjPFQ6OkFjY291bnRJZD4AATxtYXliZV90aW1lcG9pbnQlAwGQT3B0aW9uPFRpbWVwb2ludDxCbG9ja051bWJlckZvcjxUPj4+AAEQY2FsbGUBAXxCb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+AAEobWF4X3dlaWdodCgBGFdlaWdodAABnFUBUmVnaXN0ZXIgYXBwcm92YWwgZm9yIGEgZGlzcGF0Y2ggdG8gYmUgbWFkZSBmcm9tIGEgZGV0ZXJtaW5pc3RpYyBjb21wb3NpdGUgYWNjb3VudCBpZvhhcHByb3ZlZCBieSBhIHRvdGFsIG9mIGB0aHJlc2hvbGQgLSAxYCBvZiBgb3RoZXJfc2lnbmF0b3JpZXNgLgCwSWYgdGhlcmUgYXJlIGVub3VnaCwgdGhlbiBkaXNwYXRjaCB0aGUgY2FsbC4ALQFQYXltZW50OiBgRGVwb3NpdEJhc2VgIHdpbGwgYmUgcmVzZXJ2ZWQgaWYgdGhpcyBpcyB0aGUgZmlyc3QgYXBwcm92YWwsIHBsdXM9AWB0aHJlc2hvbGRgIHRpbWVzIGBEZXBvc2l0RmFjdG9yYC4gSXQgaXMgcmV0dXJuZWQgb25jZSB0aGlzIGRpc3BhdGNoIGhhcHBlbnMgb3I0aXMgY2FuY2VsbGVkLgDMVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uAFUBLSBgdGhyZXNob2xkYDogVGhlIHRvdGFsIG51bWJlciBvZiBhcHByb3ZhbHMgZm9yIHRoaXMgZGlzcGF0Y2ggYmVmb3JlIGl0IGlzIGV4ZWN1dGVkLkEBLSBgb3RoZXJfc2lnbmF0b3JpZXNgOiBUaGUgYWNjb3VudHMgKG90aGVyIHRoYW4gdGhlIHNlbmRlcikgd2hvIGNhbiBhcHByb3ZlIHRoaXNsZGlzcGF0Y2guIE1heSBub3QgYmUgZW1wdHkuWQEtIGBtYXliZV90aW1lcG9pbnRgOiBJZiB0aGlzIGlzIHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiB0aGlzIG11c3QgYmUgYE5vbmVgLiBJZiBpdCBpc1EBbm90IHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiBpdCBtdXN0IGJlIGBTb21lYCwgd2l0aCB0aGUgdGltZXBvaW50IChibG9jayBudW1iZXIgYW5k1HRyYW5zYWN0aW9uIGluZGV4KSBvZiB0aGUgZmlyc3QgYXBwcm92YWwgdHJhbnNhY3Rpb24uiC0gYGNhbGxgOiBUaGUgY2FsbCB0byBiZSBleGVjdXRlZC4AHQFOT1RFOiBVbmxlc3MgdGhpcyBpcyB0aGUgZmluYWwgYXBwcm92YWwsIHlvdSB3aWxsIGdlbmVyYWxseSB3YW50IHRvIHVzZRkBYGFwcHJvdmVfYXNfbXVsdGlgIGluc3RlYWQsIHNpbmNlIGl0IG9ubHkgcmVxdWlyZXMgYSBoYXNoIG9mIHRoZSBjYWxsLgBZAVJlc3VsdCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkaXNwYXRjaGVkIHJlc3VsdCBpZiBgdGhyZXNob2xkYCBpcyBleGFjdGx5IGAxYC4gT3RoZXJ3aXNlVQFvbiBzdWNjZXNzLCByZXN1bHQgaXMgYE9rYCBhbmQgdGhlIHJlc3VsdCBmcm9tIHRoZSBpbnRlcmlvciBjYWxsLCBpZiBpdCB3YXMgZXhlY3V0ZWQs3G1heSBiZSBmb3VuZCBpbiB0aGUgZGVwb3NpdGVkIGBNdWx0aXNpZ0V4ZWN1dGVkYCBldmVudC4ANCMjIENvbXBsZXhpdHlQLSBgTyhTICsgWiArIENhbGwpYC7MLSBVcCB0byBvbmUgYmFsYW5jZS1yZXNlcnZlIG9yIHVucmVzZXJ2ZSBvcGVyYXRpb24uPQEtIE9uZSBwYXNzdGhyb3VnaCBvcGVyYXRpb24sIG9uZSBpbnNlcnQsIGJvdGggYE8oUylgIHdoZXJlIGBTYCBpcyB0aGUgbnVtYmVyIG9mRQEgIHNpZ25hdG9yaWVzLiBgU2AgaXMgY2FwcGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggd2VpZ2h0IGJlaW5nIHByb3BvcnRpb25hbC4hAS0gT25lIGNhbGwgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFopYCB3aGVyZSBgWmAgaXMgdHgtbGVuLrwtIE9uZSBlbmNvZGUgJiBoYXNoLCBib3RoIG9mIGNvbXBsZXhpdHkgYE8oUylgLtQtIFVwIHRvIG9uZSBiaW5hcnkgc2VhcmNoIGFuZCBpbnNlcnQgKGBPKGxvZ1MgKyBTKWApLvgtIEkvTzogMSByZWFkIGBPKFMpYCwgdXAgdG8gMSBtdXRhdGUgYE8oUylgLiBVcCB0byBvbmUgcmVtb3ZlLjAtIE9uZSBldmVudC5sLSBUaGUgd2VpZ2h0IG9mIHRoZSBgY2FsbGAuTQEtIFN0b3JhZ2U6IGluc2VydHMgb25lIGl0ZW0sIHZhbHVlIHNpemUgYm91bmRlZCBieSBgTWF4U2lnbmF0b3JpZXNgLCB3aXRoIGEgZGVwb3NpdBkBICB0YWtlbiBmb3IgaXRzIGxpZmV0aW1lIG9mIGBEZXBvc2l0QmFzZSArIHRocmVzaG9sZCAqIERlcG9zaXRGYWN0b3JgLkBhcHByb3ZlX2FzX211bHRpFAEkdGhyZXNob2xkXQEBDHUxNgABRG90aGVyX3NpZ25hdG9yaWVztQEBRFZlYzxUOjpBY2NvdW50SWQ+AAE8bWF5YmVfdGltZXBvaW50JQMBkE9wdGlvbjxUaW1lcG9pbnQ8QmxvY2tOdW1iZXJGb3I8VD4+PgABJGNhbGxfaGFzaAQBIFt1ODsgMzJdAAEobWF4X3dlaWdodCgBGFdlaWdodAACeFUBUmVnaXN0ZXIgYXBwcm92YWwgZm9yIGEgZGlzcGF0Y2ggdG8gYmUgbWFkZSBmcm9tIGEgZGV0ZXJtaW5pc3RpYyBjb21wb3NpdGUgYWNjb3VudCBpZvhhcHByb3ZlZCBieSBhIHRvdGFsIG9mIGB0aHJlc2hvbGQgLSAxYCBvZiBgb3RoZXJfc2lnbmF0b3JpZXNgLgAtAVBheW1lbnQ6IGBEZXBvc2l0QmFzZWAgd2lsbCBiZSByZXNlcnZlZCBpZiB0aGlzIGlzIHRoZSBmaXJzdCBhcHByb3ZhbCwgcGx1cz0BYHRocmVzaG9sZGAgdGltZXMgYERlcG9zaXRGYWN0b3JgLiBJdCBpcyByZXR1cm5lZCBvbmNlIHRoaXMgZGlzcGF0Y2ggaGFwcGVucyBvcjRpcyBjYW5jZWxsZWQuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AVQEtIGB0aHJlc2hvbGRgOiBUaGUgdG90YWwgbnVtYmVyIG9mIGFwcHJvdmFscyBmb3IgdGhpcyBkaXNwYXRjaCBiZWZvcmUgaXQgaXMgZXhlY3V0ZWQuQQEtIGBvdGhlcl9zaWduYXRvcmllc2A6IFRoZSBhY2NvdW50cyAob3RoZXIgdGhhbiB0aGUgc2VuZGVyKSB3aG8gY2FuIGFwcHJvdmUgdGhpc2xkaXNwYXRjaC4gTWF5IG5vdCBiZSBlbXB0eS5ZAS0gYG1heWJlX3RpbWVwb2ludGA6IElmIHRoaXMgaXMgdGhlIGZpcnN0IGFwcHJvdmFsLCB0aGVuIHRoaXMgbXVzdCBiZSBgTm9uZWAuIElmIGl0IGlzUQFub3QgdGhlIGZpcnN0IGFwcHJvdmFsLCB0aGVuIGl0IG11c3QgYmUgYFNvbWVgLCB3aXRoIHRoZSB0aW1lcG9pbnQgKGJsb2NrIG51bWJlciBhbmTUdHJhbnNhY3Rpb24gaW5kZXgpIG9mIHRoZSBmaXJzdCBhcHByb3ZhbCB0cmFuc2FjdGlvbi7MLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuADUBTk9URTogSWYgdGhpcyBpcyB0aGUgZmluYWwgYXBwcm92YWwsIHlvdSB3aWxsIHdhbnQgdG8gdXNlIGBhc19tdWx0aWAgaW5zdGVhZC4ANCMjIENvbXBsZXhpdHkkLSBgTyhTKWAuzC0gVXAgdG8gb25lIGJhbGFuY2UtcmVzZXJ2ZSBvciB1bnJlc2VydmUgb3BlcmF0aW9uLj0BLSBPbmUgcGFzc3Rocm91Z2ggb3BlcmF0aW9uLCBvbmUgaW5zZXJ0LCBib3RoIGBPKFMpYCB3aGVyZSBgU2AgaXMgdGhlIG51bWJlciBvZkUBICBzaWduYXRvcmllcy4gYFNgIGlzIGNhcHBlZCBieSBgTWF4U2lnbmF0b3JpZXNgLCB3aXRoIHdlaWdodCBiZWluZyBwcm9wb3J0aW9uYWwuvC0gT25lIGVuY29kZSAmIGhhc2gsIGJvdGggb2YgY29tcGxleGl0eSBgTyhTKWAu1C0gVXAgdG8gb25lIGJpbmFyeSBzZWFyY2ggYW5kIGluc2VydCAoYE8obG9nUyArIFMpYCku+C0gSS9POiAxIHJlYWQgYE8oUylgLCB1cCB0byAxIG11dGF0ZSBgTyhTKWAuIFVwIHRvIG9uZSByZW1vdmUuMC0gT25lIGV2ZW50Lk0BLSBTdG9yYWdlOiBpbnNlcnRzIG9uZSBpdGVtLCB2YWx1ZSBzaXplIGJvdW5kZWQgYnkgYE1heFNpZ25hdG9yaWVzYCwgd2l0aCBhIGRlcG9zaXQZASAgdGFrZW4gZm9yIGl0cyBsaWZldGltZSBvZiBgRGVwb3NpdEJhc2UgKyB0aHJlc2hvbGQgKiBEZXBvc2l0RmFjdG9yYC48Y2FuY2VsX2FzX211bHRpEAEkdGhyZXNob2xkXQEBDHUxNgABRG90aGVyX3NpZ25hdG9yaWVztQEBRFZlYzxUOjpBY2NvdW50SWQ+AAEkdGltZXBvaW50KQMBcFRpbWVwb2ludDxCbG9ja051bWJlckZvcjxUPj4AASRjYWxsX2hhc2gEASBbdTg7IDMyXQADVFUBQ2FuY2VsIGEgcHJlLWV4aXN0aW5nLCBvbi1nb2luZyBtdWx0aXNpZyB0cmFuc2FjdGlvbi4gQW55IGRlcG9zaXQgcmVzZXJ2ZWQgcHJldmlvdXNsecRmb3IgdGhpcyBvcGVyYXRpb24gd2lsbCBiZSB1bnJlc2VydmVkIG9uIHN1Y2Nlc3MuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AVQEtIGB0aHJlc2hvbGRgOiBUaGUgdG90YWwgbnVtYmVyIG9mIGFwcHJvdmFscyBmb3IgdGhpcyBkaXNwYXRjaCBiZWZvcmUgaXQgaXMgZXhlY3V0ZWQuQQEtIGBvdGhlcl9zaWduYXRvcmllc2A6IFRoZSBhY2NvdW50cyAob3RoZXIgdGhhbiB0aGUgc2VuZGVyKSB3aG8gY2FuIGFwcHJvdmUgdGhpc2xkaXNwYXRjaC4gTWF5IG5vdCBiZSBlbXB0eS5dAS0gYHRpbWVwb2ludGA6IFRoZSB0aW1lcG9pbnQgKGJsb2NrIG51bWJlciBhbmQgdHJhbnNhY3Rpb24gaW5kZXgpIG9mIHRoZSBmaXJzdCBhcHByb3ZhbHh0cmFuc2FjdGlvbiBmb3IgdGhpcyBkaXNwYXRjaC7MLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuADQjIyBDb21wbGV4aXR5JC0gYE8oUylgLswtIFVwIHRvIG9uZSBiYWxhbmNlLXJlc2VydmUgb3IgdW5yZXNlcnZlIG9wZXJhdGlvbi49AS0gT25lIHBhc3N0aHJvdWdoIG9wZXJhdGlvbiwgb25lIGluc2VydCwgYm90aCBgTyhTKWAgd2hlcmUgYFNgIGlzIHRoZSBudW1iZXIgb2ZFASAgc2lnbmF0b3JpZXMuIGBTYCBpcyBjYXBwZWQgYnkgYE1heFNpZ25hdG9yaWVzYCwgd2l0aCB3ZWlnaHQgYmVpbmcgcHJvcG9ydGlvbmFsLrwtIE9uZSBlbmNvZGUgJiBoYXNoLCBib3RoIG9mIGNvbXBsZXhpdHkgYE8oUylgLjAtIE9uZSBldmVudC6ELSBJL086IDEgcmVhZCBgTyhTKWAsIG9uZSByZW1vdmUucC0gU3RvcmFnZTogcmVtb3ZlcyBvbmUgaXRlbS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuJQMEGE9wdGlvbgQEVAEpAwEIEE5vbmUAAAAQU29tZQQAKQMAAAEAACkDCDxwYWxsZXRfbXVsdGlzaWckVGltZXBvaW50BCxCbG9ja051bWJlcgEQAAgBGGhlaWdodBABLEJsb2NrTnVtYmVyAAEUaW5kZXgQAQx1MzIAAC0DDDxwYWxsZXRfcHJlaW1hZ2UYcGFsbGV0EENhbGwEBFQAARQ0bm90ZV9wcmVpbWFnZQQBFGJ5dGVzOAEcVmVjPHU4PgAAEHRSZWdpc3RlciBhIHByZWltYWdlIG9uLWNoYWluLgBVAUlmIHRoZSBwcmVpbWFnZSB3YXMgcHJldmlvdXNseSByZXF1ZXN0ZWQsIG5vIGZlZXMgb3IgZGVwb3NpdHMgYXJlIHRha2VuIGZvciBwcm92aWRpbmdVAXRoZSBwcmVpbWFnZS4gT3RoZXJ3aXNlLCBhIGRlcG9zaXQgaXMgdGFrZW4gcHJvcG9ydGlvbmFsIHRvIHRoZSBzaXplIG9mIHRoZSBwcmVpbWFnZS48dW5ub3RlX3ByZWltYWdlBAEQaGFzaDQBHFQ6Okhhc2gAARjcQ2xlYXIgYW4gdW5yZXF1ZXN0ZWQgcHJlaW1hZ2UgZnJvbSB0aGUgcnVudGltZSBzdG9yYWdlLgD8SWYgYGxlbmAgaXMgcHJvdmlkZWQsIHRoZW4gaXQgd2lsbCBiZSBhIG11Y2ggY2hlYXBlciBvcGVyYXRpb24uAAEBLSBgaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBwcmVpbWFnZSB0byBiZSByZW1vdmVkIGZyb20gdGhlIHN0b3JlLrgtIGBsZW5gOiBUaGUgbGVuZ3RoIG9mIHRoZSBwcmVpbWFnZSBvZiBgaGFzaGAuQHJlcXVlc3RfcHJlaW1hZ2UEARBoYXNoNAEcVDo6SGFzaAACEEEBUmVxdWVzdCBhIHByZWltYWdlIGJlIHVwbG9hZGVkIHRvIHRoZSBjaGFpbiB3aXRob3V0IHBheWluZyBhbnkgZmVlcyBvciBkZXBvc2l0cy4AVQFJZiB0aGUgcHJlaW1hZ2UgcmVxdWVzdHMgaGFzIGFscmVhZHkgYmVlbiBwcm92aWRlZCBvbi1jaGFpbiwgd2UgdW5yZXNlcnZlIGFueSBkZXBvc2l0OQFhIHVzZXIgbWF5IGhhdmUgcGFpZCwgYW5kIHRha2UgdGhlIGNvbnRyb2wgb2YgdGhlIHByZWltYWdlIG91dCBvZiB0aGVpciBoYW5kcy5IdW5yZXF1ZXN0X3ByZWltYWdlBAEQaGFzaDQBHFQ6Okhhc2gAAwy8Q2xlYXIgYSBwcmV2aW91c2x5IG1hZGUgcmVxdWVzdCBmb3IgYSBwcmVpbWFnZS4ALQFOT1RFOiBUSElTIE1VU1QgTk9UIEJFIENBTExFRCBPTiBgaGFzaGAgTU9SRSBUSU1FUyBUSEFOIGByZXF1ZXN0X3ByZWltYWdlYC44ZW5zdXJlX3VwZGF0ZWQEARhoYXNoZXMxAwEwVmVjPFQ6Okhhc2g+AAQMxEVuc3VyZSB0aGF0IHRoZSBhIGJ1bGsgb2YgcHJlLWltYWdlcyBpcyB1cGdyYWRlZC4APQFUaGUgY2FsbGVyIHBheXMgbm8gZmVlIGlmIGF0IGxlYXN0IDkwJSBvZiBwcmUtaW1hZ2VzIHdlcmUgc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLjEDAAACNAA1Aww8cGFsbGV0X2JvdW50aWVzGHBhbGxldBBDYWxsCARUAARJAAEkOHByb3Bvc2VfYm91bnR5CAEUdmFsdWXkATxCYWxhbmNlT2Y8VCwgST4AASxkZXNjcmlwdGlvbjgBHFZlYzx1OD4AADBUUHJvcG9zZSBhIG5ldyBib3VudHkuAMxUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy4AUQFQYXltZW50OiBgVGlwUmVwb3J0RGVwb3NpdEJhc2VgIHdpbGwgYmUgcmVzZXJ2ZWQgZnJvbSB0aGUgb3JpZ2luIGFjY291bnQsIGFzIHdlbGwgYXNRAWBEYXRhRGVwb3NpdFBlckJ5dGVgIGZvciBlYWNoIGJ5dGUgaW4gYHJlYXNvbmAuIEl0IHdpbGwgYmUgdW5yZXNlcnZlZCB1cG9uIGFwcHJvdmFsLGRvciBzbGFzaGVkIHdoZW4gcmVqZWN0ZWQuAPgtIGBjdXJhdG9yYDogVGhlIGN1cmF0b3IgYWNjb3VudCB3aG9tIHdpbGwgbWFuYWdlIHRoaXMgYm91bnR5LmQtIGBmZWVgOiBUaGUgY3VyYXRvciBmZWUuJQEtIGB2YWx1ZWA6IFRoZSB0b3RhbCBwYXltZW50IGFtb3VudCBvZiB0aGlzIGJvdW50eSwgY3VyYXRvciBmZWUgaW5jbHVkZWQuwC0gYGRlc2NyaXB0aW9uYDogVGhlIGRlc2NyaXB0aW9uIG9mIHRoaXMgYm91bnR5LjhhcHByb3ZlX2JvdW50eQQBJGJvdW50eV9pZNQBLEJvdW50eUluZGV4AAEcXQFBcHByb3ZlIGEgYm91bnR5IHByb3Bvc2FsLiBBdCBhIGxhdGVyIHRpbWUsIHRoZSBib3VudHkgd2lsbCBiZSBmdW5kZWQgYW5kIGJlY29tZSBhY3RpdmWoYW5kIHRoZSBvcmlnaW5hbCBkZXBvc2l0IHdpbGwgYmUgcmV0dXJuZWQuAKRNYXkgb25seSBiZSBjYWxsZWQgZnJvbSBgVDo6U3BlbmRPcmlnaW5gLgA0IyMgQ29tcGxleGl0eRwtIE8oMSkuPHByb3Bvc2VfY3VyYXRvcgwBJGJvdW50eV9pZNQBLEJvdW50eUluZGV4AAEcY3VyYXRvcqUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABDGZlZeQBPEJhbGFuY2VPZjxULCBJPgACGJRQcm9wb3NlIGEgY3VyYXRvciB0byBhIGZ1bmRlZCBib3VudHkuAKRNYXkgb25seSBiZSBjYWxsZWQgZnJvbSBgVDo6U3BlbmRPcmlnaW5gLgA0IyMgQ29tcGxleGl0eRwtIE8oMSkuQHVuYXNzaWduX2N1cmF0b3IEASRib3VudHlfaWTUASxCb3VudHlJbmRleAADRHxVbmFzc2lnbiBjdXJhdG9yIGZyb20gYSBib3VudHkuAB0BVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGBSZWplY3RPcmlnaW5gIGEgc2lnbmVkIG9yaWdpbi4APQFJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgYFJlamVjdE9yaWdpbmAsIHdlIGFzc3VtZSB0aGF0IHRoZSBjdXJhdG9yIGlzMQFtYWxpY2lvdXMgb3IgaW5hY3RpdmUuIEFzIGEgcmVzdWx0LCB3ZSB3aWxsIHNsYXNoIHRoZSBjdXJhdG9yIHdoZW4gcG9zc2libGUuAGEBSWYgdGhlIG9yaWdpbiBpcyB0aGUgY3VyYXRvciwgd2UgdGFrZSB0aGlzIGFzIGEgc2lnbiB0aGV5IGFyZSB1bmFibGUgdG8gZG8gdGhlaXIgam9iIGFuZF0BdGhleSB3aWxsaW5nbHkgZ2l2ZSB1cC4gV2UgY291bGQgc2xhc2ggdGhlbSwgYnV0IGZvciBub3cgd2UgYWxsb3cgdGhlbSB0byByZWNvdmVyIHRoZWlyNQFkZXBvc2l0IGFuZCBleGl0IHdpdGhvdXQgaXNzdWUuIChXZSBtYXkgd2FudCB0byBjaGFuZ2UgdGhpcyBpZiBpdCBpcyBhYnVzZWQuKQBdAUZpbmFsbHksIHRoZSBvcmlnaW4gY2FuIGJlIGFueW9uZSBpZiBhbmQgb25seSBpZiB0aGUgY3VyYXRvciBpcyAiaW5hY3RpdmUiLiBUaGlzIGFsbG93c2EBYW55b25lIGluIHRoZSBjb21tdW5pdHkgdG8gY2FsbCBvdXQgdGhhdCBhIGN1cmF0b3IgaXMgbm90IGRvaW5nIHRoZWlyIGR1ZSBkaWxpZ2VuY2UsIGFuZDkBd2Ugc2hvdWxkIHBpY2sgYSBuZXcgY3VyYXRvci4gSW4gdGhpcyBjYXNlIHRoZSBjdXJhdG9yIHNob3VsZCBhbHNvIGJlIHNsYXNoZWQuADQjIyBDb21wbGV4aXR5HC0gTygxKS44YWNjZXB0X2N1cmF0b3IEASRib3VudHlfaWTUASxCb3VudHlJbmRleAAEHJRBY2NlcHQgdGhlIGN1cmF0b3Igcm9sZSBmb3IgYSBib3VudHkuKQFBIGRlcG9zaXQgd2lsbCBiZSByZXNlcnZlZCBmcm9tIGN1cmF0b3IgYW5kIHJlZnVuZCB1cG9uIHN1Y2Nlc3NmdWwgcGF5b3V0LgCQTWF5IG9ubHkgYmUgY2FsbGVkIGZyb20gdGhlIGN1cmF0b3IuADQjIyBDb21wbGV4aXR5HC0gTygxKS4wYXdhcmRfYm91bnR5CAEkYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAASxiZW5lZmljaWFyeaUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAFKFkBQXdhcmQgYm91bnR5IHRvIGEgYmVuZWZpY2lhcnkgYWNjb3VudC4gVGhlIGJlbmVmaWNpYXJ5IHdpbGwgYmUgYWJsZSB0byBjbGFpbSB0aGUgZnVuZHM4YWZ0ZXIgYSBkZWxheS4AFQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSB0aGUgY3VyYXRvciBvZiB0aGlzIGJvdW50eS4AiC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBhd2FyZC4ZAS0gYGJlbmVmaWNpYXJ5YDogVGhlIGJlbmVmaWNpYXJ5IGFjY291bnQgd2hvbSB3aWxsIHJlY2VpdmUgdGhlIHBheW91dC4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLjBjbGFpbV9ib3VudHkEASRib3VudHlfaWTUASxCb3VudHlJbmRleAAGIOxDbGFpbSB0aGUgcGF5b3V0IGZyb20gYW4gYXdhcmRlZCBib3VudHkgYWZ0ZXIgcGF5b3V0IGRlbGF5LgAlAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBiZW5lZmljaWFyeSBvZiB0aGlzIGJvdW50eS4AiC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBjbGFpbS4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLjBjbG9zZV9ib3VudHkEASRib3VudHlfaWTUASxCb3VudHlJbmRleAAHJDkBQ2FuY2VsIGEgcHJvcG9zZWQgb3IgYWN0aXZlIGJvdW50eS4gQWxsIHRoZSBmdW5kcyB3aWxsIGJlIHNlbnQgdG8gdHJlYXN1cnkgYW5kzHRoZSBjdXJhdG9yIGRlcG9zaXQgd2lsbCBiZSB1bnJlc2VydmVkIGlmIHBvc3NpYmxlLgDIT25seSBgVDo6UmVqZWN0T3JpZ2luYCBpcyBhYmxlIHRvIGNhbmNlbCBhIGJvdW50eS4AjC0gYGJvdW50eV9pZGA6IEJvdW50eSBJRCB0byBjYW5jZWwuADQjIyBDb21wbGV4aXR5HC0gTygxKS5QZXh0ZW5kX2JvdW50eV9leHBpcnkIASRib3VudHlfaWTUASxCb3VudHlJbmRleAABGHJlbWFyazgBHFZlYzx1OD4ACCSsRXh0ZW5kIHRoZSBleHBpcnkgdGltZSBvZiBhbiBhY3RpdmUgYm91bnR5LgAVAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBjdXJhdG9yIG9mIHRoaXMgYm91bnR5LgCMLSBgYm91bnR5X2lkYDogQm91bnR5IElEIHRvIGV4dGVuZC6MLSBgcmVtYXJrYDogYWRkaXRpb25hbCBpbmZvcm1hdGlvbi4ANCMjIENvbXBsZXhpdHkcLSBPKDEpLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy45AwxUcGFsbGV0X2NoaWxkX2JvdW50aWVzGHBhbGxldBBDYWxsBARUAAEcQGFkZF9jaGlsZF9ib3VudHkMAUBwYXJlbnRfYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAARR2YWx1ZeQBMEJhbGFuY2VPZjxUPgABLGRlc2NyaXB0aW9uOAEcVmVjPHU4PgAATFxBZGQgYSBuZXcgY2hpbGQtYm91bnR5LgD8VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgdGhlIGN1cmF0b3Igb2YgcGFyZW503GJvdW50eSBhbmQgdGhlIHBhcmVudCBib3VudHkgbXVzdCBiZSBpbiAiYWN0aXZlIiBzdGF0ZS4ABQFDaGlsZC1ib3VudHkgZ2V0cyBhZGRlZCBzdWNjZXNzZnVsbHkgJiBmdW5kIGdldHMgdHJhbnNmZXJyZWQgZnJvbQkBcGFyZW50IGJvdW50eSB0byBjaGlsZC1ib3VudHkgYWNjb3VudCwgaWYgcGFyZW50IGJvdW50eSBoYXMgZW5vdWdobGZ1bmRzLCBlbHNlIHRoZSBjYWxsIGZhaWxzLgANAVVwcGVyIGJvdW5kIHRvIG1heGltdW0gbnVtYmVyIG9mIGFjdGl2ZSAgY2hpbGQgYm91bnRpZXMgdGhhdCBjYW4gYmWoYWRkZWQgYXJlIG1hbmFnZWQgdmlhIHJ1bnRpbWUgdHJhaXQgY29uZmlnmFtgQ29uZmlnOjpNYXhBY3RpdmVDaGlsZEJvdW50eUNvdW50YF0uAAEBSWYgdGhlIGNhbGwgaXMgc3VjY2VzcywgdGhlIHN0YXR1cyBvZiBjaGlsZC1ib3VudHkgaXMgdXBkYXRlZCB0byAiQWRkZWQiLgBNAS0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5IGZvciB3aGljaCBjaGlsZC1ib3VudHkgaXMgYmVpbmcgYWRkZWQusC0gYHZhbHVlYDogVmFsdWUgZm9yIGV4ZWN1dGluZyB0aGUgcHJvcG9zYWwu3C0gYGRlc2NyaXB0aW9uYDogVGV4dCBkZXNjcmlwdGlvbiBmb3IgdGhlIGNoaWxkLWJvdW50eS48cHJvcG9zZV9jdXJhdG9yEAFAcGFyZW50X2JvdW50eV9pZNQBLEJvdW50eUluZGV4AAE8Y2hpbGRfYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAARxjdXJhdG9ypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEMZmVl5AEwQmFsYW5jZU9mPFQ+AAE8oFByb3Bvc2UgY3VyYXRvciBmb3IgZnVuZGVkIGNoaWxkLWJvdW50eS4ADQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBjdXJhdG9yIG9mIHBhcmVudCBib3VudHkuABEBUGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8Ud29yay4ADQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiAiQWRkZWQiIHN0YXRlLCBmb3IgcHJvY2Vzc2luZyB0aGUgY2FsbC4gQW5kBQFzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgbW92ZWQgdG8gIkN1cmF0b3JQcm9wb3NlZCIgb24gc3VjY2Vzc2Z1bEBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LrQtIGBjdXJhdG9yYDogQWRkcmVzcyBvZiBjaGlsZC1ib3VudHkgY3VyYXRvci7sLSBgZmVlYDogcGF5bWVudCBmZWUgdG8gY2hpbGQtYm91bnR5IGN1cmF0b3IgZm9yIGV4ZWN1dGlvbi44YWNjZXB0X2N1cmF0b3IIAUBwYXJlbnRfYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAATxjaGlsZF9ib3VudHlfaWTUASxCb3VudHlJbmRleAACTLRBY2NlcHQgdGhlIGN1cmF0b3Igcm9sZSBmb3IgdGhlIGNoaWxkLWJvdW50eS4A9FRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIHRoZSBjdXJhdG9yIG9mIHRoaXM0Y2hpbGQtYm91bnR5LgDsQSBkZXBvc2l0IHdpbGwgYmUgcmVzZXJ2ZWQgZnJvbSB0aGUgY3VyYXRvciBhbmQgcmVmdW5kIHVwb26Ic3VjY2Vzc2Z1bCBwYXlvdXQgb3IgY2FuY2VsbGF0aW9uLgD4RmVlIGZvciBjdXJhdG9yIGlzIGRlZHVjdGVkIGZyb20gY3VyYXRvciBmZWUgb2YgcGFyZW50IGJvdW50eS4AEQFQYXJlbnQgYm91bnR5IG11c3QgYmUgaW4gYWN0aXZlIHN0YXRlLCBmb3IgdGhpcyBjaGlsZC1ib3VudHkgY2FsbCB0bxR3b3JrLgANAUNoaWxkLWJvdW50eSBtdXN0IGJlIGluICJDdXJhdG9yUHJvcG9zZWQiIHN0YXRlLCBmb3IgcHJvY2Vzc2luZyB0aGUJAWNhbGwuIEFuZCBzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgbW92ZWQgdG8gIkFjdGl2ZSIgb24gc3VjY2Vzc2Z1bEBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LkB1bmFzc2lnbl9jdXJhdG9yCAFAcGFyZW50X2JvdW50eV9pZNQBLEJvdW50eUluZGV4AAE8Y2hpbGRfYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAA4iUVW5hc3NpZ24gY3VyYXRvciBmcm9tIGEgY2hpbGQtYm91bnR5LgAJAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBjYW4gYmUgZWl0aGVyIGBSZWplY3RPcmlnaW5gLCBvctx0aGUgY3VyYXRvciBvZiB0aGUgcGFyZW50IGJvdW50eSwgb3IgYW55IHNpZ25lZCBvcmlnaW4uAPhGb3IgdGhlIG9yaWdpbiBvdGhlciB0aGFuIFQ6OlJlamVjdE9yaWdpbiBhbmQgdGhlIGNoaWxkLWJvdW50eQEBY3VyYXRvciwgcGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2FsbCB0bwkBd29yay4gV2UgYWxsb3cgY2hpbGQtYm91bnR5IGN1cmF0b3IgYW5kIFQ6OlJlamVjdE9yaWdpbiB0byBleGVjdXRlyHRoaXMgY2FsbCBpcnJlc3BlY3RpdmUgb2YgdGhlIHBhcmVudCBib3VudHkgc3RhdGUuANxJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgYFJlamVjdE9yaWdpbmAgb3IgdGhlBQFwYXJlbnQgYm91bnR5IGN1cmF0b3IsIHdlIGFzc3VtZSB0aGF0IHRoZSBjaGlsZC1ib3VudHkgY3VyYXRvciBpcw0BbWFsaWNpb3VzIG9yIGluYWN0aXZlLiBBcyBhIHJlc3VsdCwgY2hpbGQtYm91bnR5IGN1cmF0b3IgZGVwb3NpdCBpcyBzbGFzaGVkLgAFAUlmIHRoZSBvcmlnaW4gaXMgdGhlIGNoaWxkLWJvdW50eSBjdXJhdG9yLCB3ZSB0YWtlIHRoaXMgYXMgYSBzaWduCQF0aGF0IHRoZXkgYXJlIHVuYWJsZSB0byBkbyB0aGVpciBqb2IsIGFuZCBhcmUgd2lsbGluZ2x5IGdpdmluZyB1cC4JAVdlIGNvdWxkIHNsYXNoIHRoZSBkZXBvc2l0LCBidXQgZm9yIG5vdyB3ZSBhbGxvdyB0aGVtIHRvIHVucmVzZXJ2ZREBdGhlaXIgZGVwb3NpdCBhbmQgZXhpdCB3aXRob3V0IGlzc3VlLiAoV2UgbWF5IHdhbnQgdG8gY2hhbmdlIHRoaXMgaWY4aXQgaXMgYWJ1c2VkLikABQFGaW5hbGx5LCB0aGUgb3JpZ2luIGNhbiBiZSBhbnlvbmUgaWZmIHRoZSBjaGlsZC1ib3VudHkgY3VyYXRvciBpcwkBImluYWN0aXZlIi4gRXhwaXJ5IHVwZGF0ZSBkdWUgb2YgcGFyZW50IGJvdW50eSBpcyB1c2VkIHRvIGVzdGltYXRlnGluYWN0aXZlIHN0YXRlIG9mIGNoaWxkLWJvdW50eSBjdXJhdG9yLgANAVRoaXMgYWxsb3dzIGFueW9uZSBpbiB0aGUgY29tbXVuaXR5IHRvIGNhbGwgb3V0IHRoYXQgYSBjaGlsZC1ib3VudHkJAWN1cmF0b3IgaXMgbm90IGRvaW5nIHRoZWlyIGR1ZSBkaWxpZ2VuY2UsIGFuZCB3ZSBzaG91bGQgcGljayBhIG5ld/hvbmUuIEluIHRoaXMgY2FzZSB0aGUgY2hpbGQtYm91bnR5IGN1cmF0b3IgZGVwb3NpdCBpcyBzbGFzaGVkLgABAVN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBtb3ZlZCB0byBBZGRlZCBzdGF0ZSBvbiBzdWNjZXNzZnVsIGNhbGwsY29tcGxldGlvbi4AtC0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5LqwtIGBjaGlsZF9ib3VudHlfaWRgOiBJbmRleCBvZiBjaGlsZCBib3VudHkuSGF3YXJkX2NoaWxkX2JvdW50eQwBQHBhcmVudF9ib3VudHlfaWTUASxCb3VudHlJbmRleAABPGNoaWxkX2JvdW50eV9pZNQBLEJvdW50eUluZGV4AAEsYmVuZWZpY2lhcnmlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4ABESQQXdhcmQgY2hpbGQtYm91bnR5IHRvIGEgYmVuZWZpY2lhcnkuAPhUaGUgYmVuZWZpY2lhcnkgd2lsbCBiZSBhYmxlIHRvIGNsYWltIHRoZSBmdW5kcyBhZnRlciBhIGRlbGF5LgD8VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgdGhlIHBhcmVudCBjdXJhdG9yIG9ydGN1cmF0b3Igb2YgdGhpcyBjaGlsZC1ib3VudHkuABEBUGFyZW50IGJvdW50eSBtdXN0IGJlIGluIGFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8Ud29yay4ACQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiBhY3RpdmUgc3RhdGUsIGZvciBwcm9jZXNzaW5nIHRoZSBjYWxsLiBBbmQRAXN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBtb3ZlZCB0byAiUGVuZGluZ1BheW91dCIgb24gc3VjY2Vzc2Z1bCBjYWxsLGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LpQtIGBiZW5lZmljaWFyeWA6IEJlbmVmaWNpYXJ5IGFjY291bnQuSGNsYWltX2NoaWxkX2JvdW50eQgBQHBhcmVudF9ib3VudHlfaWTUASxCb3VudHlJbmRleAABPGNoaWxkX2JvdW50eV9pZNQBLEJvdW50eUluZGV4AAVABQFDbGFpbSB0aGUgcGF5b3V0IGZyb20gYW4gYXdhcmRlZCBjaGlsZC1ib3VudHkgYWZ0ZXIgcGF5b3V0IGRlbGF5LgDsVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG1heSBiZSBhbnkgc2lnbmVkIG9yaWdpbi4ABQFDYWxsIHdvcmtzIGluZGVwZW5kZW50IG9mIHBhcmVudCBib3VudHkgc3RhdGUsIE5vIG5lZWQgZm9yIHBhcmVudHRib3VudHkgdG8gYmUgaW4gYWN0aXZlIHN0YXRlLgARAVRoZSBCZW5lZmljaWFyeSBpcyBwYWlkIG91dCB3aXRoIGFncmVlZCBib3VudHkgdmFsdWUuIEN1cmF0b3IgZmVlIGlzlHBhaWQgJiBjdXJhdG9yIGRlcG9zaXQgaXMgdW5yZXNlcnZlZC4ABQFDaGlsZC1ib3VudHkgbXVzdCBiZSBpbiAiUGVuZGluZ1BheW91dCIgc3RhdGUsIGZvciBwcm9jZXNzaW5nIHRoZfxjYWxsLiBBbmQgaW5zdGFuY2Ugb2YgY2hpbGQtYm91bnR5IGlzIHJlbW92ZWQgZnJvbSB0aGUgc3RhdGUgb25sc3VjY2Vzc2Z1bCBjYWxsIGNvbXBsZXRpb24uALQtIGBwYXJlbnRfYm91bnR5X2lkYDogSW5kZXggb2YgcGFyZW50IGJvdW50eS6sLSBgY2hpbGRfYm91bnR5X2lkYDogSW5kZXggb2YgY2hpbGQgYm91bnR5LkhjbG9zZV9jaGlsZF9ib3VudHkIAUBwYXJlbnRfYm91bnR5X2lk1AEsQm91bnR5SW5kZXgAATxjaGlsZF9ib3VudHlfaWTUASxCb3VudHlJbmRleAAGWBEBQ2FuY2VsIGEgcHJvcG9zZWQgb3IgYWN0aXZlIGNoaWxkLWJvdW50eS4gQ2hpbGQtYm91bnR5IGFjY291bnQgZnVuZHMJAWFyZSB0cmFuc2ZlcnJlZCB0byBwYXJlbnQgYm91bnR5IGFjY291bnQuIFRoZSBjaGlsZC1ib3VudHkgY3VyYXRvcphkZXBvc2l0IG1heSBiZSB1bnJlc2VydmVkIGlmIHBvc3NpYmxlLgAJAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGVpdGhlciBwYXJlbnQgY3VyYXRvciBvckhgVDo6UmVqZWN0T3JpZ2luYC4A8ElmIHRoZSBzdGF0ZSBvZiBjaGlsZC1ib3VudHkgaXMgYEFjdGl2ZWAsIGN1cmF0b3IgZGVwb3NpdCBpcyx1bnJlc2VydmVkLgD0SWYgdGhlIHN0YXRlIG9mIGNoaWxkLWJvdW50eSBpcyBgUGVuZGluZ1BheW91dGAsIGNhbGwgZmFpbHMgJnhyZXR1cm5zIGBQZW5kaW5nUGF5b3V0YCBlcnJvci4ADQFGb3IgdGhlIG9yaWdpbiBvdGhlciB0aGFuIFQ6OlJlamVjdE9yaWdpbiwgcGFyZW50IGJvdW50eSBtdXN0IGJlIGlu8GFjdGl2ZSBzdGF0ZSwgZm9yIHRoaXMgY2hpbGQtYm91bnR5IGNhbGwgdG8gd29yay4gRm9yIG9yaWdpbpBUOjpSZWplY3RPcmlnaW4gZXhlY3V0aW9uIGlzIGZvcmNlZC4AAQFJbnN0YW5jZSBvZiBjaGlsZC1ib3VudHkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBzdGF0ZSBvbiBzdWNjZXNzZnVsQGNhbGwgY29tcGxldGlvbi4AtC0gYHBhcmVudF9ib3VudHlfaWRgOiBJbmRleCBvZiBwYXJlbnQgYm91bnR5LqwtIGBjaGlsZF9ib3VudHlfaWRgOiBJbmRleCBvZiBjaGlsZCBib3VudHkuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLj0DDJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UYcGFsbGV0EENhbGwEBFQAARQ8c3VibWl0X3Vuc2lnbmVkCAEwcmF3X3NvbHV0aW9uQQMBsEJveDxSYXdTb2x1dGlvbjxTb2x1dGlvbk9mPFQ6Ok1pbmVyQ29uZmlnPj4+AAEcd2l0bmVzc3UEAVhTb2x1dGlvbk9yU25hcHNob3RTaXplAAA4pFN1Ym1pdCBhIHNvbHV0aW9uIGZvciB0aGUgdW5zaWduZWQgcGhhc2UuAMhUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvIHRoaXMgY2FsbCBtdXN0IGJlIF9fbm9uZV9fLgA9AVRoaXMgc3VibWlzc2lvbiBpcyBjaGVja2VkIG9uIHRoZSBmbHkuIE1vcmVvdmVyLCB0aGlzIHVuc2lnbmVkIHNvbHV0aW9uIGlzIG9ubHlVAXZhbGlkYXRlZCB3aGVuIHN1Ym1pdHRlZCB0byB0aGUgcG9vbCBmcm9tIHRoZSAqKmxvY2FsKiogbm9kZS4gRWZmZWN0aXZlbHksIHRoaXMgbWVhbnNdAXRoYXQgb25seSBhY3RpdmUgdmFsaWRhdG9ycyBjYW4gc3VibWl0IHRoaXMgdHJhbnNhY3Rpb24gd2hlbiBhdXRob3JpbmcgYSBibG9jayAoc2ltaWxhckB0byBhbiBpbmhlcmVudCkuAFkBVG8gcHJldmVudCBhbnkgaW5jb3JyZWN0IHNvbHV0aW9uIChhbmQgdGh1cyB3YXN0ZWQgdGltZS93ZWlnaHQpLCB0aGlzIHRyYW5zYWN0aW9uIHdpbGxNAXBhbmljIGlmIHRoZSBzb2x1dGlvbiBzdWJtaXR0ZWQgYnkgdGhlIHZhbGlkYXRvciBpcyBpbnZhbGlkIGluIGFueSB3YXksIGVmZmVjdGl2ZWx5nHB1dHRpbmcgdGhlaXIgYXV0aG9yaW5nIHJld2FyZCBhdCByaXNrLgDgTm8gZGVwb3NpdCBvciByZXdhcmQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3VibWlzc2lvbi5sc2V0X21pbmltdW1fdW50cnVzdGVkX3Njb3JlBAFAbWF5YmVfbmV4dF9zY29yZXkEAVRPcHRpb248RWxlY3Rpb25TY29yZT4AARSwU2V0IGEgbmV3IHZhbHVlIGZvciBgTWluaW11bVVudHJ1c3RlZFNjb3JlYC4A2ERpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIGFsaWduZWQgd2l0aCBgVDo6Rm9yY2VPcmlnaW5gLgDwVGhpcyBjaGVjayBjYW4gYmUgdHVybmVkIG9mZiBieSBzZXR0aW5nIHRoZSB2YWx1ZSB0byBgTm9uZWAudHNldF9lbWVyZ2VuY3lfZWxlY3Rpb25fcmVzdWx0BAEgc3VwcG9ydHN9BAFYU3VwcG9ydHM8VDo6QWNjb3VudElkPgACIFkBU2V0IGEgc29sdXRpb24gaW4gdGhlIHF1ZXVlLCB0byBiZSBoYW5kZWQgb3V0IHRvIHRoZSBjbGllbnQgb2YgdGhpcyBwYWxsZXQgaW4gdGhlIG5leHSIY2FsbCB0byBgRWxlY3Rpb25Qcm92aWRlcjo6ZWxlY3RgLgBFAVRoaXMgY2FuIG9ubHkgYmUgc2V0IGJ5IGBUOjpGb3JjZU9yaWdpbmAsIGFuZCBvbmx5IHdoZW4gdGhlIHBoYXNlIGlzIGBFbWVyZ2VuY3lgLgBhAVRoZSBzb2x1dGlvbiBpcyBub3QgY2hlY2tlZCBmb3IgYW55IGZlYXNpYmlsaXR5IGFuZCBpcyBhc3N1bWVkIHRvIGJlIHRydXN0d29ydGh5LCBhcyBhbnlRAWZlYXNpYmlsaXR5IGNoZWNrIGl0c2VsZiBjYW4gaW4gcHJpbmNpcGxlIGNhdXNlIHRoZSBlbGVjdGlvbiBwcm9jZXNzIHRvIGZhaWwgKGR1ZSB0b2htZW1vcnkvd2VpZ2h0IGNvbnN0cmFpbnMpLhhzdWJtaXQEATByYXdfc29sdXRpb25BAwGwQm94PFJhd1NvbHV0aW9uPFNvbHV0aW9uT2Y8VDo6TWluZXJDb25maWc+Pj4AAyScU3VibWl0IGEgc29sdXRpb24gZm9yIHRoZSBzaWduZWQgcGhhc2UuANBUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvIHRoaXMgY2FsbCBtdXN0IGJlIF9fc2lnbmVkX18uAF0BVGhlIHNvbHV0aW9uIGlzIHBvdGVudGlhbGx5IHF1ZXVlZCwgYmFzZWQgb24gdGhlIGNsYWltZWQgc2NvcmUgYW5kIHByb2Nlc3NlZCBhdCB0aGUgZW5kUG9mIHRoZSBzaWduZWQgcGhhc2UuAF0BQSBkZXBvc2l0IGlzIHJlc2VydmVkIGFuZCByZWNvcmRlZCBmb3IgdGhlIHNvbHV0aW9uLiBCYXNlZCBvbiB0aGUgb3V0Y29tZSwgdGhlIHNvbHV0aW9uFQFtaWdodCBiZSByZXdhcmRlZCwgc2xhc2hlZCwgb3IgZ2V0IGFsbCBvciBhIHBhcnQgb2YgdGhlIGRlcG9zaXQgYmFjay5MZ292ZXJuYW5jZV9mYWxsYmFjawgBQG1heWJlX21heF92b3RlcnNFAgEsT3B0aW9uPHUzMj4AAURtYXliZV9tYXhfdGFyZ2V0c0UCASxPcHRpb248dTMyPgAEEIBUcmlnZ2VyIHRoZSBnb3Zlcm5hbmNlIGZhbGxiYWNrLgBJAVRoaXMgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gW2BQaGFzZTo6RW1lcmdlbmN5YF0gaXMgZW5hYmxlZCwgYXMgYW4gYWx0ZXJuYXRpdmUgdG/AY2FsbGluZyBbYENhbGw6OnNldF9lbWVyZ2VuY3lfZWxlY3Rpb25fcmVzdWx0YF0uBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLkEDCJBwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2UsUmF3U29sdXRpb24EBFMBRQMADAEgc29sdXRpb25FAwEEUwABFHNjb3JlcQQBNEVsZWN0aW9uU2NvcmUAARRyb3VuZBABDHUzMgAARQMIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWVUTnBvc0NvbXBhY3RTb2x1dGlvbjI0AABgARh2b3RlczFJAwAAARh2b3RlczJVAwAAARh2b3RlczNpAwAAARh2b3RlczR1AwAAARh2b3RlczWBAwAAARh2b3RlczaNAwAAARh2b3RlczeZAwAAARh2b3RlczilAwAAARh2b3RlczmxAwAAARx2b3RlczEwvQMAAAEcdm90ZXMxMckDAAABHHZvdGVzMTLVAwAAARx2b3RlczEz4QMAAAEcdm90ZXMxNO0DAAABHHZvdGVzMTX5AwAAARx2b3RlczE2BQQAAAEcdm90ZXMxNxEEAAABHHZvdGVzMTgdBAAAARx2b3RlczE5KQQAAAEcdm90ZXMyMDUEAAABHHZvdGVzMjFBBAAAARx2b3RlczIyTQQAAAEcdm90ZXMyM1kEAAABHHZvdGVzMjRlBAAAAEkDAAACTQMATQMAAAQI1FEDAFEDAAAGXQEAVQMAAAJZAwBZAwAABAzUXQNRAwBdAwAABAhRA2EDAGEDAAAGZQMAZQMMNHNwX2FyaXRobWV0aWMocGVyX3RoaW5ncxhQZXJVMTYAAAQAXQEBDHUxNgAAaQMAAAJtAwBtAwAABAzUcQNRAwBxAwAAAwIAAABdAwB1AwAAAnkDAHkDAAAEDNR9A1EDAH0DAAADAwAAAF0DAIEDAAAChQMAhQMAAAQM1IkDUQMAiQMAAAMEAAAAXQMAjQMAAAKRAwCRAwAABAzUlQNRAwCVAwAAAwUAAABdAwCZAwAAAp0DAJ0DAAAEDNShA1EDAKEDAAADBgAAAF0DAKUDAAACqQMAqQMAAAQM1K0DUQMArQMAAAMHAAAAXQMAsQMAAAK1AwC1AwAABAzUuQNRAwC5AwAAAwgAAABdAwC9AwAAAsEDAMEDAAAEDNTFA1EDAMUDAAADCQAAAF0DAMkDAAACzQMAzQMAAAQM1NEDUQMA0QMAAAMKAAAAXQMA1QMAAALZAwDZAwAABAzU3QNRAwDdAwAAAwsAAABdAwDhAwAAAuUDAOUDAAAEDNTpA1EDAOkDAAADDAAAAF0DAO0DAAAC8QMA8QMAAAQM1PUDUQMA9QMAAAMNAAAAXQMA+QMAAAL9AwD9AwAABAzUAQRRAwABBAAAAw4AAABdAwAFBAAAAgkEAAkEAAAEDNQNBFEDAA0EAAADDwAAAF0DABEEAAACFQQAFQQAAAQM1BkEUQMAGQQAAAMQAAAAXQMAHQQAAAIhBAAhBAAABAzUJQRRAwAlBAAAAxEAAABdAwApBAAAAi0EAC0EAAAEDNQxBFEDADEEAAADEgAAAF0DADUEAAACOQQAOQQAAAQM1D0EUQMAPQQAAAMTAAAAXQMAQQQAAAJFBABFBAAABAzUSQRRAwBJBAAAAxQAAABdAwBNBAAAAlEEAFEEAAAEDNRVBFEDAFUEAAADFQAAAF0DAFkEAAACXQQAXQQAAAQM1GEEUQMAYQQAAAMWAAAAXQMAZQQAAAJpBABpBAAABAzUbQRRAwBtBAAAAxcAAABdAwBxBAhEc3BfbnBvc19lbGVjdGlvbnM0RWxlY3Rpb25TY29yZQAADAE0bWluaW1hbF9zdGFrZRgBPEV4dGVuZGVkQmFsYW5jZQABJHN1bV9zdGFrZRgBPEV4dGVuZGVkQmFsYW5jZQABRHN1bV9zdGFrZV9zcXVhcmVkGAE8RXh0ZW5kZWRCYWxhbmNlAAB1BAiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlWFNvbHV0aW9uT3JTbmFwc2hvdFNpemUAAAgBGHZvdGVyc9QBDHUzMgABHHRhcmdldHPUAQx1MzIAAHkEBBhPcHRpb24EBFQBcQQBCBBOb25lAAAAEFNvbWUEAHEEAAABAAB9BAAAAoEEAIEEAAAECACFBACFBAhEc3BfbnBvc19lbGVjdGlvbnMcU3VwcG9ydAQkQWNjb3VudElkAQAACAEUdG90YWwYATxFeHRlbmRlZEJhbGFuY2UAARh2b3RlcnOJBAGEVmVjPChBY2NvdW50SWQsIEV4dGVuZGVkQmFsYW5jZSk+AACJBAAAAo0EAI0EAAAECAAYAJEEDChwYWxsZXRfbmlzGHBhbGxldBBDYWxsBARUAAEcJHBsYWNlX2JpZAgBGGFtb3VudOQBMEJhbGFuY2VPZjxUPgABIGR1cmF0aW9uEAEMdTMyAAAsMFBsYWNlIGEgYmlkLgA9AU9yaWdpbiBtdXN0IGJlIFNpZ25lZCwgYW5kIGFjY291bnQgbXVzdCBoYXZlIGF0IGxlYXN0IGBhbW91bnRgIGluIGZyZWUgYmFsYW5jZS4AMQEtIGBhbW91bnRgOiBUaGUgYW1vdW50IG9mIHRoZSBiaWQ7IHRoZXNlIGZ1bmRzIHdpbGwgYmUgcmVzZXJ2ZWQsIGFuZCBpZi93aGVuzCAgY29uc29saWRhdGVkLCByZW1vdmVkLiBNdXN0IGJlIGF0IGxlYXN0IGBNaW5CaWRgLkkBLSBgZHVyYXRpb25gOiBUaGUgbnVtYmVyIG9mIHBlcmlvZHMgYmVmb3JlIHdoaWNoIHRoZSBuZXdseSBjb25zb2xpZGF0ZWQgYmlkIG1heSBiZfwgIHRoYXdlZC4gTXVzdCBiZSBncmVhdGVyIHRoYW4gMSBhbmQgbm8gbW9yZSB0aGFuIGBRdWV1ZUNvdW50YC4ANENvbXBsZXhpdGllczqsLSBgUXVldWVzW2R1cmF0aW9uXS5sZW4oKWAgKGp1c3QgdGFrZSBtYXgpLixyZXRyYWN0X2JpZAgBGGFtb3VudOQBMEJhbGFuY2VPZjxUPgABIGR1cmF0aW9uEAEMdTMyAAEcgFJldHJhY3QgYSBwcmV2aW91c2x5IHBsYWNlZCBiaWQuAF0BT3JpZ2luIG11c3QgYmUgU2lnbmVkLCBhbmQgdGhlIGFjY291bnQgc2hvdWxkIGhhdmUgcHJldmlvdXNseSBpc3N1ZWQgYSBzdGlsbC1hY3RpdmUgYmlkbG9mIGBhbW91bnRgIGZvciBgZHVyYXRpb25gLgCsLSBgYW1vdW50YDogVGhlIGFtb3VudCBvZiB0aGUgcHJldmlvdXMgYmlkLrwtIGBkdXJhdGlvbmA6IFRoZSBkdXJhdGlvbiBvZiB0aGUgcHJldmlvdXMgYmlkLjBmdW5kX2RlZmljaXQAAgzwRW5zdXJlIHdlIGhhdmUgc3VmZmljaWVudCBmdW5kaW5nIGZvciBhbGwgcG90ZW50aWFsIHBheW91dHMuALQtIGBvcmlnaW5gOiBNdXN0IGJlIGFjY2VwdGVkIGJ5IGBGdW5kT3JpZ2luYC4wdGhhd19wcml2YXRlCAEUaW5kZXjUATBSZWNlaXB0SW5kZXgAAUBtYXliZV9wcm9wb3J0aW9umQIBTE9wdGlvbjxQZXJxdWludGlsbD4AAyBdAVJlZHVjZSBvciByZW1vdmUgYW4gb3V0c3RhbmRpbmcgcmVjZWlwdCwgcGxhY2luZyB0aGUgYWNjb3JkaW5nIHByb3BvcnRpb24gb2YgZnVuZHMgaW50b2R0aGUgYWNjb3VudCBvZiB0aGUgb3duZXIuAFkBLSBgb3JpZ2luYDogTXVzdCBiZSBTaWduZWQgYW5kIHRoZSBhY2NvdW50IG11c3QgYmUgdGhlIG93bmVyIG9mIHRoZSByZWNlaXB0IGBpbmRleGAgYXOMICB3ZWxsIGFzIGFueSBmdW5naWJsZSBjb3VudGVycGFydC6QLSBgaW5kZXhgOiBUaGUgaW5kZXggb2YgdGhlIHJlY2VpcHQuXQEtIGBwb3J0aW9uYDogSWYgYFNvbWVgLCB0aGVuIG9ubHkgdGhlIGdpdmVuIHBvcnRpb24gb2YgdGhlIHJlY2VpcHQgc2hvdWxkIGJlIHRoYXdlZC4gSWaMICBgTm9uZWAsIHRoZW4gYWxsIG9mIGl0IHNob3VsZCBiZS40dGhhd19jb21tdW5hbAQBFGluZGV41AEwUmVjZWlwdEluZGV4AAQYXQFSZWR1Y2Ugb3IgcmVtb3ZlIGFuIG91dHN0YW5kaW5nIHJlY2VpcHQsIHBsYWNpbmcgdGhlIGFjY29yZGluZyBwcm9wb3J0aW9uIG9mIGZ1bmRzIGludG9kdGhlIGFjY291bnQgb2YgdGhlIG93bmVyLgBhAS0gYG9yaWdpbmA6IE11c3QgYmUgU2lnbmVkIGFuZCB0aGUgYWNjb3VudCBtdXN0IGJlIHRoZSBvd25lciBvZiB0aGUgZnVuZ2libGUgY291bnRlcnBhcnRYICBmb3IgcmVjZWlwdCBgaW5kZXhgLpAtIGBpbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgcmVjZWlwdC4kY29tbXVuaWZ5BAEUaW5kZXjUATBSZWNlaXB0SW5kZXgABQQ9AU1ha2UgYSBwcml2YXRlIHJlY2VpcHQgY29tbXVuYWwgYW5kIGNyZWF0ZSBmdW5naWJsZSBjb3VudGVycGFydHMgZm9yIGl0cyBvd25lci4kcHJpdmF0aXplBAEUaW5kZXjUATBSZWNlaXB0SW5kZXgABgQ5AU1ha2UgYSBjb21tdW5hbCByZWNlaXB0IHByaXZhdGUgYW5kIGJ1cm4gZnVuZ2libGUgY291bnRlcnBhcnRzIGZyb20gaXRzIG93bmVyLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6VBAw8cGFsbGV0X2JhbGFuY2VzGHBhbGxldBBDYWxsCARUAARJAAEkUHRyYW5zZmVyX2FsbG93X2RlYXRoCAEQZGVzdKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFHZhbHVl5AEoVDo6QmFsYW5jZQAAHNRUcmFuc2ZlciBzb21lIGxpcXVpZCBmcmVlIGJhbGFuY2UgdG8gYW5vdGhlciBhY2NvdW50LgA1AWB0cmFuc2Zlcl9hbGxvd19kZWF0aGAgd2lsbCBzZXQgdGhlIGBGcmVlQmFsYW5jZWAgb2YgdGhlIHNlbmRlciBhbmQgcmVjZWl2ZXIuEQFJZiB0aGUgc2VuZGVyJ3MgYWNjb3VudCBpcyBiZWxvdyB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdCBhcyBhIHJlc3VsdLBvZiB0aGUgdHJhbnNmZXIsIHRoZSBhY2NvdW50IHdpbGwgYmUgcmVhcGVkLgAVAVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGBTaWduZWRgIGJ5IHRoZSB0cmFuc2FjdG9yLjhmb3JjZV90cmFuc2ZlcgwBGHNvdXJjZaUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABEGRlc3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZeQBKFQ6OkJhbGFuY2UAAghhAUV4YWN0bHkgYXMgYHRyYW5zZmVyX2FsbG93X2RlYXRoYCwgZXhjZXB0IHRoZSBvcmlnaW4gbXVzdCBiZSByb290IGFuZCB0aGUgc291cmNlIGFjY291bnREbWF5IGJlIHNwZWNpZmllZC5MdHJhbnNmZXJfa2VlcF9hbGl2ZQgBEGRlc3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARR2YWx1ZeQBKFQ6OkJhbGFuY2UAAxhZAVNhbWUgYXMgdGhlIFtgdHJhbnNmZXJfYWxsb3dfZGVhdGhgXSBjYWxsLCBidXQgd2l0aCBhIGNoZWNrIHRoYXQgdGhlIHRyYW5zZmVyIHdpbGwgbm90YGtpbGwgdGhlIG9yaWdpbiBhY2NvdW50LgDoOTklIG9mIHRoZSB0aW1lIHlvdSB3YW50IFtgdHJhbnNmZXJfYWxsb3dfZGVhdGhgXSBpbnN0ZWFkLgDwW2B0cmFuc2Zlcl9hbGxvd19kZWF0aGBdOiBzdHJ1Y3QuUGFsbGV0Lmh0bWwjbWV0aG9kLnRyYW5zZmVyMHRyYW5zZmVyX2FsbAgBEGRlc3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAShrZWVwX2FsaXZlIAEQYm9vbAAEPAUBVHJhbnNmZXIgdGhlIGVudGlyZSB0cmFuc2ZlcmFibGUgYmFsYW5jZSBmcm9tIHRoZSBjYWxsZXIgYWNjb3VudC4AWQFOT1RFOiBUaGlzIGZ1bmN0aW9uIG9ubHkgYXR0ZW1wdHMgdG8gdHJhbnNmZXIgX3RyYW5zZmVyYWJsZV8gYmFsYW5jZXMuIFRoaXMgbWVhbnMgdGhhdGEBYW55IGxvY2tlZCwgcmVzZXJ2ZWQsIG9yIGV4aXN0ZW50aWFsIGRlcG9zaXRzICh3aGVuIGBrZWVwX2FsaXZlYCBpcyBgdHJ1ZWApLCB3aWxsIG5vdCBiZV0BdHJhbnNmZXJyZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoYXQgdGhpcyBmdW5jdGlvbiByZXN1bHRzIGluIGEga2lsbGVkIGFjY291bnQsRQF5b3UgbWlnaHQgbmVlZCB0byBwcmVwYXJlIHRoZSBhY2NvdW50IGJ5IHJlbW92aW5nIGFueSByZWZlcmVuY2UgY291bnRlcnMsIHN0b3JhZ2VAZGVwb3NpdHMsIGV0Yy4uLgDAVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBTaWduZWQuAKAtIGBkZXN0YDogVGhlIHJlY2lwaWVudCBvZiB0aGUgdHJhbnNmZXIuWQEtIGBrZWVwX2FsaXZlYDogQSBib29sZWFuIHRvIGRldGVybWluZSBpZiB0aGUgYHRyYW5zZmVyX2FsbGAgb3BlcmF0aW9uIHNob3VsZCBzZW5kIGFsbE0BICBvZiB0aGUgZnVuZHMgdGhlIGFjY291bnQgaGFzLCBjYXVzaW5nIHRoZSBzZW5kZXIgYWNjb3VudCB0byBiZSBraWxsZWQgKGZhbHNlKSwgb3JZASAgdHJhbnNmZXIgZXZlcnl0aGluZyBleGNlcHQgYXQgbGVhc3QgdGhlIGV4aXN0ZW50aWFsIGRlcG9zaXQsIHdoaWNoIHdpbGwgZ3VhcmFudGVlIHRvnCAga2VlcCB0aGUgc2VuZGVyIGFjY291bnQgYWxpdmUgKHRydWUpLjxmb3JjZV91bnJlc2VydmUIAQx3aG+lAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARhhbW91bnQYAShUOjpCYWxhbmNlAAUMsFVucmVzZXJ2ZSBzb21lIGJhbGFuY2UgZnJvbSBhIHVzZXIgYnkgZm9yY2UuAGxDYW4gb25seSBiZSBjYWxsZWQgYnkgUk9PVC5AdXBncmFkZV9hY2NvdW50cwQBDHdob7UBAURWZWM8VDo6QWNjb3VudElkPgAGIHBVcGdyYWRlIGEgc3BlY2lmaWVkIGFjY291bnQuAHQtIGBvcmlnaW5gOiBNdXN0IGJlIGBTaWduZWRgLpAtIGB3aG9gOiBUaGUgYWNjb3VudCB0byBiZSB1cGdyYWRlZC4AVQFUaGlzIHdpbGwgd2FpdmUgdGhlIHRyYW5zYWN0aW9uIGZlZSBpZiBhdCBsZWFzdCBhbGwgYnV0IDEwJSBvZiB0aGUgYWNjb3VudHMgbmVlZGVkIHRvQQFiZSB1cGdyYWRlZC4gKFdlIGxldCBzb21lIG5vdCBoYXZlIHRvIGJlIHVwZ3JhZGVkIGp1c3QgaW4gb3JkZXIgdG8gYWxsb3cgZm9yIHRoZVhwb3NzaWJpbGl0eSBvZiBjaHVybikuRGZvcmNlX3NldF9iYWxhbmNlCAEMd2hvpQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEgbmV3X2ZyZWXkAShUOjpCYWxhbmNlAAgMrFNldCB0aGUgcmVndWxhciBiYWxhbmNlIG9mIGEgZ2l2ZW4gYWNjb3VudC4AsFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBpcyBgcm9vdGAubGZvcmNlX2FkanVzdF90b3RhbF9pc3N1YW5jZQgBJGRpcmVjdGlvbrkBAUxBZGp1c3RtZW50RGlyZWN0aW9uAAEUZGVsdGHkAShUOjpCYWxhbmNlAAkUuEFkanVzdCB0aGUgdG90YWwgaXNzdWFuY2UgaW4gYSBzYXR1cmF0aW5nIHdheS4A/ENhbiBvbmx5IGJlIGNhbGxlZCBieSByb290IGFuZCBhbHdheXMgbmVlZHMgYSBwb3NpdGl2ZSBgZGVsdGFgLgAkIyBFeGFtcGxlEGJ1cm4IARR2YWx1ZeQBKFQ6OkJhbGFuY2UAAShrZWVwX2FsaXZlIAEQYm9vbAAKHPxCdXJuIHRoZSBzcGVjaWZpZWQgbGlxdWlkIGZyZWUgYmFsYW5jZSBmcm9tIHRoZSBvcmlnaW4gYWNjb3VudC4AJQFJZiB0aGUgb3JpZ2luJ3MgYWNjb3VudCBlbmRzIHVwIGJlbG93IHRoZSBleGlzdGVudGlhbCBkZXBvc2l0IGFzIGEgcmVzdWx0CQFvZiB0aGUgYnVybiBhbmQgYGtlZXBfYWxpdmVgIGlzIGZhbHNlLCB0aGUgYWNjb3VudCB3aWxsIGJlIHJlYXBlZC4AUQFVbmxpa2Ugc2VuZGluZyBmdW5kcyB0byBhIF9idXJuXyBhZGRyZXNzLCB3aGljaCBtZXJlbHkgbWFrZXMgdGhlIGZ1bmRzIGluYWNjZXNzaWJsZSwhAXRoaXMgYGJ1cm5gIG9wZXJhdGlvbiB3aWxsIHJlZHVjZSB0b3RhbCBpc3N1YW5jZSBieSB0aGUgYW1vdW50IF9idXJuZWRfLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6ZBAxAcGFsbGV0X2JhZ3NfbGlzdBhwYWxsZXQQQ2FsbAgEVAAESQABDBRyZWJhZwQBKGRpc2xvY2F0ZWSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAChZAURlY2xhcmUgdGhhdCBzb21lIGBkaXNsb2NhdGVkYCBhY2NvdW50IGhhcywgdGhyb3VnaCByZXdhcmRzIG9yIHBlbmFsdGllcywgc3VmZmljaWVudGx5UQFjaGFuZ2VkIGl0cyBzY29yZSB0aGF0IGl0IHNob3VsZCBwcm9wZXJseSBmYWxsIGludG8gYSBkaWZmZXJlbnQgYmFnIHRoYW4gaXRzIGN1cnJlbnQQb25lLgAdAUFueW9uZSBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIGFib3V0IGFueSBwb3RlbnRpYWxseSBkaXNsb2NhdGVkIGFjY291bnQuAEkBV2lsbCBhbHdheXMgdXBkYXRlIHRoZSBzdG9yZWQgc2NvcmUgb2YgYGRpc2xvY2F0ZWRgIHRvIHRoZSBjb3JyZWN0IHNjb3JlLCBiYXNlZCBvbkBgU2NvcmVQcm92aWRlcmAuANRJZiBgZGlzbG9jYXRlZGAgZG9lcyBub3QgZXhpc3RzLCBpdCByZXR1cm5zIGFuIGVycm9yLjxwdXRfaW5fZnJvbnRfb2YEARxsaWdodGVypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEo0E1vdmUgdGhlIGNhbGxlcidzIElkIGRpcmVjdGx5IGluIGZyb250IG9mIGBsaWdodGVyYC4AWQFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBJZCBvZjUBdGhlIGFjY291bnQgZ29pbmcgaW4gZnJvbnQgb2YgYGxpZ2h0ZXJgLiBGZWUgaXMgcGF5ZWQgYnkgdGhlIG9yaWdpbiB1bmRlciBhbGw4Y2lyY3Vtc3RhbmNlcy4AOE9ubHkgd29ya3MgaWY6AJQtIGJvdGggbm9kZXMgYXJlIHdpdGhpbiB0aGUgc2FtZSBiYWcs0C0gYW5kIGBvcmlnaW5gIGhhcyBhIGdyZWF0ZXIgYFNjb3JlYCB0aGFuIGBsaWdodGVyYC5UcHV0X2luX2Zyb250X29mX290aGVyCAEcaGVhdmllcqUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABHGxpZ2h0ZXKlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAgwRAVNhbWUgYXMgW2BQYWxsZXQ6OnB1dF9pbl9mcm9udF9vZmBdLCBidXQgaXQgY2FuIGJlIGNhbGxlZCBieSBhbnlvbmUuAMhGZWUgaXMgcGFpZCBieSB0aGUgb3JpZ2luIHVuZGVyIGFsbCBjaXJjdW1zdGFuY2VzLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6dBAxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0EENhbGwEBFQAAWgQam9pbggBGGFtb3VudOQBMEJhbGFuY2VPZjxUPgABHHBvb2xfaWQQARhQb29sSWQAAEBFAVN0YWtlIGZ1bmRzIHdpdGggYSBwb29sLiBUaGUgYW1vdW50IHRvIGJvbmQgaXMgZGVsZWdhdGVkIChvciB0cmFuc2ZlcnJlZCBiYXNlZCBvbk0BW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZWBdKSBmcm9tIHRoZSBtZW1iZXIgdG8gdGhlIHBvb2wgYWNjb3VudCBhbmQgaW1tZWRpYXRlbHloaW5jcmVhc2VzIHRoZSBwb29sJ3MgYm9uZC4AKQFUaGUgbWV0aG9kIG9mIHRyYW5zZmVycmluZyB0aGUgYW1vdW50IHRvIHRoZSBwb29sIGFjY291bnQgaXMgZGV0ZXJtaW5lZCBieQEBW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZWBdLiBJZiB0aGUgcG9vbCBpcyBjb25maWd1cmVkIHRvIHVzZTEBW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZTo6RGVsZWdhdGVgXSwgdGhlIGZ1bmRzIHJlbWFpbiBpbiB0aGUgYWNjb3VudCBvZjEBdGhlIGBvcmlnaW5gLCB3aGlsZSB0aGUgcG9vbCBnYWlucyB0aGUgcmlnaHQgdG8gdXNlIHRoZXNlIGZ1bmRzIGZvciBzdGFraW5nLgAYIyBOb3RlAMwqIEFuIGFjY291bnQgY2FuIG9ubHkgYmUgYSBtZW1iZXIgb2YgYSBzaW5nbGUgcG9vbC7YKiBBbiBhY2NvdW50IGNhbm5vdCBqb2luIHRoZSBzYW1lIHBvb2wgbXVsdGlwbGUgdGltZXMuQQEqIFRoaXMgY2FsbCB3aWxsICpub3QqIGR1c3QgdGhlIG1lbWJlciBhY2NvdW50LCBzbyB0aGUgbWVtYmVyIG11c3QgaGF2ZSBhdCBsZWFzdMggIGBleGlzdGVudGlhbCBkZXBvc2l0ICsgYW1vdW50YCBpbiB0aGVpciBhY2NvdW50LtAqIE9ubHkgYSBwb29sIHdpdGggW2BQb29sU3RhdGU6Ok9wZW5gXSBjYW4gYmUgam9pbmVkKGJvbmRfZXh0cmEEARRleHRyYaEEAVxCb25kRXh0cmE8QmFsYW5jZU9mPFQ+PgABHEUBQm9uZCBgZXh0cmFgIG1vcmUgZnVuZHMgZnJvbSBgb3JpZ2luYCBpbnRvIHRoZSBwb29sIHRvIHdoaWNoIHRoZXkgYWxyZWFkeSBiZWxvbmcuAEkBQWRkaXRpb25hbCBmdW5kcyBjYW4gY29tZSBmcm9tIGVpdGhlciB0aGUgZnJlZSBiYWxhbmNlIG9mIHRoZSBhY2NvdW50LCBvZiBmcm9tIHRoZZxhY2N1bXVsYXRlZCByZXdhcmRzLCBzZWUgW2BCb25kRXh0cmFgXS4APQFCb25kaW5nIGV4dHJhIGZ1bmRzIGltcGxpZXMgYW4gYXV0b21hdGljIHBheW91dCBvZiBhbGwgcGVuZGluZyByZXdhcmRzIGFzIHdlbGwuCQFTZWUgYGJvbmRfZXh0cmFfb3RoZXJgIHRvIGJvbmQgcGVuZGluZyByZXdhcmRzIG9mIGBvdGhlcmAgbWVtYmVycy4wY2xhaW1fcGF5b3V0AAIgVQFBIGJvbmRlZCBtZW1iZXIgY2FuIHVzZSB0aGlzIHRvIGNsYWltIHRoZWlyIHBheW91dCBiYXNlZCBvbiB0aGUgcmV3YXJkcyB0aGF0IHRoZSBwb29sYQFoYXMgYWNjdW11bGF0ZWQgc2luY2UgdGhlaXIgbGFzdCBjbGFpbWVkIHBheW91dCAoT1Igc2luY2Ugam9pbmluZyBpZiB0aGlzIGlzIHRoZWlyIGZpcnN0PQF0aW1lIGNsYWltaW5nIHJld2FyZHMpLiBUaGUgcGF5b3V0IHdpbGwgYmUgdHJhbnNmZXJyZWQgdG8gdGhlIG1lbWJlcidzIGFjY291bnQuAEkBVGhlIG1lbWJlciB3aWxsIGVhcm4gcmV3YXJkcyBwcm8gcmF0YSBiYXNlZCBvbiB0aGUgbWVtYmVycyBzdGFrZSB2cyB0aGUgc3VtIG9mIHRoZdBtZW1iZXJzIGluIHRoZSBwb29scyBzdGFrZS4gUmV3YXJkcyBkbyBub3QgImV4cGlyZSIuAEEBU2VlIGBjbGFpbV9wYXlvdXRfb3RoZXJgIHRvIGNsYWltIHJld2FyZHMgb24gYmVoYWxmIG9mIHNvbWUgYG90aGVyYCBwb29sIG1lbWJlci4YdW5ib25kCAE4bWVtYmVyX2FjY291bnSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AAUB1bmJvbmRpbmdfcG9pbnRz5AEwQmFsYW5jZU9mPFQ+AAN8RQFVbmJvbmQgdXAgdG8gYHVuYm9uZGluZ19wb2ludHNgIG9mIHRoZSBgbWVtYmVyX2FjY291bnRgJ3MgZnVuZHMgZnJvbSB0aGUgcG9vbC4gSXRFAWltcGxpY2l0bHkgY29sbGVjdHMgdGhlIHJld2FyZHMgb25lIGxhc3QgdGltZSwgc2luY2Ugbm90IGRvaW5nIHNvIHdvdWxkIG1lYW4gc29tZWxyZXdhcmRzIHdvdWxkIGJlIGZvcmZlaXRlZC4ATQFVbmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIHRoaXMgY2FsbCBjYW4gYmUgZGlzcGF0Y2hlZCBwZXJtaXNzaW9ubGVzc2x5IChpLmUuIGJ5IGFueSRhY2NvdW50KS4ArCMgQ29uZGl0aW9ucyBmb3IgYSBwZXJtaXNzaW9ubGVzcyBkaXNwYXRjaC4AXQEqIFRoZSBwb29sIGlzIGJsb2NrZWQgYW5kIHRoZSBjYWxsZXIgaXMgZWl0aGVyIHRoZSByb290IG9yIGJvdW5jZXIuIFRoaXMgaXMgcmVmZXJlZWQgdG8wICBhcyBhIGtpY2su9CogVGhlIHBvb2wgaXMgZGVzdHJveWluZyBhbmQgdGhlIG1lbWJlciBpcyBub3QgdGhlIGRlcG9zaXRvci5VASogVGhlIHBvb2wgaXMgZGVzdHJveWluZywgdGhlIG1lbWJlciBpcyB0aGUgZGVwb3NpdG9yIGFuZCBubyBvdGhlciBtZW1iZXJzIGFyZSBpbiB0aGUcICBwb29sLgARASMjIENvbmRpdGlvbnMgZm9yIHBlcm1pc3Npb25lZCBkaXNwYXRjaCAoaS5lLiB0aGUgY2FsbGVyIGlzIGFsc28gdGhlSGBtZW1iZXJfYWNjb3VudGApOgCIKiBUaGUgY2FsbGVyIGlzIG5vdCB0aGUgZGVwb3NpdG9yLlUBKiBUaGUgY2FsbGVyIGlzIHRoZSBkZXBvc2l0b3IsIHRoZSBwb29sIGlzIGRlc3Ryb3lpbmcgYW5kIG5vIG90aGVyIG1lbWJlcnMgYXJlIGluIHRoZRwgIHBvb2wuABgjIE5vdGUAHQFJZiB0aGVyZSBhcmUgdG9vIG1hbnkgdW5sb2NraW5nIGNodW5rcyB0byB1bmJvbmQgd2l0aCB0aGUgcG9vbCBhY2NvdW50LFEBW2BDYWxsOjpwb29sX3dpdGhkcmF3X3VuYm9uZGVkYF0gY2FuIGJlIGNhbGxlZCB0byB0cnkgYW5kIG1pbmltaXplIHVubG9ja2luZyBjaHVua3MuWQFUaGUgW2BTdGFraW5nSW50ZXJmYWNlOjp1bmJvbmRgXSB3aWxsIGltcGxpY2l0bHkgY2FsbCBbYENhbGw6OnBvb2xfd2l0aGRyYXdfdW5ib25kZWRgXVUBdG8gdHJ5IHRvIGZyZWUgY2h1bmtzIGlmIG5lY2Vzc2FyeSAoaWUuIGlmIHVuYm91bmQgd2FzIGNhbGxlZCBhbmQgbm8gdW5sb2NraW5nIGNodW5rc2EBYXJlIGF2YWlsYWJsZSkuIEhvd2V2ZXIsIGl0IG1heSBub3QgYmUgcG9zc2libGUgdG8gcmVsZWFzZSB0aGUgY3VycmVudCB1bmxvY2tpbmcgY2h1bmtzLF0BaW4gd2hpY2ggY2FzZSwgdGhlIHJlc3VsdCBvZiB0aGlzIGNhbGwgd2lsbCBsaWtlbHkgYmUgdGhlIGBOb01vcmVDaHVua3NgIGVycm9yIGZyb20gdGhlPHN0YWtpbmcgc3lzdGVtLlhwb29sX3dpdGhkcmF3X3VuYm9uZGVkCAEccG9vbF9pZBABGFBvb2xJZAABSG51bV9zbGFzaGluZ19zcGFucxABDHUzMgAEGFUBQ2FsbCBgd2l0aGRyYXdfdW5ib25kZWRgIGZvciB0aGUgcG9vbHMgYWNjb3VudC4gVGhpcyBjYWxsIGNhbiBiZSBtYWRlIGJ5IGFueSBhY2NvdW50LgBBAVRoaXMgaXMgdXNlZnVsIGlmIHRoZXJlIGFyZSB0b28gbWFueSB1bmxvY2tpbmcgY2h1bmtzIHRvIGNhbGwgYHVuYm9uZGAsIGFuZCBzb21lYQFjYW4gYmUgY2xlYXJlZCBieSB3aXRoZHJhd2luZy4gSW4gdGhlIGNhc2UgdGhlcmUgYXJlIHRvbyBtYW55IHVubG9ja2luZyBjaHVua3MsIHRoZSB1c2VyUQF3b3VsZCBwcm9iYWJseSBzZWUgYW4gZXJyb3IgbGlrZSBgTm9Nb3JlQ2h1bmtzYCBlbWl0dGVkIGZyb20gdGhlIHN0YWtpbmcgc3lzdGVtIHdoZW5cdGhleSBhdHRlbXB0IHRvIHVuYm9uZC5Ed2l0aGRyYXdfdW5ib25kZWQIAThtZW1iZXJfYWNjb3VudKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABSG51bV9zbGFzaGluZ19zcGFucxABDHUzMgAFWFUBV2l0aGRyYXcgdW5ib25kZWQgZnVuZHMgZnJvbSBgbWVtYmVyX2FjY291bnRgLiBJZiBubyBib25kZWQgZnVuZHMgY2FuIGJlIHVuYm9uZGVkLCBhbkhlcnJvciBpcyByZXR1cm5lZC4ATQFVbmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIHRoaXMgY2FsbCBjYW4gYmUgZGlzcGF0Y2hlZCBwZXJtaXNzaW9ubGVzc2x5IChpLmUuIGJ5IGFueSRhY2NvdW50KS4AqCMgQ29uZGl0aW9ucyBmb3IgYSBwZXJtaXNzaW9ubGVzcyBkaXNwYXRjaAAJASogVGhlIHBvb2wgaXMgaW4gZGVzdHJveSBtb2RlIGFuZCB0aGUgdGFyZ2V0IGlzIG5vdCB0aGUgZGVwb3NpdG9yLjEBKiBUaGUgdGFyZ2V0IGlzIHRoZSBkZXBvc2l0b3IgYW5kIHRoZXkgYXJlIHRoZSBvbmx5IG1lbWJlciBpbiB0aGUgc3ViIHBvb2xzLg0BKiBUaGUgcG9vbCBpcyBibG9ja2VkIGFuZCB0aGUgY2FsbGVyIGlzIGVpdGhlciB0aGUgcm9vdCBvciBib3VuY2VyLgCYIyBDb25kaXRpb25zIGZvciBwZXJtaXNzaW9uZWQgZGlzcGF0Y2gA6CogVGhlIGNhbGxlciBpcyB0aGUgdGFyZ2V0IGFuZCB0aGV5IGFyZSBub3QgdGhlIGRlcG9zaXRvci4AGCMgTm90ZQD0LSBJZiB0aGUgdGFyZ2V0IGlzIHRoZSBkZXBvc2l0b3IsIHRoZSBwb29sIHdpbGwgYmUgZGVzdHJveWVkLmEBLSBJZiB0aGUgcG9vbCBoYXMgYW55IHBlbmRpbmcgc2xhc2gsIHdlIGFsc28gdHJ5IHRvIHNsYXNoIHRoZSBtZW1iZXIgYmVmb3JlIGxldHRpbmcgdGhlbV0Bd2l0aGRyYXcuIFRoaXMgY2FsY3VsYXRpb24gYWRkcyBzb21lIHdlaWdodCBvdmVyaGVhZCBhbmQgaXMgb25seSBkZWZlbnNpdmUuIEluIHJlYWxpdHksVQFwb29sIHNsYXNoZXMgbXVzdCBoYXZlIGJlZW4gYWxyZWFkeSBhcHBsaWVkIHZpYSBwZXJtaXNzaW9ubGVzcyBbYENhbGw6OmFwcGx5X3NsYXNoYF0uGGNyZWF0ZRABGGFtb3VudOQBMEJhbGFuY2VPZjxUPgABEHJvb3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASRub21pbmF0b3KlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARxib3VuY2VypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAZEdENyZWF0ZSBhIG5ldyBkZWxlZ2F0aW9uIHBvb2wuACwjIEFyZ3VtZW50cwBVASogYGFtb3VudGAgLSBUaGUgYW1vdW50IG9mIGZ1bmRzIHRvIGRlbGVnYXRlIHRvIHRoZSBwb29sLiBUaGlzIGFsc28gYWN0cyBvZiBhIHNvcnQgb2ZNASAgZGVwb3NpdCBzaW5jZSB0aGUgcG9vbHMgY3JlYXRvciBjYW5ub3QgZnVsbHkgdW5ib25kIGZ1bmRzIHVudGlsIHRoZSBwb29sIGlzIGJlaW5nMCAgZGVzdHJveWVkLlEBKiBgaW5kZXhgIC0gQSBkaXNhbWJpZ3VhdGlvbiBpbmRleCBmb3IgY3JlYXRpbmcgdGhlIGFjY291bnQuIExpa2VseSBvbmx5IHVzZWZ1bCB3aGVuwCAgY3JlYXRpbmcgbXVsdGlwbGUgcG9vbHMgaW4gdGhlIHNhbWUgZXh0cmluc2ljLtQqIGByb290YCAtIFRoZSBhY2NvdW50IHRvIHNldCBhcyBbYFBvb2xSb2xlczo6cm9vdGBdLg0BKiBgbm9taW5hdG9yYCAtIFRoZSBhY2NvdW50IHRvIHNldCBhcyB0aGUgW2BQb29sUm9sZXM6Om5vbWluYXRvcmBdLvwqIGBib3VuY2VyYCAtIFRoZSBhY2NvdW50IHRvIHNldCBhcyB0aGUgW2BQb29sUm9sZXM6OmJvdW5jZXJgXS4AGCMgTm90ZQBhAUluIGFkZGl0aW9uIHRvIGBhbW91bnRgLCB0aGUgY2FsbGVyIHdpbGwgdHJhbnNmZXIgdGhlIGV4aXN0ZW50aWFsIGRlcG9zaXQ7IHNvIHRoZSBjYWxsZXINAW5lZWRzIGF0IGhhdmUgYXQgbGVhc3QgYGFtb3VudCArIGV4aXN0ZW50aWFsX2RlcG9zaXRgIHRyYW5zZmVyYWJsZS5MY3JlYXRlX3dpdGhfcG9vbF9pZBQBGGFtb3VudOQBMEJhbGFuY2VPZjxUPgABEHJvb3SlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AASRub21pbmF0b3KlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AARxib3VuY2VypQEBUEFjY291bnRJZExvb2t1cE9mPFQ+AAEccG9vbF9pZBABGFBvb2xJZAAHGOxDcmVhdGUgYSBuZXcgZGVsZWdhdGlvbiBwb29sIHdpdGggYSBwcmV2aW91c2x5IHVzZWQgcG9vbCBpZAAsIyBBcmd1bWVudHMAmHNhbWUgYXMgYGNyZWF0ZWAgd2l0aCB0aGUgaW5jbHVzaW9uIG9meCogYHBvb2xfaWRgIC0gYEEgdmFsaWQgUG9vbElkLiBub21pbmF0ZQgBHHBvb2xfaWQQARhQb29sSWQAASh2YWxpZGF0b3JztQEBRFZlYzxUOjpBY2NvdW50SWQ+AAgwfE5vbWluYXRlIG9uIGJlaGFsZiBvZiB0aGUgcG9vbC4ARQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIHNpZ25lZCBieSB0aGUgcG9vbCBub21pbmF0b3Igb3IgdGhlIHBvb2wocm9vdCByb2xlLgBJAVRoaXMgZGlyZWN0bHkgZm9yd2FyZCB0aGUgY2FsbCB0byB0aGUgc3Rha2luZyBwYWxsZXQsIG9uIGJlaGFsZiBvZiB0aGUgcG9vbCBib25kZWQgYWNjb3VudC4AGCMgTm90ZQBdAUluIGFkZGl0aW9uIHRvIGEgYHJvb3RgIG9yIGBub21pbmF0b3JgIHJvbGUgb2YgYG9yaWdpbmAsIHBvb2wncyBkZXBvc2l0b3IgbmVlZHMgdG8gaGF2ZfhhdCBsZWFzdCBgZGVwb3NpdG9yX21pbl9ib25kYCBpbiB0aGUgcG9vbCB0byBzdGFydCBub21pbmF0aW5nLiRzZXRfc3RhdGUIARxwb29sX2lkEAEYUG9vbElkAAEUc3RhdGWlBAEkUG9vbFN0YXRlAAkodFNldCBhIG5ldyBzdGF0ZSBmb3IgdGhlIHBvb2wuAFUBSWYgYSBwb29sIGlzIGFscmVhZHkgaW4gdGhlIGBEZXN0cm95aW5nYCBzdGF0ZSwgdGhlbiB1bmRlciBubyBjb25kaXRpb24gY2FuIGl0cyBzdGF0ZTRjaGFuZ2UgYWdhaW4uAMBUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIGVpdGhlcjoA3DEuIHNpZ25lZCBieSB0aGUgYm91bmNlciwgb3IgdGhlIHJvb3Qgcm9sZSBvZiB0aGUgcG9vbCxdATIuIGlmIHRoZSBwb29sIGNvbmRpdGlvbnMgdG8gYmUgb3BlbiBhcmUgTk9UIG1ldCAoYXMgZGVzY3JpYmVkIGJ5IGBva190b19iZV9vcGVuYCksIGFuZDkBICAgdGhlbiB0aGUgc3RhdGUgb2YgdGhlIHBvb2wgY2FuIGJlIHBlcm1pc3Npb25sZXNzbHkgY2hhbmdlZCB0byBgRGVzdHJveWluZ2AuMHNldF9tZXRhZGF0YQgBHHBvb2xfaWQQARhQb29sSWQAASBtZXRhZGF0YTgBHFZlYzx1OD4AChCAU2V0IGEgbmV3IG1ldGFkYXRhIGZvciB0aGUgcG9vbC4AXQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIHNpZ25lZCBieSB0aGUgYm91bmNlciwgb3IgdGhlIHJvb3Qgcm9sZSBvZiB0aGUUcG9vbC4sc2V0X2NvbmZpZ3MYATRtaW5fam9pbl9ib25kqQQBWENvbmZpZ09wPEJhbGFuY2VPZjxUPj4AATxtaW5fY3JlYXRlX2JvbmSpBAFYQ29uZmlnT3A8QmFsYW5jZU9mPFQ+PgABJG1heF9wb29sc60EATRDb25maWdPcDx1MzI+AAEsbWF4X21lbWJlcnOtBAE0Q29uZmlnT3A8dTMyPgABUG1heF9tZW1iZXJzX3Blcl9wb29srQQBNENvbmZpZ09wPHUzMj4AAVRnbG9iYWxfbWF4X2NvbW1pc3Npb26xBAFEQ29uZmlnT3A8UGVyYmlsbD4ACyxBAVVwZGF0ZSBjb25maWd1cmF0aW9ucyBmb3IgdGhlIG5vbWluYXRpb24gcG9vbHMuIFRoZSBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlYFtgQ29uZmlnOjpBZG1pbk9yaWdpbmBdLgAsIyBBcmd1bWVudHMAoCogYG1pbl9qb2luX2JvbmRgIC0gU2V0IFtgTWluSm9pbkJvbmRgXS6wKiBgbWluX2NyZWF0ZV9ib25kYCAtIFNldCBbYE1pbkNyZWF0ZUJvbmRgXS6EKiBgbWF4X3Bvb2xzYCAtIFNldCBbYE1heFBvb2xzYF0upCogYG1heF9tZW1iZXJzYCAtIFNldCBbYE1heFBvb2xNZW1iZXJzYF0u5CogYG1heF9tZW1iZXJzX3Blcl9wb29sYCAtIFNldCBbYE1heFBvb2xNZW1iZXJzUGVyUG9vbGBdLuAqIGBnbG9iYWxfbWF4X2NvbW1pc3Npb25gIC0gU2V0IFtgR2xvYmFsTWF4Q29tbWlzc2lvbmBdLjB1cGRhdGVfcm9sZXMQARxwb29sX2lkEAEYUG9vbElkAAEgbmV3X3Jvb3S1BAFYQ29uZmlnT3A8VDo6QWNjb3VudElkPgABNG5ld19ub21pbmF0b3K1BAFYQ29uZmlnT3A8VDo6QWNjb3VudElkPgABLG5ld19ib3VuY2VytQQBWENvbmZpZ09wPFQ6OkFjY291bnRJZD4ADBx0VXBkYXRlIHRoZSByb2xlcyBvZiB0aGUgcG9vbC4APQFUaGUgcm9vdCBpcyB0aGUgb25seSBlbnRpdHkgdGhhdCBjYW4gY2hhbmdlIGFueSBvZiB0aGUgcm9sZXMsIGluY2x1ZGluZyBpdHNlbGYsuGV4Y2x1ZGluZyB0aGUgZGVwb3NpdG9yLCB3aG8gY2FuIG5ldmVyIGNoYW5nZS4AUQFJdCBlbWl0cyBhbiBldmVudCwgbm90aWZ5aW5nIFVJcyBvZiB0aGUgcm9sZSBjaGFuZ2UuIFRoaXMgZXZlbnQgaXMgcXVpdGUgcmVsZXZhbnQgdG8dAW1vc3QgcG9vbCBtZW1iZXJzIGFuZCB0aGV5IHNob3VsZCBiZSBpbmZvcm1lZCBvZiBjaGFuZ2VzIHRvIHBvb2wgcm9sZXMuFGNoaWxsBAEccG9vbF9pZBABGFBvb2xJZAANQHBDaGlsbCBvbiBiZWhhbGYgb2YgdGhlIHBvb2wuAEEBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgY2FuIGJlIHNpZ25lZCBieSB0aGUgcG9vbCBub21pbmF0b3Igb3IgdGhlIHBvb2ygcm9vdCByb2xlLCBzYW1lIGFzIFtgUGFsbGV0Ojpub21pbmF0ZWBdLgBNAVVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgdGhpcyBjYWxsIGNhbiBiZSBkaXNwYXRjaGVkIHBlcm1pc3Npb25sZXNzbHkgKGkuZS4gYnkgYW55JGFjY291bnQpLgCsIyBDb25kaXRpb25zIGZvciBhIHBlcm1pc3Npb25sZXNzIGRpc3BhdGNoOlkBKiBXaGVuIHBvb2wgZGVwb3NpdG9yIGhhcyBsZXNzIHRoYW4gYE1pbk5vbWluYXRvckJvbmRgIHN0YWtlZCwgb3RoZXJ3aXNlICBwb29sIG1lbWJlcnNcICBhcmUgdW5hYmxlIHRvIHVuYm9uZC4AnCMgQ29uZGl0aW9ucyBmb3IgcGVybWlzc2lvbmVkIGRpc3BhdGNoOtgqIFRoZSBjYWxsZXIgaGFzIGEgbm9taW5hdG9yIG9yIHJvb3Qgcm9sZSBvZiB0aGUgcG9vbC5JAVRoaXMgZGlyZWN0bHkgZm9yd2FyZCB0aGUgY2FsbCB0byB0aGUgc3Rha2luZyBwYWxsZXQsIG9uIGJlaGFsZiBvZiB0aGUgcG9vbCBib25kZWQgYWNjb3VudC5AYm9uZF9leHRyYV9vdGhlcggBGG1lbWJlcqUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgABFGV4dHJhoQQBXEJvbmRFeHRyYTxCYWxhbmNlT2Y8VD4+AA4kVQFgb3JpZ2luYCBib25kcyBmdW5kcyBmcm9tIGBleHRyYWAgZm9yIHNvbWUgcG9vbCBtZW1iZXIgYG1lbWJlcmAgaW50byB0aGVpciByZXNwZWN0aXZlGHBvb2xzLgBJAWBvcmlnaW5gIGNhbiBib25kIGV4dHJhIGZ1bmRzIGZyb20gZnJlZSBiYWxhbmNlIG9yIHBlbmRpbmcgcmV3YXJkcyB3aGVuIGBvcmlnaW4gPT0cb3RoZXJgLgBFAUluIHRoZSBjYXNlIG9mIGBvcmlnaW4gIT0gb3RoZXJgLCBgb3JpZ2luYCBjYW4gb25seSBib25kIGV4dHJhIHBlbmRpbmcgcmV3YXJkcyBvZhUBYG90aGVyYCBtZW1iZXJzIGFzc3VtaW5nIHNldF9jbGFpbV9wZXJtaXNzaW9uIGZvciB0aGUgZ2l2ZW4gbWVtYmVyIGlzwGBQZXJtaXNzaW9ubGVzc0NvbXBvdW5kYCBvciBgUGVybWlzc2lvbmxlc3NBbGxgLlBzZXRfY2xhaW1fcGVybWlzc2lvbgQBKHBlcm1pc3Npb265BAE8Q2xhaW1QZXJtaXNzaW9uAA8cSQFBbGxvd3MgYSBwb29sIG1lbWJlciB0byBzZXQgYSBjbGFpbSBwZXJtaXNzaW9uIHRvIGFsbG93IG9yIGRpc2FsbG93IHBlcm1pc3Npb25sZXNzYGJvbmRpbmcgYW5kIHdpdGhkcmF3aW5nLgAsIyBBcmd1bWVudHMAeCogYG9yaWdpbmAgLSBNZW1iZXIgb2YgYSBwb29sLrgqIGBwZXJtaXNzaW9uYCAtIFRoZSBwZXJtaXNzaW9uIHRvIGJlIGFwcGxpZWQuSGNsYWltX3BheW91dF9vdGhlcgQBFG90aGVyAAEwVDo6QWNjb3VudElkABAQAQFgb3JpZ2luYCBjYW4gY2xhaW0gcGF5b3V0cyBvbiBzb21lIHBvb2wgbWVtYmVyIGBvdGhlcmAncyBiZWhhbGYuAFUBUG9vbCBtZW1iZXIgYG90aGVyYCBtdXN0IGhhdmUgYSBgUGVybWlzc2lvbmxlc3NXaXRoZHJhd2Agb3IgYFBlcm1pc3Npb25sZXNzQWxsYCBjbGFpbahwZXJtaXNzaW9uIGZvciB0aGlzIGNhbGwgdG8gYmUgc3VjY2Vzc2Z1bC44c2V0X2NvbW1pc3Npb24IARxwb29sX2lkEAEYUG9vbElkAAE4bmV3X2NvbW1pc3Npb269BAF8T3B0aW9uPChQZXJiaWxsLCBUOjpBY2NvdW50SWQpPgARFHRTZXQgdGhlIGNvbW1pc3Npb24gb2YgYSBwb29sLlUBQm90aCBhIGNvbW1pc3Npb24gcGVyY2VudGFnZSBhbmQgYSBjb21taXNzaW9uIHBheWVlIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIGBjdXJyZW50YF0BdHVwbGUuIFdoZXJlIGEgYGN1cnJlbnRgIG9mIGBOb25lYCBpcyBwcm92aWRlZCwgYW55IGN1cnJlbnQgY29tbWlzc2lvbiB3aWxsIGJlIHJlbW92ZWQuAE0BLSBJZiBhIGBOb25lYCBpcyBzdXBwbGllZCB0byBgbmV3X2NvbW1pc3Npb25gLCBleGlzdGluZyBjb21taXNzaW9uIHdpbGwgYmUgcmVtb3ZlZC5Ic2V0X2NvbW1pc3Npb25fbWF4CAEccG9vbF9pZBABGFBvb2xJZAABOG1heF9jb21taXNzaW9ulAEcUGVyYmlsbAASFJRTZXQgdGhlIG1heGltdW0gY29tbWlzc2lvbiBvZiBhIHBvb2wuADkBLSBJbml0aWFsIG1heCBjYW4gYmUgc2V0IHRvIGFueSBgUGVyYmlsbGAsIGFuZCBvbmx5IHNtYWxsZXIgdmFsdWVzIHRoZXJlYWZ0ZXIuNQEtIEN1cnJlbnQgY29tbWlzc2lvbiB3aWxsIGJlIGxvd2VyZWQgaW4gdGhlIGV2ZW50IGl0IGlzIGhpZ2hlciB0aGFuIGEgbmV3IG1heDQgIGNvbW1pc3Npb24uaHNldF9jb21taXNzaW9uX2NoYW5nZV9yYXRlCAEccG9vbF9pZBABGFBvb2xJZAABLGNoYW5nZV9yYXRlxQQBnENvbW1pc3Npb25DaGFuZ2VSYXRlPEJsb2NrTnVtYmVyRm9yPFQ+PgATEKhTZXQgdGhlIGNvbW1pc3Npb24gY2hhbmdlIHJhdGUgZm9yIGEgcG9vbC4APQFJbml0aWFsIGNoYW5nZSByYXRlIGlzIG5vdCBib3VuZGVkLCB3aGVyZWFzIHN1YnNlcXVlbnQgdXBkYXRlcyBjYW4gb25seSBiZSBtb3JldHJlc3RyaWN0aXZlIHRoYW4gdGhlIGN1cnJlbnQuQGNsYWltX2NvbW1pc3Npb24EARxwb29sX2lkEAEYUG9vbElkABQUZENsYWltIHBlbmRpbmcgY29tbWlzc2lvbi4AXQFUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIHNpZ25lZCBieSB0aGUgYHJvb3RgIHJvbGUgb2YgdGhlIHBvb2wuIFBlbmRpbmddAWNvbW1pc3Npb24gaXMgcGFpZCBvdXQgYW5kIGFkZGVkIHRvIHRvdGFsIGNsYWltZWQgY29tbWlzc2lvbmAuIFRvdGFsIHBlbmRpbmcgY29tbWlzc2lvbnhpcyByZXNldCB0byB6ZXJvLiB0aGUgY3VycmVudC5MYWRqdXN0X3Bvb2xfZGVwb3NpdAQBHHBvb2xfaWQQARhQb29sSWQAFRzsVG9wIHVwIHRoZSBkZWZpY2l0IG9yIHdpdGhkcmF3IHRoZSBleGNlc3MgRUQgZnJvbSB0aGUgcG9vbC4AUQFXaGVuIGEgcG9vbCBpcyBjcmVhdGVkLCB0aGUgcG9vbCBkZXBvc2l0b3IgdHJhbnNmZXJzIEVEIHRvIHRoZSByZXdhcmQgYWNjb3VudCBvZiB0aGVVAXBvb2wuIEVEIGlzIHN1YmplY3QgdG8gY2hhbmdlIGFuZCBvdmVyIHRpbWUsIHRoZSBkZXBvc2l0IGluIHRoZSByZXdhcmQgYWNjb3VudCBtYXkgYmVRAWluc3VmZmljaWVudCB0byBjb3ZlciB0aGUgRUQgZGVmaWNpdCBvZiB0aGUgcG9vbCBvciB2aWNlLXZlcnNhIHdoZXJlIHRoZXJlIGlzIGV4Y2VzczEBZGVwb3NpdCB0byB0aGUgcG9vbC4gVGhpcyBjYWxsIGFsbG93cyBhbnlvbmUgdG8gYWRqdXN0IHRoZSBFRCBkZXBvc2l0IG9mIHRoZfRwb29sIGJ5IGVpdGhlciB0b3BwaW5nIHVwIHRoZSBkZWZpY2l0IG9yIGNsYWltaW5nIHRoZSBleGNlc3MufHNldF9jb21taXNzaW9uX2NsYWltX3Blcm1pc3Npb24IARxwb29sX2lkEAEYUG9vbElkAAEocGVybWlzc2lvbskEAbxPcHRpb248Q29tbWlzc2lvbkNsYWltUGVybWlzc2lvbjxUOjpBY2NvdW50SWQ+PgAWEMxTZXQgb3IgcmVtb3ZlIGEgcG9vbCdzIGNvbW1pc3Npb24gY2xhaW0gcGVybWlzc2lvbi4AYQFEZXRlcm1pbmVzIHdobyBjYW4gY2xhaW0gdGhlIHBvb2wncyBwZW5kaW5nIGNvbW1pc3Npb24uIE9ubHkgdGhlIGBSb290YCByb2xlIG9mIHRoZSBwb29syGlzIGFibGUgdG8gY29uZmlndXJlIGNvbW1pc3Npb24gY2xhaW0gcGVybWlzc2lvbnMuLGFwcGx5X3NsYXNoBAE4bWVtYmVyX2FjY291bnSlAQFQQWNjb3VudElkTG9va3VwT2Y8VD4AFySIQXBwbHkgYSBwZW5kaW5nIHNsYXNoIG9uIGEgbWVtYmVyLgAlAUZhaWxzIHVubGVzcyBbYGNyYXRlOjpwYWxsZXQ6OkNvbmZpZzo6U3Rha2VBZGFwdGVyYF0gaXMgb2Ygc3RyYXRlZ3kgdHlwZTqkW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZTo6RGVsZWdhdGVgXS4AXQFUaGUgcGVuZGluZyBzbGFzaCBhbW91bnQgb2YgdGhlIG1lbWJlciBtdXN0IGJlIGVxdWFsIG9yIG1vcmUgdGhhbiBgRXhpc3RlbnRpYWxEZXBvc2l0YC5RAVRoaXMgY2FsbCBjYW4gYmUgZGlzcGF0Y2hlZCBwZXJtaXNzaW9ubGVzc2x5IChpLmUuIGJ5IGFueSBhY2NvdW50KS4gSWYgdGhlIGV4ZWN1dGlvbkkBaXMgc3VjY2Vzc2Z1bCwgZmVlIGlzIHJlZnVuZGVkIGFuZCBjYWxsZXIgbWF5IGJlIHJld2FyZGVkIHdpdGggYSBwYXJ0IG9mIHRoZSBzbGFzaA0BYmFzZWQgb24gdGhlIFtgY3JhdGU6OnBhbGxldDo6Q29uZmlnOjpTdGFrZUFkYXB0ZXJgXSBjb25maWd1cmF0aW9uLkhtaWdyYXRlX2RlbGVnYXRpb24EAThtZW1iZXJfYWNjb3VudKUBAVBBY2NvdW50SWRMb29rdXBPZjxUPgAYJB0BTWlncmF0ZXMgZGVsZWdhdGVkIGZ1bmRzIGZyb20gdGhlIHBvb2wgYWNjb3VudCB0byB0aGUgYG1lbWJlcl9hY2NvdW50YC4AJQFGYWlscyB1bmxlc3MgW2BjcmF0ZTo6cGFsbGV0OjpDb25maWc6OlN0YWtlQWRhcHRlcmBdIGlzIG9mIHN0cmF0ZWd5IHR5cGU6pFtgYWRhcHRlcjo6U3Rha2VTdHJhdGVneVR5cGU6OkRlbGVnYXRlYF0uACkBVGhpcyBpcyBhIHBlcm1pc3Npb24tbGVzcyBjYWxsIGFuZCByZWZ1bmRzIGFueSBmZWUgaWYgY2xhaW0gaXMgc3VjY2Vzc2Z1bC4AXQFJZiB0aGUgcG9vbCBoYXMgbWlncmF0ZWQgdG8gZGVsZWdhdGlvbiBiYXNlZCBzdGFraW5nLCB0aGUgc3Rha2VkIHRva2VucyBvZiBwb29sIG1lbWJlcnMpAWNhbiBiZSBtb3ZlZCBhbmQgaGVsZCBpbiB0aGVpciBvd24gYWNjb3VudC4gU2VlIFtgYWRhcHRlcjo6RGVsZWdhdGVTdGFrZWBdeG1pZ3JhdGVfcG9vbF90b19kZWxlZ2F0ZV9zdGFrZQQBHHBvb2xfaWQQARhQb29sSWQAGST0TWlncmF0ZSBwb29sIGZyb20gW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZTo6VHJhbnNmZXJgXSB0b6RbYGFkYXB0ZXI6OlN0YWtlU3RyYXRlZ3lUeXBlOjpEZWxlZ2F0ZWBdLgAlAUZhaWxzIHVubGVzcyBbYGNyYXRlOjpwYWxsZXQ6OkNvbmZpZzo6U3Rha2VBZGFwdGVyYF0gaXMgb2Ygc3RyYXRlZ3kgdHlwZTqkW2BhZGFwdGVyOjpTdGFrZVN0cmF0ZWd5VHlwZTo6RGVsZWdhdGVgXS4AQQFUaGlzIGNhbGwgY2FuIGJlIGRpc3BhdGNoZWQgcGVybWlzc2lvbmxlc3NseSwgYW5kIHJlZnVuZHMgYW55IGZlZSBpZiBzdWNjZXNzZnVsLgBJAUlmIHRoZSBwb29sIGhhcyBhbHJlYWR5IG1pZ3JhdGVkIHRvIGRlbGVnYXRpb24gYmFzZWQgc3Rha2luZywgdGhpcyBjYWxsIHdpbGwgZmFpbC4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuoQQIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzJEJvbmRFeHRyYQQcQmFsYW5jZQEYAQgsRnJlZUJhbGFuY2UEABgBHEJhbGFuY2UAAAAcUmV3YXJkcwABAAClBAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMkUG9vbFN0YXRlAAEMEE9wZW4AAAAcQmxvY2tlZAABAChEZXN0cm95aW5nAAIAAKkECFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBDb25maWdPcAQEVAEYAQwQTm9vcAAAAAxTZXQEABgBBFQAAQAYUmVtb3ZlAAIAAK0ECFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBDb25maWdPcAQEVAEQAQwQTm9vcAAAAAxTZXQEABABBFQAAQAYUmVtb3ZlAAIAALEECFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBDb25maWdPcAQEVAGUAQwQTm9vcAAAAAxTZXQEAJQBBFQAAQAYUmVtb3ZlAAIAALUECFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBDb25maWdPcAQEVAEAAQwQTm9vcAAAAAxTZXQEAAABBFQAAQAYUmVtb3ZlAAIAALkECFxwYWxsZXRfbm9taW5hdGlvbl9wb29sczxDbGFpbVBlcm1pc3Npb24AARAwUGVybWlzc2lvbmVkAAAAWFBlcm1pc3Npb25sZXNzQ29tcG91bmQAAQBYUGVybWlzc2lvbmxlc3NXaXRoZHJhdwACAERQZXJtaXNzaW9ubGVzc0FsbAADAAC9BAQYT3B0aW9uBARUAcEEAQgQTm9uZQAAABBTb21lBADBBAAAAQAAwQQAAAQIlAAAxQQIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzUENvbW1pc3Npb25DaGFuZ2VSYXRlBCxCbG9ja051bWJlcgEQAAgBMG1heF9pbmNyZWFzZZQBHFBlcmJpbGwAASRtaW5fZGVsYXkQASxCbG9ja051bWJlcgAAyQQEGE9wdGlvbgQEVAHNBAEIEE5vbmUAAAAQU29tZQQAzQQAAAEAAM0ECFxwYWxsZXRfbm9taW5hdGlvbl9wb29sc2RDb21taXNzaW9uQ2xhaW1QZXJtaXNzaW9uBCRBY2NvdW50SWQBAAEIOFBlcm1pc3Npb25sZXNzAAAAHEFjY291bnQEAAABJEFjY291bnRJZAABAADRBAxMcGFsbGV0X2Zhc3RfdW5zdGFrZRhwYWxsZXQQQ2FsbAQEVAABDFRyZWdpc3Rlcl9mYXN0X3Vuc3Rha2UAAGiIUmVnaXN0ZXIgb25lc2VsZiBmb3IgZmFzdC11bnN0YWtlLgBIIyMgRGlzcGF0Y2ggT3JpZ2luAEUBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSAqc2lnbmVkKiBieSB3aG9ldmVyIGlzIHBlcm1pdHRlZCB0byBjYWxs8HVuYm9uZCBmdW5kcyBieSB0aGUgc3Rha2luZyBzeXN0ZW0uIFNlZSBbYENvbmZpZzo6U3Rha2luZ2BdLgAoIyMgRGV0YWlscwA5AVRoZSBzdGFzaCBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbiBtdXN0IGhhdmUgbm8gb25nb2luZyB1bmxvY2tpbmcgY2h1bmtzLiBJZl0Bc3VjY2Vzc2Z1bCwgdGhpcyB3aWxsIGZ1bGx5IHVuYm9uZCBhbmQgY2hpbGwgdGhlIHN0YXNoLiBUaGVuLCBpdCB3aWxsIGVucXVldWUgdGhlIHN0YXNogHRvIGJlIGNoZWNrZWQgaW4gZnVydGhlciBibG9ja3MuAFEBSWYgYnkgdGhlIHRpbWUgdGhpcyBpcyBjYWxsZWQsIHRoZSBzdGFzaCBpcyBhY3R1YWxseSBlbGlnaWJsZSBmb3IgZmFzdC11bnN0YWtlLCB0aGVuRQF0aGV5IGFyZSBndWFyYW50ZWVkIHRvIHJlbWFpbiBlbGlnaWJsZSwgYmVjYXVzZSB0aGUgY2FsbCB3aWxsIGNoaWxsIHRoZW0gYXMgd2VsbC4APQFJZiB0aGUgY2hlY2sgd29ya3MsIHRoZSBlbnRpcmUgc3Rha2luZyBkYXRhIGlzIHJlbW92ZWQsIGkuZS4gdGhlIHN0YXNoIGlzIGZ1bGx5JHVuc3Rha2VkLgBdAUlmIHRoZSBjaGVjayBmYWlscywgdGhlIHN0YXNoIHJlbWFpbnMgY2hpbGxlZCBhbmQgd2FpdGluZyBmb3IgYmVpbmcgdW5ib25kZWQgYXMgaW4gd2l0aGEBdGhlIG5vcm1hbCBzdGFraW5nIHN5c3RlbSwgYnV0IHRoZXkgbG9zZSBwYXJ0IG9mIHRoZWlyIHVuYm9uZGluZyBjaHVua3MgZHVlIHRvIGNvbnN1bWluZ1h0aGUgY2hhaW4ncyByZXNvdXJjZXMuACQjIyBFdmVudHMACQFTb21lIGV2ZW50cyBmcm9tIHRoZSBzdGFraW5nIGFuZCBjdXJyZW5jeSBzeXN0ZW0gbWlnaHQgYmUgZW1pdHRlZC4oZGVyZWdpc3RlcgABSKREZXJlZ2lzdGVyIG9uZXNlbGYgZnJvbSB0aGUgZmFzdC11bnN0YWtlLgBIIyMgRGlzcGF0Y2ggT3JpZ2luAEUBVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSAqc2lnbmVkKiBieSB3aG9ldmVyIGlzIHBlcm1pdHRlZCB0byBjYWxs8HVuYm9uZCBmdW5kcyBieSB0aGUgc3Rha2luZyBzeXN0ZW0uIFNlZSBbYENvbmZpZzo6U3Rha2luZ2BdLgAoIyMgRGV0YWlscwBhAVRoaXMgaXMgdXNlZnVsIGlmIG9uZSBpcyByZWdpc3RlcmVkLCB0aGV5IGFyZSBzdGlsbCB3YWl0aW5nLCBhbmQgdGhleSBjaGFuZ2UgdGhlaXIgbWluZC4AWQFOb3RlIHRoYXQgdGhlIGFzc29jaWF0ZWQgc3Rhc2ggaXMgc3RpbGwgZnVsbHkgdW5ib25kZWQgYW5kIGNoaWxsZWQgYXMgYSBjb25zZXF1ZW5jZSBvZlkBY2FsbGluZyBbYFBhbGxldDo6cmVnaXN0ZXJfZmFzdF91bnN0YWtlYF0uIFRoZXJlZm9yZSwgdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgZm9sbG93ZWSwYnkgYSBjYWxsIHRvIGByZWJvbmRgIGluIHRoZSBzdGFraW5nIHN5c3RlbS4AJCMjIEV2ZW50cwAJAVNvbWUgZXZlbnRzIGZyb20gdGhlIHN0YWtpbmcgYW5kIGN1cnJlbmN5IHN5c3RlbSBtaWdodCBiZSBlbWl0dGVkLhxjb250cm9sBAE0ZXJhc190b19jaGVjaxABIEVyYUluZGV4AAI0lENvbnRyb2wgdGhlIG9wZXJhdGlvbiBvZiB0aGlzIHBhbGxldC4ASCMjIERpc3BhdGNoIE9yaWdpbgANAVRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgW2BDb25maWc6OkNvbnRyb2xPcmlnaW5gXS4AKCMjIERldGFpbHMAQQFDYW4gc2V0IHRoZSBudW1iZXIgb2YgZXJhcyB0byBjaGVjayBwZXIgYmxvY2ssIGFuZCBwb3RlbnRpYWxseSBvdGhlciBhZG1pbiB3b3JrLgAkIyMgRXZlbnRzAKRObyBldmVudHMgYXJlIGVtaXR0ZWQgZnJvbSB0aGlzIGRpc3BhdGNoLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7VBBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zNGNvbmZpZ3VyYXRpb24YcGFsbGV0EENhbGwEBFQAAcB8c2V0X3ZhbGlkYXRpb25fdXBncmFkZV9jb29sZG93bgQBDG5ldxABREJsb2NrTnVtYmVyRm9yPFQ+AAAEkFNldCB0aGUgdmFsaWRhdGlvbiB1cGdyYWRlIGNvb2xkb3duLnBzZXRfdmFsaWRhdGlvbl91cGdyYWRlX2RlbGF5BAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4AAQSEU2V0IHRoZSB2YWxpZGF0aW9uIHVwZ3JhZGUgZGVsYXkuZHNldF9jb2RlX3JldGVudGlvbl9wZXJpb2QEAQxuZXcQAURCbG9ja051bWJlckZvcjxUPgACBNBTZXQgdGhlIGFjY2VwdGFuY2UgcGVyaW9kIGZvciBhbiBpbmNsdWRlZCBjYW5kaWRhdGUuRHNldF9tYXhfY29kZV9zaXplBAEMbmV3EAEMdTMyAAME3FNldCB0aGUgbWF4IHZhbGlkYXRpb24gY29kZSBzaXplIGZvciBpbmNvbWluZyB1cGdyYWRlcy5Ac2V0X21heF9wb3Zfc2l6ZQQBDG5ldxABDHUzMgAEBMRTZXQgdGhlIG1heCBQT1YgYmxvY2sgc2l6ZSBmb3IgaW5jb21pbmcgdXBncmFkZXMuWHNldF9tYXhfaGVhZF9kYXRhX3NpemUEAQxuZXcQAQx1MzIABQSUU2V0IHRoZSBtYXggaGVhZCBkYXRhIHNpemUgZm9yIHBhcmFzLkhzZXRfY29yZXRpbWVfY29yZXMEAQxuZXcQAQx1MzIABhCsU2V0IHRoZSBudW1iZXIgb2YgY29yZXRpbWUgZXhlY3V0aW9uIGNvcmVzLgBRAU5PVEU6IHRoYXQgdGhpcyBjb25maWd1cmF0aW9uIGlzIG1hbmFnZWQgYnkgdGhlIGNvcmV0aW1lIGNoYWluLiBPbmx5IG1hbnVhbGx5IGNoYW5nZbB0aGlzLCBpZiB5b3UgcmVhbGx5IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nIXRzZXRfbWF4X2F2YWlsYWJpbGl0eV90aW1lb3V0cwQBDG5ldxABDHUzMgAHBEEBU2V0IHRoZSBtYXggbnVtYmVyIG9mIHRpbWVzIGEgY2xhaW0gbWF5IHRpbWVvdXQgb24gYSBjb3JlIGJlZm9yZSBpdCBpcyBhYmFuZG9uZWRwc2V0X2dyb3VwX3JvdGF0aW9uX2ZyZXF1ZW5jeQQBDG5ldxABREJsb2NrTnVtYmVyRm9yPFQ+AAgE0FNldCB0aGUgcGFyYWNoYWluIHZhbGlkYXRvci1ncm91cCByb3RhdGlvbiBmcmVxdWVuY3l0c2V0X3BhcmFzX2F2YWlsYWJpbGl0eV9wZXJpb2QEAQxuZXcQAURCbG9ja051bWJlckZvcjxUPgAJBJhTZXQgdGhlIGF2YWlsYWJpbGl0eSBwZXJpb2QgZm9yIHBhcmFzLmBzZXRfc2NoZWR1bGluZ19sb29rYWhlYWQEAQxuZXcQAQx1MzIACwQ5AVNldCB0aGUgc2NoZWR1bGluZyBsb29rYWhlYWQsIGluIGV4cGVjdGVkIG51bWJlciBvZiBibG9ja3MgYXQgcGVhayB0aHJvdWdocHV0LmxzZXRfbWF4X3ZhbGlkYXRvcnNfcGVyX2NvcmUEAQxuZXdFAgEsT3B0aW9uPHUzMj4ADATsU2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB2YWxpZGF0b3JzIHRvIGFzc2lnbiB0byBhbnkgY29yZS5Ic2V0X21heF92YWxpZGF0b3JzBAEMbmV3RQIBLE9wdGlvbjx1MzI+AA0EDQFTZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHZhbGlkYXRvcnMgdG8gdXNlIGluIHBhcmFjaGFpbiBjb25zZW5zdXMuSHNldF9kaXNwdXRlX3BlcmlvZAQBDG5ldxABMFNlc3Npb25JbmRleAAOBA0BU2V0IHRoZSBkaXNwdXRlIHBlcmlvZCwgaW4gbnVtYmVyIG9mIHNlc3Npb25zIHRvIGtlZXAgZm9yIGRpc3B1dGVzLrRzZXRfZGlzcHV0ZV9wb3N0X2NvbmNsdXNpb25fYWNjZXB0YW5jZV9wZXJpb2QEAQxuZXcQAURCbG9ja051bWJlckZvcjxUPgAPBMhTZXQgdGhlIGRpc3B1dGUgcG9zdCBjb25jbHVzaW9uIGFjY2VwdGFuY2UgcGVyaW9kLkRzZXRfbm9fc2hvd19zbG90cwQBDG5ldxABDHUzMgASCPhTZXQgdGhlIG5vIHNob3cgc2xvdHMsIGluIG51bWJlciBvZiBudW1iZXIgb2YgY29uc2Vuc3VzIHNsb3RzLkxNdXN0IGJlIGF0IGxlYXN0IDEuUHNldF9uX2RlbGF5X3RyYW5jaGVzBAEMbmV3EAEMdTMyABMEnFNldCB0aGUgdG90YWwgbnVtYmVyIG9mIGRlbGF5IHRyYW5jaGVzLnhzZXRfemVyb3RoX2RlbGF5X3RyYW5jaGVfd2lkdGgEAQxuZXcQAQx1MzIAFASMU2V0IHRoZSB6ZXJvdGggZGVsYXkgdHJhbmNoZSB3aWR0aC5Qc2V0X25lZWRlZF9hcHByb3ZhbHMEAQxuZXcQAQx1MzIAFQTcU2V0IHRoZSBudW1iZXIgb2YgdmFsaWRhdG9ycyBuZWVkZWQgdG8gYXBwcm92ZSBhIGJsb2NrLnBzZXRfcmVsYXlfdnJmX21vZHVsb19zYW1wbGVzBAEMbmV3EAEMdTMyABYEWQFTZXQgdGhlIG51bWJlciBvZiBzYW1wbGVzIHRvIGRvIG9mIHRoZSBgUmVsYXlWUkZNb2R1bG9gIGFwcHJvdmFsIGFzc2lnbm1lbnQgY3JpdGVyaW9uLmhzZXRfbWF4X3Vwd2FyZF9xdWV1ZV9jb3VudAQBDG5ldxABDHUzMgAXBC0BU2V0cyB0aGUgbWF4aW11bSBpdGVtcyB0aGF0IGNhbiBwcmVzZW50IGluIGEgdXB3YXJkIGRpc3BhdGNoIHF1ZXVlIGF0IG9uY2UuZHNldF9tYXhfdXB3YXJkX3F1ZXVlX3NpemUEAQxuZXcQAQx1MzIAGAhNAVNldHMgdGhlIG1heGltdW0gdG90YWwgc2l6ZSBvZiBpdGVtcyB0aGF0IGNhbiBwcmVzZW50IGluIGEgdXB3YXJkIGRpc3BhdGNoIHF1ZXVlIGF0FG9uY2UudHNldF9tYXhfZG93bndhcmRfbWVzc2FnZV9zaXplBAEMbmV3EAEMdTMyABkEnFNldCB0aGUgY3JpdGljYWwgZG93bndhcmQgbWVzc2FnZSBzaXplLmxzZXRfbWF4X3Vwd2FyZF9tZXNzYWdlX3NpemUEAQxuZXcQAQx1MzIAGwQtAVNldHMgdGhlIG1heGltdW0gc2l6ZSBvZiBhbiB1cHdhcmQgbWVzc2FnZSB0aGF0IGNhbiBiZSBzZW50IGJ5IGEgY2FuZGlkYXRlLqBzZXRfbWF4X3Vwd2FyZF9tZXNzYWdlX251bV9wZXJfY2FuZGlkYXRlBAEMbmV3EAEMdTMyABwEBQFTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0aGF0IGEgY2FuZGlkYXRlIGNhbiBjb250YWluLmRzZXRfaHJtcF9vcGVuX3JlcXVlc3RfdHRsBAEMbmV3EAEMdTMyAB0ENQFTZXRzIHRoZSBudW1iZXIgb2Ygc2Vzc2lvbnMgYWZ0ZXIgd2hpY2ggYW4gSFJNUCBvcGVuIGNoYW5uZWwgcmVxdWVzdCBleHBpcmVzLlxzZXRfaHJtcF9zZW5kZXJfZGVwb3NpdAQBDG5ldxgBHEJhbGFuY2UAHgRRAVNldHMgdGhlIGFtb3VudCBvZiBmdW5kcyB0aGF0IHRoZSBzZW5kZXIgc2hvdWxkIHByb3ZpZGUgZm9yIG9wZW5pbmcgYW4gSFJNUCBjaGFubmVsLmhzZXRfaHJtcF9yZWNpcGllbnRfZGVwb3NpdAQBDG5ldxgBHEJhbGFuY2UAHwhhAVNldHMgdGhlIGFtb3VudCBvZiBmdW5kcyB0aGF0IHRoZSByZWNpcGllbnQgc2hvdWxkIHByb3ZpZGUgZm9yIGFjY2VwdGluZyBvcGVuaW5nIGFuIEhSTVAgY2hhbm5lbC50c2V0X2hybXBfY2hhbm5lbF9tYXhfY2FwYWNpdHkEAQxuZXcQAQx1MzIAIAQdAVNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIGFsbG93ZWQgaW4gYW4gSFJNUCBjaGFubmVsIGF0IG9uY2UufHNldF9ocm1wX2NoYW5uZWxfbWF4X3RvdGFsX3NpemUEAQxuZXcQAQx1MzIAIQRRAVNldHMgdGhlIG1heGltdW0gdG90YWwgc2l6ZSBvZiBtZXNzYWdlcyBpbiBieXRlcyBhbGxvd2VkIGluIGFuIEhSTVAgY2hhbm5lbCBhdCBvbmNlLpxzZXRfaHJtcF9tYXhfcGFyYWNoYWluX2luYm91bmRfY2hhbm5lbHMEAQxuZXcQAQx1MzIAIgRJAVNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGluYm91bmQgSFJNUCBjaGFubmVscyBhIHBhcmFjaGFpbiBpcyBhbGxvd2VkIHRvIGFjY2VwdC6Ec2V0X2hybXBfY2hhbm5lbF9tYXhfbWVzc2FnZV9zaXplBAEMbmV3EAEMdTMyACQEPQFTZXRzIHRoZSBtYXhpbXVtIHNpemUgb2YgYSBtZXNzYWdlIHRoYXQgY291bGQgZXZlciBiZSBwdXQgaW50byBhbiBIUk1QIGNoYW5uZWwuoHNldF9ocm1wX21heF9wYXJhY2hhaW5fb3V0Ym91bmRfY2hhbm5lbHMEAQxuZXcQAQx1MzIAJQRFAVNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIG91dGJvdW5kIEhSTVAgY2hhbm5lbHMgYSBwYXJhY2hhaW4gaXMgYWxsb3dlZCB0byBvcGVuLphzZXRfaHJtcF9tYXhfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZQQBDG5ldxABDHUzMgAnBDUBU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Ym91bmQgSFJNUCBtZXNzYWdlcyBjYW4gYmUgc2VudCBieSBhIGNhbmRpZGF0ZS5Ic2V0X3B2Zl92b3RpbmdfdHRsBAEMbmV3EAEwU2Vzc2lvbkluZGV4ACoEUQFTZXQgdGhlIG51bWJlciBvZiBzZXNzaW9uIGNoYW5nZXMgYWZ0ZXIgd2hpY2ggYSBQVkYgcHJlLWNoZWNraW5nIHZvdGluZyBpcyByZWplY3RlZC6Qc2V0X21pbmltdW1fdmFsaWRhdGlvbl91cGdyYWRlX2RlbGF5BAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4AKxBVAVNldHMgdGhlIG1pbmltdW0gZGVsYXkgYmV0d2VlbiBhbm5vdW5jaW5nIHRoZSB1cGdyYWRlIGJsb2NrIGZvciBhIHBhcmFjaGFpbiB1bnRpbCB0aGVUdXBncmFkZSB0YWtpbmcgcGxhY2UuADkBU2VlIHRoZSBmaWVsZCBkb2N1bWVudGF0aW9uIGZvciBpbmZvcm1hdGlvbiBhbmQgY29uc3RyYWludHMgZm9yIHRoZSBuZXcgdmFsdWUucHNldF9ieXBhc3NfY29uc2lzdGVuY3lfY2hlY2sEAQxuZXcgARBib29sACwITQFTZXR0aW5nIHRoaXMgdG8gdHJ1ZSB3aWxsIGRpc2FibGUgY29uc2lzdGVuY3kgY2hlY2tzIGZvciB0aGUgY29uZmlndXJhdGlvbiBzZXR0ZXJzLkRVc2Ugd2l0aCBjYXV0aW9uLmBzZXRfYXN5bmNfYmFja2luZ19wYXJhbXMEAQxuZXfZBAFIQXN5bmNCYWNraW5nUGFyYW1zAC0EoFNldCB0aGUgYXN5bmNocm9ub3VzIGJhY2tpbmcgcGFyYW1ldGVycy5Mc2V0X2V4ZWN1dG9yX3BhcmFtcwQBDG5ld90EAThFeGVjdXRvclBhcmFtcwAuBHBTZXQgUFZGIGV4ZWN1dG9yIHBhcmFtZXRlcnMuWHNldF9vbl9kZW1hbmRfYmFzZV9mZWUEAQxuZXcYARxCYWxhbmNlAC8EpFNldCB0aGUgb24gZGVtYW5kIChwYXJhdGhyZWFkcykgYmFzZSBmZWUudHNldF9vbl9kZW1hbmRfZmVlX3ZhcmlhYmlsaXR5BAEMbmV3lAEcUGVyYmlsbAAwBMBTZXQgdGhlIG9uIGRlbWFuZCAocGFyYXRocmVhZHMpIGZlZSB2YXJpYWJpbGl0eS5wc2V0X29uX2RlbWFuZF9xdWV1ZV9tYXhfc2l6ZQQBDG5ldxABDHUzMgAxBLxTZXQgdGhlIG9uIGRlbWFuZCAocGFyYXRocmVhZHMpIHF1ZXVlIG1heCBzaXplLphzZXRfb25fZGVtYW5kX3RhcmdldF9xdWV1ZV91dGlsaXphdGlvbgQBDG5ld5QBHFBlcmJpbGwAMgTAU2V0IHRoZSBvbiBkZW1hbmQgKHBhcmF0aHJlYWRzKSBmZWUgdmFyaWFiaWxpdHkuRHNldF9vbl9kZW1hbmRfdHRsBAEMbmV3EAFEQmxvY2tOdW1iZXJGb3I8VD4AMwTYU2V0IHRoZSBvbiBkZW1hbmQgKHBhcmF0aHJlYWRzKSB0dGwgaW4gdGhlIGNsYWltcXVldWUuZHNldF9taW5pbXVtX2JhY2tpbmdfdm90ZXMEAQxuZXcQAQx1MzIANASgU2V0IHRoZSBtaW5pbXVtIGJhY2tpbmcgdm90ZXMgdGhyZXNob2xkLkBzZXRfbm9kZV9mZWF0dXJlCAEUaW5kZXgIAQh1OAABFHZhbHVlIAEQYm9vbAA1BGRTZXQvVW5zZXQgYSBub2RlIGZlYXR1cmUuaHNldF9hcHByb3ZhbF92b3RpbmdfcGFyYW1zBAEMbmV38QQBUEFwcHJvdmFsVm90aW5nUGFyYW1zADYEbFNldCBhcHByb3ZhbC12b3RpbmctcGFyYW1zLlBzZXRfc2NoZWR1bGVyX3BhcmFtcwQBDG5ld/UEAYhTY2hlZHVsZXJQYXJhbXM8QmxvY2tOdW1iZXJGb3I8VD4+ADcEVFNldCBzY2hlZHVsZXItcGFyYW1zLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7ZBBBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODRhc3luY19iYWNraW5nSEFzeW5jQmFja2luZ1BhcmFtcwAACAFMbWF4X2NhbmRpZGF0ZV9kZXB0aBABDHUzMgABUGFsbG93ZWRfYW5jZXN0cnlfbGVuEAEMdTMyAADdBBBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODxleGVjdXRvcl9wYXJhbXM4RXhlY3V0b3JQYXJhbXMAAAQA4QQBSFZlYzxFeGVjdXRvclBhcmFtPgAA4QQAAALlBADlBBBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODxleGVjdXRvcl9wYXJhbXM0RXhlY3V0b3JQYXJhbQABHDhNYXhNZW1vcnlQYWdlcwQAEAEMdTMyAAEAPFN0YWNrTG9naWNhbE1heAQAEAEMdTMyAAIAOFN0YWNrTmF0aXZlTWF4BAAQAQx1MzIAAwBQUHJlY2hlY2tpbmdNYXhNZW1vcnkEADABDHU2NAAEADhQdmZQcmVwVGltZW91dAgA6QQBLFB2ZlByZXBLaW5kAAAwAQx1NjQABQA4UHZmRXhlY1RpbWVvdXQIAO0EASxQdmZFeGVjS2luZAAAMAEMdTY0AAYARFdhc21FeHRCdWxrTWVtb3J5AAcAAOkEDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4LFB2ZlByZXBLaW5kAAEIIFByZWNoZWNrAAAAHFByZXBhcmUAAQAA7QQMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjgsUHZmRXhlY0tpbmQAAQgcQmFja2luZwAAACBBcHByb3ZhbAABAADxBAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OFBBcHByb3ZhbFZvdGluZ1BhcmFtcwAABAFsbWF4X2FwcHJvdmFsX2NvYWxlc2NlX2NvdW50EAEMdTMyAAD1BAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODxTY2hlZHVsZXJQYXJhbXMELEJsb2NrTnVtYmVyARAALAFgZ3JvdXBfcm90YXRpb25fZnJlcXVlbmN5EAEsQmxvY2tOdW1iZXIAAWRwYXJhc19hdmFpbGFiaWxpdHlfcGVyaW9kEAEsQmxvY2tOdW1iZXIAAVxtYXhfdmFsaWRhdG9yc19wZXJfY29yZUUCASxPcHRpb248dTMyPgABJGxvb2thaGVhZBABDHUzMgABJG51bV9jb3JlcxABDHUzMgABZG1heF9hdmFpbGFiaWxpdHlfdGltZW91dHMQAQx1MzIAAWBvbl9kZW1hbmRfcXVldWVfbWF4X3NpemUQAQx1MzIAAYhvbl9kZW1hbmRfdGFyZ2V0X3F1ZXVlX3V0aWxpemF0aW9ulAEcUGVyYmlsbAABZG9uX2RlbWFuZF9mZWVfdmFyaWFiaWxpdHmUARxQZXJiaWxsAAFIb25fZGVtYW5kX2Jhc2VfZmVlGAEcQmFsYW5jZQABDHR0bBABLEJsb2NrTnVtYmVyAAD5BBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zGHNoYXJlZBhwYWxsZXQQQ2FsbAQEVAABAAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy79BBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJGluY2x1c2lvbhhwYWxsZXQQQ2FsbAQEVAABAAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy4BBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zOHBhcmFzX2luaGVyZW50GHBhbGxldBBDYWxsBARUAAEEFGVudGVyBAEQZGF0YQUFAZBQYXJhY2hhaW5zSW5oZXJlbnREYXRhPEhlYWRlckZvcjxUPj4AAAQxAUVudGVyIHRoZSBwYXJhcyBpbmhlcmVudC4gVGhpcyB3aWxsIHByb2Nlc3MgYml0ZmllbGRzIGFuZCBiYWNrZWQgY2FuZGlkYXRlcy4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuBQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjgwSW5oZXJlbnREYXRhBAxIRFIBgQEAEAEkYml0ZmllbGRzCQUBkFVuY2hlY2tlZFNpZ25lZEF2YWlsYWJpbGl0eUJpdGZpZWxkcwABRGJhY2tlZF9jYW5kaWRhdGVzJQUBfFZlYzxCYWNrZWRDYW5kaWRhdGU8SERSOjpIYXNoPj4AASBkaXNwdXRlc2kFAWBNdWx0aURpc3B1dGVTdGF0ZW1lbnRTZXQAATRwYXJlbnRfaGVhZGVygQEBDEhEUgAACQUAAAINBQANBRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OBhzaWduZWQ8VW5jaGVja2VkU2lnbmVkCBxQYXlsb2FkAREFLFJlYWxQYXlsb2FkAREFAAwBHHBheWxvYWQRBQEcUGF5bG9hZAABPHZhbGlkYXRvcl9pbmRleB0FAThWYWxpZGF0b3JJbmRleAABJHNpZ25hdHVyZSEFAUhWYWxpZGF0b3JTaWduYXR1cmUAABEFDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4UEF2YWlsYWJpbGl0eUJpdGZpZWxkAAAEABUFAXxCaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+AAAVBQAABwgZBQAZBQwYYml0dmVjFG9yZGVyEExzYjAAAAAAHQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjg4VmFsaWRhdG9ySW5kZXgAAAQAEAEMdTMyAAAhBRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODR2YWxpZGF0b3JfYXBwJFNpZ25hdHVyZQAABAAtAgFIc3IyNTUxOTo6U2lnbmF0dXJlAAAlBQAAAikFACkFDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4PEJhY2tlZENhbmRpZGF0ZQQESAE0AAwBJGNhbmRpZGF0ZS0FAXBDb21taXR0ZWRDYW5kaWRhdGVSZWNlaXB0PEg+AAE4dmFsaWRpdHlfdm90ZXNhBQFgVmVjPFZhbGlkaXR5QXR0ZXN0YXRpb24+AAFEdmFsaWRhdG9yX2luZGljZXMVBQF8Qml0VmVjPHU4LCBiaXR2ZWM6Om9yZGVyOjpMc2IwPgAALQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhkQ29tbWl0dGVkQ2FuZGlkYXRlUmVjZWlwdAQESAE0AAgBKGRlc2NyaXB0b3IxBQFYQ2FuZGlkYXRlRGVzY3JpcHRvcjxIPgABLGNvbW1pdG1lbnRzQQUBUENhbmRpZGF0ZUNvbW1pdG1lbnRzAAAxBQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OExDYW5kaWRhdGVEZXNjcmlwdG9yBARIATQAJAEccGFyYV9pZGkCAQhJZAABMHJlbGF5X3BhcmVudDQBBEgAASBjb2xsYXRvcjUFAShDb2xsYXRvcklkAAF4cGVyc2lzdGVkX3ZhbGlkYXRpb25fZGF0YV9oYXNoNAEQSGFzaAABIHBvdl9oYXNoNAEQSGFzaAABMGVyYXN1cmVfcm9vdDQBEEhhc2gAASRzaWduYXR1cmU5BQFEQ29sbGF0b3JTaWduYXR1cmUAASRwYXJhX2hlYWQ0ARBIYXNoAAFQdmFsaWRhdGlvbl9jb2RlX2hhc2g9BQFIVmFsaWRhdGlvbkNvZGVIYXNoAAA1BRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODBjb2xsYXRvcl9hcHAYUHVibGljAAAEAAQBPHNyMjU1MTk6OlB1YmxpYwAAOQUQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjgwY29sbGF0b3JfYXBwJFNpZ25hdHVyZQAABAAtAgFIc3IyNTUxOTo6U2lnbmF0dXJlAAA9BQx0cG9sa2Fkb3RfcGFyYWNoYWluX3ByaW1pdGl2ZXMocHJpbWl0aXZlc0hWYWxpZGF0aW9uQ29kZUhhc2gAAAQANAEQSGFzaAAAQQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhQQ2FuZGlkYXRlQ29tbWl0bWVudHMEBE4BEAAYATx1cHdhcmRfbWVzc2FnZXNFBQE4VXB3YXJkTWVzc2FnZXMAAUxob3Jpem9udGFsX21lc3NhZ2VzSQUBSEhvcml6b250YWxNZXNzYWdlcwABTG5ld192YWxpZGF0aW9uX2NvZGVVBQFYT3B0aW9uPFZhbGlkYXRpb25Db2RlPgABJGhlYWRfZGF0YV0FASBIZWFkRGF0YQABbHByb2Nlc3NlZF9kb3dud2FyZF9tZXNzYWdlcxABDHUzMgABOGhybXBfd2F0ZXJtYXJrEAEETgAARQUMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAE4BFMAAAQAdQEBGFZlYzxUPgAASQUMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAFNBQRTAAAEAFEFARhWZWM8VD4AAE0FCGBwb2xrYWRvdF9jb3JlX3ByaW1pdGl2ZXNMT3V0Ym91bmRIcm1wTWVzc2FnZQQISWQBaQIACAEkcmVjaXBpZW50aQIBCElkAAEQZGF0YTgBTGFsbG9jOjp2ZWM6OlZlYzx1OD4AAFEFAAACTQUAVQUEGE9wdGlvbgQEVAFZBQEIEE5vbmUAAAAQU29tZQQAWQUAAAEAAFkFDHRwb2xrYWRvdF9wYXJhY2hhaW5fcHJpbWl0aXZlcyhwcmltaXRpdmVzOFZhbGlkYXRpb25Db2RlAAAEADgBHFZlYzx1OD4AAF0FDHRwb2xrYWRvdF9wYXJhY2hhaW5fcHJpbWl0aXZlcyhwcmltaXRpdmVzIEhlYWREYXRhAAAEADgBHFZlYzx1OD4AAGEFAAACZQUAZQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhMVmFsaWRpdHlBdHRlc3RhdGlvbgABCCBJbXBsaWNpdAQAIQUBSFZhbGlkYXRvclNpZ25hdHVyZQABACBFeHBsaWNpdAQAIQUBSFZhbGlkYXRvclNpZ25hdHVyZQACAABpBQAAAm0FAG0FDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4TERpc3B1dGVTdGF0ZW1lbnRTZXQAAAwBOGNhbmRpZGF0ZV9oYXNocQUBNENhbmRpZGF0ZUhhc2gAARxzZXNzaW9uEAEwU2Vzc2lvbkluZGV4AAEoc3RhdGVtZW50c3UFAexWZWM8KERpc3B1dGVTdGF0ZW1lbnQsIFZhbGlkYXRvckluZGV4LCBWYWxpZGF0b3JTaWduYXR1cmUpPgAAcQUIYHBvbGthZG90X2NvcmVfcHJpbWl0aXZlczRDYW5kaWRhdGVIYXNoAAAEADQBEEhhc2gAAHUFAAACeQUAeQUAAAQMfQUdBSEFAH0FDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4QERpc3B1dGVTdGF0ZW1lbnQAAQgUVmFsaWQEAIEFAWRWYWxpZERpc3B1dGVTdGF0ZW1lbnRLaW5kAAAAHEludmFsaWQEAIkFAWxJbnZhbGlkRGlzcHV0ZVN0YXRlbWVudEtpbmQAAQAAgQUMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhkVmFsaWREaXNwdXRlU3RhdGVtZW50S2luZAABFCBFeHBsaWNpdAAAADxCYWNraW5nU2Vjb25kZWQEADQBEEhhc2gAAQAwQmFja2luZ1ZhbGlkBAA0ARBIYXNoAAIAQEFwcHJvdmFsQ2hlY2tpbmcAAwCIQXBwcm92YWxDaGVja2luZ011bHRpcGxlQ2FuZGlkYXRlcwQAhQUBSFZlYzxDYW5kaWRhdGVIYXNoPgAEAACFBQAAAnEFAIkFDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4bEludmFsaWREaXNwdXRlU3RhdGVtZW50S2luZAABBCBFeHBsaWNpdAAAAACNBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzGHBhbGxldBBDYWxsBARUAAEkWGZvcmNlX3NldF9jdXJyZW50X2NvZGUIARBwYXJhaQIBGFBhcmFJZAABIG5ld19jb2RlWQUBOFZhbGlkYXRpb25Db2RlAAAE+FNldCB0aGUgc3RvcmFnZSBmb3IgdGhlIHBhcmFjaGFpbiB2YWxpZGF0aW9uIGNvZGUgaW1tZWRpYXRlbHkuWGZvcmNlX3NldF9jdXJyZW50X2hlYWQIARBwYXJhaQIBGFBhcmFJZAABIG5ld19oZWFkXQUBIEhlYWREYXRhAAEEAQFTZXQgdGhlIHN0b3JhZ2UgZm9yIHRoZSBjdXJyZW50IHBhcmFjaGFpbiBoZWFkIGRhdGEgaW1tZWRpYXRlbHkubGZvcmNlX3NjaGVkdWxlX2NvZGVfdXBncmFkZQwBEHBhcmFpAgEYUGFyYUlkAAEgbmV3X2NvZGVZBQE4VmFsaWRhdGlvbkNvZGUAAUxyZWxheV9wYXJlbnRfbnVtYmVyEAFEQmxvY2tOdW1iZXJGb3I8VD4AAgQtAVNjaGVkdWxlIGFuIHVwZ3JhZGUgYXMgaWYgaXQgd2FzIHNjaGVkdWxlZCBpbiB0aGUgZ2l2ZW4gcmVsYXkgcGFyZW50IGJsb2NrLkxmb3JjZV9ub3RlX25ld19oZWFkCAEQcGFyYWkCARhQYXJhSWQAASBuZXdfaGVhZF0FASBIZWFkRGF0YQADBB0BTm90ZSBhIG5ldyBibG9jayBoZWFkIGZvciBwYXJhIHdpdGhpbiB0aGUgY29udGV4dCBvZiB0aGUgY3VycmVudCBibG9jay5IZm9yY2VfcXVldWVfYWN0aW9uBAEQcGFyYWkCARhQYXJhSWQABAz4UHV0IGEgcGFyYWNoYWluIGRpcmVjdGx5IGludG8gdGhlIG5leHQgc2Vzc2lvbidzIGFjdGlvbiBxdWV1ZS70V2UgY2FuJ3QgcXVldWUgaXQgYW55IHNvb25lciB0aGFuIHRoaXMgd2l0aG91dCBnb2luZyBpbnRvIHRoZThpbml0aWFsaXplci4uLmxhZGRfdHJ1c3RlZF92YWxpZGF0aW9uX2NvZGUEATx2YWxpZGF0aW9uX2NvZGVZBQE4VmFsaWRhdGlvbkNvZGUABTigQWRkcyB0aGUgdmFsaWRhdGlvbiBjb2RlIHRvIHRoZSBzdG9yYWdlLgBZAVRoZSBjb2RlIHdpbGwgbm90IGJlIGFkZGVkIGlmIGl0IGlzIGFscmVhZHkgcHJlc2VudC4gQWRkaXRpb25hbGx5LCBpZiBQVkYgcHJlLWNoZWNraW5n4GlzIHJ1bm5pbmcgZm9yIHRoYXQgY29kZSwgaXQgd2lsbCBiZSBpbnN0YW50bHkgYWNjZXB0ZWQuAFEBT3RoZXJ3aXNlLCB0aGUgY29kZSB3aWxsIGJlIGFkZGVkIGludG8gdGhlIHN0b3JhZ2UuIE5vdGUgdGhhdCB0aGUgY29kZSB3aWxsIGJlIGFkZGVkYQFpbnRvIHN0b3JhZ2Ugd2l0aCByZWZlcmVuY2UgY291bnQgMC4gVGhpcyBpcyB0byBhY2NvdW50IHRoZSBmYWN0IHRoYXQgdGhlcmUgYXJlIG5vIHVzZXJzTQFmb3IgdGhpcyBjb2RlIHlldC4gVGhlIGNhbGxlciB3aWxsIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhpcyBjb2RlIGV2ZW50dWFsbHkgZ2V0c0kBdXNlZCBieSBzb21lIHBhcmFjaGFpbiBvciByZW1vdmVkIGZyb20gdGhlIHN0b3JhZ2UgdG8gYXZvaWQgc3RvcmFnZSBsZWFrcy4gRm9yIHRoZUkBbGF0dGVyIHByZWZlciB0byB1c2UgdGhlIGBwb2tlX3VudXNlZF92YWxpZGF0aW9uX2NvZGVgIGRpc3BhdGNoYWJsZSB0byByYXcgc3RvcmFnZTRtYW5pcHVsYXRpb24uAFEBVGhpcyBmdW5jdGlvbiBpcyBtYWlubHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgdXBncmFkaW5nIHBhcmFjaGFpbnMgdGhhdCBkbyBub3QgZm9sbG93CQF0aGUgZ28tYWhlYWQgc2lnbmFsIHdoaWxlIHRoZSBQVkYgcHJlLWNoZWNraW5nIGZlYXR1cmUgaXMgZW5hYmxlZC5scG9rZV91bnVzZWRfdmFsaWRhdGlvbl9jb2RlBAFQdmFsaWRhdGlvbl9jb2RlX2hhc2g9BQFIVmFsaWRhdGlvbkNvZGVIYXNoAAYUJQFSZW1vdmUgdGhlIHZhbGlkYXRpb24gY29kZSBmcm9tIHRoZSBzdG9yYWdlIGlmZiB0aGUgcmVmZXJlbmNlIGNvdW50IGlzIDAuAFkBVGhpcyBpcyBiZXR0ZXIgdGhhbiByZW1vdmluZyB0aGUgc3RvcmFnZSBkaXJlY3RseSwgYmVjYXVzZSBpdCB3aWxsIG5vdCByZW1vdmUgdGhlIGNvZGVBAXRoYXQgd2FzIHN1ZGRlbmx5IGdvdCB1c2VkIGJ5IHNvbWUgcGFyYWNoYWluIHdoaWxlIHRoaXMgZGlzcGF0Y2hhYmxlIHdhcyBwZW5kaW5nMGRpc3BhdGNoaW5nLmxpbmNsdWRlX3B2Zl9jaGVja19zdGF0ZW1lbnQIARBzdG10kQUBRFB2ZkNoZWNrU3RhdGVtZW50AAEkc2lnbmF0dXJlIQUBSFZhbGlkYXRvclNpZ25hdHVyZQAHCFUBSW5jbHVkZXMgYSBzdGF0ZW1lbnQgZm9yIGEgUFZGIHByZS1jaGVja2luZyB2b3RlLiBQb3RlbnRpYWxseSwgZmluYWxpemVzIHRoZSB2b3RlIGFuZEEBZW5hY3RzIHRoZSByZXN1bHRzIGlmIHRoYXQgd2FzIHRoZSBsYXN0IHZvdGUgYmVmb3JlIGFjaGlldmluZyB0aGUgc3VwZXJtYWpvcml0eS50Zm9yY2Vfc2V0X21vc3RfcmVjZW50X2NvbnRleHQIARBwYXJhaQIBGFBhcmFJZAABHGNvbnRleHQQAURCbG9ja051bWJlckZvcjxUPgAIBAEBU2V0IHRoZSBzdG9yYWdlIGZvciB0aGUgY3VycmVudCBwYXJhY2hhaW4gaGVhZCBkYXRhIGltbWVkaWF0ZWx5LgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6RBQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OERQdmZDaGVja1N0YXRlbWVudAAAEAEYYWNjZXB0IAEQYm9vbAABHHN1YmplY3Q9BQFIVmFsaWRhdGlvbkNvZGVIYXNoAAE0c2Vzc2lvbl9pbmRleBABMFNlc3Npb25JbmRleAABPHZhbGlkYXRvcl9pbmRleB0FAThWYWxpZGF0b3JJbmRleAAAlQUQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyxpbml0aWFsaXplchhwYWxsZXQQQ2FsbAQEVAABBDRmb3JjZV9hcHByb3ZlBAEUdXBfdG8QASxCbG9ja051bWJlcgAADDkBSXNzdWUgYSBzaWduYWwgdG8gdGhlIGNvbnNlbnN1cyBlbmdpbmUgdG8gZm9yY2libHkgYWN0IGFzIHRob3VnaCBhbGwgcGFyYWNoYWluUQFibG9ja3MgaW4gYWxsIHJlbGF5IGNoYWluIGJsb2NrcyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBnaXZlbiBudW1iZXIgaW4gdGhlIGN1cnJlbnSgY2hhaW4gYXJlIHZhbGlkIGFuZCBzaG91bGQgYmUgZmluYWxpemVkLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6ZBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zEGhybXAYcGFsbGV0EENhbGwEBFQAASxYaHJtcF9pbml0X29wZW5fY2hhbm5lbAwBJHJlY2lwaWVudGkCARhQYXJhSWQAAVRwcm9wb3NlZF9tYXhfY2FwYWNpdHkQAQx1MzIAAWRwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplEAEMdTMyAAAoTQFJbml0aWF0ZSBvcGVuaW5nIGEgY2hhbm5lbCBmcm9tIGEgcGFyYWNoYWluIHRvIGEgZ2l2ZW4gcmVjaXBpZW50IHdpdGggZ2l2ZW4gY2hhbm5lbCxwYXJhbWV0ZXJzLgBZAS0gYHByb3Bvc2VkX21heF9jYXBhY2l0eWAgLSBzcGVjaWZpZXMgaG93IG1hbnkgbWVzc2FnZXMgY2FuIGJlIGluIHRoZSBjaGFubmVsIGF0IG9uY2UuLQEtIGBwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplYCAtIHNwZWNpZmllcyB0aGUgbWF4aW11bSBzaXplIG9mIHRoZSBtZXNzYWdlcy4AEQFUaGVzZSBudW1iZXJzIGFyZSBhIHN1YmplY3QgdG8gdGhlIHJlbGF5LWNoYWluIGNvbmZpZ3VyYXRpb24gbGltaXRzLgBRAVRoZSBjaGFubmVsIGNhbiBiZSBvcGVuZWQgb25seSBhZnRlciB0aGUgcmVjaXBpZW50IGNvbmZpcm1zIGl0IGFuZCBvbmx5IG9uIGEgc2Vzc2lvbhxjaGFuZ2UuYGhybXBfYWNjZXB0X29wZW5fY2hhbm5lbAQBGHNlbmRlcmkCARhQYXJhSWQAAQzwQWNjZXB0IGEgcGVuZGluZyBvcGVuIGNoYW5uZWwgcmVxdWVzdCBmcm9tIHRoZSBnaXZlbiBzZW5kZXIuAPRUaGUgY2hhbm5lbCB3aWxsIGJlIG9wZW5lZCBvbmx5IG9uIHRoZSBuZXh0IHNlc3Npb24gYm91bmRhcnkuSGhybXBfY2xvc2VfY2hhbm5lbAQBKGNoYW5uZWxfaWSdBQE0SHJtcENoYW5uZWxJZAACEFUBSW5pdGlhdGUgdW5pbGF0ZXJhbCBjbG9zaW5nIG9mIGEgY2hhbm5lbC4gVGhlIG9yaWdpbiBtdXN0IGJlIGVpdGhlciB0aGUgc2VuZGVyIG9yIHRoZZhyZWNpcGllbnQgaW4gdGhlIGNoYW5uZWwgYmVpbmcgY2xvc2VkLgDAVGhlIGNsb3N1cmUgY2FuIG9ubHkgaGFwcGVuIG9uIGEgc2Vzc2lvbiBjaGFuZ2UuQGZvcmNlX2NsZWFuX2hybXAMARBwYXJhaQIBGFBhcmFJZAABLG51bV9pbmJvdW5kEAEMdTMyAAEwbnVtX291dGJvdW5kEAEMdTMyAAMcXQFUaGlzIGV4dHJpbnNpYyB0cmlnZ2VycyB0aGUgY2xlYW51cCBvZiBhbGwgdGhlIEhSTVAgc3RvcmFnZSBpdGVtcyB0aGF0IGEgcGFyYSBtYXkgaGF2ZS5JAU5vcm1hbGx5IHRoaXMgaGFwcGVucyBvbmNlIHBlciBzZXNzaW9uLCBidXQgdGhpcyBhbGxvd3MgeW91IHRvIHRyaWdnZXIgdGhlIGNsZWFudXCUaW1tZWRpYXRlbHkgZm9yIGEgc3BlY2lmaWMgcGFyYWNoYWluLgBRAU51bWJlciBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZCBjaGFubmVscyBmb3IgYHBhcmFgIG11c3QgYmUgcHJvdmlkZWQgYXMgd2l0bmVzcyBkYXRhLgCQT3JpZ2luIG11c3QgYmUgdGhlIGBDaGFubmVsTWFuYWdlcmAuXGZvcmNlX3Byb2Nlc3NfaHJtcF9vcGVuBAEgY2hhbm5lbHMQAQx1MzIABCCkRm9yY2UgcHJvY2VzcyBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0cy4AVQFJZiB0aGVyZSBhcmUgcGVuZGluZyBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0cywgeW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvbiB0byBwcm9jZXNziGFsbCBvZiB0aG9zZSByZXF1ZXN0cyBpbW1lZGlhdGVseS4ACQFUb3RhbCBudW1iZXIgb2Ygb3BlbmluZyBjaGFubmVscyBtdXN0IGJlIHByb3ZpZGVkIGFzIHdpdG5lc3MgZGF0YS4AkE9yaWdpbiBtdXN0IGJlIHRoZSBgQ2hhbm5lbE1hbmFnZXJgLmBmb3JjZV9wcm9jZXNzX2hybXBfY2xvc2UEASBjaGFubmVscxABDHUzMgAFIKhGb3JjZSBwcm9jZXNzIEhSTVAgY2xvc2UgY2hhbm5lbCByZXF1ZXN0cy4AWQFJZiB0aGVyZSBhcmUgcGVuZGluZyBIUk1QIGNsb3NlIGNoYW5uZWwgcmVxdWVzdHMsIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gdG8gcHJvY2Vzc4hhbGwgb2YgdGhvc2UgcmVxdWVzdHMgaW1tZWRpYXRlbHkuAAkBVG90YWwgbnVtYmVyIG9mIGNsb3NpbmcgY2hhbm5lbHMgbXVzdCBiZSBwcm92aWRlZCBhcyB3aXRuZXNzIGRhdGEuAJBPcmlnaW4gbXVzdCBiZSB0aGUgYENoYW5uZWxNYW5hZ2VyYC5gaHJtcF9jYW5jZWxfb3Blbl9yZXF1ZXN0CAEoY2hhbm5lbF9pZJ0FATRIcm1wQ2hhbm5lbElkAAE0b3Blbl9yZXF1ZXN0cxABDHUzMgAGIF0BVGhpcyBjYW5jZWxzIGEgcGVuZGluZyBvcGVuIGNoYW5uZWwgcmVxdWVzdC4gSXQgY2FuIGJlIGNhbmNlbGVkIGJ5IGVpdGhlciBvZiB0aGUgc2VuZGVyGQFvciB0aGUgcmVjaXBpZW50IGZvciB0aGF0IHJlcXVlc3QuIFRoZSBvcmlnaW4gbXVzdCBiZSBlaXRoZXIgb2YgdGhvc2UuAF0BVGhlIGNhbmNlbGxhdGlvbiBoYXBwZW5zIGltbWVkaWF0ZWx5LiBJdCBpcyBub3QgcG9zc2libGUgdG8gY2FuY2VsIHRoZSByZXF1ZXN0IGlmIGl0IGlzRGFscmVhZHkgYWNjZXB0ZWQuAFkBVG90YWwgbnVtYmVyIG9mIG9wZW4gcmVxdWVzdHMgKGkuZS4gYEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RzTGlzdGApIG11c3QgYmUgcHJvdmlkZWQgYXM0d2l0bmVzcyBkYXRhLlxmb3JjZV9vcGVuX2hybXBfY2hhbm5lbBABGHNlbmRlcmkCARhQYXJhSWQAASRyZWNpcGllbnRpAgEYUGFyYUlkAAEwbWF4X2NhcGFjaXR5EAEMdTMyAAFAbWF4X21lc3NhZ2Vfc2l6ZRABDHUzMgAHIGEBT3BlbiBhIGNoYW5uZWwgZnJvbSBhIGBzZW5kZXJgIHRvIGEgYHJlY2lwaWVudGAgYFBhcmFJZGAuIEFsdGhvdWdoIG9wZW5lZCBieSBnb3Zlcm5hbmNlLEEBdGhlIGBtYXhfY2FwYWNpdHlgIGFuZCBgbWF4X21lc3NhZ2Vfc2l6ZWAgYXJlIHN0aWxsIHN1YmplY3QgdG8gdGhlIFJlbGF5IENoYWluJ3NIY29uZmlndXJlZCBsaW1pdHMuAE0BRXhwZWN0ZWQgdXNlIGlzIHdoZW4gb25lIChhbmQgb25seSBvbmUpIG9mIHRoZSBgUGFyYUlkYHMgaW52b2x2ZWQgaW4gdGhlIGNoYW5uZWwgaXPAZ292ZXJuZWQgYnkgdGhlIHN5c3RlbSwgZS5nLiBhIHN5c3RlbSBwYXJhY2hhaW4uAJBPcmlnaW4gbXVzdCBiZSB0aGUgYENoYW5uZWxNYW5hZ2VyYC5gZXN0YWJsaXNoX3N5c3RlbV9jaGFubmVsCAEYc2VuZGVyaQIBGFBhcmFJZAABJHJlY2lwaWVudGkCARhQYXJhSWQACDBRAUVzdGFibGlzaCBhbiBIUk1QIGNoYW5uZWwgYmV0d2VlbiB0d28gc3lzdGVtIGNoYWlucy4gSWYgdGhlIGNoYW5uZWwgZG9lcyBub3QgYWxyZWFkeVEBZXhpc3QsIHRoZSB0cmFuc2FjdGlvbiBmZWVzIHdpbGwgYmUgcmVmdW5kZWQgdG8gdGhlIGNhbGxlci4gVGhlIHN5c3RlbSBkb2VzIG5vdCB0YWtlWQFkZXBvc2l0cyBmb3IgY2hhbm5lbHMgYmV0d2VlbiBzeXN0ZW0gY2hhaW5zLCBhbmQgYXV0b21hdGljYWxseSBzZXRzIHRoZSBtZXNzYWdlIG51bWJlchkBYW5kIHNpemUgbGltaXRzIHRvIHRoZSBtYXhpbXVtIGFsbG93ZWQgYnkgdGhlIG5ldHdvcmsncyBjb25maWd1cmF0aW9uLgAoQXJndW1lbnRzOgCULSBgc2VuZGVyYDogQSBzeXN0ZW0gY2hhaW4sIGBQYXJhSWRgLqAtIGByZWNpcGllbnRgOiBBIHN5c3RlbSBjaGFpbiwgYFBhcmFJZGAuAFUBQW55IHNpZ25lZCBvcmlnaW4gY2FuIGNhbGwgdGhpcyBmdW5jdGlvbiwgYnV0IF9ib3RoXyBpbnB1dHMgTVVTVCBiZSBzeXN0ZW0gY2hhaW5zLiBJZsB0aGUgY2hhbm5lbCBkb2VzIG5vdCBleGlzdCB5ZXQsIHRoZXJlIGlzIG5vIGZlZS5UcG9rZV9jaGFubmVsX2RlcG9zaXRzCAEYc2VuZGVyaQIBGFBhcmFJZAABJHJlY2lwaWVudGkCARhQYXJhSWQACSRRAVVwZGF0ZSB0aGUgZGVwb3NpdHMgaGVsZCBmb3IgYW4gSFJNUCBjaGFubmVsIHRvIHRoZSBsYXRlc3QgYENvbmZpZ3VyYXRpb25gLiBDaGFubmVsc7B3aXRoIHN5c3RlbSBjaGFpbnMgZG8gbm90IHJlcXVpcmUgYSBkZXBvc2l0LgAoQXJndW1lbnRzOgB4LSBgc2VuZGVyYDogQSBjaGFpbiwgYFBhcmFJZGAuhC0gYHJlY2lwaWVudGA6IEEgY2hhaW4sIGBQYXJhSWRgLgCkQW55IHNpZ25lZCBvcmlnaW4gY2FuIGNhbGwgdGhpcyBmdW5jdGlvbi50ZXN0YWJsaXNoX2NoYW5uZWxfd2l0aF9zeXN0ZW0EAUx0YXJnZXRfc3lzdGVtX2NoYWluaQIBGFBhcmFJZAAKHDkBRXN0YWJsaXNoIGEgYmlkaXJlY3Rpb25hbCBIUk1QIGNoYW5uZWwgYmV0d2VlbiBhIHBhcmFjaGFpbiBhbmQgYSBzeXN0ZW0gY2hhaW4uAChBcmd1bWVudHM6AMgtIGB0YXJnZXRfc3lzdGVtX2NoYWluYDogQSBzeXN0ZW0gY2hhaW4sIGBQYXJhSWRgLgCwVGhlIG9yaWdpbiBuZWVkcyB0byBiZSB0aGUgcGFyYWNoYWluIG9yaWdpbi4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMunQUMdHBvbGthZG90X3BhcmFjaGFpbl9wcmltaXRpdmVzKHByaW1pdGl2ZXM0SHJtcENoYW5uZWxJZAAACAEYc2VuZGVyaQIBCElkAAEkcmVjaXBpZW50aQIBCElkAAChBRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zIGRpc3B1dGVzGHBhbGxldBBDYWxsBARUAAEEOGZvcmNlX3VuZnJlZXplAAAABA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLqUFFGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMgc2xhc2hpbmcYcGFsbGV0EENhbGwEBFQAAQRwcmVwb3J0X2Rpc3B1dGVfbG9zdF91bnNpZ25lZAgBNGRpc3B1dGVfcHJvb2apBQFEQm94PERpc3B1dGVQcm9vZj4AATxrZXlfb3duZXJfcHJvb2aNAQFAVDo6S2V5T3duZXJQcm9vZgAAAAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy6pBRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCBzbGFzaGluZzBEaXNwdXRlUHJvb2YAABABJHRpbWVfc2xvdK0FAUBEaXNwdXRlc1RpbWVTbG90AAEQa2luZLEFAUxTbGFzaGluZ09mZmVuY2VLaW5kAAE8dmFsaWRhdG9yX2luZGV4HQUBOFZhbGlkYXRvckluZGV4AAEwdmFsaWRhdG9yX2lkAQIBLFZhbGlkYXRvcklkAACtBRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCBzbGFzaGluZ0BEaXNwdXRlc1RpbWVTbG90AAAIATRzZXNzaW9uX2luZGV4EAEwU2Vzc2lvbkluZGV4AAE4Y2FuZGlkYXRlX2hhc2hxBQE0Q2FuZGlkYXRlSGFzaAAAsQUQTHBvbGthZG90X3ByaW1pdGl2ZXMIdjggc2xhc2hpbmdMU2xhc2hpbmdPZmZlbmNlS2luZAABCChGb3JJbnZhbGlkAAAAMEFnYWluc3RWYWxpZAABAAC1BRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJG9uX2RlbWFuZBhwYWxsZXQQQ2FsbAQEVAABCFxwbGFjZV9vcmRlcl9hbGxvd19kZWF0aAgBKG1heF9hbW91bnQYATBCYWxhbmNlT2Y8VD4AARxwYXJhX2lkaQIBGFBhcmFJZAAAPJRDcmVhdGUgYSBzaW5nbGUgb24gZGVtYW5kIGNvcmUgb3JkZXIuSQFXaWxsIHVzZSB0aGUgc3BvdCBwcmljZSBmb3IgdGhlIGN1cnJlbnQgYmxvY2sgYW5kIHdpbGwgcmVhcCB0aGUgYWNjb3VudCBpZiBuZWVkZWQuACxQYXJhbWV0ZXJzOjkBLSBgb3JpZ2luYDogVGhlIHNlbmRlciBvZiB0aGUgY2FsbCwgZnVuZHMgd2lsbCBiZSB3aXRoZHJhd24gZnJvbSB0aGlzIGFjY291bnQuSQEtIGBtYXhfYW1vdW50YDogVGhlIG1heGltdW0gYmFsYW5jZSB0byB3aXRoZHJhdyBmcm9tIHRoZSBvcmlnaW4gdG8gcGxhY2UgYW4gb3JkZXIuDQEtIGBwYXJhX2lkYDogQSBgUGFyYUlkYCB0aGUgb3JpZ2luIHdhbnRzIHRvIHByb3ZpZGUgYmxvY2tzcGFjZSBmb3IuABxFcnJvcnM65C0gYEluc3VmZmljaWVudEJhbGFuY2VgOiBmcm9tIHRoZSBDdXJyZW5jeSBpbXBsZW1lbnRhdGlvbjQtIGBRdWV1ZUZ1bGxggC0gYFNwb3RQcmljZUhpZ2hlclRoYW5NYXhBbW91bnRgABxFdmVudHM6XC0gYE9uRGVtYW5kT3JkZXJQbGFjZWRgWHBsYWNlX29yZGVyX2tlZXBfYWxpdmUIAShtYXhfYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEccGFyYV9pZGkCARhQYXJhSWQAATxhAVNhbWUgYXMgdGhlIFtgcGxhY2Vfb3JkZXJfYWxsb3dfZGVhdGhgXShTZWxmOjpwbGFjZV9vcmRlcl9hbGxvd19kZWF0aCkgY2FsbCAsIGJ1dCB3aXRoIGHcY2hlY2sgdGhhdCBwbGFjaW5nIHRoZSBvcmRlciB3aWxsIG5vdCByZWFwIHRoZSBhY2NvdW50LgAsUGFyYW1ldGVyczo5AS0gYG9yaWdpbmA6IFRoZSBzZW5kZXIgb2YgdGhlIGNhbGwsIGZ1bmRzIHdpbGwgYmUgd2l0aGRyYXduIGZyb20gdGhpcyBhY2NvdW50LkkBLSBgbWF4X2Ftb3VudGA6IFRoZSBtYXhpbXVtIGJhbGFuY2UgdG8gd2l0aGRyYXcgZnJvbSB0aGUgb3JpZ2luIHRvIHBsYWNlIGFuIG9yZGVyLg0BLSBgcGFyYV9pZGA6IEEgYFBhcmFJZGAgdGhlIG9yaWdpbiB3YW50cyB0byBwcm92aWRlIGJsb2Nrc3BhY2UgZm9yLgAcRXJyb3JzOuQtIGBJbnN1ZmZpY2llbnRCYWxhbmNlYDogZnJvbSB0aGUgQ3VycmVuY3kgaW1wbGVtZW50YXRpb240LSBgUXVldWVGdWxsYIAtIGBTcG90UHJpY2VIaWdoZXJUaGFuTWF4QW1vdW50YAAcRXZlbnRzOlwtIGBPbkRlbWFuZE9yZGVyUGxhY2VkYAQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy65BRBccG9sa2Fkb3RfcnVudGltZV9jb21tb248cGFyYXNfcmVnaXN0cmFyGHBhbGxldBBDYWxsBARUAAEkIHJlZ2lzdGVyDAEIaWRpAgEYUGFyYUlkAAEwZ2VuZXNpc19oZWFkXQUBIEhlYWREYXRhAAE8dmFsaWRhdGlvbl9jb2RlWQUBOFZhbGlkYXRpb25Db2RlAABQ+FJlZ2lzdGVyIGhlYWQgZGF0YSBhbmQgdmFsaWRhdGlvbiBjb2RlIGZvciBhIHJlc2VydmVkIFBhcmEgSWQuADAjIyBBcmd1bWVudHPALSBgb3JpZ2luYDogTXVzdCBiZSBjYWxsZWQgYnkgYSBgU2lnbmVkYCBvcmlnaW4uLQEtIGBpZGA6IFRoZSBwYXJhIElELiBNdXN0IGJlIG93bmVkL21hbmFnZWQgYnkgdGhlIGBvcmlnaW5gIHNpZ25pbmcgYWNjb3VudC4BAS0gYGdlbmVzaXNfaGVhZGA6IFRoZSBnZW5lc2lzIGhlYWQgZGF0YSBvZiB0aGUgcGFyYWNoYWluL3RocmVhZC4lAS0gYHZhbGlkYXRpb25fY29kZWA6IFRoZSBpbml0aWFsIHZhbGlkYXRpb24gY29kZSBvZiB0aGUgcGFyYWNoYWluL3RocmVhZC4AQCMjIERlcG9zaXRzL0ZlZXMJAVRoZSBhY2NvdW50IHdpdGggdGhlIG9yaWdpbmF0aW5nIHNpZ25hdHVyZSBtdXN0IHJlc2VydmUgYSBkZXBvc2l0LgBNAVRoZSBkZXBvc2l0IGlzIHJlcXVpcmVkIHRvIGNvdmVyIHRoZSBjb3N0cyBhc3NvY2lhdGVkIHdpdGggc3RvcmluZyB0aGUgZ2VuZXNpcyBoZWFkdGRhdGEgYW5kIHRoZSB2YWxpZGF0aW9uIGNvZGUuMQFUaGlzIGFjY291bnRzIGZvciB0aGUgcG90ZW50aWFsIHRvIHN0b3JlIHZhbGlkYXRpb24gY29kZSBvZiBhIHNpemUgdXAgdG8gdGhl3GBtYXhfY29kZV9zaXplYCwgYXMgZGVmaW5lZCBpbiB0aGUgY29uZmlndXJhdGlvbiBwYWxsZXQAHQFBbnl0aGluZyBhbHJlYWR5IHJlc2VydmVkIHByZXZpb3VzbHkgZm9yIHRoaXMgcGFyYSBJRCBpcyBhY2NvdW50ZWQgZm9yLgAkIyMgRXZlbnRz1FRoZSBgUmVnaXN0ZXJlZGAgZXZlbnQgaXMgZW1pdHRlZCBpbiBjYXNlIG9mIHN1Y2Nlc3MuOGZvcmNlX3JlZ2lzdGVyFAEMd2hvAAEwVDo6QWNjb3VudElkAAEcZGVwb3NpdBgBMEJhbGFuY2VPZjxUPgABCGlkaQIBGFBhcmFJZAABMGdlbmVzaXNfaGVhZF0FASBIZWFkRGF0YQABPHZhbGlkYXRpb25fY29kZVkFAThWYWxpZGF0aW9uQ29kZQABGNxGb3JjZSB0aGUgcmVnaXN0cmF0aW9uIG9mIGEgUGFyYSBJZCBvbiB0aGUgcmVsYXkgY2hhaW4uALhUaGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJ5IGEgUm9vdCBvcmlnaW4uABkBVGhlIGRlcG9zaXQgdGFrZW4gY2FuIGJlIHNwZWNpZmllZCBmb3IgdGhpcyByZWdpc3RyYXRpb24uIEFueSBgUGFyYUlkYBkBY2FuIGJlIHJlZ2lzdGVyZWQsIGluY2x1ZGluZyBzdWItMTAwMCBJRHMgd2hpY2ggYXJlIFN5c3RlbSBQYXJhY2hhaW5zLihkZXJlZ2lzdGVyBAEIaWRpAgEYUGFyYUlkAAIQBQFEZXJlZ2lzdGVyIGEgUGFyYSBJZCwgZnJlZWluZyBhbGwgZGF0YSBhbmQgcmV0dXJuaW5nIGFueSBkZXBvc2l0LgBRAVRoZSBjYWxsZXIgbXVzdCBiZSBSb290LCB0aGUgYHBhcmFgIG93bmVyLCBvciB0aGUgYHBhcmFgIGl0c2VsZi4gVGhlIHBhcmEgbXVzdCBiZSBhblBvbi1kZW1hbmQgcGFyYWNoYWluLhBzd2FwCAEIaWRpAgEYUGFyYUlkAAEUb3RoZXJpAgEYUGFyYUlkAAMwQQFTd2FwIGEgbGVhc2UgaG9sZGluZyBwYXJhY2hhaW4gd2l0aCBhbm90aGVyIHBhcmFjaGFpbiwgZWl0aGVyIG9uLWRlbWFuZCBvciBsZWFzZSBob2xkaW5nLgABAVRoZSBvcmlnaW4gbXVzdCBiZSBSb290LCB0aGUgYHBhcmFgIG93bmVyLCBvciB0aGUgYHBhcmFgIGl0c2VsZi4AYQFUaGUgc3dhcCB3aWxsIGhhcHBlbiBvbmx5IGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gb3Bwb3NpdGUgc3dhcCBwZW5kaW5nLiBJZiB0aGVyZSBpcyBub3QsWQF0aGUgc3dhcCB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgcGVuZGluZyBzd2FwcyBtYXAsIHJlYWR5IGZvciBhIGxhdGVyIGNvbmZpcm1hdG9yeSBzd2FwLgBdAVRoZSBgUGFyYUlkYHMgcmVtYWluIG1hcHBlZCB0byB0aGUgc2FtZSBoZWFkIGRhdGEgYW5kIGNvZGUgc28gZXh0ZXJuYWwgY29kZSBjYW4gcmVseSBvbj0BYFBhcmFJZGAgdG8gYmUgYSBsb25nLXRlcm0gaWRlbnRpZmllciBvZiBhIG5vdGlvbmFsICJwYXJhY2hhaW4iLiBIb3dldmVyLCB0aGVpcjUBc2NoZWR1bGluZyBpbmZvIChpLmUuIHdoZXRoZXIgdGhleSdyZSBhbiBvbi1kZW1hbmQgcGFyYWNoYWluIG9yIGxlYXNlIGhvbGRpbmcVAXBhcmFjaGFpbiksIGF1Y3Rpb24gaW5mb3JtYXRpb24gYW5kIHRoZSBhdWN0aW9uIGRlcG9zaXQgYXJlIHN3aXRjaGVkLixyZW1vdmVfbG9jawQBEHBhcmFpAgEYUGFyYUlkAAQQDQFSZW1vdmUgYSBtYW5hZ2VyIGxvY2sgZnJvbSBhIHBhcmEuIFRoaXMgd2lsbCBhbGxvdyB0aGUgbWFuYWdlciBvZiBhNQFwcmV2aW91c2x5IGxvY2tlZCBwYXJhIHRvIGRlcmVnaXN0ZXIgb3Igc3dhcCBhIHBhcmEgd2l0aG91dCB1c2luZyBnb3Zlcm5hbmNlLgDcQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBSb290IG9yaWdpbiBvciB0aGUgcGFyYWNoYWluLhxyZXNlcnZlAAVElFJlc2VydmUgYSBQYXJhIElkIG9uIHRoZSByZWxheSBjaGFpbi4ATQFUaGlzIGZ1bmN0aW9uIHdpbGwgcmVzZXJ2ZSBhIG5ldyBQYXJhIElkIHRvIGJlIG93bmVkL21hbmFnZWQgYnkgdGhlIG9yaWdpbiBhY2NvdW50LmEBVGhlIG9yaWdpbiBhY2NvdW50IGlzIGFibGUgdG8gcmVnaXN0ZXIgaGVhZCBkYXRhIGFuZCB2YWxpZGF0aW9uIGNvZGUgdXNpbmcgYHJlZ2lzdGVyYCB0b1kBY3JlYXRlIGFuIG9uLWRlbWFuZCBwYXJhY2hhaW4uIFVzaW5nIHRoZSBTbG90cyBwYWxsZXQsIGFuIG9uLWRlbWFuZCBwYXJhY2hhaW4gY2FuIHRoZW6kYmUgdXBncmFkZWQgdG8gYSBsZWFzZSBob2xkaW5nIHBhcmFjaGFpbi4AMCMjIEFyZ3VtZW50c1UBLSBgb3JpZ2luYDogTXVzdCBiZSBjYWxsZWQgYnkgYSBgU2lnbmVkYCBvcmlnaW4uIEJlY29tZXMgdGhlIG1hbmFnZXIvb3duZXIgb2YgdGhlIG5ldyggIHBhcmEgSUQuAEAjIyBEZXBvc2l0cy9GZWVzIQFUaGUgb3JpZ2luIG11c3QgcmVzZXJ2ZSBhIGRlcG9zaXQgb2YgYFBhcmFEZXBvc2l0YCBmb3IgdGhlIHJlZ2lzdHJhdGlvbi4AJCMjIEV2ZW50c1kBVGhlIGBSZXNlcnZlZGAgZXZlbnQgaXMgZW1pdHRlZCBpbiBjYXNlIG9mIHN1Y2Nlc3MsIHdoaWNoIHByb3ZpZGVzIHRoZSBJRCByZXNlcnZlZCBmb3IQdXNlLiBhZGRfbG9jawQBEHBhcmFpAgEYUGFyYUlkAAYUCQFBZGQgYSBtYW5hZ2VyIGxvY2sgZnJvbSBhIHBhcmEuIFRoaXMgd2lsbCBwcmV2ZW50IHRoZSBtYW5hZ2VyIG9mIGGIcGFyYSB0byBkZXJlZ2lzdGVyIG9yIHN3YXAgYSBwYXJhLgBJAUNhbiBiZSBjYWxsZWQgYnkgUm9vdCwgdGhlIHBhcmFjaGFpbiwgb3IgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyIGlmIHRoZSBwYXJhY2hhaW4gaXMkdW5sb2NrZWQuVHNjaGVkdWxlX2NvZGVfdXBncmFkZQgBEHBhcmFpAgEYUGFyYUlkAAEgbmV3X2NvZGVZBQE4VmFsaWRhdGlvbkNvZGUAByx0U2NoZWR1bGUgYSBwYXJhY2hhaW4gdXBncmFkZS4AVQFUaGlzIHdpbGwga2ljayBvZmYgYSBjaGVjayBvZiBgbmV3X2NvZGVgIGJ5IGFsbCB2YWxpZGF0b3JzLiBBZnRlciB0aGUgbWFqb3JpdHkgb2YgdGhlVQF2YWxpZGF0b3JzIGhhdmUgcmVwb3J0ZWQgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBjb2RlLCB0aGUgY29kZSB3aWxsIGVpdGhlciBiZSBlbmFjdGVkVQFvciB0aGUgdXBncmFkZSB3aWxsIGJlIHJlamVjdGVkLiBJZiB0aGUgY29kZSB3aWxsIGJlIGVuYWN0ZWQsIHRoZSBjdXJyZW50IGNvZGUgb2YgdGhlXQFwYXJhY2hhaW4gd2lsbCBiZSBvdmVyd3JpdHRlbiBkaXJlY3RseS4gVGhpcyBtZWFucyB0aGF0IGFueSBQb1Ygd2lsbCBiZSBjaGVja2VkIGJ5IHRoaXNdAW5ldyBjb2RlLiBUaGUgcGFyYWNoYWluIGl0c2VsZiB3aWxsIG5vdCBiZSBpbmZvcm1lZCBleHBsaWNpdGx5IHRoYXQgdGhlIHZhbGlkYXRpb24gY29kZTBoYXMgY2hhbmdlZC4ASQFDYW4gYmUgY2FsbGVkIGJ5IFJvb3QsIHRoZSBwYXJhY2hhaW4sIG9yIHRoZSBwYXJhY2hhaW4gbWFuYWdlciBpZiB0aGUgcGFyYWNoYWluIGlzJHVubG9ja2VkLkBzZXRfY3VycmVudF9oZWFkCAEQcGFyYWkCARhQYXJhSWQAASBuZXdfaGVhZF0FASBIZWFkRGF0YQAIEIRTZXQgdGhlIHBhcmFjaGFpbidzIGN1cnJlbnQgaGVhZC4ASQFDYW4gYmUgY2FsbGVkIGJ5IFJvb3QsIHRoZSBwYXJhY2hhaW4sIG9yIHRoZSBwYXJhY2hhaW4gbWFuYWdlciBpZiB0aGUgcGFyYWNoYWluIGlzJHVubG9ja2VkLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy69BRBccG9sa2Fkb3RfcnVudGltZV9jb21tb24Uc2xvdHMYcGFsbGV0EENhbGwEBFQAAQwsZm9yY2VfbGVhc2UUARBwYXJhaQIBGFBhcmFJZAABGGxlYXNlcgABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABMHBlcmlvZF9iZWdpbhABQExlYXNlUGVyaW9kT2Y8VD4AATBwZXJpb2RfY291bnQQAUBMZWFzZVBlcmlvZE9mPFQ+AAAQTQFKdXN0IGEgY29ubmVjdCBpbnRvIHRoZSBgbGVhc2Vfb3V0YCBjYWxsLCBpbiBjYXNlIFJvb3Qgd2FudHMgdG8gZm9yY2Ugc29tZSBsZWFzZSB0b/xoYXBwZW4gaW5kZXBlbmRlbnRseSBvZiBhbnkgb3RoZXIgb24tY2hhaW4gbWVjaGFuaXNtIHRvIHVzZSBpdC4A+FRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IG1hdGNoIGBUOjpGb3JjZU9yaWdpbmAuQGNsZWFyX2FsbF9sZWFzZXMEARBwYXJhaQIBGFBhcmFJZAABDE0BQ2xlYXIgYWxsIGxlYXNlcyBmb3IgYSBQYXJhIElkLCByZWZ1bmRpbmcgYW55IGRlcG9zaXRzIGJhY2sgdG8gdGhlIG9yaWdpbmFsIG93bmVycy4A+FRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IG1hdGNoIGBUOjpGb3JjZU9yaWdpbmAuPHRyaWdnZXJfb25ib2FyZAQBEHBhcmFpAgEYUGFyYUlkAAIcJQFUcnkgdG8gb25ib2FyZCBhIHBhcmFjaGFpbiB0aGF0IGhhcyBhIGxlYXNlIGZvciB0aGUgY3VycmVudCBsZWFzZSBwZXJpb2QuAEUBVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIGlmIHRoZXJlIHdhcyBzb21lIHN0YXRlIGlzc3VlIHdpdGggYSBwYXJhIHRoYXQgc2hvdWxkOQFoYXZlIG9uYm9hcmRlZCwgYnV0IHdhcyB1bmFibGUgdG8uIEFzIGxvbmcgYXMgdGhleSBoYXZlIGEgbGVhc2UgcGVyaW9kLCB3ZSBjYW5sbGV0IHRoZW0gb25ib2FyZCBmcm9tIGhlcmUuAMxPcmlnaW4gbXVzdCBiZSBzaWduZWQsIGJ1dCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuwQUQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uIGF1Y3Rpb25zGHBhbGxldBBDYWxsBARUAAEMLG5ld19hdWN0aW9uCAEgZHVyYXRpb27UAURCbG9ja051bWJlckZvcjxUPgABSGxlYXNlX3BlcmlvZF9pbmRleNQBQExlYXNlUGVyaW9kT2Y8VD4AABRUQ3JlYXRlIGEgbmV3IGF1Y3Rpb24uAFEBVGhpcyBjYW4gb25seSBoYXBwZW4gd2hlbiB0aGVyZSBpc24ndCBhbHJlYWR5IGFuIGF1Y3Rpb24gaW4gcHJvZ3Jlc3MgYW5kIG1heSBvbmx5IGJlJQFjYWxsZWQgYnkgdGhlIHJvb3Qgb3JpZ2luLiBBY2NlcHRzIHRoZSBgZHVyYXRpb25gIG9mIHRoaXMgYXVjdGlvbiBhbmQgdGhlWQFgbGVhc2VfcGVyaW9kX2luZGV4YCBvZiB0aGUgaW5pdGlhbCBsZWFzZSBwZXJpb2Qgb2YgdGhlIGZvdXIgdGhhdCBhcmUgdG8gYmUgYXVjdGlvbmVkLgxiaWQUARBwYXJhxQUBGFBhcmFJZAABNGF1Y3Rpb25faW5kZXjUATBBdWN0aW9uSW5kZXgAAShmaXJzdF9zbG901AFATGVhc2VQZXJpb2RPZjxUPgABJGxhc3Rfc2xvdNQBQExlYXNlUGVyaW9kT2Y8VD4AARhhbW91bnTkATBCYWxhbmNlT2Y8VD4AAUBJAU1ha2UgYSBuZXcgYmlkIGZyb20gYW4gYWNjb3VudCAoaW5jbHVkaW5nIGEgcGFyYWNoYWluIGFjY291bnQpIGZvciBkZXBsb3lpbmcgYSBuZXcocGFyYWNoYWluLgBZAU11bHRpcGxlIHNpbXVsdGFuZW91cyBiaWRzIGZyb20gdGhlIHNhbWUgYmlkZGVyIGFyZSBhbGxvd2VkIG9ubHkgYXMgbG9uZyBhcyBhbGwgYWN0aXZlPQFiaWRzIG92ZXJsYXAgZWFjaCBvdGhlciAoaS5lLiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlKS4gQmlkcyBjYW5ub3QgYmUgcmVkYWN0ZWQuAFUBLSBgc3ViYCBpcyB0aGUgc3ViLWJpZGRlciBJRCwgYWxsb3dpbmcgZm9yIG11bHRpcGxlIGNvbXBldGluZyBiaWRzIHRvIGJlIG1hZGUgYnkgKGFuZHBmdW5kZWQgYnkpIHRoZSBzYW1lIGFjY291bnQuTQEtIGBhdWN0aW9uX2luZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIGF1Y3Rpb24gdG8gYmlkIG9uLiBTaG91bGQganVzdCBiZSB0aGUgcHJlc2VudGh2YWx1ZSBvZiBgQXVjdGlvbkNvdW50ZXJgLkkBLSBgZmlyc3Rfc2xvdGAgaXMgdGhlIGZpcnN0IGxlYXNlIHBlcmlvZCBpbmRleCBvZiB0aGUgcmFuZ2UgdG8gYmlkIG9uLiBUaGlzIGlzIHRoZQkBYWJzb2x1dGUgbGVhc2UgcGVyaW9kIGluZGV4IHZhbHVlLCBub3QgYW4gYXVjdGlvbi1zcGVjaWZpYyBvZmZzZXQuQQEtIGBsYXN0X3Nsb3RgIGlzIHRoZSBsYXN0IGxlYXNlIHBlcmlvZCBpbmRleCBvZiB0aGUgcmFuZ2UgdG8gYmlkIG9uLiBUaGlzIGlzIHRoZQkBYWJzb2x1dGUgbGVhc2UgcGVyaW9kIGluZGV4IHZhbHVlLCBub3QgYW4gYXVjdGlvbi1zcGVjaWZpYyBvZmZzZXQuSQEtIGBhbW91bnRgIGlzIHRoZSBhbW91bnQgdG8gYmlkIHRvIGJlIGhlbGQgYXMgZGVwb3NpdCBmb3IgdGhlIHBhcmFjaGFpbiBzaG91bGQgdGhlyGJpZCB3aW4uIFRoaXMgYW1vdW50IGlzIGhlbGQgdGhyb3VnaG91dCB0aGUgcmFuZ2UuOGNhbmNlbF9hdWN0aW9uAAIMeENhbmNlbCBhbiBpbi1wcm9ncmVzcyBhdWN0aW9uLgCIQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IFJvb3Qgb3JpZ2luLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7FBQAABmkCAMkFEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbiRjcm93ZGxvYW4YcGFsbGV0EENhbGwEBFQAASQYY3JlYXRlGAEUaW5kZXjFBQEYUGFyYUlkAAEMY2Fw5AEwQmFsYW5jZU9mPFQ+AAEwZmlyc3RfcGVyaW9k1AFATGVhc2VQZXJpb2RPZjxUPgABLGxhc3RfcGVyaW9k1AFATGVhc2VQZXJpb2RPZjxUPgABDGVuZNQBREJsb2NrTnVtYmVyRm9yPFQ+AAEgdmVyaWZpZXLNBQFMT3B0aW9uPE11bHRpU2lnbmVyPgAAFE0BQ3JlYXRlIGEgbmV3IGNyb3dkbG9hbmluZyBjYW1wYWlnbiBmb3IgYSBwYXJhY2hhaW4gc2xvdCB3aXRoIHRoZSBnaXZlbiBsZWFzZSBwZXJpb2QYcmFuZ2UuAF0BVGhpcyBhcHBsaWVzIGEgbG9jayB0byB5b3VyIHBhcmFjaGFpbiBjb25maWd1cmF0aW9uLCBlbnN1cmluZyB0aGF0IGl0IGNhbm5vdCBiZSBjaGFuZ2VkZGJ5IHRoZSBwYXJhY2hhaW4gbWFuYWdlci4oY29udHJpYnV0ZQwBFGluZGV4xQUBGFBhcmFJZAABFHZhbHVl5AEwQmFsYW5jZU9mPFQ+AAEkc2lnbmF0dXJl1QUBWE9wdGlvbjxNdWx0aVNpZ25hdHVyZT4AAQhRAUNvbnRyaWJ1dGUgdG8gYSBjcm93ZCBzYWxlLiBUaGlzIHdpbGwgdHJhbnNmZXIgc29tZSBiYWxhbmNlIG92ZXIgdG8gZnVuZCBhIHBhcmFjaGFpblEBc2xvdC4gSXQgd2lsbCBiZSB3aXRoZHJhd2FibGUgd2hlbiB0aGUgY3Jvd2Rsb2FuIGhhcyBlbmRlZCBhbmQgdGhlIGZ1bmRzIGFyZSB1bnVzZWQuIHdpdGhkcmF3CAEMd2hvAAEwVDo6QWNjb3VudElkAAEUaW5kZXjFBQEYUGFyYUlkAAJEwFdpdGhkcmF3IGZ1bGwgYmFsYW5jZSBvZiBhIHNwZWNpZmljIGNvbnRyaWJ1dG9yLgDAT3JpZ2luIG11c3QgYmUgc2lnbmVkLCBidXQgY2FuIGNvbWUgZnJvbSBhbnlvbmUuAF0BVGhlIGZ1bmQgbXVzdCBiZSBlaXRoZXIgaW4sIG9yIHJlYWR5IGZvciwgcmV0aXJlbWVudC4gRm9yIGEgZnVuZCB0byBiZSAqaW4qIHJldGlyZW1lbnQsSQF0aGVuIHRoZSByZXRpcmVtZW50IGZsYWcgbXVzdCBiZSBzZXQuIEZvciBhIGZ1bmQgdG8gYmUgcmVhZHkgZm9yIHJldGlyZW1lbnQsIHRoZW46nC0gaXQgbXVzdCBub3QgYWxyZWFkeSBiZSBpbiByZXRpcmVtZW50O00BLSB0aGUgYW1vdW50IG9mIHJhaXNlZCBmdW5kcyBtdXN0IGJlIGJpZ2dlciB0aGFuIHRoZSBfZnJlZV8gYmFsYW5jZSBvZiB0aGUgYWNjb3VudDs0LSBhbmQgZWl0aGVyOrwgIC0gdGhlIGJsb2NrIG51bWJlciBtdXN0IGJlIGF0IGxlYXN0IGBlbmRgOyBvci0BICAtIHRoZSBjdXJyZW50IGxlYXNlIHBlcmlvZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgZnVuZCdzIGBsYXN0X3BlcmlvZGAuAFUBSW4gdGhpcyBjYXNlLCB0aGUgZnVuZCdzIHJldGlyZW1lbnQgZmxhZyBpcyBzZXQgYW5kIGl0cyBgZW5kYCBpcyByZXNldCB0byB0aGUgY3VycmVudDRibG9jayBudW1iZXIuAPAtIGB3aG9gOiBUaGUgYWNjb3VudCB3aG9zZSBjb250cmlidXRpb24gc2hvdWxkIGJlIHdpdGhkcmF3bi4ZAS0gYGluZGV4YDogVGhlIHBhcmFjaGFpbiB0byB3aG9zZSBjcm93ZGxvYW4gdGhlIGNvbnRyaWJ1dGlvbiB3YXMgbWFkZS4YcmVmdW5kBAEUaW5kZXjFBQEYUGFyYUlkAAMU4EF1dG9tYXRpY2FsbHkgcmVmdW5kIGNvbnRyaWJ1dG9ycyBvZiBhbiBlbmRlZCBjcm93ZGxvYW4uIQFEdWUgdG8gd2VpZ2h0IHJlc3RyaWN0aW9ucywgdGhpcyBmdW5jdGlvbiBtYXkgbmVlZCB0byBiZSBjYWxsZWQgbXVsdGlwbGVJAXRpbWVzIHRvIGZ1bGx5IHJlZnVuZCBhbGwgdXNlcnMuIFdlIHdpbGwgcmVmdW5kIGBSZW1vdmVLZXlzTGltaXRgIHVzZXJzIGF0IGEgdGltZS4AwE9yaWdpbiBtdXN0IGJlIHNpZ25lZCwgYnV0IGNhbiBjb21lIGZyb20gYW55b25lLiBkaXNzb2x2ZQQBFGluZGV4xQUBGFBhcmFJZAAEBFUBUmVtb3ZlIGEgZnVuZCBhZnRlciB0aGUgcmV0aXJlbWVudCBwZXJpb2QgaGFzIGVuZGVkIGFuZCBhbGwgZnVuZHMgaGF2ZSBiZWVuIHJldHVybmVkLhBlZGl0GAEUaW5kZXjFBQEYUGFyYUlkAAEMY2Fw5AEwQmFsYW5jZU9mPFQ+AAEwZmlyc3RfcGVyaW9k1AFATGVhc2VQZXJpb2RPZjxUPgABLGxhc3RfcGVyaW9k1AFATGVhc2VQZXJpb2RPZjxUPgABDGVuZNQBREJsb2NrTnVtYmVyRm9yPFQ+AAEgdmVyaWZpZXLNBQFMT3B0aW9uPE11bHRpU2lnbmVyPgAFDNBFZGl0IHRoZSBjb25maWd1cmF0aW9uIGZvciBhbiBpbi1wcm9ncmVzcyBjcm93ZGxvYW4uAIhDYW4gb25seSBiZSBjYWxsZWQgYnkgUm9vdCBvcmlnaW4uIGFkZF9tZW1vCAEUaW5kZXhpAgEYUGFyYUlkAAEQbWVtbzgBHFZlYzx1OD4ABgzsQWRkIGFuIG9wdGlvbmFsIG1lbW8gdG8gYW4gZXhpc3RpbmcgY3Jvd2Rsb2FuIGNvbnRyaWJ1dGlvbi4ALQFPcmlnaW4gbXVzdCBiZSBTaWduZWQsIGFuZCB0aGUgdXNlciBtdXN0IGhhdmUgY29udHJpYnV0ZWQgdG8gdGhlIGNyb3dkbG9hbi4QcG9rZQQBFGluZGV4aQIBGFBhcmFJZAAHDHRQb2tlIHRoZSBmdW5kIGludG8gYE5ld1JhaXNlYADcT3JpZ2luIG11c3QgYmUgU2lnbmVkLCBhbmQgdGhlIGZ1bmQgaGFzIG5vbi16ZXJvIHJhaXNlLjhjb250cmlidXRlX2FsbAgBFGluZGV4xQUBGFBhcmFJZAABJHNpZ25hdHVyZdUFAVhPcHRpb248TXVsdGlTaWduYXR1cmU+AAgMYQFDb250cmlidXRlIHlvdXIgZW50aXJlIGJhbGFuY2UgdG8gYSBjcm93ZCBzYWxlLiBUaGlzIHdpbGwgdHJhbnNmZXIgdGhlIGVudGlyZSBiYWxhbmNlIG9mUQFhIHVzZXIgb3ZlciB0byBmdW5kIGEgcGFyYWNoYWluIHNsb3QuIEl0IHdpbGwgYmUgd2l0aGRyYXdhYmxlIHdoZW4gdGhlIGNyb3dkbG9hbiBoYXN8ZW5kZWQgYW5kIHRoZSBmdW5kcyBhcmUgdW51c2VkLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7NBQQYT3B0aW9uBARUAdEFAQgQTm9uZQAAABBTb21lBADRBQAAAQAA0QUIKHNwX3J1bnRpbWUsTXVsdGlTaWduZXIAAQwcRWQyNTUxOQQABAE8ZWQyNTUxOTo6UHVibGljAAAAHFNyMjU1MTkEAAQBPHNyMjU1MTk6OlB1YmxpYwABABRFY2RzYQQAEQIBNGVjZHNhOjpQdWJsaWMAAgAA1QUEGE9wdGlvbgQEVAHZBQEIEE5vbmUAAAAQU29tZQQA2QUAAAEAANkFCChzcF9ydW50aW1lOE11bHRpU2lnbmF0dXJlAAEMHEVkMjU1MTkEAC0CAUhlZDI1NTE5OjpTaWduYXR1cmUAAAAcU3IyNTUxOQQALQIBSHNyMjU1MTk6OlNpZ25hdHVyZQABABRFY2RzYQQA2QIBQGVjZHNhOjpTaWduYXR1cmUAAgAA3QUQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBjb3JldGltZRhwYWxsZXQQQ2FsbAQEVAABDEhyZXF1ZXN0X2NvcmVfY291bnQEARRjb3VudF0BAQx1MTYAARhRAVJlcXVlc3QgdGhlIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXBkYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGNvcmVzLiBXYXJuaW5nOlEBU2luY2UgdGhpcyBvbmx5IHNjaGVkdWxlcyBhIGNvbmZpZ3VyYXRpb24gdXBkYXRlLCBpdCB0YWtlcyB0d28gc2Vzc2lvbnMgdG8gY29tZSBpbnRvHGVmZmVjdC4AmC0gYG9yaWdpbmA6IFJvb3Qgb3IgdGhlIENvcmV0aW1lIENoYWlugC0gYGNvdW50YDogdG90YWwgbnVtYmVyIG9mIGNvcmVzSHJlcXVlc3RfcmV2ZW51ZV9hdAQBEHdoZW4QASxCbG9ja051bWJlcgACEGEBUmVxdWVzdCB0byBjbGFpbSB0aGUgaW5zdGFudGFuZW91cyBjb3JldGltZSBzYWxlcyByZXZlbnVlIHN0YXJ0aW5nIGZyb20gdGhlIGJsb2NrIGl0IHdhc10BbGFzdCBjbGFpbWVkIHVudGlsIGFuZCB1cCB0byB0aGUgYmxvY2sgc3BlY2lmaWVkLiBUaGUgY2xhaW1lZCBhbW91bnQgdmFsdWUgaXMgc2VudCBiYWNrUQF0byB0aGUgQ29yZXRpbWUgY2hhaW4gaW4gYSBgbm90aWZ5X3JldmVudWVgIG1lc3NhZ2UuIEF0IHRoZSBzYW1lIHRpbWUsIHRoZSBhbW91bnQgaXOEdGVsZXBvcnRlZCB0byB0aGUgQ29yZXRpbWUgY2hhaW4uLGFzc2lnbl9jb3JlEAEQY29yZV0BATxCcm9rZXJDb3JlSW5kZXgAARRiZWdpbhABREJsb2NrTnVtYmVyRm9yPFQ+AAEoYXNzaWdubWVudOEFAYxWZWM8KENvcmVBc3NpZ25tZW50LCBQYXJ0c09mNTc2MDApPgABIGVuZF9oaW50RQIBZE9wdGlvbjxCbG9ja051bWJlckZvcjxUPj4ABCRZAVJlY2VpdmUgaW5zdHJ1Y3Rpb25zIGZyb20gdGhlIGBFeHRlcm5hbEJyb2tlck9yaWdpbmAsIGRldGFpbGluZyBob3cgYSBzcGVjaWZpYyBjb3JlIGlzLHRvIGJlIHVzZWQuACxQYXJhbWV0ZXJzOiEBLWBvcmlnaW5gOiBUaGUgYEV4dGVybmFsQnJva2VyT3JpZ2luYCwgYXNzdW1lZCB0byBiZSB0aGUgY29yZXRpbWUgY2hhaW4urC1gY29yZWA6IFRoZSBjb3JlIHRoYXQgc2hvdWxkIGJlIHNjaGVkdWxlZC7YLWBiZWdpbmA6IFRoZSBzdGFydGluZyBibG9ja2hlaWdodCBvZiB0aGUgaW5zdHJ1Y3Rpb24u1C1gYXNzaWdubWVudGA6IEhvdyB0aGUgYmxvY2tzcGFjZSBzaG91bGQgYmUgdXRpbGlzZWQuWQEtYGVuZF9oaW50YDogQW4gb3B0aW9uYWwgaGludCBhcyB0byB3aGVuIHRoaXMgcGFydGljdWxhciBzZXQgb2YgaW5zdHJ1Y3Rpb25zIHdpbGwgZW5kLgQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy7hBQAAAuUFAOUFAAAECOkF7QUA6QUMNHBhbGxldF9icm9rZXJIY29yZXRpbWVfaW50ZXJmYWNlOENvcmVBc3NpZ25tZW50AAEMEElkbGUAAAAQUG9vbAABABBUYXNrBAAQARhUYXNrSWQAAgAA7QUMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZTBQYXJ0c09mNTc2MDAAAAQAXQEBDHUxNgAA8QUMKHBhbGxldF94Y20YcGFsbGV0EENhbGwEBFQAATgQc2VuZAgBEGRlc3QtAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABHG1lc3NhZ2X1BQFUQm94PFZlcnNpb25lZFhjbTwoKT4+AAAAPHRlbGVwb3J0X2Fzc2V0cxABEGRlc3QtAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABLGJlbmVmaWNpYXJ5LQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AARhhc3NldHP1BgFQQm94PFZlcnNpb25lZEFzc2V0cz4AAThmZWVfYXNzZXRfaXRlbRABDHUzMgABSBEBVGVsZXBvcnQgc29tZSBhc3NldHMgZnJvbSB0aGUgbG9jYWwgY2hhaW4gdG8gc29tZSBkZXN0aW5hdGlvbiBjaGFpbi4AHQEqKlRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDogVXNlIGBsaW1pdGVkX3RlbGVwb3J0X2Fzc2V0c2AgaW5zdGVhZC4qKgBRAUZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZmEBaW5kZXggYGZlZV9hc3NldF9pdGVtYC4gVGhlIHdlaWdodCBsaW1pdCBmb3IgZmVlcyBpcyBub3QgcHJvdmlkZWQgYW5kIHRodXMgaXMgdW5saW1pdGVkLLR3aXRoIGFsbCBmZWVzIHRha2VuIGFzIG5lZWRlZCBmcm9tIHRoZSBhc3NldC4AKQEtIGBvcmlnaW5gOiBNdXN0IGJlIGNhcGFibGUgb2Ygd2l0aGRyYXdpbmcgdGhlIGBhc3NldHNgIGFuZCBleGVjdXRpbmcgWENNLiUBLSBgZGVzdGA6IERlc3RpbmF0aW9uIGNvbnRleHQgZm9yIHRoZSBhc3NldHMuIFdpbGwgdHlwaWNhbGx5IGJlIGBbUGFyZW50LGEBICBQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBbUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbVQgIHJlbGF5IHRvIHBhcmFjaGFpbi5VAS0gYGJlbmVmaWNpYXJ5YDogQSBiZW5lZmljaWFyeSBsb2NhdGlvbiBmb3IgdGhlIGFzc2V0cyBpbiB0aGUgY29udGV4dCBvZiBgZGVzdGAuIFdpbGyYICBnZW5lcmFsbHkgYmUgYW4gYEFjY291bnRJZDMyYCB2YWx1ZS5ZAS0gYGFzc2V0c2A6IFRoZSBhc3NldHMgdG8gYmUgd2l0aGRyYXduLiBUaGlzIHNob3VsZCBpbmNsdWRlIHRoZSBhc3NldHMgdXNlZCB0byBwYXkgdGhlaCAgZmVlIG9uIHRoZSBgZGVzdGAgY2hhaW4uTQEtIGBmZWVfYXNzZXRfaXRlbWA6IFRoZSBpbmRleCBpbnRvIGBhc3NldHNgIG9mIHRoZSBpdGVtIHdoaWNoIHNob3VsZCBiZSB1c2VkIHRvIHBheRwgIGZlZXMuXHJlc2VydmVfdHJhbnNmZXJfYXNzZXRzEAEQZGVzdC0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEsYmVuZWZpY2lhcnktAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c/UGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABOGZlZV9hc3NldF9pdGVtEAEMdTMyAAJ4XQFUcmFuc2ZlciBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byB0aGUgZGVzdGluYXRpb24gY2hhaW4gdGhyb3VnaCB0aGVpciBsb2NhbCx4ZGVzdGluYXRpb24gb3IgcmVtb3RlIHJlc2VydmUuAD0BYGFzc2V0c2AgbXVzdCBoYXZlIHNhbWUgcmVzZXJ2ZSBsb2NhdGlvbiBhbmQgbWF5IG5vdCBiZSB0ZWxlcG9ydGFibGUgdG8gYGRlc3RgLk0BIC0gYGFzc2V0c2AgaGF2ZSBsb2NhbCByZXNlcnZlOiB0cmFuc2ZlciBhc3NldHMgdG8gc292ZXJlaWduIGFjY291bnQgb2YgZGVzdGluYXRpb25NASAgIGNoYWluIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIFhDTSB0byBgZGVzdGAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkbCAgIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLlUBIC0gYGFzc2V0c2AgaGF2ZSBkZXN0aW5hdGlvbiByZXNlcnZlOiBidXJuIGxvY2FsIGFzc2V0cyBhbmQgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiB0b1kBICAgYGRlc3RgIGNoYWluIHRvIHdpdGhkcmF3IHRoZSByZXNlcnZlIGFzc2V0cyBmcm9tIHRoaXMgY2hhaW4ncyBzb3ZlcmVpZ24gYWNjb3VudCBhbmSEICAgZGVwb3NpdCB0aGVtIHRvIGBiZW5lZmljaWFyeWAuYQEgLSBgYXNzZXRzYCBoYXZlIHJlbW90ZSByZXNlcnZlOiBidXJuIGxvY2FsIGFzc2V0cywgZm9yd2FyZCBYQ00gdG8gcmVzZXJ2ZSBjaGFpbiB0byBtb3ZlYQEgICByZXNlcnZlcyBmcm9tIHRoaXMgY2hhaW4ncyBTQSB0byBgZGVzdGAgY2hhaW4ncyBTQSwgYW5kIGZvcndhcmQgYW5vdGhlciBYQ00gdG8gYGRlc3Rg9CAgIHRvIG1pbnQgYW5kIGRlcG9zaXQgcmVzZXJ2ZS1iYXNlZCBhc3NldHMgdG8gYGJlbmVmaWNpYXJ5YC4APQEqKlRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDogVXNlIGBsaW1pdGVkX3Jlc2VydmVfdHJhbnNmZXJfYXNzZXRzYCBpbnN0ZWFkLioqAFEBRmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9mYQFpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLiBUaGUgd2VpZ2h0IGxpbWl0IGZvciBmZWVzIGlzIG5vdCBwcm92aWRlZCBhbmQgdGh1cyBpcyB1bmxpbWl0ZWQstHdpdGggYWxsIGZlZXMgdGFrZW4gYXMgbmVlZGVkIGZyb20gdGhlIGFzc2V0LgApAS0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00uJQEtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFtQYXJlbnQsYQEgIFBhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb20gcGFyYWNoYWluIHRvIHBhcmFjaGFpbiwgb3IgYFtQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tVCAgcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGXIICBmZWUgb24gdGhlIGBkZXN0YCAoYW5kIHBvc3NpYmx5IHJlc2VydmUpIGNoYWlucy5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy4cZXhlY3V0ZQgBHG1lc3NhZ2X5BgG0Qm94PFZlcnNpb25lZFhjbTw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD4+AAEobWF4X3dlaWdodCgBGFdlaWdodAADINBFeGVjdXRlIGFuIFhDTSBtZXNzYWdlIGZyb20gYSBsb2NhbCwgc2lnbmVkLCBvcmlnaW4uAE0BQW4gZXZlbnQgaXMgZGVwb3NpdGVkIGluZGljYXRpbmcgd2hldGhlciBgbXNnYCBjb3VsZCBiZSBleGVjdXRlZCBjb21wbGV0ZWx5IG9yIG9ubHkocGFydGlhbGx5LgBdAU5vIG1vcmUgdGhhbiBgbWF4X3dlaWdodGAgd2lsbCBiZSB1c2VkIGluIGl0cyBhdHRlbXB0ZWQgZXhlY3V0aW9uLiBJZiB0aGlzIGlzIGxlc3MgdGhhbkEBdGhlIG1heGltdW0gYW1vdW50IG9mIHdlaWdodCB0aGF0IHRoZSBtZXNzYWdlIGNvdWxkIHRha2UgdG8gYmUgZXhlY3V0ZWQsIHRoZW4gbm98ZXhlY3V0aW9uIGF0dGVtcHQgd2lsbCBiZSBtYWRlLkRmb3JjZV94Y21fdmVyc2lvbggBIGxvY2F0aW9u9AE0Qm94PExvY2F0aW9uPgABHHZlcnNpb24QAShYY21WZXJzaW9uAAQYSQFFeHRvbGwgdGhhdCBhIHBhcnRpY3VsYXIgZGVzdGluYXRpb24gY2FuIGJlIGNvbW11bmljYXRlZCB3aXRoIHRocm91Z2ggYSBwYXJ0aWN1bGFyPHZlcnNpb24gb2YgWENNLgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLtgtIGBsb2NhdGlvbmA6IFRoZSBkZXN0aW5hdGlvbiB0aGF0IGlzIGJlaW5nIGRlc2NyaWJlZC4RAS0gYHhjbV92ZXJzaW9uYDogVGhlIGxhdGVzdCB2ZXJzaW9uIG9mIFhDTSB0aGF0IGBsb2NhdGlvbmAgc3VwcG9ydHMuZGZvcmNlX2RlZmF1bHRfeGNtX3ZlcnNpb24EAURtYXliZV94Y21fdmVyc2lvbkUCAUhPcHRpb248WGNtVmVyc2lvbj4ABRRZAVNldCBhIHNhZmUgWENNIHZlcnNpb24gKHRoZSB2ZXJzaW9uIHRoYXQgWENNIHNob3VsZCBiZSBlbmNvZGVkIHdpdGggaWYgdGhlIG1vc3QgcmVjZW50tHZlcnNpb24gYSBkZXN0aW5hdGlvbiBjYW4gYWNjZXB0IGlzIHVua25vd24pLgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLjkBLSBgbWF5YmVfeGNtX3ZlcnNpb25gOiBUaGUgZGVmYXVsdCBYQ00gZW5jb2RpbmcgdmVyc2lvbiwgb3IgYE5vbmVgIHRvIGRpc2FibGUueGZvcmNlX3N1YnNjcmliZV92ZXJzaW9uX25vdGlmeQQBIGxvY2F0aW9uLQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4ABhA5AUFzayBhIGxvY2F0aW9uIHRvIG5vdGlmeSB1cyByZWdhcmRpbmcgdGhlaXIgWENNIHZlcnNpb24gYW5kIGFueSBjaGFuZ2VzIHRvIGl0LgDcLSBgb3JpZ2luYDogTXVzdCBiZSBhbiBvcmlnaW4gc3BlY2lmaWVkIGJ5IEFkbWluT3JpZ2luLlkBLSBgbG9jYXRpb25gOiBUaGUgbG9jYXRpb24gdG8gd2hpY2ggd2Ugc2hvdWxkIHN1YnNjcmliZSBmb3IgWENNIHZlcnNpb24gbm90aWZpY2F0aW9ucy6AZm9yY2VfdW5zdWJzY3JpYmVfdmVyc2lvbl9ub3RpZnkEASBsb2NhdGlvbi0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAcYSQFSZXF1aXJlIHRoYXQgYSBwYXJ0aWN1bGFyIGRlc3RpbmF0aW9uIHNob3VsZCBubyBsb25nZXIgbm90aWZ5IHVzIHJlZ2FyZGluZyBhbnkgWENNQHZlcnNpb24gY2hhbmdlcy4A3C0gYG9yaWdpbmA6IE11c3QgYmUgYW4gb3JpZ2luIHNwZWNpZmllZCBieSBBZG1pbk9yaWdpbi49AS0gYGxvY2F0aW9uYDogVGhlIGxvY2F0aW9uIHRvIHdoaWNoIHdlIGFyZSBjdXJyZW50bHkgc3Vic2NyaWJlZCBmb3IgWENNIHZlcnNpb26oICBub3RpZmljYXRpb25zIHdoaWNoIHdlIG5vIGxvbmdlciBkZXNpcmUufGxpbWl0ZWRfcmVzZXJ2ZV90cmFuc2Zlcl9hc3NldHMUARBkZXN0LQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AASxiZW5lZmljaWFyeS0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEYYXNzZXRz9QYBUEJveDxWZXJzaW9uZWRBc3NldHM+AAE4ZmVlX2Fzc2V0X2l0ZW0QAQx1MzIAATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQACHhdAVRyYW5zZmVyIHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiB0aHJvdWdoIHRoZWlyIGxvY2FsLHhkZXN0aW5hdGlvbiBvciByZW1vdGUgcmVzZXJ2ZS4APQFgYXNzZXRzYCBtdXN0IGhhdmUgc2FtZSByZXNlcnZlIGxvY2F0aW9uIGFuZCBtYXkgbm90IGJlIHRlbGVwb3J0YWJsZSB0byBgZGVzdGAuTQEgLSBgYXNzZXRzYCBoYXZlIGxvY2FsIHJlc2VydmU6IHRyYW5zZmVyIGFzc2V0cyB0byBzb3ZlcmVpZ24gYWNjb3VudCBvZiBkZXN0aW5hdGlvbk0BICAgY2hhaW4gYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gWENNIHRvIGBkZXN0YCB0byBtaW50IGFuZCBkZXBvc2l0IHJlc2VydmUtYmFzZWRsICAgYXNzZXRzIHRvIGBiZW5lZmljaWFyeWAuVQEgLSBgYXNzZXRzYCBoYXZlIGRlc3RpbmF0aW9uIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIHRvWQEgICBgZGVzdGAgY2hhaW4gdG8gd2l0aGRyYXcgdGhlIHJlc2VydmUgYXNzZXRzIGZyb20gdGhpcyBjaGFpbidzIHNvdmVyZWlnbiBhY2NvdW50IGFuZIQgICBkZXBvc2l0IHRoZW0gdG8gYGJlbmVmaWNpYXJ5YC5hASAtIGBhc3NldHNgIGhhdmUgcmVtb3RlIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byByZXNlcnZlIGNoYWluIHRvIG1vdmVhASAgIHJlc2VydmVzIGZyb20gdGhpcyBjaGFpbidzIFNBIHRvIGBkZXN0YCBjaGFpbidzIFNBLCBhbmQgZm9yd2FyZCBhbm90aGVyIFhDTSB0byBgZGVzdGD0ICAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLgBRAUZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZmEBaW5kZXggYGZlZV9hc3NldF9pdGVtYCwgdXAgdG8gZW5vdWdoIHRvIHBheSBmb3IgYHdlaWdodF9saW1pdGAgb2Ygd2VpZ2h0LiBJZiBtb3JlIHdlaWdodFkBaXMgbmVlZGVkIHRoYW4gYHdlaWdodF9saW1pdGAsIHRoZW4gdGhlIG9wZXJhdGlvbiB3aWxsIGZhaWwgYW5kIHRoZSBzZW50IGFzc2V0cyBtYXkgYmUgYXQgcmlzay4AKQEtIGBvcmlnaW5gOiBNdXN0IGJlIGNhcGFibGUgb2Ygd2l0aGRyYXdpbmcgdGhlIGBhc3NldHNgIGFuZCBleGVjdXRpbmcgWENNLiUBLSBgZGVzdGA6IERlc3RpbmF0aW9uIGNvbnRleHQgZm9yIHRoZSBhc3NldHMuIFdpbGwgdHlwaWNhbGx5IGJlIGBbUGFyZW50LGEBICBQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBbUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbVQgIHJlbGF5IHRvIHBhcmFjaGFpbi5VAS0gYGJlbmVmaWNpYXJ5YDogQSBiZW5lZmljaWFyeSBsb2NhdGlvbiBmb3IgdGhlIGFzc2V0cyBpbiB0aGUgY29udGV4dCBvZiBgZGVzdGAuIFdpbGyYICBnZW5lcmFsbHkgYmUgYW4gYEFjY291bnRJZDMyYCB2YWx1ZS5ZAS0gYGFzc2V0c2A6IFRoZSBhc3NldHMgdG8gYmUgd2l0aGRyYXduLiBUaGlzIHNob3VsZCBpbmNsdWRlIHRoZSBhc3NldHMgdXNlZCB0byBwYXkgdGhlyCAgZmVlIG9uIHRoZSBgZGVzdGAgKGFuZCBwb3NzaWJseSByZXNlcnZlKSBjaGFpbnMuTQEtIGBmZWVfYXNzZXRfaXRlbWA6IFRoZSBpbmRleCBpbnRvIGBhc3NldHNgIG9mIHRoZSBpdGVtIHdoaWNoIHNob3VsZCBiZSB1c2VkIHRvIHBheRwgIGZlZXMuRQEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgcmVtb3RlLXNpZGUgd2VpZ2h0IGxpbWl0LCBpZiBhbnksIGZvciB0aGUgWENNIGZlZSBwdXJjaGFzZS5cbGltaXRlZF90ZWxlcG9ydF9hc3NldHMUARBkZXN0LQEBWEJveDxWZXJzaW9uZWRMb2NhdGlvbj4AASxiZW5lZmljaWFyeS0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEYYXNzZXRz9QYBUEJveDxWZXJzaW9uZWRBc3NldHM+AAE4ZmVlX2Fzc2V0X2l0ZW0QAQx1MzIAATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQACUgRAVRlbGVwb3J0IHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHNvbWUgZGVzdGluYXRpb24gY2hhaW4uAFEBRmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9mYQFpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLCB1cCB0byBlbm91Z2ggdG8gcGF5IGZvciBgd2VpZ2h0X2xpbWl0YCBvZiB3ZWlnaHQuIElmIG1vcmUgd2VpZ2h0WQFpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIHNlbnQgYXNzZXRzIG1heSBiZSBhdCByaXNrLgApAS0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00uJQEtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFtQYXJlbnQsYQEgIFBhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb20gcGFyYWNoYWluIHRvIHBhcmFjaGFpbiwgb3IgYFtQYXJhY2hhaW4oLi4pXWAgdG8gc2VuZCBmcm9tVCAgcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGVoICBmZWUgb24gdGhlIGBkZXN0YCBjaGFpbi5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy5FAS0gYHdlaWdodF9saW1pdGA6IFRoZSByZW1vdGUtc2lkZSB3ZWlnaHQgbGltaXQsIGlmIGFueSwgZm9yIHRoZSBYQ00gZmVlIHB1cmNoYXNlLkBmb3JjZV9zdXNwZW5zaW9uBAEkc3VzcGVuZGVkIAEQYm9vbAAKEPRTZXQgb3IgdW5zZXQgdGhlIGdsb2JhbCBzdXNwZW5zaW9uIHN0YXRlIG9mIHRoZSBYQ00gZXhlY3V0b3IuANwtIGBvcmlnaW5gOiBNdXN0IGJlIGFuIG9yaWdpbiBzcGVjaWZpZWQgYnkgQWRtaW5PcmlnaW4u0C0gYHN1c3BlbmRlZGA6IGB0cnVlYCB0byBzdXNwZW5kLCBgZmFsc2VgIHRvIHJlc3VtZS48dHJhbnNmZXJfYXNzZXRzFAEQZGVzdC0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAEsYmVuZWZpY2lhcnktAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c/UGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABOGZlZV9hc3NldF9pdGVtEAEMdTMyAAEwd2VpZ2h0X2xpbWl0qQYBLFdlaWdodExpbWl0AAuEXQFUcmFuc2ZlciBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byB0aGUgZGVzdGluYXRpb24gY2hhaW4gdGhyb3VnaCB0aGVpciBsb2NhbCzQZGVzdGluYXRpb24gb3IgcmVtb3RlIHJlc2VydmUsIG9yIHRocm91Z2ggdGVsZXBvcnRzLgBRAUZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZjUBaW5kZXggYGZlZV9hc3NldF9pdGVtYCAoaGVuY2UgcmVmZXJyZWQgdG8gYXMgYGZlZXNgKSwgdXAgdG8gZW5vdWdoIHRvIHBheSBmb3JBAWB3ZWlnaHRfbGltaXRgIG9mIHdlaWdodC4gSWYgbW9yZSB3ZWlnaHQgaXMgbmVlZGVkIHRoYW4gYHdlaWdodF9saW1pdGAsIHRoZW4gdGhl3G9wZXJhdGlvbiB3aWxsIGZhaWwgYW5kIHRoZSBzZW50IGFzc2V0cyBtYXkgYmUgYXQgcmlzay4AYQFgYXNzZXRzYCAoZXhjbHVkaW5nIGBmZWVzYCkgbXVzdCBoYXZlIHNhbWUgcmVzZXJ2ZSBsb2NhdGlvbiBvciBvdGhlcndpc2UgYmUgdGVsZXBvcnRhYmxlsHRvIGBkZXN0YCwgbm8gbGltaXRhdGlvbnMgaW1wb3NlZCBvbiBgZmVlc2AuTQEgLSBmb3IgbG9jYWwgcmVzZXJ2ZTogdHJhbnNmZXIgYXNzZXRzIHRvIHNvdmVyZWlnbiBhY2NvdW50IG9mIGRlc3RpbmF0aW9uIGNoYWluIGFuZE0BICAgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiBYQ00gdG8gYGRlc3RgIHRvIG1pbnQgYW5kIGRlcG9zaXQgcmVzZXJ2ZS1iYXNlZCBhc3NldHMgdG9EICAgYGJlbmVmaWNpYXJ5YC5hASAtIGZvciBkZXN0aW5hdGlvbiByZXNlcnZlOiBidXJuIGxvY2FsIGFzc2V0cyBhbmQgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiB0byBgZGVzdGAgY2hhaW5ZASAgIHRvIHdpdGhkcmF3IHRoZSByZXNlcnZlIGFzc2V0cyBmcm9tIHRoaXMgY2hhaW4ncyBzb3ZlcmVpZ24gYWNjb3VudCBhbmQgZGVwb3NpdCB0aGVtUCAgIHRvIGBiZW5lZmljaWFyeWAuXQEgLSBmb3IgcmVtb3RlIHJlc2VydmU6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byByZXNlcnZlIGNoYWluIHRvIG1vdmUgcmVzZXJ2ZXNdASAgIGZyb20gdGhpcyBjaGFpbidzIFNBIHRvIGBkZXN0YCBjaGFpbidzIFNBLCBhbmQgZm9yd2FyZCBhbm90aGVyIFhDTSB0byBgZGVzdGAgdG8gbWludNQgICBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLlEBIC0gZm9yIHRlbGVwb3J0czogYnVybiBsb2NhbCBhc3NldHMgYW5kIGZvcndhcmQgWENNIHRvIGBkZXN0YCBjaGFpbiB0byBtaW50L3RlbGVwb3J0sCAgIGFzc2V0cyBhbmQgZGVwb3NpdCB0aGVtIHRvIGBiZW5lZmljaWFyeWAuACkBLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS4tAS0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgWDIoUGFyZW50LFUBICBQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZCBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBYMShQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZGggIGZyb20gcmVsYXkgdG8gcGFyYWNoYWluLlUBLSBgYmVuZWZpY2lhcnlgOiBBIGJlbmVmaWNpYXJ5IGxvY2F0aW9uIGZvciB0aGUgYXNzZXRzIGluIHRoZSBjb250ZXh0IG9mIGBkZXN0YC4gV2lsbJggIGdlbmVyYWxseSBiZSBhbiBgQWNjb3VudElkMzJgIHZhbHVlLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGXIICBmZWUgb24gdGhlIGBkZXN0YCAoYW5kIHBvc3NpYmx5IHJlc2VydmUpIGNoYWlucy5NAS0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5HCAgZmVlcy5FAS0gYHdlaWdodF9saW1pdGA6IFRoZSByZW1vdGUtc2lkZSB3ZWlnaHQgbGltaXQsIGlmIGFueSwgZm9yIHRoZSBYQ00gZmVlIHB1cmNoYXNlLjBjbGFpbV9hc3NldHMIARhhc3NldHP1BgFQQm94PFZlcnNpb25lZEFzc2V0cz4AASxiZW5lZmljaWFyeS0BAVhCb3g8VmVyc2lvbmVkTG9jYXRpb24+AAwYVQFDbGFpbXMgYXNzZXRzIHRyYXBwZWQgb24gdGhpcyBwYWxsZXQgYmVjYXVzZSBvZiBsZWZ0b3ZlciBhc3NldHMgZHVyaW5nIFhDTSBleGVjdXRpb24uAKwtIGBvcmlnaW5gOiBBbnlvbmUgY2FuIGNhbGwgdGhpcyBleHRyaW5zaWMuXQEtIGBhc3NldHNgOiBUaGUgZXhhY3QgYXNzZXRzIHRoYXQgd2VyZSB0cmFwcGVkLiBVc2UgdGhlIHZlcnNpb24gdG8gc3BlY2lmeSB3aGF0IHZlcnNpb26Yd2FzIHRoZSBsYXRlc3Qgd2hlbiB0aGV5IHdlcmUgdHJhcHBlZC5FAS0gYGJlbmVmaWNpYXJ5YDogVGhlIGxvY2F0aW9uL2FjY291bnQgd2hlcmUgdGhlIGNsYWltZWQgYXNzZXRzIHdpbGwgYmUgZGVwb3NpdGVkLox0cmFuc2Zlcl9hc3NldHNfdXNpbmdfdHlwZV9hbmRfdGhlbhwBEGRlc3QtAQFYQm94PFZlcnNpb25lZExvY2F0aW9uPgABGGFzc2V0c/UGAVBCb3g8VmVyc2lvbmVkQXNzZXRzPgABUGFzc2V0c190cmFuc2Zlcl90eXBlJQcBREJveDxUcmFuc2ZlclR5cGU+AAE4cmVtb3RlX2ZlZXNfaWQpBwFUQm94PFZlcnNpb25lZEFzc2V0SWQ+AAFIZmVlc190cmFuc2Zlcl90eXBlJQcBREJveDxUcmFuc2ZlclR5cGU+AAFIY3VzdG9tX3hjbV9vbl9kZXN09QUBVEJveDxWZXJzaW9uZWRYY208KCk+PgABMHdlaWdodF9saW1pdKkGASxXZWlnaHRMaW1pdAANwFUBVHJhbnNmZXIgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBkZXN0aW5hdGlvbiBjaGFpbiB1c2luZyBleHBsaWNpdCB0cmFuc2Zlcmh0eXBlcyBmb3IgYXNzZXRzIGFuZCBmZWVzLgBZAWBhc3NldHNgIG11c3QgaGF2ZSBzYW1lIHJlc2VydmUgbG9jYXRpb24gb3IgbWF5IGJlIHRlbGVwb3J0YWJsZSB0byBgZGVzdGAuIENhbGxlciBtdXN07HByb3ZpZGUgdGhlIGBhc3NldHNfdHJhbnNmZXJfdHlwZWAgdG8gYmUgdXNlZCBmb3IgYGFzc2V0c2A6UQEgLSBgVHJhbnNmZXJUeXBlOjpMb2NhbFJlc2VydmVgOiB0cmFuc2ZlciBhc3NldHMgdG8gc292ZXJlaWduIGFjY291bnQgb2YgZGVzdGluYXRpb25NASAgIGNoYWluIGFuZCBmb3J3YXJkIGEgbm90aWZpY2F0aW9uIFhDTSB0byBgZGVzdGAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkbCAgIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLlkBIC0gYFRyYW5zZmVyVHlwZTo6RGVzdGluYXRpb25SZXNlcnZlYDogYnVybiBsb2NhbCBhc3NldHMgYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gdG9ZASAgIGBkZXN0YCBjaGFpbiB0byB3aXRoZHJhdyB0aGUgcmVzZXJ2ZSBhc3NldHMgZnJvbSB0aGlzIGNoYWluJ3Mgc292ZXJlaWduIGFjY291bnQgYW5khCAgIGRlcG9zaXQgdGhlbSB0byBgYmVuZWZpY2lhcnlgLlkBIC0gYFRyYW5zZmVyVHlwZTo6UmVtb3RlUmVzZXJ2ZShyZXNlcnZlKWA6IGJ1cm4gbG9jYWwgYXNzZXRzLCBmb3J3YXJkIFhDTSB0byBgcmVzZXJ2ZWBhASAgIGNoYWluIHRvIG1vdmUgcmVzZXJ2ZXMgZnJvbSB0aGlzIGNoYWluJ3MgU0EgdG8gYGRlc3RgIGNoYWluJ3MgU0EsIGFuZCBmb3J3YXJkIGFub3RoZXJVASAgIFhDTSB0byBgZGVzdGAgdG8gbWludCBhbmQgZGVwb3NpdCByZXNlcnZlLWJhc2VkIGFzc2V0cyB0byBgYmVuZWZpY2lhcnlgLiBUeXBpY2FsbHmUICAgdGhlIHJlbW90ZSBgcmVzZXJ2ZWAgaXMgQXNzZXQgSHViLkUBIC0gYFRyYW5zZmVyVHlwZTo6VGVsZXBvcnRgOiBidXJuIGxvY2FsIGFzc2V0cyBhbmQgZm9yd2FyZCBYQ00gdG8gYGRlc3RgIGNoYWluIHRv6CAgIG1pbnQvdGVsZXBvcnQgYXNzZXRzIGFuZCBkZXBvc2l0IHRoZW0gdG8gYGJlbmVmaWNpYXJ5YC4AVQFPbiB0aGUgZGVzdGluYXRpb24gY2hhaW4sIGFzIHdlbGwgYXMgYW55IGludGVybWVkaWFyeSBob3BzLCBgQnV5RXhlY3V0aW9uYCBpcyB1c2VkIHRvIQFidXkgZXhlY3V0aW9uIHVzaW5nIHRyYW5zZmVycmVkIGBhc3NldHNgIGlkZW50aWZpZWQgYnkgYHJlbW90ZV9mZWVzX2lkYC5ZAU1ha2Ugc3VyZSBlbm91Z2ggb2YgdGhlIHNwZWNpZmllZCBgcmVtb3RlX2ZlZXNfaWRgIGFzc2V0IGlzIGluY2x1ZGVkIGluIHRoZSBnaXZlbiBsaXN0YQFvZiBgYXNzZXRzYC4gYHJlbW90ZV9mZWVzX2lkYCBzaG91bGQgYmUgZW5vdWdoIHRvIHBheSBmb3IgYHdlaWdodF9saW1pdGAuIElmIG1vcmUgd2VpZ2h0WQFpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIHNlbnQgYXNzZXRzIG1heSBiZSBhdCByaXNrLgBFAWByZW1vdGVfZmVlc19pZGAgbWF5IHVzZSBkaWZmZXJlbnQgdHJhbnNmZXIgdHlwZSB0aGFuIHJlc3Qgb2YgYGFzc2V0c2AgYW5kIGNhbiBiZZxzcGVjaWZpZWQgdGhyb3VnaCBgZmVlc190cmFuc2Zlcl90eXBlYC4AYQFUaGUgY2FsbGVyIG5lZWRzIHRvIHNwZWNpZnkgd2hhdCBzaG91bGQgaGFwcGVuIHRvIHRoZSB0cmFuc2ZlcnJlZCBhc3NldHMgb25jZSB0aGV5IHJlYWNoQQF0aGUgYGRlc3RgIGNoYWluLiBUaGlzIGlzIGRvbmUgdGhyb3VnaCB0aGUgYGN1c3RvbV94Y21fb25fZGVzdGAgcGFyYW1ldGVyLCB3aGljaPxjb250YWlucyB0aGUgaW5zdHJ1Y3Rpb25zIHRvIGV4ZWN1dGUgb24gYGRlc3RgIGFzIGEgZmluYWwgc3RlcC58ICBUaGlzIGlzIHVzdWFsbHkgYXMgc2ltcGxlIGFzOlEBICBgWGNtKHZlYyFbRGVwb3NpdEFzc2V0IHsgYXNzZXRzOiBXaWxkKEFsbENvdW50ZWQoYXNzZXRzLmxlbigpKSksIGJlbmVmaWNpYXJ5IH1dKWAsMQEgIGJ1dCBjb3VsZCBiZSBzb21ldGhpbmcgbW9yZSBleG90aWMgbGlrZSBzZW5kaW5nIHRoZSBgYXNzZXRzYCBldmVuIGZ1cnRoZXIuACkBLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS4lAS0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgW1BhcmVudCxhASAgUGFyYWNoYWluKC4uKV1gIHRvIHNlbmQgZnJvbSBwYXJhY2hhaW4gdG8gcGFyYWNoYWluLCBvciBgW1BhcmFjaGFpbiguLildYCB0byBzZW5kIGZyb209ASAgcmVsYXkgdG8gcGFyYWNoYWluLCBvciBgKHBhcmVudHM6IDIsIChHbG9iYWxDb25zZW5zdXMoLi4pLCAuLikpYCB0byBzZW5kIGZyb230ICBwYXJhY2hhaW4gYWNyb3NzIGEgYnJpZGdlIHRvIGFub3RoZXIgZWNvc3lzdGVtIGRlc3RpbmF0aW9uLlkBLSBgYXNzZXRzYDogVGhlIGFzc2V0cyB0byBiZSB3aXRoZHJhd24uIFRoaXMgc2hvdWxkIGluY2x1ZGUgdGhlIGFzc2V0cyB1c2VkIHRvIHBheSB0aGXIICBmZWUgb24gdGhlIGBkZXN0YCAoYW5kIHBvc3NpYmx5IHJlc2VydmUpIGNoYWlucy49AS0gYGFzc2V0c190cmFuc2Zlcl90eXBlYDogVGhlIFhDTSBgVHJhbnNmZXJUeXBlYCB1c2VkIHRvIHRyYW5zZmVyIHRoZSBgYXNzZXRzYC4hAS0gYHJlbW90ZV9mZWVzX2lkYDogT25lIG9mIHRoZSBpbmNsdWRlZCBgYXNzZXRzYCB0byBiZSB1c2VkIHRvIHBheSBmZWVzLkkBLSBgZmVlc190cmFuc2Zlcl90eXBlYDogVGhlIFhDTSBgVHJhbnNmZXJUeXBlYCB1c2VkIHRvIHRyYW5zZmVyIHRoZSBgZmVlc2AgYXNzZXRzLlkBLSBgY3VzdG9tX3hjbV9vbl9kZXN0YDogVGhlIFhDTSB0byBiZSBleGVjdXRlZCBvbiBgZGVzdGAgY2hhaW4gYXMgdGhlIGxhc3Qgc3RlcCBvZiB0aGVZASAgdHJhbnNmZXIsIHdoaWNoIGFsc28gZGV0ZXJtaW5lcyB3aGF0IGhhcHBlbnMgdG8gdGhlIGFzc2V0cyBvbiB0aGUgZGVzdGluYXRpb24gY2hhaW4uRQEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgcmVtb3RlLXNpZGUgd2VpZ2h0IGxpbWl0LCBpZiBhbnksIGZvciB0aGUgWENNIGZlZSBwdXJjaGFzZS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMu9QUIDHhjbTBWZXJzaW9uZWRYY20ELFJ1bnRpbWVDYWxsAAEMCFYyBAD5BQFQdjI6OlhjbTxSdW50aW1lQ2FsbD4AAgAIVjMEAEkGAVB2Mzo6WGNtPFJ1bnRpbWVDYWxsPgADAAhWNAQArQYBUHY0OjpYY208UnVudGltZUNhbGw+AAQAAPkFDAx4Y20IdjIMWGNtBCxSdW50aW1lQ2FsbAAABAD9BQF0VmVjPEluc3RydWN0aW9uPFJ1bnRpbWVDYWxsPj4AAP0FAAACAQYAAQYMDHhjbQh2MixJbnN0cnVjdGlvbgQsUnVudGltZUNhbGwAAXA0V2l0aGRyYXdBc3NldAQABQYBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQABQYBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAAUGASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlDAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2UhBgEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0LAEMdTY0AAMANFRyYW5zZmVyQXNzZXQIARhhc3NldHMFBgEsTXVsdGlBc3NldHMAASxiZW5lZmljaWFyeTEBATRNdWx0aUxvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzBQYBLE11bHRpQXNzZXRzAAEQZGVzdDEBATRNdWx0aUxvY2F0aW9uAAEMeGNt+QUBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fdHlwZTEGAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCwBDHU2NAABEGNhbGw1BgFoRG91YmxlRW5jb2RlZDxSdW50aW1lQ2FsbD4ABgBkSHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdAwBGHNlbmRlctQBDHUzMgABQG1heF9tZXNzYWdlX3NpemXUAQx1MzIAATBtYXhfY2FwYWNpdHnUAQx1MzIABwBMSHJtcENoYW5uZWxBY2NlcHRlZAQBJHJlY2lwaWVudNQBDHUzMgAIAEhIcm1wQ2hhbm5lbENsb3NpbmcMASRpbml0aWF0b3LUAQx1MzIAARhzZW5kZXLUAQx1MzIAASRyZWNpcGllbnTUAQx1MzIACQAsQ2xlYXJPcmlnaW4ACgA0RGVzY2VuZE9yaWdpbgQANQEBVEludGVyaW9yTXVsdGlMb2NhdGlvbgALACxSZXBvcnRFcnJvcgwBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3QxAQE0TXVsdGlMb2NhdGlvbgABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQADAAwRGVwb3NpdEFzc2V0DAEYYXNzZXRzOQYBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz1AEMdTMyAAEsYmVuZWZpY2lhcnkxAQE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0EAEYYXNzZXRzOQYBQE11bHRpQXNzZXRGaWx0ZXIAAShtYXhfYXNzZXRz1AEMdTMyAAEQZGVzdDEBATRNdWx0aUxvY2F0aW9uAAEMeGNt+QUBHFhjbTwoKT4ADgA0RXhjaGFuZ2VBc3NldAgBEGdpdmU5BgFATXVsdGlBc3NldEZpbHRlcgABHHJlY2VpdmUFBgEsTXVsdGlBc3NldHMADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHM5BgFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmUxAQE0TXVsdGlMb2NhdGlvbgABDHhjbfkFARxYY208KCk+ABAAQEluaXRpYXRlVGVsZXBvcnQMARhhc3NldHM5BgFATXVsdGlBc3NldEZpbHRlcgABEGRlc3QxAQE0TXVsdGlMb2NhdGlvbgABDHhjbfkFARxYY208KCk+ABEAMFF1ZXJ5SG9sZGluZxABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABEGRlc3QxAQE0TXVsdGlMb2NhdGlvbgABGGFzc2V0czkGAUBNdWx0aUFzc2V0RmlsdGVyAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCwBDHU2NAASADBCdXlFeGVjdXRpb24IARBmZWVzDQYBKE11bHRpQXNzZXQAATB3ZWlnaHRfbGltaXRFBgEsV2VpZ2h0TGltaXQAEwA0UmVmdW5kU3VycGx1cwAUADxTZXRFcnJvckhhbmRsZXIEAPkFAUBYY208UnVudGltZUNhbGw+ABUALFNldEFwcGVuZGl4BAD5BQFAWGNtPFJ1bnRpbWVDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHMFBgEsTXVsdGlBc3NldHMAARh0aWNrZXQxAQE0TXVsdGlMb2NhdGlvbgAYABBUcmFwBAAsAQx1NjQAGQBAU3Vic2NyaWJlVmVyc2lvbggBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQAGgBIVW5zdWJzY3JpYmVWZXJzaW9uABsAAAUGEAx4Y20IdjIobXVsdGlhc3NldCxNdWx0aUFzc2V0cwAABAAJBgE8VmVjPE11bHRpQXNzZXQ+AAAJBgAAAg0GAA0GEAx4Y20IdjIobXVsdGlhc3NldChNdWx0aUFzc2V0AAAIAQhpZBEGARxBc3NldElkAAEMZnVuFQYBLEZ1bmdpYmlsaXR5AAARBhAMeGNtCHYyKG11bHRpYXNzZXQcQXNzZXRJZAABCCBDb25jcmV0ZQQAMQEBNE11bHRpTG9jYXRpb24AAAAgQWJzdHJhY3QEADgBHFZlYzx1OD4AAQAAFQYQDHhjbQh2MihtdWx0aWFzc2V0LEZ1bmdpYmlsaXR5AAEIIEZ1bmdpYmxlBADkARB1MTI4AAAALE5vbkZ1bmdpYmxlBAAZBgE0QXNzZXRJbnN0YW5jZQABAAAZBhAMeGNtCHYyKG11bHRpYXNzZXQ0QXNzZXRJbnN0YW5jZQABHCRVbmRlZmluZWQAAAAUSW5kZXgEAOQBEHUxMjgAAQAYQXJyYXk0BABIARxbdTg7IDRdAAIAGEFycmF5OAQAHQYBHFt1ODsgOF0AAwAcQXJyYXkxNgQAqAEgW3U4OyAxNl0ABAAcQXJyYXkzMgQABAEgW3U4OyAzMl0ABQAQQmxvYgQAOAEcVmVjPHU4PgAGAAAdBgAAAwgAAAAIACEGDAx4Y20IdjIgUmVzcG9uc2UAARAQTnVsbAAAABhBc3NldHMEAAUGASxNdWx0aUFzc2V0cwABADxFeGVjdXRpb25SZXN1bHQEACUGAVBPcHRpb248KHUzMiwgRXJyb3IpPgACABxWZXJzaW9uBAAQAThzdXBlcjo6VmVyc2lvbgADAAAlBgQYT3B0aW9uBARUASkGAQgQTm9uZQAAABBTb21lBAApBgAAAQAAKQYAAAQIEC0GAC0GEAx4Y20IdjIYdHJhaXRzFEVycm9yAAFoIE92ZXJmbG93AAAANFVuaW1wbGVtZW50ZWQAAQBgVW50cnVzdGVkUmVzZXJ2ZUxvY2F0aW9uAAIAZFVudHJ1c3RlZFRlbGVwb3J0TG9jYXRpb24AAwBETXVsdGlMb2NhdGlvbkZ1bGwABABoTXVsdGlMb2NhdGlvbk5vdEludmVydGlibGUABQAkQmFkT3JpZ2luAAYAPEludmFsaWRMb2NhdGlvbgAHADRBc3NldE5vdEZvdW5kAAgAVEZhaWxlZFRvVHJhbnNhY3RBc3NldAAJADxOb3RXaXRoZHJhd2FibGUACgBITG9jYXRpb25DYW5ub3RIb2xkAAsAVEV4Y2VlZHNNYXhNZXNzYWdlU2l6ZQAMAFhEZXN0aW5hdGlvblVuc3VwcG9ydGVkAA0AJFRyYW5zcG9ydAAOAChVbnJvdXRhYmxlAA8AMFVua25vd25DbGFpbQAQADhGYWlsZWRUb0RlY29kZQARAEBNYXhXZWlnaHRJbnZhbGlkABIAOE5vdEhvbGRpbmdGZWVzABMAMFRvb0V4cGVuc2l2ZQAUABBUcmFwBAAwAQx1NjQAFQBMVW5oYW5kbGVkWGNtVmVyc2lvbgAWAEhXZWlnaHRMaW1pdFJlYWNoZWQEADABGFdlaWdodAAXABxCYXJyaWVyABgATFdlaWdodE5vdENvbXB1dGFibGUAGQAAMQYMDHhjbQh2MihPcmlnaW5LaW5kAAEQGE5hdGl2ZQAAAEBTb3ZlcmVpZ25BY2NvdW50AAEAJFN1cGVydXNlcgACAAxYY20AAwAANQYMDHhjbThkb3VibGVfZW5jb2RlZDREb3VibGVFbmNvZGVkBARUAAAEARxlbmNvZGVkOAEcVmVjPHU4PgAAOQYQDHhjbQh2MihtdWx0aWFzc2V0QE11bHRpQXNzZXRGaWx0ZXIAAQggRGVmaW5pdGUEAAUGASxNdWx0aUFzc2V0cwAAABBXaWxkBAA9BgE4V2lsZE11bHRpQXNzZXQAAQAAPQYQDHhjbQh2MihtdWx0aWFzc2V0OFdpbGRNdWx0aUFzc2V0AAEIDEFsbAAAABRBbGxPZggBCGlkEQYBHEFzc2V0SWQAAQxmdW5BBgE8V2lsZEZ1bmdpYmlsaXR5AAEAAEEGEAx4Y20IdjIobXVsdGlhc3NldDxXaWxkRnVuZ2liaWxpdHkAAQggRnVuZ2libGUAAAAsTm9uRnVuZ2libGUAAQAARQYMDHhjbQh2MixXZWlnaHRMaW1pdAABCCRVbmxpbWl0ZWQAAAAcTGltaXRlZAQALAEMdTY0AAEAAEkGDAx4Y20IdjMMWGNtBBBDYWxsAAAEAE0GAVhWZWM8SW5zdHJ1Y3Rpb248Q2FsbD4+AABNBgAAAlEGAFEGDAx4Y20IdjMsSW5zdHJ1Y3Rpb24EEENhbGwAAcA0V2l0aGRyYXdBc3NldAQAVQYBLE11bHRpQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQAVQYBLE11bHRpQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEAFUGASxNdWx0aUFzc2V0cwACADRRdWVyeVJlc3BvbnNlEAEgcXVlcnlfaWQsARxRdWVyeUlkAAEgcmVzcG9uc2VpBgEgUmVzcG9uc2UAAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AAEccXVlcmllcpEGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AAwA0VHJhbnNmZXJBc3NldAgBGGFzc2V0c1UGASxNdWx0aUFzc2V0cwABLGJlbmVmaWNpYXJ5yAE0TXVsdGlMb2NhdGlvbgAEAFBUcmFuc2ZlclJlc2VydmVBc3NldAwBGGFzc2V0c1UGASxNdWx0aUFzc2V0cwABEGRlc3TIATRNdWx0aUxvY2F0aW9uAAEMeGNtSQYBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fa2luZJUGAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCgBGFdlaWdodAABEGNhbGw1BgFMRG91YmxlRW5jb2RlZDxDYWxsPgAGAGRIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0DAEYc2VuZGVy1AEMdTMyAAFAbWF4X21lc3NhZ2Vfc2l6ZdQBDHUzMgABMG1heF9jYXBhY2l0edQBDHUzMgAHAExIcm1wQ2hhbm5lbEFjY2VwdGVkBAEkcmVjaXBpZW501AEMdTMyAAgASEhybXBDaGFubmVsQ2xvc2luZwwBJGluaXRpYXRvctQBDHUzMgABGHNlbmRlctQBDHUzMgABJHJlY2lwaWVudNQBDHUzMgAJACxDbGVhck9yaWdpbgAKADREZXNjZW5kT3JpZ2luBADMAVRJbnRlcmlvck11bHRpTG9jYXRpb24ACwAsUmVwb3J0RXJyb3IEAJkGAURRdWVyeVJlc3BvbnNlSW5mbwAMADBEZXBvc2l0QXNzZXQIARhhc3NldHOdBgFATXVsdGlBc3NldEZpbHRlcgABLGJlbmVmaWNpYXJ5yAE0TXVsdGlMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0DAEYYXNzZXRznQYBQE11bHRpQXNzZXRGaWx0ZXIAARBkZXN0yAE0TXVsdGlMb2NhdGlvbgABDHhjbUkGARxYY208KCk+AA4ANEV4Y2hhbmdlQXNzZXQMARBnaXZlnQYBQE11bHRpQXNzZXRGaWx0ZXIAARB3YW50VQYBLE11bHRpQXNzZXRzAAEcbWF4aW1hbCABEGJvb2wADwBcSW5pdGlhdGVSZXNlcnZlV2l0aGRyYXcMARhhc3NldHOdBgFATXVsdGlBc3NldEZpbHRlcgABHHJlc2VydmXIATRNdWx0aUxvY2F0aW9uAAEMeGNtSQYBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0c50GAUBNdWx0aUFzc2V0RmlsdGVyAAEQZGVzdMgBNE11bHRpTG9jYXRpb24AAQx4Y21JBgEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mb5kGAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0c50GAUBNdWx0aUFzc2V0RmlsdGVyABIAMEJ1eUV4ZWN1dGlvbggBEGZlZXNdBgEoTXVsdGlBc3NldAABMHdlaWdodF9saW1pdKkGASxXZWlnaHRMaW1pdAATADRSZWZ1bmRTdXJwbHVzABQAPFNldEVycm9ySGFuZGxlcgQASQYBJFhjbTxDYWxsPgAVACxTZXRBcHBlbmRpeAQASQYBJFhjbTxDYWxsPgAWAChDbGVhckVycm9yABcAKENsYWltQXNzZXQIARhhc3NldHNVBgEsTXVsdGlBc3NldHMAARh0aWNrZXTIATRNdWx0aUxvY2F0aW9uABgAEFRyYXAEACwBDHU2NAAZAEBTdWJzY3JpYmVWZXJzaW9uCAEgcXVlcnlfaWQsARxRdWVyeUlkAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCgBGFdlaWdodAAaAEhVbnN1YnNjcmliZVZlcnNpb24AGwAkQnVybkFzc2V0BABVBgEsTXVsdGlBc3NldHMAHAAsRXhwZWN0QXNzZXQEAFUGASxNdWx0aUFzc2V0cwAdADBFeHBlY3RPcmlnaW4EAJEGAVRPcHRpb248TXVsdGlMb2NhdGlvbj4AHgAsRXhwZWN0RXJyb3IEAG0GAVBPcHRpb248KHUzMiwgRXJyb3IpPgAfAFBFeHBlY3RUcmFuc2FjdFN0YXR1cwQAiQYBOE1heWJlRXJyb3JDb2RlACAALFF1ZXJ5UGFsbGV0CAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAE0cmVzcG9uc2VfaW5mb5kGAURRdWVyeVJlc3BvbnNlSW5mbwAhADBFeHBlY3RQYWxsZXQUARRpbmRleNQBDHUzMgABEG5hbWU4ARxWZWM8dTg+AAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAEsY3JhdGVfbWFqb3LUAQx1MzIAATxtaW5fY3JhdGVfbWlub3LUAQx1MzIAIgBQUmVwb3J0VHJhbnNhY3RTdGF0dXMEAJkGAURRdWVyeVJlc3BvbnNlSW5mbwAjAExDbGVhclRyYW5zYWN0U3RhdHVzACQAPFVuaXZlcnNhbE9yaWdpbgQA0AEgSnVuY3Rpb24AJQA0RXhwb3J0TWVzc2FnZQwBHG5ldHdvcmvcASROZXR3b3JrSWQAASxkZXN0aW5hdGlvbswBVEludGVyaW9yTXVsdGlMb2NhdGlvbgABDHhjbUkGARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V0XQYBKE11bHRpQXNzZXQAASB1bmxvY2tlcsgBNE11bHRpTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldF0GAShNdWx0aUFzc2V0AAEYdGFyZ2V0yAE0TXVsdGlMb2NhdGlvbgAoADhOb3RlVW5sb2NrYWJsZQgBFGFzc2V0XQYBKE11bHRpQXNzZXQAARRvd25lcsgBNE11bHRpTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V0XQYBKE11bHRpQXNzZXQAARhsb2NrZXLIATRNdWx0aUxvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQAyAE0TXVsdGlMb2NhdGlvbgAuADxVbnBhaWRFeGVjdXRpb24IATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQAATBjaGVja19vcmlnaW6RBgFUT3B0aW9uPE11bHRpTG9jYXRpb24+AC8AAFUGEAx4Y20IdjMobXVsdGlhc3NldCxNdWx0aUFzc2V0cwAABABZBgE8VmVjPE11bHRpQXNzZXQ+AABZBgAAAl0GAF0GEAx4Y20IdjMobXVsdGlhc3NldChNdWx0aUFzc2V0AAAIAQhpZPABHEFzc2V0SWQAAQxmdW5hBgEsRnVuZ2liaWxpdHkAAGEGEAx4Y20IdjMobXVsdGlhc3NldCxGdW5naWJpbGl0eQABCCBGdW5naWJsZQQA5AEQdTEyOAAAACxOb25GdW5naWJsZQQAZQYBNEFzc2V0SW5zdGFuY2UAAQAAZQYQDHhjbQh2MyhtdWx0aWFzc2V0NEFzc2V0SW5zdGFuY2UAARgkVW5kZWZpbmVkAAAAFEluZGV4BADkARB1MTI4AAEAGEFycmF5NAQASAEcW3U4OyA0XQACABhBcnJheTgEAB0GARxbdTg7IDhdAAMAHEFycmF5MTYEAKgBIFt1ODsgMTZdAAQAHEFycmF5MzIEAAQBIFt1ODsgMzJdAAUAAGkGDAx4Y20IdjMgUmVzcG9uc2UAARgQTnVsbAAAABhBc3NldHMEAFUGASxNdWx0aUFzc2V0cwABADxFeGVjdXRpb25SZXN1bHQEAG0GAVBPcHRpb248KHUzMiwgRXJyb3IpPgACABxWZXJzaW9uBAAQAThzdXBlcjo6VmVyc2lvbgADACxQYWxsZXRzSW5mbwQAeQYBmEJvdW5kZWRWZWM8UGFsbGV0SW5mbywgTWF4UGFsbGV0c0luZm8+AAQAOERpc3BhdGNoUmVzdWx0BACJBgE4TWF5YmVFcnJvckNvZGUABQAAbQYEGE9wdGlvbgQEVAFxBgEIEE5vbmUAAAAQU29tZQQAcQYAAAEAAHEGAAAECBB1BgB1BhAMeGNtCHYzGHRyYWl0cxRFcnJvcgABoCBPdmVyZmxvdwAAADRVbmltcGxlbWVudGVkAAEAYFVudHJ1c3RlZFJlc2VydmVMb2NhdGlvbgACAGRVbnRydXN0ZWRUZWxlcG9ydExvY2F0aW9uAAMAMExvY2F0aW9uRnVsbAAEAFRMb2NhdGlvbk5vdEludmVydGlibGUABQAkQmFkT3JpZ2luAAYAPEludmFsaWRMb2NhdGlvbgAHADRBc3NldE5vdEZvdW5kAAgAVEZhaWxlZFRvVHJhbnNhY3RBc3NldAAJADxOb3RXaXRoZHJhd2FibGUACgBITG9jYXRpb25DYW5ub3RIb2xkAAsAVEV4Y2VlZHNNYXhNZXNzYWdlU2l6ZQAMAFhEZXN0aW5hdGlvblVuc3VwcG9ydGVkAA0AJFRyYW5zcG9ydAAOAChVbnJvdXRhYmxlAA8AMFVua25vd25DbGFpbQAQADhGYWlsZWRUb0RlY29kZQARAEBNYXhXZWlnaHRJbnZhbGlkABIAOE5vdEhvbGRpbmdGZWVzABMAMFRvb0V4cGVuc2l2ZQAUABBUcmFwBAAwAQx1NjQAFQBARXhwZWN0YXRpb25GYWxzZQAWADhQYWxsZXROb3RGb3VuZAAXADBOYW1lTWlzbWF0Y2gAGABMVmVyc2lvbkluY29tcGF0aWJsZQAZAFBIb2xkaW5nV291bGRPdmVyZmxvdwAaACxFeHBvcnRFcnJvcgAbADhSZWFuY2hvckZhaWxlZAAcABhOb0RlYWwAHQAoRmVlc05vdE1ldAAeACRMb2NrRXJyb3IAHwAwTm9QZXJtaXNzaW9uACAAKFVuYW5jaG9yZWQAIQA4Tm90RGVwb3NpdGFibGUAIgBMVW5oYW5kbGVkWGNtVmVyc2lvbgAjAEhXZWlnaHRMaW1pdFJlYWNoZWQEACgBGFdlaWdodAAkABxCYXJyaWVyACUATFdlaWdodE5vdENvbXB1dGFibGUAJgBERXhjZWVkc1N0YWNrTGltaXQAJwAAeQYMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAF9BgRTAAAEAIUGARhWZWM8VD4AAH0GDAx4Y20IdjMoUGFsbGV0SW5mbwAAGAEUaW5kZXjUAQx1MzIAARBuYW1lgQYBgEJvdW5kZWRWZWM8dTgsIE1heFBhbGxldE5hbWVMZW4+AAEsbW9kdWxlX25hbWWBBgGAQm91bmRlZFZlYzx1OCwgTWF4UGFsbGV0TmFtZUxlbj4AARRtYWpvctQBDHUzMgABFG1pbm9y1AEMdTMyAAEUcGF0Y2jUAQx1MzIAAIEGDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAhQYAAAJ9BgCJBgwMeGNtCHYzOE1heWJlRXJyb3JDb2RlAAEMHFN1Y2Nlc3MAAAAURXJyb3IEAI0GAYxCb3VuZGVkVmVjPHU4LCBNYXhEaXNwYXRjaEVycm9yTGVuPgABADhUcnVuY2F0ZWRFcnJvcgQAjQYBjEJvdW5kZWRWZWM8dTgsIE1heERpc3BhdGNoRXJyb3JMZW4+AAIAAI0GDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAkQYEGE9wdGlvbgQEVAHIAQgQTm9uZQAAABBTb21lBADIAAABAACVBgwMeGNtCHYzKE9yaWdpbktpbmQAARAYTmF0aXZlAAAAQFNvdmVyZWlnbkFjY291bnQAAQAkU3VwZXJ1c2VyAAIADFhjbQADAACZBgwMeGNtCHYzRFF1ZXJ5UmVzcG9uc2VJbmZvAAAMASxkZXN0aW5hdGlvbsgBNE11bHRpTG9jYXRpb24AASBxdWVyeV9pZCwBHFF1ZXJ5SWQAAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AACdBhAMeGNtCHYzKG11bHRpYXNzZXRATXVsdGlBc3NldEZpbHRlcgABCCBEZWZpbml0ZQQAVQYBLE11bHRpQXNzZXRzAAAAEFdpbGQEAKEGAThXaWxkTXVsdGlBc3NldAABAAChBhAMeGNtCHYzKG11bHRpYXNzZXQ4V2lsZE11bHRpQXNzZXQAARAMQWxsAAAAFEFsbE9mCAEIaWTwARxBc3NldElkAAEMZnVupQYBPFdpbGRGdW5naWJpbGl0eQABAChBbGxDb3VudGVkBADUAQx1MzIAAgAwQWxsT2ZDb3VudGVkDAEIaWTwARxBc3NldElkAAEMZnVupQYBPFdpbGRGdW5naWJpbGl0eQABFGNvdW501AEMdTMyAAMAAKUGEAx4Y20IdjMobXVsdGlhc3NldDxXaWxkRnVuZ2liaWxpdHkAAQggRnVuZ2libGUAAAAsTm9uRnVuZ2libGUAAQAAqQYMDHhjbQh2MyxXZWlnaHRMaW1pdAABCCRVbmxpbWl0ZWQAAAAcTGltaXRlZAQAKAEYV2VpZ2h0AAEAAK0GDCxzdGFnaW5nX3hjbQh2NAxYY20EEENhbGwAAAQAsQYBWFZlYzxJbnN0cnVjdGlvbjxDYWxsPj4AALEGAAACtQYAtQYMLHN0YWdpbmdfeGNtCHY0LEluc3RydWN0aW9uBBBDYWxsAAHANFdpdGhkcmF3QXNzZXQEALkGARhBc3NldHMAAABUUmVzZXJ2ZUFzc2V0RGVwb3NpdGVkBAC5BgEYQXNzZXRzAAEAWFJlY2VpdmVUZWxlcG9ydGVkQXNzZXQEALkGARhBc3NldHMAAgA0UXVlcnlSZXNwb25zZRABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABIHJlc3BvbnNlzQYBIFJlc3BvbnNlAAEobWF4X3dlaWdodCgBGFdlaWdodAABHHF1ZXJpZXLhBgFAT3B0aW9uPExvY2F0aW9uPgADADRUcmFuc2ZlckFzc2V0CAEYYXNzZXRzuQYBGEFzc2V0cwABLGJlbmVmaWNpYXJ59AEgTG9jYXRpb24ABABQVHJhbnNmZXJSZXNlcnZlQXNzZXQMARhhc3NldHO5BgEYQXNzZXRzAAEQZGVzdPQBIExvY2F0aW9uAAEMeGNtrQYBHFhjbTwoKT4ABQAgVHJhbnNhY3QMASxvcmlnaW5fa2luZJUGAShPcmlnaW5LaW5kAAFYcmVxdWlyZV93ZWlnaHRfYXRfbW9zdCgBGFdlaWdodAABEGNhbGw1BgFMRG91YmxlRW5jb2RlZDxDYWxsPgAGAGRIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0DAEYc2VuZGVy1AEMdTMyAAFAbWF4X21lc3NhZ2Vfc2l6ZdQBDHUzMgABMG1heF9jYXBhY2l0edQBDHUzMgAHAExIcm1wQ2hhbm5lbEFjY2VwdGVkBAEkcmVjaXBpZW501AEMdTMyAAgASEhybXBDaGFubmVsQ2xvc2luZwwBJGluaXRpYXRvctQBDHUzMgABGHNlbmRlctQBDHUzMgABJHJlY2lwaWVudNQBDHUzMgAJACxDbGVhck9yaWdpbgAKADREZXNjZW5kT3JpZ2luBAD4AUBJbnRlcmlvckxvY2F0aW9uAAsALFJlcG9ydEVycm9yBADlBgFEUXVlcnlSZXNwb25zZUluZm8ADAAwRGVwb3NpdEFzc2V0CAEYYXNzZXRz6QYBLEFzc2V0RmlsdGVyAAEsYmVuZWZpY2lhcnn0ASBMb2NhdGlvbgANAExEZXBvc2l0UmVzZXJ2ZUFzc2V0DAEYYXNzZXRz6QYBLEFzc2V0RmlsdGVyAAEQZGVzdPQBIExvY2F0aW9uAAEMeGNtrQYBHFhjbTwoKT4ADgA0RXhjaGFuZ2VBc3NldAwBEGdpdmXpBgEsQXNzZXRGaWx0ZXIAARB3YW50uQYBGEFzc2V0cwABHG1heGltYWwgARBib29sAA8AXEluaXRpYXRlUmVzZXJ2ZVdpdGhkcmF3DAEYYXNzZXRz6QYBLEFzc2V0RmlsdGVyAAEccmVzZXJ2ZfQBIExvY2F0aW9uAAEMeGNtrQYBHFhjbTwoKT4AEABASW5pdGlhdGVUZWxlcG9ydAwBGGFzc2V0c+kGASxBc3NldEZpbHRlcgABEGRlc3T0ASBMb2NhdGlvbgABDHhjba0GARxYY208KCk+ABEANFJlcG9ydEhvbGRpbmcIATRyZXNwb25zZV9pbmZv5QYBRFF1ZXJ5UmVzcG9uc2VJbmZvAAEYYXNzZXRz6QYBLEFzc2V0RmlsdGVyABIAMEJ1eUV4ZWN1dGlvbggBEGZlZXPBBgEUQXNzZXQAATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQAEwA0UmVmdW5kU3VycGx1cwAUADxTZXRFcnJvckhhbmRsZXIEAK0GASRYY208Q2FsbD4AFQAsU2V0QXBwZW5kaXgEAK0GASRYY208Q2FsbD4AFgAoQ2xlYXJFcnJvcgAXAChDbGFpbUFzc2V0CAEYYXNzZXRzuQYBGEFzc2V0cwABGHRpY2tldPQBIExvY2F0aW9uABgAEFRyYXAEACwBDHU2NAAZAEBTdWJzY3JpYmVWZXJzaW9uCAEgcXVlcnlfaWQsARxRdWVyeUlkAAFMbWF4X3Jlc3BvbnNlX3dlaWdodCgBGFdlaWdodAAaAEhVbnN1YnNjcmliZVZlcnNpb24AGwAkQnVybkFzc2V0BAC5BgEYQXNzZXRzABwALEV4cGVjdEFzc2V0BAC5BgEYQXNzZXRzAB0AMEV4cGVjdE9yaWdpbgQA4QYBQE9wdGlvbjxMb2NhdGlvbj4AHgAsRXhwZWN0RXJyb3IEAG0GAVBPcHRpb248KHUzMiwgRXJyb3IpPgAfAFBFeHBlY3RUcmFuc2FjdFN0YXR1cwQAiQYBOE1heWJlRXJyb3JDb2RlACAALFF1ZXJ5UGFsbGV0CAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAE0cmVzcG9uc2VfaW5mb+UGAURRdWVyeVJlc3BvbnNlSW5mbwAhADBFeHBlY3RQYWxsZXQUARRpbmRleNQBDHUzMgABEG5hbWU4ARxWZWM8dTg+AAEsbW9kdWxlX25hbWU4ARxWZWM8dTg+AAEsY3JhdGVfbWFqb3LUAQx1MzIAATxtaW5fY3JhdGVfbWlub3LUAQx1MzIAIgBQUmVwb3J0VHJhbnNhY3RTdGF0dXMEAOUGAURRdWVyeVJlc3BvbnNlSW5mbwAjAExDbGVhclRyYW5zYWN0U3RhdHVzACQAPFVuaXZlcnNhbE9yaWdpbgQAAQEBIEp1bmN0aW9uACUANEV4cG9ydE1lc3NhZ2UMARxuZXR3b3JrCQEBJE5ldHdvcmtJZAABLGRlc3RpbmF0aW9u+AFASW50ZXJpb3JMb2NhdGlvbgABDHhjba0GARxYY208KCk+ACYAJExvY2tBc3NldAgBFGFzc2V0wQYBFEFzc2V0AAEgdW5sb2NrZXL0ASBMb2NhdGlvbgAnACxVbmxvY2tBc3NldAgBFGFzc2V0wQYBFEFzc2V0AAEYdGFyZ2V09AEgTG9jYXRpb24AKAA4Tm90ZVVubG9ja2FibGUIARRhc3NldMEGARRBc3NldAABFG93bmVy9AEgTG9jYXRpb24AKQA0UmVxdWVzdFVubG9jawgBFGFzc2V0wQYBFEFzc2V0AAEYbG9ja2Vy9AEgTG9jYXRpb24AKgAsU2V0RmVlc01vZGUEATBqaXRfd2l0aGRyYXcgARBib29sACsAIFNldFRvcGljBAAEASBbdTg7IDMyXQAsAChDbGVhclRvcGljAC0ALEFsaWFzT3JpZ2luBAD0ASBMb2NhdGlvbgAuADxVbnBhaWRFeGVjdXRpb24IATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQAATBjaGVja19vcmlnaW7hBgFAT3B0aW9uPExvY2F0aW9uPgAvAAC5BhAsc3RhZ2luZ194Y20IdjQUYXNzZXQYQXNzZXRzAAAEAL0GAShWZWM8QXNzZXQ+AAC9BgAAAsEGAMEGECxzdGFnaW5nX3hjbQh2NBRhc3NldBRBc3NldAAACAEIaWQpAQEcQXNzZXRJZAABDGZ1bsUGASxGdW5naWJpbGl0eQAAxQYQLHN0YWdpbmdfeGNtCHY0FGFzc2V0LEZ1bmdpYmlsaXR5AAEIIEZ1bmdpYmxlBADkARB1MTI4AAAALE5vbkZ1bmdpYmxlBADJBgE0QXNzZXRJbnN0YW5jZQABAADJBhAsc3RhZ2luZ194Y20IdjQUYXNzZXQ0QXNzZXRJbnN0YW5jZQABGCRVbmRlZmluZWQAAAAUSW5kZXgEAOQBEHUxMjgAAQAYQXJyYXk0BABIARxbdTg7IDRdAAIAGEFycmF5OAQAHQYBHFt1ODsgOF0AAwAcQXJyYXkxNgQAqAEgW3U4OyAxNl0ABAAcQXJyYXkzMgQABAEgW3U4OyAzMl0ABQAAzQYMLHN0YWdpbmdfeGNtCHY0IFJlc3BvbnNlAAEYEE51bGwAAAAYQXNzZXRzBAC5BgEYQXNzZXRzAAEAPEV4ZWN1dGlvblJlc3VsdAQAbQYBUE9wdGlvbjwodTMyLCBFcnJvcik+AAIAHFZlcnNpb24EABABOHN1cGVyOjpWZXJzaW9uAAMALFBhbGxldHNJbmZvBADRBgGYQm91bmRlZFZlYzxQYWxsZXRJbmZvLCBNYXhQYWxsZXRzSW5mbz4ABAA4RGlzcGF0Y2hSZXN1bHQEAIkGAThNYXliZUVycm9yQ29kZQAFAADRBgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAdUGBFMAAAQA3QYBGFZlYzxUPgAA1QYMLHN0YWdpbmdfeGNtCHY0KFBhbGxldEluZm8AABgBFGluZGV41AEMdTMyAAEQbmFtZdkGAYBCb3VuZGVkVmVjPHU4LCBNYXhQYWxsZXROYW1lTGVuPgABLG1vZHVsZV9uYW1l2QYBgEJvdW5kZWRWZWM8dTgsIE1heFBhbGxldE5hbWVMZW4+AAEUbWFqb3LUAQx1MzIAARRtaW5vctQBDHUzMgABFHBhdGNo1AEMdTMyAADZBgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AAN0GAAAC1QYA4QYEGE9wdGlvbgQEVAH0AQgQTm9uZQAAABBTb21lBAD0AAABAADlBgwsc3RhZ2luZ194Y20IdjREUXVlcnlSZXNwb25zZUluZm8AAAwBLGRlc3RpbmF0aW9u9AEgTG9jYXRpb24AASBxdWVyeV9pZCwBHFF1ZXJ5SWQAAShtYXhfd2VpZ2h0KAEYV2VpZ2h0AADpBhAsc3RhZ2luZ194Y20IdjQUYXNzZXQsQXNzZXRGaWx0ZXIAAQggRGVmaW5pdGUEALkGARhBc3NldHMAAAAQV2lsZAQA7QYBJFdpbGRBc3NldAABAADtBhAsc3RhZ2luZ194Y20IdjQUYXNzZXQkV2lsZEFzc2V0AAEQDEFsbAAAABRBbGxPZggBCGlkKQEBHEFzc2V0SWQAAQxmdW7xBgE8V2lsZEZ1bmdpYmlsaXR5AAEAKEFsbENvdW50ZWQEANQBDHUzMgACADBBbGxPZkNvdW50ZWQMAQhpZCkBARxBc3NldElkAAEMZnVu8QYBPFdpbGRGdW5naWJpbGl0eQABFGNvdW501AEMdTMyAAMAAPEGECxzdGFnaW5nX3hjbQh2NBRhc3NldDxXaWxkRnVuZ2liaWxpdHkAAQggRnVuZ2libGUAAAAsTm9uRnVuZ2libGUAAQAA9QYIDHhjbTxWZXJzaW9uZWRBc3NldHMAAQwIVjIEAAUGATx2Mjo6TXVsdGlBc3NldHMAAQAIVjMEAFUGATx2Mzo6TXVsdGlBc3NldHMAAwAIVjQEALkGASh2NDo6QXNzZXRzAAQAAPkGCAx4Y20wVmVyc2lvbmVkWGNtBCxSdW50aW1lQ2FsbAABDAhWMgQA/QYBUHYyOjpYY208UnVudGltZUNhbGw+AAIACFYzBAANBwFQdjM6OlhjbTxSdW50aW1lQ2FsbD4AAwAIVjQEABkHAVB2NDo6WGNtPFJ1bnRpbWVDYWxsPgAEAAD9BgwMeGNtCHYyDFhjbQQsUnVudGltZUNhbGwAAAQAAQcBdFZlYzxJbnN0cnVjdGlvbjxSdW50aW1lQ2FsbD4+AAABBwAAAgUHAAUHDAx4Y20IdjIsSW5zdHJ1Y3Rpb24ELFJ1bnRpbWVDYWxsAAFwNFdpdGhkcmF3QXNzZXQEAAUGASxNdWx0aUFzc2V0cwAAAFRSZXNlcnZlQXNzZXREZXBvc2l0ZWQEAAUGASxNdWx0aUFzc2V0cwABAFhSZWNlaXZlVGVsZXBvcnRlZEFzc2V0BAAFBgEsTXVsdGlBc3NldHMAAgA0UXVlcnlSZXNwb25zZQwBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABIHJlc3BvbnNlIQYBIFJlc3BvbnNlAAEobWF4X3dlaWdodCwBDHU2NAADADRUcmFuc2ZlckFzc2V0CAEYYXNzZXRzBQYBLE11bHRpQXNzZXRzAAEsYmVuZWZpY2lhcnkxAQE0TXVsdGlMb2NhdGlvbgAEAFBUcmFuc2ZlclJlc2VydmVBc3NldAwBGGFzc2V0cwUGASxNdWx0aUFzc2V0cwABEGRlc3QxAQE0TXVsdGlMb2NhdGlvbgABDHhjbfkFARxYY208KCk+AAUAIFRyYW5zYWN0DAEsb3JpZ2luX3R5cGUxBgEoT3JpZ2luS2luZAABWHJlcXVpcmVfd2VpZ2h0X2F0X21vc3QsAQx1NjQAARBjYWxsCQcBaERvdWJsZUVuY29kZWQ8UnVudGltZUNhbGw+AAYAZEhybXBOZXdDaGFubmVsT3BlblJlcXVlc3QMARhzZW5kZXLUAQx1MzIAAUBtYXhfbWVzc2FnZV9zaXpl1AEMdTMyAAEwbWF4X2NhcGFjaXR51AEMdTMyAAcATEhybXBDaGFubmVsQWNjZXB0ZWQEASRyZWNpcGllbnTUAQx1MzIACABISHJtcENoYW5uZWxDbG9zaW5nDAEkaW5pdGlhdG9y1AEMdTMyAAEYc2VuZGVy1AEMdTMyAAEkcmVjaXBpZW501AEMdTMyAAkALENsZWFyT3JpZ2luAAoANERlc2NlbmRPcmlnaW4EADUBAVRJbnRlcmlvck11bHRpTG9jYXRpb24ACwAsUmVwb3J0RXJyb3IMASBxdWVyeV9pZCwBHFF1ZXJ5SWQAARBkZXN0MQEBNE11bHRpTG9jYXRpb24AAUxtYXhfcmVzcG9uc2Vfd2VpZ2h0LAEMdTY0AAwAMERlcG9zaXRBc3NldAwBGGFzc2V0czkGAUBNdWx0aUFzc2V0RmlsdGVyAAEobWF4X2Fzc2V0c9QBDHUzMgABLGJlbmVmaWNpYXJ5MQEBNE11bHRpTG9jYXRpb24ADQBMRGVwb3NpdFJlc2VydmVBc3NldBABGGFzc2V0czkGAUBNdWx0aUFzc2V0RmlsdGVyAAEobWF4X2Fzc2V0c9QBDHUzMgABEGRlc3QxAQE0TXVsdGlMb2NhdGlvbgABDHhjbfkFARxYY208KCk+AA4ANEV4Y2hhbmdlQXNzZXQIARBnaXZlOQYBQE11bHRpQXNzZXRGaWx0ZXIAARxyZWNlaXZlBQYBLE11bHRpQXNzZXRzAA8AXEluaXRpYXRlUmVzZXJ2ZVdpdGhkcmF3DAEYYXNzZXRzOQYBQE11bHRpQXNzZXRGaWx0ZXIAARxyZXNlcnZlMQEBNE11bHRpTG9jYXRpb24AAQx4Y235BQEcWGNtPCgpPgAQAEBJbml0aWF0ZVRlbGVwb3J0DAEYYXNzZXRzOQYBQE11bHRpQXNzZXRGaWx0ZXIAARBkZXN0MQEBNE11bHRpTG9jYXRpb24AAQx4Y235BQEcWGNtPCgpPgARADBRdWVyeUhvbGRpbmcQASBxdWVyeV9pZCwBHFF1ZXJ5SWQAARBkZXN0MQEBNE11bHRpTG9jYXRpb24AARhhc3NldHM5BgFATXVsdGlBc3NldEZpbHRlcgABTG1heF9yZXNwb25zZV93ZWlnaHQsAQx1NjQAEgAwQnV5RXhlY3V0aW9uCAEQZmVlcw0GAShNdWx0aUFzc2V0AAEwd2VpZ2h0X2xpbWl0RQYBLFdlaWdodExpbWl0ABMANFJlZnVuZFN1cnBsdXMAFAA8U2V0RXJyb3JIYW5kbGVyBAD9BgFAWGNtPFJ1bnRpbWVDYWxsPgAVACxTZXRBcHBlbmRpeAQA/QYBQFhjbTxSdW50aW1lQ2FsbD4AFgAoQ2xlYXJFcnJvcgAXAChDbGFpbUFzc2V0CAEYYXNzZXRzBQYBLE11bHRpQXNzZXRzAAEYdGlja2V0MQEBNE11bHRpTG9jYXRpb24AGAAQVHJhcAQALAEMdTY0ABkAQFN1YnNjcmliZVZlcnNpb24IASBxdWVyeV9pZCwBHFF1ZXJ5SWQAAUxtYXhfcmVzcG9uc2Vfd2VpZ2h0LAEMdTY0ABoASFVuc3Vic2NyaWJlVmVyc2lvbgAbAAAJBwwMeGNtOGRvdWJsZV9lbmNvZGVkNERvdWJsZUVuY29kZWQEBFQAAAQBHGVuY29kZWQ4ARxWZWM8dTg+AAANBwwMeGNtCHYzDFhjbQQQQ2FsbAAABAARBwFYVmVjPEluc3RydWN0aW9uPENhbGw+PgAAEQcAAAIVBwAVBwwMeGNtCHYzLEluc3RydWN0aW9uBBBDYWxsAAHANFdpdGhkcmF3QXNzZXQEAFUGASxNdWx0aUFzc2V0cwAAAFRSZXNlcnZlQXNzZXREZXBvc2l0ZWQEAFUGASxNdWx0aUFzc2V0cwABAFhSZWNlaXZlVGVsZXBvcnRlZEFzc2V0BABVBgEsTXVsdGlBc3NldHMAAgA0UXVlcnlSZXNwb25zZRABIHF1ZXJ5X2lkLAEcUXVlcnlJZAABIHJlc3BvbnNlaQYBIFJlc3BvbnNlAAEobWF4X3dlaWdodCgBGFdlaWdodAABHHF1ZXJpZXKRBgFUT3B0aW9uPE11bHRpTG9jYXRpb24+AAMANFRyYW5zZmVyQXNzZXQIARhhc3NldHNVBgEsTXVsdGlBc3NldHMAASxiZW5lZmljaWFyecgBNE11bHRpTG9jYXRpb24ABABQVHJhbnNmZXJSZXNlcnZlQXNzZXQMARhhc3NldHNVBgEsTXVsdGlBc3NldHMAARBkZXN0yAE0TXVsdGlMb2NhdGlvbgABDHhjbUkGARxYY208KCk+AAUAIFRyYW5zYWN0DAEsb3JpZ2luX2tpbmSVBgEoT3JpZ2luS2luZAABWHJlcXVpcmVfd2VpZ2h0X2F0X21vc3QoARhXZWlnaHQAARBjYWxsCQcBTERvdWJsZUVuY29kZWQ8Q2FsbD4ABgBkSHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdAwBGHNlbmRlctQBDHUzMgABQG1heF9tZXNzYWdlX3NpemXUAQx1MzIAATBtYXhfY2FwYWNpdHnUAQx1MzIABwBMSHJtcENoYW5uZWxBY2NlcHRlZAQBJHJlY2lwaWVudNQBDHUzMgAIAEhIcm1wQ2hhbm5lbENsb3NpbmcMASRpbml0aWF0b3LUAQx1MzIAARhzZW5kZXLUAQx1MzIAASRyZWNpcGllbnTUAQx1MzIACQAsQ2xlYXJPcmlnaW4ACgA0RGVzY2VuZE9yaWdpbgQAzAFUSW50ZXJpb3JNdWx0aUxvY2F0aW9uAAsALFJlcG9ydEVycm9yBACZBgFEUXVlcnlSZXNwb25zZUluZm8ADAAwRGVwb3NpdEFzc2V0CAEYYXNzZXRznQYBQE11bHRpQXNzZXRGaWx0ZXIAASxiZW5lZmljaWFyecgBNE11bHRpTG9jYXRpb24ADQBMRGVwb3NpdFJlc2VydmVBc3NldAwBGGFzc2V0c50GAUBNdWx0aUFzc2V0RmlsdGVyAAEQZGVzdMgBNE11bHRpTG9jYXRpb24AAQx4Y21JBgEcWGNtPCgpPgAOADRFeGNoYW5nZUFzc2V0DAEQZ2l2ZZ0GAUBNdWx0aUFzc2V0RmlsdGVyAAEQd2FudFUGASxNdWx0aUFzc2V0cwABHG1heGltYWwgARBib29sAA8AXEluaXRpYXRlUmVzZXJ2ZVdpdGhkcmF3DAEYYXNzZXRznQYBQE11bHRpQXNzZXRGaWx0ZXIAARxyZXNlcnZlyAE0TXVsdGlMb2NhdGlvbgABDHhjbUkGARxYY208KCk+ABAAQEluaXRpYXRlVGVsZXBvcnQMARhhc3NldHOdBgFATXVsdGlBc3NldEZpbHRlcgABEGRlc3TIATRNdWx0aUxvY2F0aW9uAAEMeGNtSQYBHFhjbTwoKT4AEQA0UmVwb3J0SG9sZGluZwgBNHJlc3BvbnNlX2luZm+ZBgFEUXVlcnlSZXNwb25zZUluZm8AARhhc3NldHOdBgFATXVsdGlBc3NldEZpbHRlcgASADBCdXlFeGVjdXRpb24IARBmZWVzXQYBKE11bHRpQXNzZXQAATB3ZWlnaHRfbGltaXSpBgEsV2VpZ2h0TGltaXQAEwA0UmVmdW5kU3VycGx1cwAUADxTZXRFcnJvckhhbmRsZXIEAA0HASRYY208Q2FsbD4AFQAsU2V0QXBwZW5kaXgEAA0HASRYY208Q2FsbD4AFgAoQ2xlYXJFcnJvcgAXAChDbGFpbUFzc2V0CAEYYXNzZXRzVQYBLE11bHRpQXNzZXRzAAEYdGlja2V0yAE0TXVsdGlMb2NhdGlvbgAYABBUcmFwBAAsAQx1NjQAGQBAU3Vic2NyaWJlVmVyc2lvbggBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABTG1heF9yZXNwb25zZV93ZWlnaHQoARhXZWlnaHQAGgBIVW5zdWJzY3JpYmVWZXJzaW9uABsAJEJ1cm5Bc3NldAQAVQYBLE11bHRpQXNzZXRzABwALEV4cGVjdEFzc2V0BABVBgEsTXVsdGlBc3NldHMAHQAwRXhwZWN0T3JpZ2luBACRBgFUT3B0aW9uPE11bHRpTG9jYXRpb24+AB4ALEV4cGVjdEVycm9yBABtBgFQT3B0aW9uPCh1MzIsIEVycm9yKT4AHwBQRXhwZWN0VHJhbnNhY3RTdGF0dXMEAIkGAThNYXliZUVycm9yQ29kZQAgACxRdWVyeVBhbGxldAgBLG1vZHVsZV9uYW1lOAEcVmVjPHU4PgABNHJlc3BvbnNlX2luZm+ZBgFEUXVlcnlSZXNwb25zZUluZm8AIQAwRXhwZWN0UGFsbGV0FAEUaW5kZXjUAQx1MzIAARBuYW1lOAEcVmVjPHU4PgABLG1vZHVsZV9uYW1lOAEcVmVjPHU4PgABLGNyYXRlX21ham9y1AEMdTMyAAE8bWluX2NyYXRlX21pbm9y1AEMdTMyACIAUFJlcG9ydFRyYW5zYWN0U3RhdHVzBACZBgFEUXVlcnlSZXNwb25zZUluZm8AIwBMQ2xlYXJUcmFuc2FjdFN0YXR1cwAkADxVbml2ZXJzYWxPcmlnaW4EANABIEp1bmN0aW9uACUANEV4cG9ydE1lc3NhZ2UMARxuZXR3b3Jr3AEkTmV0d29ya0lkAAEsZGVzdGluYXRpb27MAVRJbnRlcmlvck11bHRpTG9jYXRpb24AAQx4Y21JBgEcWGNtPCgpPgAmACRMb2NrQXNzZXQIARRhc3NldF0GAShNdWx0aUFzc2V0AAEgdW5sb2NrZXLIATRNdWx0aUxvY2F0aW9uACcALFVubG9ja0Fzc2V0CAEUYXNzZXRdBgEoTXVsdGlBc3NldAABGHRhcmdldMgBNE11bHRpTG9jYXRpb24AKAA4Tm90ZVVubG9ja2FibGUIARRhc3NldF0GAShNdWx0aUFzc2V0AAEUb3duZXLIATRNdWx0aUxvY2F0aW9uACkANFJlcXVlc3RVbmxvY2sIARRhc3NldF0GAShNdWx0aUFzc2V0AAEYbG9ja2VyyAE0TXVsdGlMb2NhdGlvbgAqACxTZXRGZWVzTW9kZQQBMGppdF93aXRoZHJhdyABEGJvb2wAKwAgU2V0VG9waWMEAAQBIFt1ODsgMzJdACwAKENsZWFyVG9waWMALQAsQWxpYXNPcmlnaW4EAMgBNE11bHRpTG9jYXRpb24ALgA8VW5wYWlkRXhlY3V0aW9uCAEwd2VpZ2h0X2xpbWl0qQYBLFdlaWdodExpbWl0AAEwY2hlY2tfb3JpZ2lukQYBVE9wdGlvbjxNdWx0aUxvY2F0aW9uPgAvAAAZBwwsc3RhZ2luZ194Y20IdjQMWGNtBBBDYWxsAAAEAB0HAVhWZWM8SW5zdHJ1Y3Rpb248Q2FsbD4+AAAdBwAAAiEHACEHDCxzdGFnaW5nX3hjbQh2NCxJbnN0cnVjdGlvbgQQQ2FsbAABwDRXaXRoZHJhd0Fzc2V0BAC5BgEYQXNzZXRzAAAAVFJlc2VydmVBc3NldERlcG9zaXRlZAQAuQYBGEFzc2V0cwABAFhSZWNlaXZlVGVsZXBvcnRlZEFzc2V0BAC5BgEYQXNzZXRzAAIANFF1ZXJ5UmVzcG9uc2UQASBxdWVyeV9pZCwBHFF1ZXJ5SWQAASByZXNwb25zZc0GASBSZXNwb25zZQABKG1heF93ZWlnaHQoARhXZWlnaHQAARxxdWVyaWVy4QYBQE9wdGlvbjxMb2NhdGlvbj4AAwA0VHJhbnNmZXJBc3NldAgBGGFzc2V0c7kGARhBc3NldHMAASxiZW5lZmljaWFyefQBIExvY2F0aW9uAAQAUFRyYW5zZmVyUmVzZXJ2ZUFzc2V0DAEYYXNzZXRzuQYBGEFzc2V0cwABEGRlc3T0ASBMb2NhdGlvbgABDHhjba0GARxYY208KCk+AAUAIFRyYW5zYWN0DAEsb3JpZ2luX2tpbmSVBgEoT3JpZ2luS2luZAABWHJlcXVpcmVfd2VpZ2h0X2F0X21vc3QoARhXZWlnaHQAARBjYWxsCQcBTERvdWJsZUVuY29kZWQ8Q2FsbD4ABgBkSHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdAwBGHNlbmRlctQBDHUzMgABQG1heF9tZXNzYWdlX3NpemXUAQx1MzIAATBtYXhfY2FwYWNpdHnUAQx1MzIABwBMSHJtcENoYW5uZWxBY2NlcHRlZAQBJHJlY2lwaWVudNQBDHUzMgAIAEhIcm1wQ2hhbm5lbENsb3NpbmcMASRpbml0aWF0b3LUAQx1MzIAARhzZW5kZXLUAQx1MzIAASRyZWNpcGllbnTUAQx1MzIACQAsQ2xlYXJPcmlnaW4ACgA0RGVzY2VuZE9yaWdpbgQA+AFASW50ZXJpb3JMb2NhdGlvbgALACxSZXBvcnRFcnJvcgQA5QYBRFF1ZXJ5UmVzcG9uc2VJbmZvAAwAMERlcG9zaXRBc3NldAgBGGFzc2V0c+kGASxBc3NldEZpbHRlcgABLGJlbmVmaWNpYXJ59AEgTG9jYXRpb24ADQBMRGVwb3NpdFJlc2VydmVBc3NldAwBGGFzc2V0c+kGASxBc3NldEZpbHRlcgABEGRlc3T0ASBMb2NhdGlvbgABDHhjba0GARxYY208KCk+AA4ANEV4Y2hhbmdlQXNzZXQMARBnaXZl6QYBLEFzc2V0RmlsdGVyAAEQd2FudLkGARhBc3NldHMAARxtYXhpbWFsIAEQYm9vbAAPAFxJbml0aWF0ZVJlc2VydmVXaXRoZHJhdwwBGGFzc2V0c+kGASxBc3NldEZpbHRlcgABHHJlc2VydmX0ASBMb2NhdGlvbgABDHhjba0GARxYY208KCk+ABAAQEluaXRpYXRlVGVsZXBvcnQMARhhc3NldHPpBgEsQXNzZXRGaWx0ZXIAARBkZXN09AEgTG9jYXRpb24AAQx4Y22tBgEcWGNtPCgpPgARADRSZXBvcnRIb2xkaW5nCAE0cmVzcG9uc2VfaW5mb+UGAURRdWVyeVJlc3BvbnNlSW5mbwABGGFzc2V0c+kGASxBc3NldEZpbHRlcgASADBCdXlFeGVjdXRpb24IARBmZWVzwQYBFEFzc2V0AAEwd2VpZ2h0X2xpbWl0qQYBLFdlaWdodExpbWl0ABMANFJlZnVuZFN1cnBsdXMAFAA8U2V0RXJyb3JIYW5kbGVyBAAZBwEkWGNtPENhbGw+ABUALFNldEFwcGVuZGl4BAAZBwEkWGNtPENhbGw+ABYAKENsZWFyRXJyb3IAFwAoQ2xhaW1Bc3NldAgBGGFzc2V0c7kGARhBc3NldHMAARh0aWNrZXT0ASBMb2NhdGlvbgAYABBUcmFwBAAsAQx1NjQAGQBAU3Vic2NyaWJlVmVyc2lvbggBIHF1ZXJ5X2lkLAEcUXVlcnlJZAABTG1heF9yZXNwb25zZV93ZWlnaHQoARhXZWlnaHQAGgBIVW5zdWJzY3JpYmVWZXJzaW9uABsAJEJ1cm5Bc3NldAQAuQYBGEFzc2V0cwAcACxFeHBlY3RBc3NldAQAuQYBGEFzc2V0cwAdADBFeHBlY3RPcmlnaW4EAOEGAUBPcHRpb248TG9jYXRpb24+AB4ALEV4cGVjdEVycm9yBABtBgFQT3B0aW9uPCh1MzIsIEVycm9yKT4AHwBQRXhwZWN0VHJhbnNhY3RTdGF0dXMEAIkGAThNYXliZUVycm9yQ29kZQAgACxRdWVyeVBhbGxldAgBLG1vZHVsZV9uYW1lOAEcVmVjPHU4PgABNHJlc3BvbnNlX2luZm/lBgFEUXVlcnlSZXNwb25zZUluZm8AIQAwRXhwZWN0UGFsbGV0FAEUaW5kZXjUAQx1MzIAARBuYW1lOAEcVmVjPHU4PgABLG1vZHVsZV9uYW1lOAEcVmVjPHU4PgABLGNyYXRlX21ham9y1AEMdTMyAAE8bWluX2NyYXRlX21pbm9y1AEMdTMyACIAUFJlcG9ydFRyYW5zYWN0U3RhdHVzBADlBgFEUXVlcnlSZXNwb25zZUluZm8AIwBMQ2xlYXJUcmFuc2FjdFN0YXR1cwAkADxVbml2ZXJzYWxPcmlnaW4EAAEBASBKdW5jdGlvbgAlADRFeHBvcnRNZXNzYWdlDAEcbmV0d29yawkBASROZXR3b3JrSWQAASxkZXN0aW5hdGlvbvgBQEludGVyaW9yTG9jYXRpb24AAQx4Y22tBgEcWGNtPCgpPgAmACRMb2NrQXNzZXQIARRhc3NldMEGARRBc3NldAABIHVubG9ja2Vy9AEgTG9jYXRpb24AJwAsVW5sb2NrQXNzZXQIARRhc3NldMEGARRBc3NldAABGHRhcmdldPQBIExvY2F0aW9uACgAOE5vdGVVbmxvY2thYmxlCAEUYXNzZXTBBgEUQXNzZXQAARRvd25lcvQBIExvY2F0aW9uACkANFJlcXVlc3RVbmxvY2sIARRhc3NldMEGARRBc3NldAABGGxvY2tlcvQBIExvY2F0aW9uACoALFNldEZlZXNNb2RlBAEwaml0X3dpdGhkcmF3IAEQYm9vbAArACBTZXRUb3BpYwQABAEgW3U4OyAzMl0ALAAoQ2xlYXJUb3BpYwAtACxBbGlhc09yaWdpbgQA9AEgTG9jYXRpb24ALgA8VW5wYWlkRXhlY3V0aW9uCAEwd2VpZ2h0X2xpbWl0qQYBLFdlaWdodExpbWl0AAEwY2hlY2tfb3JpZ2lu4QYBQE9wdGlvbjxMb2NhdGlvbj4ALwAAJQcQUHN0YWdpbmdfeGNtX2V4ZWN1dG9yGHRyYWl0czhhc3NldF90cmFuc2ZlcjBUcmFuc2ZlclR5cGUAARAgVGVsZXBvcnQAAAAwTG9jYWxSZXNlcnZlAAEASERlc3RpbmF0aW9uUmVzZXJ2ZQACADRSZW1vdGVSZXNlcnZlBAAtAQFEVmVyc2lvbmVkTG9jYXRpb24AAwAAKQcIDHhjbUBWZXJzaW9uZWRBc3NldElkAAEICFYzBADwASx2Mzo6QXNzZXRJZAADAAhWNAQAKQEBLHY0OjpBc3NldElkAAQAAC0HDFBwYWxsZXRfbWVzc2FnZV9xdWV1ZRhwYWxsZXQQQ2FsbAQEVAABCCRyZWFwX3BhZ2UIAThtZXNzYWdlX29yaWdpbjEHAUhNZXNzYWdlT3JpZ2luT2Y8VD4AAShwYWdlX2luZGV4EAEkUGFnZUluZGV4AAAEPQFSZW1vdmUgYSBwYWdlIHdoaWNoIGhhcyBubyBtb3JlIG1lc3NhZ2VzIHJlbWFpbmluZyB0byBiZSBwcm9jZXNzZWQgb3IgaXMgc3RhbGUuSGV4ZWN1dGVfb3ZlcndlaWdodBABOG1lc3NhZ2Vfb3JpZ2luMQcBSE1lc3NhZ2VPcmlnaW5PZjxUPgABEHBhZ2UQASRQYWdlSW5kZXgAARRpbmRleBABHFQ6OlNpemUAATB3ZWlnaHRfbGltaXQoARhXZWlnaHQAATR4RXhlY3V0ZSBhbiBvdmVyd2VpZ2h0IG1lc3NhZ2UuAE0BVGVtcG9yYXJ5IHByb2Nlc3NpbmcgZXJyb3JzIHdpbGwgYmUgcHJvcGFnYXRlZCB3aGVyZWFzIHBlcm1hbmVudCBlcnJvcnMgYXJlIHRyZWF0ZWRUYXMgc3VjY2VzcyBjb25kaXRpb24uAHQtIGBvcmlnaW5gOiBNdXN0IGJlIGBTaWduZWRgLjUBLSBgbWVzc2FnZV9vcmlnaW5gOiBUaGUgb3JpZ2luIGZyb20gd2hpY2ggdGhlIG1lc3NhZ2UgdG8gYmUgZXhlY3V0ZWQgYXJyaXZlZC49AS0gYHBhZ2VgOiBUaGUgcGFnZSBpbiB0aGUgcXVldWUgaW4gd2hpY2ggdGhlIG1lc3NhZ2UgdG8gYmUgZXhlY3V0ZWQgaXMgc2l0dGluZy4JAS0gYGluZGV4YDogVGhlIGluZGV4IGludG8gdGhlIHF1ZXVlIG9mIHRoZSBtZXNzYWdlIHRvIGJlIGV4ZWN1dGVkLlkBLSBgd2VpZ2h0X2xpbWl0YDogVGhlIG1heGltdW0gYW1vdW50IG9mIHdlaWdodCBhbGxvd2VkIHRvIGJlIGNvbnN1bWVkIGluIHRoZSBleGVjdXRpb25EICBvZiB0aGUgbWVzc2FnZS4A9EJlbmNobWFyayBjb21wbGV4aXR5IGNvbnNpZGVyYXRpb25zOiBPKGluZGV4ICsgd2VpZ2h0X2xpbWl0KS4EDQFDb250YWlucyBhIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSBleHRyaW5zaWMgdGhhdCB0aGlzIHBhbGxldCBoYXMuMQcMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRpbmNsdXNpb25YQWdncmVnYXRlTWVzc2FnZU9yaWdpbgABBAxVbXAEADUHAShVbXBRdWV1ZUlkAAAAADUHDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkaW5jbHVzaW9uKFVtcFF1ZXVlSWQAAQQQUGFyYQQAaQIBGFBhcmFJZAAAAAA5BwxEcGFsbGV0X2Fzc2V0X3JhdGUYcGFsbGV0EENhbGwEBFQAAQwYY3JlYXRlCAEoYXNzZXRfa2luZMQBREJveDxUOjpBc3NldEtpbmQ+AAEQcmF0ZT0HASRGaXhlZFUxMjgAABANAUluaXRpYWxpemUgYSBjb252ZXJzaW9uIHJhdGUgdG8gbmF0aXZlIGJhbGFuY2UgZm9yIHRoZSBnaXZlbiBhc3NldC4ANCMjIENvbXBsZXhpdHkYLSBPKDEpGHVwZGF0ZQgBKGFzc2V0X2tpbmTEAURCb3g8VDo6QXNzZXRLaW5kPgABEHJhdGU9BwEkRml4ZWRVMTI4AAEQBQFVcGRhdGUgdGhlIGNvbnZlcnNpb24gcmF0ZSB0byBuYXRpdmUgYmFsYW5jZSBmb3IgdGhlIGdpdmVuIGFzc2V0LgA0IyMgQ29tcGxleGl0eRgtIE8oMSkYcmVtb3ZlBAEoYXNzZXRfa2luZMQBREJveDxUOjpBc3NldEtpbmQ+AAIQJQFSZW1vdmUgYW4gZXhpc3RpbmcgY29udmVyc2lvbiByYXRlIHRvIG5hdGl2ZSBiYWxhbmNlIGZvciB0aGUgZ2l2ZW4gYXNzZXQuADQjIyBDb21wbGV4aXR5GC0gTygxKQQNAUNvbnRhaW5zIGEgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIGV4dHJpbnNpYyB0aGF0IHRoaXMgcGFsbGV0IGhhcy49Bww0c3BfYXJpdGhtZXRpYyxmaXhlZF9wb2ludCRGaXhlZFUxMjgAAAQAGAEQdTEyOAAAQQcMMHBhbGxldF9iZWVmeRhwYWxsZXQQQ2FsbAQEVAABHFByZXBvcnRfZG91YmxlX3ZvdGluZwgBSGVxdWl2b2NhdGlvbl9wcm9vZkUHAY0BQm94PERvdWJsZVZvdGluZ1Byb29mPEJsb2NrTnVtYmVyRm9yPFQ+LCBUOjpCZWVmeUlkLDxUOjpCZWVmeUlkCmFzIFJ1bnRpbWVBcHBQdWJsaWM+OjpTaWduYXR1cmUsPiw+AAE8a2V5X293bmVyX3Byb29mjQEBQFQ6OktleU93bmVyUHJvb2YAABAJAVJlcG9ydCB2b3RlciBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5IHRoZfRlcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29m+GFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci4gSWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlRHdpbGwgYmUgcmVwb3J0ZWQudHJlcG9ydF9kb3VibGVfdm90aW5nX3Vuc2lnbmVkCAFIZXF1aXZvY2F0aW9uX3Byb29mRQcBjQFCb3g8RG91YmxlVm90aW5nUHJvb2Y8QmxvY2tOdW1iZXJGb3I8VD4sIFQ6OkJlZWZ5SWQsPFQ6OkJlZWZ5SWQKYXMgUnVudGltZUFwcFB1YmxpYz46OlNpZ25hdHVyZSw+LD4AATxrZXlfb3duZXJfcHJvb2aNAQFAVDo6S2V5T3duZXJQcm9vZgABJAkBUmVwb3J0IHZvdGVyIGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhl9GVxdWl2b2NhdGlvbiBwcm9vZiBhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2b4YWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2VEd2lsbCBiZSByZXBvcnRlZC4ADQFUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx5FQFibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2gVAWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbiRyZXBvcnRlci48c2V0X25ld19nZW5lc2lzBAE8ZGVsYXlfaW5fYmxvY2tzEAFEQmxvY2tOdW1iZXJGb3I8VD4AAhBdAVJlc2V0IEJFRUZZIGNvbnNlbnN1cyBieSBzZXR0aW5nIGEgbmV3IEJFRUZZIGdlbmVzaXMgYXQgYGRlbGF5X2luX2Jsb2Nrc2AgYmxvY2tzIGluIHRoZRxmdXR1cmUuALROb3RlOiBgZGVsYXlfaW5fYmxvY2tzYCBoYXMgdG8gYmUgYXQgbGVhc3QgMS5IcmVwb3J0X2Zvcmtfdm90aW5nCAFIZXF1aXZvY2F0aW9uX3Byb29mZQcBrQFCb3g8Rm9ya1ZvdGluZ1Byb29mPEhlYWRlckZvcjxUPiwgVDo6QmVlZnlJZCw8VDo6QW5jZXN0cnlIZWxwZXIKYXMgQW5jZXN0cnlIZWxwZXI8SGVhZGVyRm9yPFQ+Pj46OlByb29mLD4sPgABPGtleV9vd25lcl9wcm9vZo0BAUBUOjpLZXlPd25lclByb29mAAMMPQFSZXBvcnQgZm9yayB2b3RpbmcgZXF1aXZvY2F0aW9uLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeSB0aGUgZXF1aXZvY2F0aW9uIHByb29mKQFhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2YgYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLsBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbCBiZSByZXBvcnRlZC5scmVwb3J0X2Zvcmtfdm90aW5nX3Vuc2lnbmVkCAFIZXF1aXZvY2F0aW9uX3Byb29mZQcBrQFCb3g8Rm9ya1ZvdGluZ1Byb29mPEhlYWRlckZvcjxUPiwgVDo6QmVlZnlJZCw8VDo6QW5jZXN0cnlIZWxwZXIKYXMgQW5jZXN0cnlIZWxwZXI8SGVhZGVyRm9yPFQ+Pj46OlByb29mLD4sPgABPGtleV9vd25lcl9wcm9vZo0BAUBUOjpLZXlPd25lclByb29mAAQgPQFSZXBvcnQgZm9yayB2b3RpbmcgZXF1aXZvY2F0aW9uLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeSB0aGUgZXF1aXZvY2F0aW9uIHByb29mKQFhbmQgdmFsaWRhdGUgdGhlIGdpdmVuIGtleSBvd25lcnNoaXAgcHJvb2YgYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLsBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbCBiZSByZXBvcnRlZC4ADQFUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx5FQFibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2gVAWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbiRyZXBvcnRlci5ocmVwb3J0X2Z1dHVyZV9ibG9ja192b3RpbmcIAUhlcXVpdm9jYXRpb25fcHJvb2Z1BwHoQm94PEZ1dHVyZUJsb2NrVm90aW5nUHJvb2Y8QmxvY2tOdW1iZXJGb3I8VD4sIFQ6OkJlZWZ5SWQ+PgABPGtleV9vd25lcl9wcm9vZo0BAUBUOjpLZXlPd25lclByb29mAAUMXQFSZXBvcnQgZnV0dXJlIGJsb2NrIHZvdGluZyBlcXVpdm9jYXRpb24uIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5IHRoZSBlcXVpdm9jYXRpb24gcHJvb2YpAWFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZiBhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuwElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZSB3aWxsIGJlIHJlcG9ydGVkLoxyZXBvcnRfZnV0dXJlX2Jsb2NrX3ZvdGluZ191bnNpZ25lZAgBSGVxdWl2b2NhdGlvbl9wcm9vZnUHAehCb3g8RnV0dXJlQmxvY2tWb3RpbmdQcm9vZjxCbG9ja051bWJlckZvcjxUPiwgVDo6QmVlZnlJZD4+AAE8a2V5X293bmVyX3Byb29mjQEBQFQ6OktleU93bmVyUHJvb2YABiBdAVJlcG9ydCBmdXR1cmUgYmxvY2sgdm90aW5nIGVxdWl2b2NhdGlvbi4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhlIGVxdWl2b2NhdGlvbiBwcm9vZikBYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29mIGFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci7ASWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlIHdpbGwgYmUgcmVwb3J0ZWQuAA0BVGhpcyBleHRyaW5zaWMgbXVzdCBiZSBjYWxsZWQgdW5zaWduZWQgYW5kIGl0IGlzIGV4cGVjdGVkIHRoYXQgb25seRUBYmxvY2sgYXV0aG9ycyB3aWxsIGNhbGwgaXQgKHZhbGlkYXRlZCBpbiBgVmFsaWRhdGVVbnNpZ25lZGApLCBhcyBzdWNoFQFpZiB0aGUgYmxvY2sgYXV0aG9yIGlzIGRlZmluZWQgaXQgd2lsbCBiZSBkZWZpbmVkIGFzIHRoZSBlcXVpdm9jYXRpb24kcmVwb3J0ZXIuBA0BQ29udGFpbnMgYSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgZXh0cmluc2ljIHRoYXQgdGhpcyBwYWxsZXQgaGFzLkUHCEhzcF9jb25zZW5zdXNfYmVlZnlERG91YmxlVm90aW5nUHJvb2YMGE51bWJlcgEQCElkAQ0CJFNpZ25hdHVyZQFJBwAIARRmaXJzdE0HAYhWb3RlTWVzc2FnZTxOdW1iZXIsIElkLCBTaWduYXR1cmU+AAEYc2Vjb25kTQcBiFZvdGVNZXNzYWdlPE51bWJlciwgSWQsIFNpZ25hdHVyZT4AAEkHDEhzcF9jb25zZW5zdXNfYmVlZnkwZWNkc2FfY3J5cHRvJFNpZ25hdHVyZQAABADZAgFAZWNkc2E6OlNpZ25hdHVyZQAATQcISHNwX2NvbnNlbnN1c19iZWVmeSxWb3RlTWVzc2FnZQwYTnVtYmVyARAISWQBDQIkU2lnbmF0dXJlAUkHAAwBKGNvbW1pdG1lbnRRBwFIQ29tbWl0bWVudDxOdW1iZXI+AAEIaWQNAgEISWQAASRzaWduYXR1cmVJBwEkU2lnbmF0dXJlAABRBwxIc3BfY29uc2Vuc3VzX2JlZWZ5KGNvbW1pdG1lbnQoQ29tbWl0bWVudAQwVEJsb2NrTnVtYmVyARAADAEccGF5bG9hZFUHARxQYXlsb2FkAAEwYmxvY2tfbnVtYmVyEAEwVEJsb2NrTnVtYmVyAAFAdmFsaWRhdG9yX3NldF9pZDABOFZhbGlkYXRvclNldElkAABVBwxIc3BfY29uc2Vuc3VzX2JlZWZ5HHBheWxvYWQcUGF5bG9hZAAABABZBwF4VmVjPChCZWVmeVBheWxvYWRJZCwgVmVjPHU4Pik+AABZBwAAAl0HAF0HAAAECGEHOABhBwAAAwIAAAAIAGUHCEhzcF9jb25zZW5zdXNfYmVlZnk8Rm9ya1ZvdGluZ1Byb29mDBhIZWFkZXIBgQEISWQBDQI0QW5jZXN0cnlQcm9vZgFpBwAMARB2b3RlTQcBuFZvdGVNZXNzYWdlPEhlYWRlcjo6TnVtYmVyLCBJZCwgSWQ6OlNpZ25hdHVyZT4AAThhbmNlc3RyeV9wcm9vZmkHATRBbmNlc3RyeVByb29mAAEYaGVhZGVygQEBGEhlYWRlcgAAaQcIRHNwX21tcl9wcmltaXRpdmVzNEFuY2VzdHJ5UHJvb2YEEEhhc2gBNAAQAShwcmV2X3BlYWtzMQMBJFZlYzxIYXNoPgABPHByZXZfbGVhZl9jb3VudDABDHU2NAABKGxlYWZfY291bnQwASROb2RlSW5kZXgAARRpdGVtc20HAUBWZWM8KHU2NCwgSGFzaCk+AABtBwAAAnEHAHEHAAAECDA0AHUHCEhzcF9jb25zZW5zdXNfYmVlZnlYRnV0dXJlQmxvY2tWb3RpbmdQcm9vZggYTnVtYmVyARAISWQBDQIABAEQdm90ZU0HAZhWb3RlTWVzc2FnZTxOdW1iZXIsIElkLCBJZDo6U2lnbmF0dXJlPgAAeQcMKHNwX3J1bnRpbWUYdHJhaXRzLEJsYWtlVHdvMjU2AAAAAH0HDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAgQcMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxR0eXBlcxRUYWxseQgUVm90ZXMBGBRUb3RhbAAADAEQYXllcxgBFFZvdGVzAAEQbmF5cxgBFFZvdGVzAAEcc3VwcG9ydBgBFFZvdGVzAACFBwxgcGFsbGV0X3JhbmtlZF9jb2xsZWN0aXZlGHBhbGxldBRFdmVudAgEVAAESQABFCxNZW1iZXJBZGRlZAQBDHdobwABMFQ6OkFjY291bnRJZAAABHhBIG1lbWJlciBgd2hvYCBoYXMgYmVlbiBhZGRlZC4sUmFua0NoYW5nZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARByYW5rXQEBEFJhbmsAAQT0VGhlIG1lbWJlciBgd2hvYHNlIHJhbmsgaGFzIGJlZW4gY2hhbmdlZCB0byB0aGUgZ2l2ZW4gYHJhbmtgLjRNZW1iZXJSZW1vdmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEQcmFua10BARBSYW5rAAIEGQFUaGUgbWVtYmVyIGB3aG9gIG9mIGdpdmVuIGByYW5rYCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIGNvbGxlY3RpdmUuFFZvdGVkEAEMd2hvAAEwVDo6QWNjb3VudElkAAEQcG9sbBABRFBvbGxJbmRleE9mPFQsIEk+AAEQdm90ZYkHAShWb3RlUmVjb3JkAAEUdGFsbHmNBwE0VGFsbHlPZjxULCBJPgADCFUBVGhlIG1lbWJlciBgd2hvYCBoYXMgdm90ZWQgZm9yIHRoZSBgcG9sbGAgd2l0aCB0aGUgZ2l2ZW4gYHZvdGVgIGxlYWRpbmcgdG8gYW4gdXBkYXRlZCBgdGFsbHlgLjxNZW1iZXJFeGNoYW5nZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARxuZXdfd2hvAAEwVDo6QWNjb3VudElkAAQE8FRoZSBtZW1iZXIgYHdob2AgaGFkIHRoZWlyIGBBY2NvdW50SWRgIGNoYW5nZWQgdG8gYG5ld193aG9gLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldIkHCGBwYWxsZXRfcmFua2VkX2NvbGxlY3RpdmUoVm90ZVJlY29yZAABCAxBeWUEABABFFZvdGVzAAAADE5heQQAEAEUVm90ZXMAAQAAjQcIYHBhbGxldF9yYW5rZWRfY29sbGVjdGl2ZRRUYWxseQwEVAAESQAETQAADAEkYmFyZV9heWVzEAEsTWVtYmVySW5kZXgAARBheWVzEAEUVm90ZXMAARBuYXlzEAEUVm90ZXMAAJEHDEBwYWxsZXRfcmVmZXJlbmRhGHBhbGxldBRFdmVudAgEVAAESQABQCRTdWJtaXR0ZWQMARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0cmFja10BATxUcmFja0lkT2Y8VCwgST4EJQFUaGUgdHJhY2sgKGFuZCBieSBleHRlbnNpb24gcHJvcG9zYWwgZGlzcGF0Y2ggb3JpZ2luKSBvZiB0aGlzIHJlZmVyZW5kdW0uASBwcm9wb3NhbGEBAUxCb3VuZGVkQ2FsbE9mPFQsIEk+BIBUaGUgcHJvcG9zYWwgZm9yIHRoZSByZWZlcmVuZHVtLgAEgEEgcmVmZXJlbmR1bSBoYXMgYmVlbiBzdWJtaXR0ZWQuVERlY2lzaW9uRGVwb3NpdFBsYWNlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuAQSUVGhlIGRlY2lzaW9uIGRlcG9zaXQgaGFzIGJlZW4gcGxhY2VkLlxEZWNpc2lvbkRlcG9zaXRSZWZ1bmRlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuAgScVGhlIGRlY2lzaW9uIGRlcG9zaXQgaGFzIGJlZW4gcmVmdW5kZWQuOERlcG9zaXRTbGFzaGVkCAEMd2hvAAEwVDo6QWNjb3VudElkBIxUaGUgYWNjb3VudCB3aG8gcGxhY2VkIHRoZSBkZXBvc2l0LgEYYW1vdW50GAE8QmFsYW5jZU9mPFQsIEk+BIRUaGUgYW1vdW50IHBsYWNlZCBieSB0aGUgYWNjb3VudC4DBGxBIGRlcG9zaXQgaGFzIGJlZW4gc2xhc2hlZC48RGVjaXNpb25TdGFydGVkEAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdHJhY2tdAQE8VHJhY2tJZE9mPFQsIEk+BCUBVGhlIHRyYWNrIChhbmQgYnkgZXh0ZW5zaW9uIHByb3Bvc2FsIGRpc3BhdGNoIG9yaWdpbikgb2YgdGhpcyByZWZlcmVuZHVtLgEgcHJvcG9zYWxhAQFMQm91bmRlZENhbGxPZjxULCBJPgSAVGhlIHByb3Bvc2FsIGZvciB0aGUgcmVmZXJlbmR1bS4BFHRhbGx5jQcBIFQ6OlRhbGx5BLhUaGUgY3VycmVudCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uBAS8QSByZWZlcmVuZHVtIGhhcyBtb3ZlZCBpbnRvIHRoZSBkZWNpZGluZyBwaGFzZS44Q29uZmlybVN0YXJ0ZWQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uBQA4Q29uZmlybUFib3J0ZWQEARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uBgAkQ29uZmlybWVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmNBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uBwQhAUEgcmVmZXJlbmR1bSBoYXMgZW5kZWQgaXRzIGNvbmZpcm1hdGlvbiBwaGFzZSBhbmQgaXMgcmVhZHkgZm9yIGFwcHJvdmFsLiBBcHByb3ZlZAQBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4IBA0BQSByZWZlcmVuZHVtIGhhcyBiZWVuIGFwcHJvdmVkIGFuZCBpdHMgcHJvcG9zYWwgaGFzIGJlZW4gc2NoZWR1bGVkLiBSZWplY3RlZAgBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BFHRhbGx5jQcBIFQ6OlRhbGx5BLBUaGUgZmluYWwgdGFsbHkgb2Ygdm90ZXMgaW4gdGhpcyByZWZlcmVuZHVtLgkErEEgcHJvcG9zYWwgaGFzIGJlZW4gcmVqZWN0ZWQgYnkgcmVmZXJlbmR1bS4gVGltZWRPdXQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARR0YWxseY0HASBUOjpUYWxseQSwVGhlIGZpbmFsIHRhbGx5IG9mIHZvdGVzIGluIHRoaXMgcmVmZXJlbmR1bS4KBNhBIHJlZmVyZW5kdW0gaGFzIGJlZW4gdGltZWQgb3V0IHdpdGhvdXQgYmVpbmcgZGVjaWRlZC4kQ2FuY2VsbGVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmNBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uCwSAQSByZWZlcmVuZHVtIGhhcyBiZWVuIGNhbmNlbGxlZC4YS2lsbGVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEUdGFsbHmNBwEgVDo6VGFsbHkEsFRoZSBmaW5hbCB0YWxseSBvZiB2b3RlcyBpbiB0aGlzIHJlZmVyZW5kdW0uDAR0QSByZWZlcmVuZHVtIGhhcyBiZWVuIGtpbGxlZC5kU3VibWlzc2lvbkRlcG9zaXRSZWZ1bmRlZAwBFGluZGV4EAE8UmVmZXJlbmR1bUluZGV4BGBJbmRleCBvZiB0aGUgcmVmZXJlbmR1bS4BDHdobwABMFQ6OkFjY291bnRJZASMVGhlIGFjY291bnQgd2hvIHBsYWNlZCB0aGUgZGVwb3NpdC4BGGFtb3VudBgBPEJhbGFuY2VPZjxULCBJPgSEVGhlIGFtb3VudCBwbGFjZWQgYnkgdGhlIGFjY291bnQuDQSkVGhlIHN1Ym1pc3Npb24gZGVwb3NpdCBoYXMgYmVlbiByZWZ1bmRlZC4sTWV0YWRhdGFTZXQIARRpbmRleBABPFJlZmVyZW5kdW1JbmRleARgSW5kZXggb2YgdGhlIHJlZmVyZW5kdW0uARBoYXNoNAEcVDo6SGFzaAQ4UHJlaW1hZ2UgaGFzaC4OBJxNZXRhZGF0YSBmb3IgYSByZWZlcmVuZHVtIGhhcyBiZWVuIHNldC48TWV0YWRhdGFDbGVhcmVkCAEUaW5kZXgQATxSZWZlcmVuZHVtSW5kZXgEYEluZGV4IG9mIHRoZSByZWZlcmVuZHVtLgEQaGFzaDQBHFQ6Okhhc2gEOFByZWltYWdlIGhhc2guDwSsTWV0YWRhdGEgZm9yIGEgcmVmZXJlbmR1bSBoYXMgYmVlbiBjbGVhcmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldJUHDEBwYWxsZXRfd2hpdGVsaXN0GHBhbGxldBRFdmVudAQEVAABDDxDYWxsV2hpdGVsaXN0ZWQEASRjYWxsX2hhc2g0ARxUOjpIYXNoAAAAWFdoaXRlbGlzdGVkQ2FsbFJlbW92ZWQEASRjYWxsX2hhc2g0ARxUOjpIYXNoAAEAZFdoaXRlbGlzdGVkQ2FsbERpc3BhdGNoZWQIASRjYWxsX2hhc2g0ARxUOjpIYXNoAAEYcmVzdWx0mQcBaERpc3BhdGNoUmVzdWx0V2l0aFBvc3RJbmZvAAIABHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0mQcEGFJlc3VsdAgEVAGdBwRFAaUHAQgIT2sEAJ0HAAAAAAxFcnIEAKUHAAABAACdBww0ZnJhbWVfc3VwcG9ydCBkaXNwYXRjaEBQb3N0RGlzcGF0Y2hJbmZvAAAIATRhY3R1YWxfd2VpZ2h0oQcBOE9wdGlvbjxXZWlnaHQ+AAEgcGF5c19mZWVkARBQYXlzAAChBwQYT3B0aW9uBARUASgBCBBOb25lAAAAEFNvbWUEACgAAAEAAKUHCChzcF9ydW50aW1lZERpc3BhdGNoRXJyb3JXaXRoUG9zdEluZm8EEEluZm8BnQcACAEkcG9zdF9pbmZvnQcBEEluZm8AARRlcnJvcmgBNERpc3BhdGNoRXJyb3IAAKkHDERwYWxsZXRfcGFyYW1ldGVycxhwYWxsZXQURXZlbnQEBFQAAQQcVXBkYXRlZAwBDGtlea0HAcQ8VDo6UnVudGltZVBhcmFtZXRlcnMgYXMgQWdncmVnYXRlZEtleVZhbHVlPjo6S2V5BGRUaGUga2V5IHRoYXQgd2FzIHVwZGF0ZWQuASRvbGRfdmFsdWW5BwHsT3B0aW9uPDxUOjpSdW50aW1lUGFyYW1ldGVycyBhcyBBZ2dyZWdhdGVkS2V5VmFsdWU+OjpWYWx1ZT4EfFRoZSBvbGQgdmFsdWUgYmVmb3JlIHRoaXMgY2FsbC4BJG5ld192YWx1ZbkHAexPcHRpb248PFQ6OlJ1bnRpbWVQYXJhbWV0ZXJzIGFzIEFnZ3JlZ2F0ZWRLZXlWYWx1ZT46OlZhbHVlPgR4VGhlIG5ldyB2YWx1ZSBhZnRlciB0aGlzIGNhbGwuAAxQQSBQYXJhbWV0ZXIgd2FzIHNldC4AvElzIGFsc28gZW1pdHRlZCB3aGVuIHRoZSB2YWx1ZSB3YXMgbm90IGNoYW5nZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0rQcIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWVQUnVudGltZVBhcmFtZXRlcnNLZXkAAQgkSW5mbGF0aW9uBACxBwGpATxkeW5hbWljX3BhcmFtczo6aW5mbGF0aW9uOjpQYXJhbWV0ZXJzIGFzIGZyYW1lX3N1cHBvcnQ6OnRyYWl0czo6CmR5bmFtaWNfcGFyYW1zOjpBZ2dyZWdhdGVkS2V5VmFsdWU+OjpLZXkAAAAgVHJlYXN1cnkEALUHAaUBPGR5bmFtaWNfcGFyYW1zOjp0cmVhc3VyeTo6UGFyYW1ldGVycyBhcyBmcmFtZV9zdXBwb3J0Ojp0cmFpdHM6OgpkeW5hbWljX3BhcmFtczo6QWdncmVnYXRlZEtleVZhbHVlPjo6S2V5AAEAALEHEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zJGluZmxhdGlvbjRQYXJhbWV0ZXJzS2V5AAEUME1pbkluZmxhdGlvbgQAlQIBME1pbkluZmxhdGlvbgAAADBNYXhJbmZsYXRpb24EAKECATBNYXhJbmZsYXRpb24AAQAoSWRlYWxTdGFrZQQApQIBKElkZWFsU3Rha2UAAgAcRmFsbG9mZgQAqQIBHEZhbGxvZmYAAwA8VXNlQXVjdGlvblNsb3RzBACtAgE8VXNlQXVjdGlvblNsb3RzAAQAALUHEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zIHRyZWFzdXJ5NFBhcmFtZXRlcnNLZXkAAQgsQnVyblBvcnRpb24EALkCASxCdXJuUG9ydGlvbgAAADxCdXJuRGVzdGluYXRpb24EAMUCATxCdXJuRGVzdGluYXRpb24AAQAAuQcEGE9wdGlvbgQEVAG9BwEIEE5vbmUAAAAQU29tZQQAvQcAAAEAAL0HCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lWFJ1bnRpbWVQYXJhbWV0ZXJzVmFsdWUAAQgkSW5mbGF0aW9uBADBBwGxATxkeW5hbWljX3BhcmFtczo6aW5mbGF0aW9uOjpQYXJhbWV0ZXJzIGFzIGZyYW1lX3N1cHBvcnQ6OnRyYWl0czo6CmR5bmFtaWNfcGFyYW1zOjpBZ2dyZWdhdGVkS2V5VmFsdWU+OjpWYWx1ZQAAACBUcmVhc3VyeQQAxQcBrQE8ZHluYW1pY19wYXJhbXM6OnRyZWFzdXJ5OjpQYXJhbWV0ZXJzIGFzIGZyYW1lX3N1cHBvcnQ6OnRyYWl0czo6CmR5bmFtaWNfcGFyYW1zOjpBZ2dyZWdhdGVkS2V5VmFsdWU+OjpWYWx1ZQABAADBBxBYc3RhZ2luZ19rdXNhbWFfcnVudGltZThkeW5hbWljX3BhcmFtcyRpbmZsYXRpb248UGFyYW1ldGVyc1ZhbHVlAAEUME1pbkluZmxhdGlvbgQAnQIBLFBlcnF1aW50aWxsAAAAME1heEluZmxhdGlvbgQAnQIBLFBlcnF1aW50aWxsAAEAKElkZWFsU3Rha2UEAJ0CASxQZXJxdWludGlsbAACABxGYWxsb2ZmBACdAgEsUGVycXVpbnRpbGwAAwA8VXNlQXVjdGlvblNsb3RzBAAgARBib29sAAQAAMUHEFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lOGR5bmFtaWNfcGFyYW1zIHRyZWFzdXJ5PFBhcmFtZXRlcnNWYWx1ZQABCCxCdXJuUG9ydGlvbgQAwQIBHFBlcm1pbGwAAAA8QnVybkRlc3RpbmF0aW9uBADNAgFYQnVybkRlc3RpbmF0aW9uQWNjb3VudAABAADJBxBccG9sa2Fkb3RfcnVudGltZV9jb21tb24YY2xhaW1zGHBhbGxldBRFdmVudAQEVAABBBxDbGFpbWVkDAEMd2hvAAEwVDo6QWNjb3VudElkAAFAZXRoZXJldW1fYWRkcmVzc90CATxFdGhlcmV1bUFkZHJlc3MAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAARoU29tZW9uZSBjbGFpbWVkIHNvbWUgRE9Ucy4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXTNBww4cGFsbGV0X3V0aWxpdHkYcGFsbGV0FEV2ZW50AAEYQEJhdGNoSW50ZXJydXB0ZWQIARRpbmRleBABDHUzMgABFGVycm9yaAE0RGlzcGF0Y2hFcnJvcgAACFUBQmF0Y2ggb2YgZGlzcGF0Y2hlcyBkaWQgbm90IGNvbXBsZXRlIGZ1bGx5LiBJbmRleCBvZiBmaXJzdCBmYWlsaW5nIGRpc3BhdGNoIGdpdmVuLCBhc0h3ZWxsIGFzIHRoZSBlcnJvci44QmF0Y2hDb21wbGV0ZWQAAQTIQmF0Y2ggb2YgZGlzcGF0Y2hlcyBjb21wbGV0ZWQgZnVsbHkgd2l0aCBubyBlcnJvci5gQmF0Y2hDb21wbGV0ZWRXaXRoRXJyb3JzAAIEtEJhdGNoIG9mIGRpc3BhdGNoZXMgY29tcGxldGVkIGJ1dCBoYXMgZXJyb3JzLjRJdGVtQ29tcGxldGVkAAMEHQFBIHNpbmdsZSBpdGVtIHdpdGhpbiBhIEJhdGNoIG9mIGRpc3BhdGNoZXMgaGFzIGNvbXBsZXRlZCB3aXRoIG5vIGVycm9yLihJdGVtRmFpbGVkBAEUZXJyb3JoATREaXNwYXRjaEVycm9yAAQEEQFBIHNpbmdsZSBpdGVtIHdpdGhpbiBhIEJhdGNoIG9mIGRpc3BhdGNoZXMgaGFzIGNvbXBsZXRlZCB3aXRoIGVycm9yLjBEaXNwYXRjaGVkQXMEARhyZXN1bHTRBwE4RGlzcGF0Y2hSZXN1bHQABQRYQSBjYWxsIHdhcyBkaXNwYXRjaGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldNEHBBhSZXN1bHQIBFQBqQEERQFoAQgIT2sEAKkBAAAAAAxFcnIEAGgAAAEAANUHDDhwYWxsZXRfc29jaWV0eRhwYWxsZXQURXZlbnQIBFQABEkAAUQcRm91bmRlZAQBHGZvdW5kZXIAATBUOjpBY2NvdW50SWQAAAS0VGhlIHNvY2lldHkgaXMgZm91bmRlZCBieSB0aGUgZ2l2ZW4gaWRlbnRpdHkuDEJpZAgBMGNhbmRpZGF0ZV9pZAABMFQ6OkFjY291bnRJZAABFG9mZmVyGAE8QmFsYW5jZU9mPFQsIEk+AAEIXQFBIG1lbWJlcnNoaXAgYmlkIGp1c3QgaGFwcGVuZWQuIFRoZSBnaXZlbiBhY2NvdW50IGlzIHRoZSBjYW5kaWRhdGUncyBJRCBhbmQgdGhlaXIgb2ZmZXI4aXMgdGhlIHNlY29uZC4UVm91Y2gMATBjYW5kaWRhdGVfaWQAATBUOjpBY2NvdW50SWQAARRvZmZlchgBPEJhbGFuY2VPZjxULCBJPgABIHZvdWNoaW5nAAEwVDo6QWNjb3VudElkAAIIXQFBIG1lbWJlcnNoaXAgYmlkIGp1c3QgaGFwcGVuZWQgYnkgdm91Y2hpbmcuIFRoZSBnaXZlbiBhY2NvdW50IGlzIHRoZSBjYW5kaWRhdGUncyBJRCBhbmTsdGhlaXIgb2ZmZXIgaXMgdGhlIHNlY29uZC4gVGhlIHZvdWNoaW5nIHBhcnR5IGlzIHRoZSB0aGlyZC4kQXV0b1VuYmlkBAEkY2FuZGlkYXRlAAEwVDo6QWNjb3VudElkAAMEBQFBIGNhbmRpZGF0ZSB3YXMgZHJvcHBlZCAoZHVlIHRvIGFuIGV4Y2VzcyBvZiBiaWRzIGluIHRoZSBzeXN0ZW0pLhRVbmJpZAQBJGNhbmRpZGF0ZQABMFQ6OkFjY291bnRJZAAEBKxBIGNhbmRpZGF0ZSB3YXMgZHJvcHBlZCAoYnkgdGhlaXIgcmVxdWVzdCkuHFVudm91Y2gEASRjYW5kaWRhdGUAATBUOjpBY2NvdW50SWQABQT0QSBjYW5kaWRhdGUgd2FzIGRyb3BwZWQgKGJ5IHJlcXVlc3Qgb2Ygd2hvIHZvdWNoZWQgZm9yIHRoZW0pLiBJbmR1Y3RlZAgBHHByaW1hcnkAATBUOjpBY2NvdW50SWQAAShjYW5kaWRhdGVztQEBRFZlYzxUOjpBY2NvdW50SWQ+AAYIVQFBIGdyb3VwIG9mIGNhbmRpZGF0ZXMgaGF2ZSBiZWVuIGluZHVjdGVkLiBUaGUgYmF0Y2gncyBwcmltYXJ5IGlzIHRoZSBmaXJzdCB2YWx1ZSwgdGhlcGJhdGNoIGluIGZ1bGwgaXMgdGhlIHNlY29uZC5gU3VzcGVuZGVkTWVtYmVySnVkZ2VtZW50CAEMd2hvAAEwVDo6QWNjb3VudElkAAEYanVkZ2VkIAEQYm9vbAAHBIxBIHN1c3BlbmRlZCBtZW1iZXIgaGFzIGJlZW4ganVkZ2VkLkhDYW5kaWRhdGVTdXNwZW5kZWQEASRjYW5kaWRhdGUAATBUOjpBY2NvdW50SWQACAR4QSBjYW5kaWRhdGUgaGFzIGJlZW4gc3VzcGVuZGVkPE1lbWJlclN1c3BlbmRlZAQBGG1lbWJlcgABMFQ6OkFjY291bnRJZAAJBGxBIG1lbWJlciBoYXMgYmVlbiBzdXNwZW5kZWQoQ2hhbGxlbmdlZAQBGG1lbWJlcgABMFQ6OkFjY291bnRJZAAKBHBBIG1lbWJlciBoYXMgYmVlbiBjaGFsbGVuZ2VkEFZvdGUMASRjYW5kaWRhdGUAATBUOjpBY2NvdW50SWQAARR2b3RlcgABMFQ6OkFjY291bnRJZAABEHZvdGUgARBib29sAAsEWEEgdm90ZSBoYXMgYmVlbiBwbGFjZWQwRGVmZW5kZXJWb3RlCAEUdm90ZXIAATBUOjpBY2NvdW50SWQAARB2b3RlIAEQYm9vbAAMBLRBIHZvdGUgaGFzIGJlZW4gcGxhY2VkIGZvciBhIGRlZmVuZGluZyBtZW1iZXIkTmV3UGFyYW1zBAEYcGFyYW1z2QcBUEdyb3VwUGFyYW1zRm9yPFQsIEk+AA0EzEEgbmV3IHNldCBvZiBcW3BhcmFtc1xdIGhhcyBiZWVuIHNldCBmb3IgdGhlIGdyb3VwLiRVbmZvdW5kZWQEARxmb3VuZGVyAAEwVDo6QWNjb3VudElkAA4EVFNvY2lldHkgaXMgdW5mb3VuZGVkLhxEZXBvc2l0BAEUdmFsdWUYATxCYWxhbmNlT2Y8VCwgST4ADwTMU29tZSBmdW5kcyB3ZXJlIGRlcG9zaXRlZCBpbnRvIHRoZSBzb2NpZXR5IGFjY291bnQuIEVsZXZhdGVkCAEYbWVtYmVyAAEwVDo6QWNjb3VudElkAAEQcmFuaxABEFJhbmsAEASYQSBcW21lbWJlclxdIGdvdCBlbGV2YXRlZCB0byBcW3JhbmtcXS4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXTZBwg4cGFsbGV0X3NvY2lldHksR3JvdXBQYXJhbXMEHEJhbGFuY2UBGAAQASxtYXhfbWVtYmVycxABDHUzMgABKG1heF9pbnRha2UQAQx1MzIAASxtYXhfc3RyaWtlcxABDHUzMgABRGNhbmRpZGF0ZV9kZXBvc2l0GAEcQmFsYW5jZQAA3QcMPHBhbGxldF9yZWNvdmVyeRhwYWxsZXQURXZlbnQEBFQAARg8UmVjb3ZlcnlDcmVhdGVkBAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAAABMhBIHJlY292ZXJ5IHByb2Nlc3MgaGFzIGJlZW4gc2V0IHVwIGZvciBhbiBhY2NvdW50LkRSZWNvdmVyeUluaXRpYXRlZAgBMGxvc3RfYWNjb3VudAABMFQ6OkFjY291bnRJZAABPHJlc2N1ZXJfYWNjb3VudAABMFQ6OkFjY291bnRJZAABBCkBQSByZWNvdmVyeSBwcm9jZXNzIGhhcyBiZWVuIGluaXRpYXRlZCBmb3IgbG9zdCBhY2NvdW50IGJ5IHJlc2N1ZXIgYWNjb3VudC48UmVjb3ZlcnlWb3VjaGVkDAEwbG9zdF9hY2NvdW50AAEwVDo6QWNjb3VudElkAAE8cmVzY3Vlcl9hY2NvdW50AAEwVDo6QWNjb3VudElkAAEYc2VuZGVyAAEwVDo6QWNjb3VudElkAAIEWQFBIHJlY292ZXJ5IHByb2Nlc3MgZm9yIGxvc3QgYWNjb3VudCBieSByZXNjdWVyIGFjY291bnQgaGFzIGJlZW4gdm91Y2hlZCBmb3IgYnkgc2VuZGVyLjhSZWNvdmVyeUNsb3NlZAgBMGxvc3RfYWNjb3VudAABMFQ6OkFjY291bnRJZAABPHJlc2N1ZXJfYWNjb3VudAABMFQ6OkFjY291bnRJZAADBB0BQSByZWNvdmVyeSBwcm9jZXNzIGZvciBsb3N0IGFjY291bnQgYnkgcmVzY3VlciBhY2NvdW50IGhhcyBiZWVuIGNsb3NlZC5AQWNjb3VudFJlY292ZXJlZAgBMGxvc3RfYWNjb3VudAABMFQ6OkFjY291bnRJZAABPHJlc2N1ZXJfYWNjb3VudAABMFQ6OkFjY291bnRJZAAEBAEBTG9zdCBhY2NvdW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZWNvdmVyZWQgYnkgcmVzY3VlciBhY2NvdW50LjxSZWNvdmVyeVJlbW92ZWQEATBsb3N0X2FjY291bnQAATBUOjpBY2NvdW50SWQABQTMQSByZWNvdmVyeSBwcm9jZXNzIGhhcyBiZWVuIHJlbW92ZWQgZm9yIGFuIGFjY291bnQuBDBFdmVudHMgdHlwZS7hBww4cGFsbGV0X3Zlc3RpbmcYcGFsbGV0FEV2ZW50BARUAAEIOFZlc3RpbmdVcGRhdGVkCAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAABIHVudmVzdGVkGAEwQmFsYW5jZU9mPFQ+AAAIUQFUaGUgYW1vdW50IHZlc3RlZCBoYXMgYmVlbiB1cGRhdGVkLiBUaGlzIGNvdWxkIGluZGljYXRlIGEgY2hhbmdlIGluIGZ1bmRzIGF2YWlsYWJsZS4lAVRoZSBiYWxhbmNlIGdpdmVuIGlzIHRoZSBhbW91bnQgd2hpY2ggaXMgbGVmdCB1bnZlc3RlZCAoYW5kIHRodXMgbG9ja2VkKS5AVmVzdGluZ0NvbXBsZXRlZAQBHGFjY291bnQAATBUOjpBY2NvdW50SWQAAQScQW4gXFthY2NvdW50XF0gaGFzIGJlY29tZSBmdWxseSB2ZXN0ZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV05QcMQHBhbGxldF9zY2hlZHVsZXIYcGFsbGV0FEV2ZW50BARUAAEkJFNjaGVkdWxlZAgBEHdoZW4QAURCbG9ja051bWJlckZvcjxUPgABFGluZGV4EAEMdTMyAAAEUFNjaGVkdWxlZCBzb21lIHRhc2suIENhbmNlbGVkCAEQd2hlbhABREJsb2NrTnVtYmVyRm9yPFQ+AAEUaW5kZXgQAQx1MzIAAQRMQ2FuY2VsZWQgc29tZSB0YXNrLihEaXNwYXRjaGVkDAEQdGFzaxEDAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZOkHAUBPcHRpb248VGFza05hbWU+AAEYcmVzdWx00QcBOERpc3BhdGNoUmVzdWx0AAIEVERpc3BhdGNoZWQgc29tZSB0YXNrLiBSZXRyeVNldBABEHRhc2sRAwF4VGFza0FkZHJlc3M8QmxvY2tOdW1iZXJGb3I8VD4+AAEIaWTpBwFAT3B0aW9uPFRhc2tOYW1lPgABGHBlcmlvZBABREJsb2NrTnVtYmVyRm9yPFQ+AAEccmV0cmllcwgBCHU4AAMEoFNldCBhIHJldHJ5IGNvbmZpZ3VyYXRpb24gZm9yIHNvbWUgdGFzay44UmV0cnlDYW5jZWxsZWQIARB0YXNrEQMBeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlk6QcBQE9wdGlvbjxUYXNrTmFtZT4ABASsQ2FuY2VsIGEgcmV0cnkgY29uZmlndXJhdGlvbiBmb3Igc29tZSB0YXNrLjxDYWxsVW5hdmFpbGFibGUIARB0YXNrEQMBeFRhc2tBZGRyZXNzPEJsb2NrTnVtYmVyRm9yPFQ+PgABCGlk6QcBQE9wdGlvbjxUYXNrTmFtZT4ABQQpAVRoZSBjYWxsIGZvciB0aGUgcHJvdmlkZWQgaGFzaCB3YXMgbm90IGZvdW5kIHNvIHRoZSB0YXNrIGhhcyBiZWVuIGFib3J0ZWQuOFBlcmlvZGljRmFpbGVkCAEQdGFzaxEDAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZOkHAUBPcHRpb248VGFza05hbWU+AAYEPQFUaGUgZ2l2ZW4gdGFzayB3YXMgdW5hYmxlIHRvIGJlIHJlbmV3ZWQgc2luY2UgdGhlIGFnZW5kYSBpcyBmdWxsIGF0IHRoYXQgYmxvY2suLFJldHJ5RmFpbGVkCAEQdGFzaxEDAXhUYXNrQWRkcmVzczxCbG9ja051bWJlckZvcjxUPj4AAQhpZOkHAUBPcHRpb248VGFza05hbWU+AAcIXQFUaGUgZ2l2ZW4gdGFzayB3YXMgdW5hYmxlIHRvIGJlIHJldHJpZWQgc2luY2UgdGhlIGFnZW5kYSBpcyBmdWxsIGF0IHRoYXQgYmxvY2sgb3IgdGhlcmWcd2FzIG5vdCBlbm91Z2ggd2VpZ2h0IHRvIHJlc2NoZWR1bGUgaXQuVFBlcm1hbmVudGx5T3ZlcndlaWdodAgBEHRhc2sRAwF4VGFza0FkZHJlc3M8QmxvY2tOdW1iZXJGb3I8VD4+AAEIaWTpBwFAT3B0aW9uPFRhc2tOYW1lPgAIBPBUaGUgZ2l2ZW4gdGFzayBjYW4gbmV2ZXIgYmUgZXhlY3V0ZWQgc2luY2UgaXQgaXMgb3ZlcndlaWdodC4EMEV2ZW50cyB0eXBlLukHBBhPcHRpb24EBFQBBAEIEE5vbmUAAAAQU29tZQQABAAAAQAA7QcMMHBhbGxldF9wcm94eRhwYWxsZXQURXZlbnQEBFQAARQ0UHJveHlFeGVjdXRlZAQBGHJlc3VsdNEHAThEaXNwYXRjaFJlc3VsdAAABLxBIHByb3h5IHdhcyBleGVjdXRlZCBjb3JyZWN0bHksIHdpdGggdGhlIGdpdmVuLixQdXJlQ3JlYXRlZBABEHB1cmUAATBUOjpBY2NvdW50SWQAAQx3aG8AATBUOjpBY2NvdW50SWQAAShwcm94eV90eXBlHQMBMFQ6OlByb3h5VHlwZQABUGRpc2FtYmlndWF0aW9uX2luZGV4XQEBDHUxNgABCNxBIHB1cmUgYWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkIGJ5IG5ldyBwcm94eSB3aXRoIGdpdmVukGRpc2FtYmlndWF0aW9uIGluZGV4IGFuZCBwcm94eSB0eXBlLiRBbm5vdW5jZWQMARByZWFsAAEwVDo6QWNjb3VudElkAAEUcHJveHkAATBUOjpBY2NvdW50SWQAASRjYWxsX2hhc2g0ATRDYWxsSGFzaE9mPFQ+AAIE4EFuIGFubm91bmNlbWVudCB3YXMgcGxhY2VkIHRvIG1ha2UgYSBjYWxsIGluIHRoZSBmdXR1cmUuKFByb3h5QWRkZWQQASRkZWxlZ2F0b3IAATBUOjpBY2NvdW50SWQAASRkZWxlZ2F0ZWUAATBUOjpBY2NvdW50SWQAAShwcm94eV90eXBlHQMBMFQ6OlByb3h5VHlwZQABFGRlbGF5EAFEQmxvY2tOdW1iZXJGb3I8VD4AAwRIQSBwcm94eSB3YXMgYWRkZWQuMFByb3h5UmVtb3ZlZBABJGRlbGVnYXRvcgABMFQ6OkFjY291bnRJZAABJGRlbGVnYXRlZQABMFQ6OkFjY291bnRJZAABKHByb3h5X3R5cGUdAwEwVDo6UHJveHlUeXBlAAEUZGVsYXkQAURCbG9ja051bWJlckZvcjxUPgAEBFBBIHByb3h5IHdhcyByZW1vdmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldPEHDDxwYWxsZXRfbXVsdGlzaWcYcGFsbGV0FEV2ZW50BARUAAEQLE5ld011bHRpc2lnDAEkYXBwcm92aW5nAAEwVDo6QWNjb3VudElkAAEgbXVsdGlzaWcAATBUOjpBY2NvdW50SWQAASRjYWxsX2hhc2gEASBDYWxsSGFzaAAABIxBIG5ldyBtdWx0aXNpZyBvcGVyYXRpb24gaGFzIGJlZ3VuLkBNdWx0aXNpZ0FwcHJvdmFsEAEkYXBwcm92aW5nAAEwVDo6QWNjb3VudElkAAEkdGltZXBvaW50KQMBcFRpbWVwb2ludDxCbG9ja051bWJlckZvcjxUPj4AASBtdWx0aXNpZwABMFQ6OkFjY291bnRJZAABJGNhbGxfaGFzaAQBIENhbGxIYXNoAAEEyEEgbXVsdGlzaWcgb3BlcmF0aW9uIGhhcyBiZWVuIGFwcHJvdmVkIGJ5IHNvbWVvbmUuQE11bHRpc2lnRXhlY3V0ZWQUASRhcHByb3ZpbmcAATBUOjpBY2NvdW50SWQAASR0aW1lcG9pbnQpAwFwVGltZXBvaW50PEJsb2NrTnVtYmVyRm9yPFQ+PgABIG11bHRpc2lnAAEwVDo6QWNjb3VudElkAAEkY2FsbF9oYXNoBAEgQ2FsbEhhc2gAARhyZXN1bHTRBwE4RGlzcGF0Y2hSZXN1bHQAAgScQSBtdWx0aXNpZyBvcGVyYXRpb24gaGFzIGJlZW4gZXhlY3V0ZWQuRE11bHRpc2lnQ2FuY2VsbGVkEAEoY2FuY2VsbGluZwABMFQ6OkFjY291bnRJZAABJHRpbWVwb2ludCkDAXBUaW1lcG9pbnQ8QmxvY2tOdW1iZXJGb3I8VD4+AAEgbXVsdGlzaWcAATBUOjpBY2NvdW50SWQAASRjYWxsX2hhc2gEASBDYWxsSGFzaAADBKBBIG11bHRpc2lnIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV09QcMPHBhbGxldF9wcmVpbWFnZRhwYWxsZXQURXZlbnQEBFQAAQwUTm90ZWQEARBoYXNoNAEcVDo6SGFzaAAABGhBIHByZWltYWdlIGhhcyBiZWVuIG5vdGVkLiRSZXF1ZXN0ZWQEARBoYXNoNAEcVDo6SGFzaAABBHhBIHByZWltYWdlIGhhcyBiZWVuIHJlcXVlc3RlZC4cQ2xlYXJlZAQBEGhhc2g0ARxUOjpIYXNoAAIEbEEgcHJlaW1hZ2UgaGFzIGJlbiBjbGVhcmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldPkHDDxwYWxsZXRfYm91bnRpZXMYcGFsbGV0FEV2ZW50CARUAARJAAEsOEJvdW50eVByb3Bvc2VkBAEUaW5kZXgQASxCb3VudHlJbmRleAAABFBOZXcgYm91bnR5IHByb3Bvc2FsLjhCb3VudHlSZWplY3RlZAgBFGluZGV4EAEsQm91bnR5SW5kZXgAARBib25kGAE8QmFsYW5jZU9mPFQsIEk+AAEEzEEgYm91bnR5IHByb3Bvc2FsIHdhcyByZWplY3RlZDsgZnVuZHMgd2VyZSBzbGFzaGVkLkhCb3VudHlCZWNhbWVBY3RpdmUEARRpbmRleBABLEJvdW50eUluZGV4AAIEuEEgYm91bnR5IHByb3Bvc2FsIGlzIGZ1bmRlZCBhbmQgYmVjYW1lIGFjdGl2ZS40Qm91bnR5QXdhcmRlZAgBFGluZGV4EAEsQm91bnR5SW5kZXgAASxiZW5lZmljaWFyeQABMFQ6OkFjY291bnRJZAADBJRBIGJvdW50eSBpcyBhd2FyZGVkIHRvIGEgYmVuZWZpY2lhcnkuNEJvdW50eUNsYWltZWQMARRpbmRleBABLEJvdW50eUluZGV4AAEYcGF5b3V0GAE8QmFsYW5jZU9mPFQsIEk+AAEsYmVuZWZpY2lhcnkAATBUOjpBY2NvdW50SWQABASMQSBib3VudHkgaXMgY2xhaW1lZCBieSBiZW5lZmljaWFyeS44Qm91bnR5Q2FuY2VsZWQEARRpbmRleBABLEJvdW50eUluZGV4AAUEWEEgYm91bnR5IGlzIGNhbmNlbGxlZC44Qm91bnR5RXh0ZW5kZWQEARRpbmRleBABLEJvdW50eUluZGV4AAYEcEEgYm91bnR5IGV4cGlyeSBpcyBleHRlbmRlZC44Qm91bnR5QXBwcm92ZWQEARRpbmRleBABLEJvdW50eUluZGV4AAcEVEEgYm91bnR5IGlzIGFwcHJvdmVkLjxDdXJhdG9yUHJvcG9zZWQIASRib3VudHlfaWQQASxCb3VudHlJbmRleAABHGN1cmF0b3IAATBUOjpBY2NvdW50SWQACAR0QSBib3VudHkgY3VyYXRvciBpcyBwcm9wb3NlZC5EQ3VyYXRvclVuYXNzaWduZWQEASRib3VudHlfaWQQASxCb3VudHlJbmRleAAJBHxBIGJvdW50eSBjdXJhdG9yIGlzIHVuYXNzaWduZWQuPEN1cmF0b3JBY2NlcHRlZAgBJGJvdW50eV9pZBABLEJvdW50eUluZGV4AAEcY3VyYXRvcgABMFQ6OkFjY291bnRJZAAKBHRBIGJvdW50eSBjdXJhdG9yIGlzIGFjY2VwdGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldP0HDFRwYWxsZXRfY2hpbGRfYm91bnRpZXMYcGFsbGV0FEV2ZW50BARUAAEQFEFkZGVkCAEUaW5kZXgQASxCb3VudHlJbmRleAABLGNoaWxkX2luZGV4EAEsQm91bnR5SW5kZXgAAARgQSBjaGlsZC1ib3VudHkgaXMgYWRkZWQuHEF3YXJkZWQMARRpbmRleBABLEJvdW50eUluZGV4AAEsY2hpbGRfaW5kZXgQASxCb3VudHlJbmRleAABLGJlbmVmaWNpYXJ5AAEwVDo6QWNjb3VudElkAAEErEEgY2hpbGQtYm91bnR5IGlzIGF3YXJkZWQgdG8gYSBiZW5lZmljaWFyeS4cQ2xhaW1lZBABFGluZGV4EAEsQm91bnR5SW5kZXgAASxjaGlsZF9pbmRleBABLEJvdW50eUluZGV4AAEYcGF5b3V0GAEwQmFsYW5jZU9mPFQ+AAEsYmVuZWZpY2lhcnkAATBUOjpBY2NvdW50SWQAAgSkQSBjaGlsZC1ib3VudHkgaXMgY2xhaW1lZCBieSBiZW5lZmljaWFyeS4gQ2FuY2VsZWQIARRpbmRleBABLEJvdW50eUluZGV4AAEsY2hpbGRfaW5kZXgQASxCb3VudHlJbmRleAADBHBBIGNoaWxkLWJvdW50eSBpcyBjYW5jZWxsZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0AQgMkHBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZRhwYWxsZXQURXZlbnQEBFQAARg4U29sdXRpb25TdG9yZWQMARxjb21wdXRlBQgBPEVsZWN0aW9uQ29tcHV0ZQABGG9yaWdpbuEBAVBPcHRpb248VDo6QWNjb3VudElkPgABMHByZXZfZWplY3RlZCABEGJvb2wAABy0QSBzb2x1dGlvbiB3YXMgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGNvbXB1dGUuAFEBVGhlIGBvcmlnaW5gIGluZGljYXRlcyB0aGUgb3JpZ2luIG9mIHRoZSBzb2x1dGlvbi4gSWYgYG9yaWdpbmAgaXMgYFNvbWUoQWNjb3VudElkKWAsWQF0aGUgc3RvcmVkIHNvbHV0aW9uIHdhcyBzdWJtaXR0ZWQgaW4gdGhlIHNpZ25lZCBwaGFzZSBieSBhIG1pbmVyIHdpdGggdGhlIGBBY2NvdW50SWRgLiUBT3RoZXJ3aXNlLCB0aGUgc29sdXRpb24gd2FzIHN0b3JlZCBlaXRoZXIgZHVyaW5nIHRoZSB1bnNpZ25lZCBwaGFzZSBvciBieU0BYFQ6OkZvcmNlT3JpZ2luYC4gVGhlIGBib29sYCBpcyBgdHJ1ZWAgd2hlbiBhIHByZXZpb3VzIHNvbHV0aW9uIHdhcyBlamVjdGVkIHRvIG1ha2VIcm9vbSBmb3IgdGhpcyBvbmUuREVsZWN0aW9uRmluYWxpemVkCAEcY29tcHV0ZQUIATxFbGVjdGlvbkNvbXB1dGUAARRzY29yZXEEATRFbGVjdGlvblNjb3JlAAEEGQFUaGUgZWxlY3Rpb24gaGFzIGJlZW4gZmluYWxpemVkLCB3aXRoIHRoZSBnaXZlbiBjb21wdXRhdGlvbiBhbmQgc2NvcmUuOEVsZWN0aW9uRmFpbGVkAAIMTEFuIGVsZWN0aW9uIGZhaWxlZC4AAQFOb3QgbXVjaCBjYW4gYmUgc2FpZCBhYm91dCB3aGljaCBjb21wdXRlcyBmYWlsZWQgaW4gdGhlIHByb2Nlc3MuIFJld2FyZGVkCAEcYWNjb3VudAABmDxUIGFzIGZyYW1lX3N5c3RlbTo6Q29uZmlnPjo6QWNjb3VudElkAAEUdmFsdWUYATBCYWxhbmNlT2Y8VD4AAwQlAUFuIGFjY291bnQgaGFzIGJlZW4gcmV3YXJkZWQgZm9yIHRoZWlyIHNpZ25lZCBzdWJtaXNzaW9uIGJlaW5nIGZpbmFsaXplZC4cU2xhc2hlZAgBHGFjY291bnQAAZg8VCBhcyBmcmFtZV9zeXN0ZW06OkNvbmZpZz46OkFjY291bnRJZAABFHZhbHVlGAEwQmFsYW5jZU9mPFQ+AAQEIQFBbiBhY2NvdW50IGhhcyBiZWVuIHNsYXNoZWQgZm9yIHN1Ym1pdHRpbmcgYW4gaW52YWxpZCBzaWduZWQgc3VibWlzc2lvbi5EUGhhc2VUcmFuc2l0aW9uZWQMARBmcm9tCQgBYFBoYXNlPEJsb2NrTnVtYmVyRm9yPFQ+PgABCHRvCQgBYFBoYXNlPEJsb2NrTnVtYmVyRm9yPFQ+PgABFHJvdW5kEAEMdTMyAAUEuFRoZXJlIHdhcyBhIHBoYXNlIHRyYW5zaXRpb24gaW4gYSBnaXZlbiByb3VuZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQFCAiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlPEVsZWN0aW9uQ29tcHV0ZQABFBxPbkNoYWluAAAAGFNpZ25lZAABACBVbnNpZ25lZAACACBGYWxsYmFjawADACRFbWVyZ2VuY3kABAAACQgIkHBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZRRQaGFzZQQIQm4BEAEQDE9mZgAAABhTaWduZWQAAQAgVW5zaWduZWQEAA0IASgoYm9vbCwgQm4pAAIAJEVtZXJnZW5jeQADAAANCAAABAggEAARCAwocGFsbGV0X25pcxhwYWxsZXQURXZlbnQEBFQAARwkQmlkUGxhY2VkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEgZHVyYXRpb24QAQx1MzIAAAR4QSBiaWQgd2FzIHN1Y2Nlc3NmdWxseSBwbGFjZWQuMEJpZFJldHJhY3RlZAwBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABIGR1cmF0aW9uEAEMdTMyAAEE3EEgYmlkIHdhcyBzdWNjZXNzZnVsbHkgcmVtb3ZlZCAoYmVmb3JlIGJlaW5nIGFjY2VwdGVkKS4oQmlkRHJvcHBlZAwBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABIGR1cmF0aW9uEAEMdTMyAAIEVQFBIGJpZCB3YXMgZHJvcHBlZCBmcm9tIGEgcXVldWUgYmVjYXVzZSBvZiBhbm90aGVyLCBtb3JlIHN1YnN0YW50aWFsLCBiaWQgd2FzIHByZXNlbnQuGElzc3VlZBQBFGluZGV4EAEwUmVjZWlwdEluZGV4BHBUaGUgaWRlbnRpdHkgb2YgdGhlIHJlY2VpcHQuARhleHBpcnkQAURCbG9ja051bWJlckZvcjxUPgTQVGhlIGJsb2NrIG51bWJlciBhdCB3aGljaCB0aGUgcmVjZWlwdCBtYXkgYmUgdGhhd2VkLgEMd2hvAAEwVDo6QWNjb3VudElkBGRUaGUgb3duZXIgb2YgdGhlIHJlY2VpcHQuAShwcm9wb3J0aW9unQIBLFBlcnF1aW50aWxsBDEBVGhlIHByb3BvcnRpb24gb2YgdGhlIGVmZmVjdGl2ZSB0b3RhbCBpc3N1YW5jZSB3aGljaCB0aGUgcmVjZWlwdCByZXByZXNlbnRzLgEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+BNhUaGUgYW1vdW50IG9mIGZ1bmRzIHdoaWNoIHdlcmUgZGViaXRlZCBmcm9tIHRoZSBvd25lci4DBAUBQSBiaWQgd2FzIGFjY2VwdGVkLiBUaGUgYmFsYW5jZSBtYXkgbm90IGJlIHJlbGVhc2VkIHVudGlsIGV4cGlyeS4YVGhhd2VkFAEUaW5kZXgQATBSZWNlaXB0SW5kZXgEcFRoZSBpZGVudGl0eSBvZiB0aGUgcmVjZWlwdC4BDHdobwABMFQ6OkFjY291bnRJZAQoVGhlIG93bmVyLgEocHJvcG9ydGlvbp0CASxQZXJxdWludGlsbAQ5AVRoZSBwcm9wb3J0aW9uIG9mIHRoZSBlZmZlY3RpdmUgdG90YWwgaXNzdWFuY2UgYnkgd2hpY2ggdGhlIG93bmVyIHdhcyBkZWJpdGVkLgEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+BKxUaGUgYW1vdW50IGJ5IHdoaWNoIHRoZSBvd25lciB3YXMgY3JlZGl0ZWQuARxkcm9wcGVkIAEQYm9vbASMSWYgYHRydWVgIHRoZW4gdGhlIHJlY2VpcHQgaXMgZG9uZS4EBMBBbiByZWNlaXB0IGhhcyBiZWVuIChhdCBsZWFzdCBwYXJ0aWFsbHkpIHRoYXdlZC4YRnVuZGVkBAEcZGVmaWNpdBgBMEJhbGFuY2VPZjxUPgAFBLRBbiBhdXRvbWF0aWMgZnVuZGluZyBvZiB0aGUgZGVmaWNpdCB3YXMgbWFkZS4sVHJhbnNmZXJyZWQMARBmcm9tAAEwVDo6QWNjb3VudElkAAEIdG8AATBUOjpBY2NvdW50SWQAARRpbmRleBABMFJlY2VpcHRJbmRleAAGBGhBIHJlY2VpcHQgd2FzIHRyYW5zZmVycmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldBUIDDxwYWxsZXRfYmFsYW5jZXMYcGFsbGV0FEV2ZW50CARUAARJAAFYHEVuZG93ZWQIARxhY2NvdW50AAEwVDo6QWNjb3VudElkAAEwZnJlZV9iYWxhbmNlGAEoVDo6QmFsYW5jZQAABLhBbiBhY2NvdW50IHdhcyBjcmVhdGVkIHdpdGggc29tZSBmcmVlIGJhbGFuY2UuIER1c3RMb3N0CAEcYWNjb3VudAABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAAQg9AUFuIGFjY291bnQgd2FzIHJlbW92ZWQgd2hvc2UgYmFsYW5jZSB3YXMgbm9uLXplcm8gYnV0IGJlbG93IEV4aXN0ZW50aWFsRGVwb3NpdCx4cmVzdWx0aW5nIGluIGFuIG91dHJpZ2h0IGxvc3MuIFRyYW5zZmVyDAEQZnJvbQABMFQ6OkFjY291bnRJZAABCHRvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQACBExUcmFuc2ZlciBzdWNjZWVkZWQuKEJhbGFuY2VTZXQIAQx3aG8AATBUOjpBY2NvdW50SWQAARBmcmVlGAEoVDo6QmFsYW5jZQADBGhBIGJhbGFuY2Ugd2FzIHNldCBieSByb290LiBSZXNlcnZlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UABATgU29tZSBiYWxhbmNlIHdhcyByZXNlcnZlZCAobW92ZWQgZnJvbSBmcmVlIHRvIHJlc2VydmVkKS4oVW5yZXNlcnZlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UABQToU29tZSBiYWxhbmNlIHdhcyB1bnJlc2VydmVkIChtb3ZlZCBmcm9tIHJlc2VydmVkIHRvIGZyZWUpLkhSZXNlcnZlUmVwYXRyaWF0ZWQQARBmcm9tAAEwVDo6QWNjb3VudElkAAEIdG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlAAFIZGVzdGluYXRpb25fc3RhdHVzhAEYU3RhdHVzAAYITQFTb21lIGJhbGFuY2Ugd2FzIG1vdmVkIGZyb20gdGhlIHJlc2VydmUgb2YgdGhlIGZpcnN0IGFjY291bnQgdG8gdGhlIHNlY29uZCBhY2NvdW50LthGaW5hbCBhcmd1bWVudCBpbmRpY2F0ZXMgdGhlIGRlc3RpbmF0aW9uIGJhbGFuY2UgdHlwZS4cRGVwb3NpdAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UABwTYU29tZSBhbW91bnQgd2FzIGRlcG9zaXRlZCAoZS5nLiBmb3IgdHJhbnNhY3Rpb24gZmVlcykuIFdpdGhkcmF3CAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAIBB0BU29tZSBhbW91bnQgd2FzIHdpdGhkcmF3biBmcm9tIHRoZSBhY2NvdW50IChlLmcuIGZvciB0cmFuc2FjdGlvbiBmZWVzKS4cU2xhc2hlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UACQQBAVNvbWUgYW1vdW50IHdhcyByZW1vdmVkIGZyb20gdGhlIGFjY291bnQgKGUuZy4gZm9yIG1pc2JlaGF2aW9yKS4YTWludGVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAKBJxTb21lIGFtb3VudCB3YXMgbWludGVkIGludG8gYW4gYWNjb3VudC4YQnVybmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQALBJxTb21lIGFtb3VudCB3YXMgYnVybmVkIGZyb20gYW4gYWNjb3VudC4kU3VzcGVuZGVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQAMBBUBU29tZSBhbW91bnQgd2FzIHN1c3BlbmRlZCBmcm9tIGFuIGFjY291bnQgKGl0IGNhbiBiZSByZXN0b3JlZCBsYXRlcikuIFJlc3RvcmVkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQANBKRTb21lIGFtb3VudCB3YXMgcmVzdG9yZWQgaW50byBhbiBhY2NvdW50LiBVcGdyYWRlZAQBDHdobwABMFQ6OkFjY291bnRJZAAOBGBBbiBhY2NvdW50IHdhcyB1cGdyYWRlZC4YSXNzdWVkBAEYYW1vdW50GAEoVDo6QmFsYW5jZQAPBC0BVG90YWwgaXNzdWFuY2Ugd2FzIGluY3JlYXNlZCBieSBgYW1vdW50YCwgY3JlYXRpbmcgYSBjcmVkaXQgdG8gYmUgYmFsYW5jZWQuJFJlc2NpbmRlZAQBGGFtb3VudBgBKFQ6OkJhbGFuY2UAEAQlAVRvdGFsIGlzc3VhbmNlIHdhcyBkZWNyZWFzZWQgYnkgYGFtb3VudGAsIGNyZWF0aW5nIGEgZGVidCB0byBiZSBiYWxhbmNlZC4YTG9ja2VkCAEMd2hvAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEoVDo6QmFsYW5jZQARBGBTb21lIGJhbGFuY2Ugd2FzIGxvY2tlZC4gVW5sb2NrZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAARhhbW91bnQYAShUOjpCYWxhbmNlABIEaFNvbWUgYmFsYW5jZSB3YXMgdW5sb2NrZWQuGEZyb3plbggBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAEwRgU29tZSBiYWxhbmNlIHdhcyBmcm96ZW4uGFRoYXdlZAgBDHdobwABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBKFQ6OkJhbGFuY2UAFARgU29tZSBiYWxhbmNlIHdhcyB0aGF3ZWQuTFRvdGFsSXNzdWFuY2VGb3JjZWQIAQxvbGQYAShUOjpCYWxhbmNlAAEMbmV3GAEoVDo6QmFsYW5jZQAVBKxUaGUgYFRvdGFsSXNzdWFuY2VgIHdhcyBmb3JjZWZ1bGx5IGNoYW5nZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0GQgMQHBhbGxldF9iYWdzX2xpc3QYcGFsbGV0FEV2ZW50CARUAARJAAEIIFJlYmFnZ2VkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEQZnJvbTABIFQ6OlNjb3JlAAEIdG8wASBUOjpTY29yZQAABKRNb3ZlZCBhbiBhY2NvdW50IGZyb20gb25lIGJhZyB0byBhbm90aGVyLjBTY29yZVVwZGF0ZWQIAQx3aG8AATBUOjpBY2NvdW50SWQAASRuZXdfc2NvcmUwASBUOjpTY29yZQABBNhVcGRhdGVkIHRoZSBzY29yZSBvZiBzb21lIGFjY291bnQgdG8gdGhlIGdpdmVuIGFtb3VudC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQdCAxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0FEV2ZW50BARUAAFIHENyZWF0ZWQIASRkZXBvc2l0b3IAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAAEYEEgcG9vbCBoYXMgYmVlbiBjcmVhdGVkLhhCb25kZWQQARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEYYm9uZGVkGAEwQmFsYW5jZU9mPFQ+AAEYam9pbmVkIAEQYm9vbAABBJRBIG1lbWJlciBoYXMgYmVjYW1lIGJvbmRlZCBpbiBhIHBvb2wuHFBhaWRPdXQMARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEYcGF5b3V0GAEwQmFsYW5jZU9mPFQ+AAIEjEEgcGF5b3V0IGhhcyBiZWVuIG1hZGUgdG8gYSBtZW1iZXIuIFVuYm9uZGVkFAEYbWVtYmVyAAEwVDo6QWNjb3VudElkAAEccG9vbF9pZBABGFBvb2xJZAABHGJhbGFuY2UYATBCYWxhbmNlT2Y8VD4AARhwb2ludHMYATBCYWxhbmNlT2Y8VD4AAQxlcmEQASBFcmFJbmRleAADLJhBIG1lbWJlciBoYXMgdW5ib25kZWQgZnJvbSB0aGVpciBwb29sLgA5AS0gYGJhbGFuY2VgIGlzIHRoZSBjb3JyZXNwb25kaW5nIGJhbGFuY2Ugb2YgdGhlIG51bWJlciBvZiBwb2ludHMgdGhhdCBoYXMgYmVlblUBICByZXF1ZXN0ZWQgdG8gYmUgdW5ib25kZWQgKHRoZSBhcmd1bWVudCBvZiB0aGUgYHVuYm9uZGAgdHJhbnNhY3Rpb24pIGZyb20gdGhlIGJvbmRlZBwgIHBvb2wuRQEtIGBwb2ludHNgIGlzIHRoZSBudW1iZXIgb2YgcG9pbnRzIHRoYXQgYXJlIGlzc3VlZCBhcyBhIHJlc3VsdCBvZiBgYmFsYW5jZWAgYmVpbmfAZGlzc29sdmVkIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgdW5ib25kaW5nIHBvb2wu5C0gYGVyYWAgaXMgdGhlIGVyYSBpbiB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHVuYm9uZGVkLlUBSW4gdGhlIGFic2VuY2Ugb2Ygc2xhc2hpbmcsIHRoZXNlIHZhbHVlcyB3aWxsIG1hdGNoLiBJbiB0aGUgcHJlc2VuY2Ugb2Ygc2xhc2hpbmcsIHRoZU0BbnVtYmVyIG9mIHBvaW50cyB0aGF0IGFyZSBpc3N1ZWQgaW4gdGhlIHVuYm9uZGluZyBwb29sIHdpbGwgYmUgbGVzcyB0aGFuIHRoZSBhbW91bnRkcmVxdWVzdGVkIHRvIGJlIHVuYm9uZGVkLiRXaXRoZHJhd24QARhtZW1iZXIAATBUOjpBY2NvdW50SWQAARxwb29sX2lkEAEYUG9vbElkAAEcYmFsYW5jZRgBMEJhbGFuY2VPZjxUPgABGHBvaW50cxgBMEJhbGFuY2VPZjxUPgAEGJxBIG1lbWJlciBoYXMgd2l0aGRyYXduIGZyb20gdGhlaXIgcG9vbC4AIQFUaGUgZ2l2ZW4gbnVtYmVyIG9mIGBwb2ludHNgIGhhdmUgYmVlbiBkaXNzb2x2ZWQgaW4gcmV0dXJuIG9mIGBiYWxhbmNlYC4AWQFTaW1pbGFyIHRvIGBVbmJvbmRlZGAgZXZlbnQsIGluIHRoZSBhYnNlbmNlIG9mIHNsYXNoaW5nLCB0aGUgcmF0aW8gb2YgcG9pbnQgdG8gYmFsYW5jZSh3aWxsIGJlIDEuJERlc3Ryb3llZAQBHHBvb2xfaWQQARhQb29sSWQABQRoQSBwb29sIGhhcyBiZWVuIGRlc3Ryb3llZC4wU3RhdGVDaGFuZ2VkCAEccG9vbF9pZBABGFBvb2xJZAABJG5ld19zdGF0ZaUEASRQb29sU3RhdGUABgR8VGhlIHN0YXRlIG9mIGEgcG9vbCBoYXMgY2hhbmdlZDRNZW1iZXJSZW1vdmVkDAEccG9vbF9pZBABGFBvb2xJZAABGG1lbWJlcgABMFQ6OkFjY291bnRJZAABQHJlbGVhc2VkX2JhbGFuY2UYATBCYWxhbmNlT2Y8VD4ABxSYQSBtZW1iZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGEgcG9vbC4AUQFUaGUgcmVtb3ZhbCBjYW4gYmUgdm9sdW50YXJ5ICh3aXRoZHJhd24gYWxsIHVuYm9uZGVkIGZ1bmRzKSBvciBpbnZvbHVudGFyeSAoa2lja2VkKS5JAUFueSBmdW5kcyB0aGF0IGFyZSBzdGlsbCBkZWxlZ2F0ZWQgKGkuZS4gZGFuZ2xpbmcgZGVsZWdhdGlvbikgYXJlIHJlbGVhc2VkIGFuZCBhcmWIcmVwcmVzZW50ZWQgYnkgYHJlbGVhc2VkX2JhbGFuY2VgLjBSb2xlc1VwZGF0ZWQMARByb2904QEBUE9wdGlvbjxUOjpBY2NvdW50SWQ+AAEcYm91bmNlcuEBAVBPcHRpb248VDo6QWNjb3VudElkPgABJG5vbWluYXRvcuEBAVBPcHRpb248VDo6QWNjb3VudElkPgAICFUBVGhlIHJvbGVzIG9mIGEgcG9vbCBoYXZlIGJlZW4gdXBkYXRlZCB0byB0aGUgZ2l2ZW4gbmV3IHJvbGVzLiBOb3RlIHRoYXQgdGhlIGRlcG9zaXRvckRjYW4gbmV2ZXIgY2hhbmdlLixQb29sU2xhc2hlZAgBHHBvb2xfaWQQARhQb29sSWQAARxiYWxhbmNlGAEwQmFsYW5jZU9mPFQ+AAkEDQFUaGUgYWN0aXZlIGJhbGFuY2Ugb2YgcG9vbCBgcG9vbF9pZGAgaGFzIGJlZW4gc2xhc2hlZCB0byBgYmFsYW5jZWAuUFVuYm9uZGluZ1Bvb2xTbGFzaGVkDAEccG9vbF9pZBABGFBvb2xJZAABDGVyYRABIEVyYUluZGV4AAEcYmFsYW5jZRgBMEJhbGFuY2VPZjxUPgAKBCUBVGhlIHVuYm9uZCBwb29sIGF0IGBlcmFgIG9mIHBvb2wgYHBvb2xfaWRgIGhhcyBiZWVuIHNsYXNoZWQgdG8gYGJhbGFuY2VgLlRQb29sQ29tbWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEcY3VycmVudL0EAXxPcHRpb248KFBlcmJpbGwsIFQ6OkFjY291bnRJZCk+AAsEtEEgcG9vbCdzIGNvbW1pc3Npb24gc2V0dGluZyBoYXMgYmVlbiBjaGFuZ2VkLmBQb29sTWF4Q29tbWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAE4bWF4X2NvbW1pc3Npb26UARxQZXJiaWxsAAwE1EEgcG9vbCdzIG1heGltdW0gY29tbWlzc2lvbiBzZXR0aW5nIGhhcyBiZWVuIGNoYW5nZWQufFBvb2xDb21taXNzaW9uQ2hhbmdlUmF0ZVVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEsY2hhbmdlX3JhdGXFBAGcQ29tbWlzc2lvbkNoYW5nZVJhdGU8QmxvY2tOdW1iZXJGb3I8VD4+AA0EzEEgcG9vbCdzIGNvbW1pc3Npb24gYGNoYW5nZV9yYXRlYCBoYXMgYmVlbiBjaGFuZ2VkLpBQb29sQ29tbWlzc2lvbkNsYWltUGVybWlzc2lvblVwZGF0ZWQIARxwb29sX2lkEAEYUG9vbElkAAEocGVybWlzc2lvbskEAbxPcHRpb248Q29tbWlzc2lvbkNsYWltUGVybWlzc2lvbjxUOjpBY2NvdW50SWQ+PgAOBMhQb29sIGNvbW1pc3Npb24gY2xhaW0gcGVybWlzc2lvbiBoYXMgYmVlbiB1cGRhdGVkLlRQb29sQ29tbWlzc2lvbkNsYWltZWQIARxwb29sX2lkEAEYUG9vbElkAAEoY29tbWlzc2lvbhgBMEJhbGFuY2VPZjxUPgAPBIRQb29sIGNvbW1pc3Npb24gaGFzIGJlZW4gY2xhaW1lZC5kTWluQmFsYW5jZURlZmljaXRBZGp1c3RlZAgBHHBvb2xfaWQQARhQb29sSWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AEATIVG9wcGVkIHVwIGRlZmljaXQgaW4gZnJvemVuIEVEIG9mIHRoZSByZXdhcmQgcG9vbC5gTWluQmFsYW5jZUV4Y2Vzc0FkanVzdGVkCAEccG9vbF9pZBABGFBvb2xJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgARBLxDbGFpbWVkIGV4Y2VzcyBmcm96ZW4gRUQgb2YgYWYgdGhlIHJld2FyZCBwb29sLgRYRXZlbnRzIG9mIHRoaXMgcGFsbGV0LiEIDExwYWxsZXRfZmFzdF91bnN0YWtlGHBhbGxldBRFdmVudAQEVAABFCBVbnN0YWtlZAgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYcmVzdWx00QcBOERpc3BhdGNoUmVzdWx0AAAEWEEgc3Rha2VyIHdhcyB1bnN0YWtlZC4cU2xhc2hlZAgBFHN0YXNoAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAEEGQFBIHN0YWtlciB3YXMgc2xhc2hlZCBmb3IgcmVxdWVzdGluZyBmYXN0LXVuc3Rha2Ugd2hpbHN0IGJlaW5nIGV4cG9zZWQuMEJhdGNoQ2hlY2tlZAQBEGVyYXPJAQE0VmVjPEVyYUluZGV4PgACBEUBQSBiYXRjaCB3YXMgcGFydGlhbGx5IGNoZWNrZWQgZm9yIHRoZSBnaXZlbiBlcmFzLCBidXQgdGhlIHByb2Nlc3MgZGlkIG5vdCBmaW5pc2guNEJhdGNoRmluaXNoZWQEARBzaXplEAEMdTMyAAMQnEEgYmF0Y2ggb2YgYSBnaXZlbiBzaXplIHdhcyB0ZXJtaW5hdGVkLgBVAVRoaXMgaXMgYWx3YXlzIGZvbGxvd3MgYnkgYSBudW1iZXIgb2YgYFVuc3Rha2VkYCBvciBgU2xhc2hlZGAgZXZlbnRzLCBtYXJraW5nIHRoZSBlbmTob2YgdGhlIGJhdGNoLiBBIG5ldyBiYXRjaCB3aWxsIGJlIGNyZWF0ZWQgdXBvbiBuZXh0IGJsb2NrLjRJbnRlcm5hbEVycm9yAAQE6EFuIGludGVybmFsIGVycm9yIGhhcHBlbmVkLiBPcGVyYXRpb25zIHdpbGwgYmUgcGF1c2VkIG5vdy4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQlCAxgcGFsbGV0X2RlbGVnYXRlZF9zdGFraW5nGHBhbGxldBRFdmVudAQEVAABECREZWxlZ2F0ZWQMARRhZ2VudAABMFQ6OkFjY291bnRJZAABJGRlbGVnYXRvcgABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgAABHxGdW5kcyBkZWxlZ2F0ZWQgYnkgYSBkZWxlZ2F0b3IuIFJlbGVhc2VkDAEUYWdlbnQAATBUOjpBY2NvdW50SWQAASRkZWxlZ2F0b3IAATBUOjpBY2NvdW50SWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAQR4RnVuZHMgcmVsZWFzZWQgdG8gYSBkZWxlZ2F0b3IuHFNsYXNoZWQMARRhZ2VudAABMFQ6OkFjY291bnRJZAABJGRlbGVnYXRvcgABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgACBHxGdW5kcyBzbGFzaGVkIGZyb20gYSBkZWxlZ2F0b3IuSE1pZ3JhdGVkRGVsZWdhdGlvbgwBFGFnZW50AAEwVDo6QWNjb3VudElkAAEkZGVsZWdhdG9yAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAMExFVuY2xhaW1lZCBkZWxlZ2F0aW9uIGZ1bmRzIG1pZ3JhdGVkIHRvIGRlbGVnYXRvci4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQpCBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJGluY2x1c2lvbhhwYWxsZXQURXZlbnQEBFQAARA8Q2FuZGlkYXRlQmFja2VkEAAtCAFkQ2FuZGlkYXRlUmVjZWlwdDxUOjpIYXNoPgAAXQUBIEhlYWREYXRhAAAxCAEkQ29yZUluZGV4AAA1CAEoR3JvdXBJbmRleAAABMBBIGNhbmRpZGF0ZSB3YXMgYmFja2VkLiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWBEQ2FuZGlkYXRlSW5jbHVkZWQQAC0IAWRDYW5kaWRhdGVSZWNlaXB0PFQ6Okhhc2g+AABdBQEgSGVhZERhdGEAADEIASRDb3JlSW5kZXgAADUIAShHcm91cEluZGV4AAEEyEEgY2FuZGlkYXRlIHdhcyBpbmNsdWRlZC4gYFtjYW5kaWRhdGUsIGhlYWRfZGF0YV1gRENhbmRpZGF0ZVRpbWVkT3V0DAAtCAFkQ2FuZGlkYXRlUmVjZWlwdDxUOjpIYXNoPgAAXQUBIEhlYWREYXRhAAAxCAEkQ29yZUluZGV4AAIEvEEgY2FuZGlkYXRlIHRpbWVkIG91dC4gYFtjYW5kaWRhdGUsIGhlYWRfZGF0YV1gWFVwd2FyZE1lc3NhZ2VzUmVjZWl2ZWQIARBmcm9taQIBGFBhcmFJZAABFGNvdW50EAEMdTMyAAME+FNvbWUgdXB3YXJkIG1lc3NhZ2VzIGhhdmUgYmVlbiByZWNlaXZlZCBhbmQgd2lsbCBiZSBwcm9jZXNzZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0LQgMTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhAQ2FuZGlkYXRlUmVjZWlwdAQESAE0AAgBKGRlc2NyaXB0b3IxBQFYQ2FuZGlkYXRlRGVzY3JpcHRvcjxIPgABQGNvbW1pdG1lbnRzX2hhc2g0ARBIYXNoAAAxCAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCRDb3JlSW5kZXgAAAQAEAEMdTMyAAA1CAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OChHcm91cEluZGV4AAAEABABDHUzMgAAOQgQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxRwYXJhcxhwYWxsZXQURXZlbnQAASBIQ3VycmVudENvZGVVcGRhdGVkBABpAgEYUGFyYUlkAAAEzEN1cnJlbnQgY29kZSBoYXMgYmVlbiB1cGRhdGVkIGZvciBhIFBhcmEuIGBwYXJhX2lkYEhDdXJyZW50SGVhZFVwZGF0ZWQEAGkCARhQYXJhSWQAAQTMQ3VycmVudCBoZWFkIGhhcyBiZWVuIHVwZGF0ZWQgZm9yIGEgUGFyYS4gYHBhcmFfaWRgUENvZGVVcGdyYWRlU2NoZWR1bGVkBABpAgEYUGFyYUlkAAIE3EEgY29kZSB1cGdyYWRlIGhhcyBiZWVuIHNjaGVkdWxlZCBmb3IgYSBQYXJhLiBgcGFyYV9pZGAwTmV3SGVhZE5vdGVkBABpAgEYUGFyYUlkAAMEvEEgbmV3IGhlYWQgaGFzIGJlZW4gbm90ZWQgZm9yIGEgUGFyYS4gYHBhcmFfaWRgMEFjdGlvblF1ZXVlZAgAaQIBGFBhcmFJZAAAEAEwU2Vzc2lvbkluZGV4AAQE8EEgcGFyYSBoYXMgYmVlbiBxdWV1ZWQgdG8gZXhlY3V0ZSBwZW5kaW5nIGFjdGlvbnMuIGBwYXJhX2lkYDxQdmZDaGVja1N0YXJ0ZWQIAD0FAUhWYWxpZGF0aW9uQ29kZUhhc2gAAGkCARhQYXJhSWQABQhVAVRoZSBnaXZlbiBwYXJhIGVpdGhlciBpbml0aWF0ZWQgb3Igc3Vic2NyaWJlZCB0byBhIFBWRiBjaGVjayBmb3IgdGhlIGdpdmVuIHZhbGlkYXRpb25sY29kZS4gYGNvZGVfaGFzaGAgYHBhcmFfaWRgQFB2ZkNoZWNrQWNjZXB0ZWQIAD0FAUhWYWxpZGF0aW9uQ29kZUhhc2gAAGkCARhQYXJhSWQABggRAVRoZSBnaXZlbiB2YWxpZGF0aW9uIGNvZGUgd2FzIGFjY2VwdGVkIGJ5IHRoZSBQVkYgcHJlLWNoZWNraW5nIHZvdGUuVGBjb2RlX2hhc2hgIGBwYXJhX2lkYEBQdmZDaGVja1JlamVjdGVkCAA9BQFIVmFsaWRhdGlvbkNvZGVIYXNoAABpAgEYUGFyYUlkAAcIEQFUaGUgZ2l2ZW4gdmFsaWRhdGlvbiBjb2RlIHdhcyByZWplY3RlZCBieSB0aGUgUFZGIHByZS1jaGVja2luZyB2b3RlLlRgY29kZV9oYXNoYCBgcGFyYV9pZGAEfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXQ9CBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zEGhybXAYcGFsbGV0FEV2ZW50BARUAAEcUE9wZW5DaGFubmVsUmVxdWVzdGVkEAEYc2VuZGVyaQIBGFBhcmFJZAABJHJlY2lwaWVudGkCARhQYXJhSWQAAVRwcm9wb3NlZF9tYXhfY2FwYWNpdHkQAQx1MzIAAWRwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplEAEMdTMyAAAEcE9wZW4gSFJNUCBjaGFubmVsIHJlcXVlc3RlZC5MT3BlbkNoYW5uZWxDYW5jZWxlZAgBMGJ5X3BhcmFjaGFpbmkCARhQYXJhSWQAAShjaGFubmVsX2lknQUBNEhybXBDaGFubmVsSWQAAQQpAUFuIEhSTVAgY2hhbm5lbCByZXF1ZXN0IHNlbnQgYnkgdGhlIHJlY2VpdmVyIHdhcyBjYW5jZWxlZCBieSBlaXRoZXIgcGFydHkuTE9wZW5DaGFubmVsQWNjZXB0ZWQIARhzZW5kZXJpAgEYUGFyYUlkAAEkcmVjaXBpZW50aQIBGFBhcmFJZAACBGxPcGVuIEhSTVAgY2hhbm5lbCBhY2NlcHRlZC40Q2hhbm5lbENsb3NlZAgBMGJ5X3BhcmFjaGFpbmkCARhQYXJhSWQAAShjaGFubmVsX2lknQUBNEhybXBDaGFubmVsSWQAAwRQSFJNUCBjaGFubmVsIGNsb3NlZC5YSHJtcENoYW5uZWxGb3JjZU9wZW5lZBABGHNlbmRlcmkCARhQYXJhSWQAASRyZWNpcGllbnRpAgEYUGFyYUlkAAFUcHJvcG9zZWRfbWF4X2NhcGFjaXR5EAEMdTMyAAFkcHJvcG9zZWRfbWF4X21lc3NhZ2Vfc2l6ZRABDHUzMgAEBKxBbiBIUk1QIGNoYW5uZWwgd2FzIG9wZW5lZCB2aWEgUm9vdCBvcmlnaW4uXEhybXBTeXN0ZW1DaGFubmVsT3BlbmVkEAEYc2VuZGVyaQIBGFBhcmFJZAABJHJlY2lwaWVudGkCARhQYXJhSWQAAVRwcm9wb3NlZF9tYXhfY2FwYWNpdHkQAQx1MzIAAWRwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplEAEMdTMyAAUEvEFuIEhSTVAgY2hhbm5lbCB3YXMgb3BlbmVkIHdpdGggYSBzeXN0ZW0gY2hhaW4uaE9wZW5DaGFubmVsRGVwb3NpdHNVcGRhdGVkCAEYc2VuZGVyaQIBGFBhcmFJZAABJHJlY2lwaWVudGkCARhQYXJhSWQABgSgQW4gSFJNUCBjaGFubmVsJ3MgZGVwb3NpdHMgd2VyZSB1cGRhdGVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldEEIEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMYcGFsbGV0FEV2ZW50BARUAAEMQERpc3B1dGVJbml0aWF0ZWQIAHEFATRDYW5kaWRhdGVIYXNoAABFCAE8RGlzcHV0ZUxvY2F0aW9uAAAECQFBIGRpc3B1dGUgaGFzIGJlZW4gaW5pdGlhdGVkLiBcW2NhbmRpZGF0ZSBoYXNoLCBkaXNwdXRlIGxvY2F0aW9uXF1ARGlzcHV0ZUNvbmNsdWRlZAgAcQUBNENhbmRpZGF0ZUhhc2gAAEkIATREaXNwdXRlUmVzdWx0AAEIzEEgZGlzcHV0ZSBoYXMgY29uY2x1ZGVkIGZvciBvciBhZ2FpbnN0IGEgY2FuZGlkYXRlLrRgXFtwYXJhIGlkLCBjYW5kaWRhdGUgaGFzaCwgZGlzcHV0ZSByZXN1bHRcXWAYUmV2ZXJ0BAAQAURCbG9ja051bWJlckZvcjxUPgACEPxBIGRpc3B1dGUgaGFzIGNvbmNsdWRlZCB3aXRoIHN1cGVybWFqb3JpdHkgYWdhaW5zdCBhIGNhbmRpZGF0ZS4NAUJsb2NrIGF1dGhvcnMgc2hvdWxkIG5vIGxvbmdlciBidWlsZCBvbiB0b3Agb2YgdGhpcyBoZWFkIGFuZCBzaG91bGQBAWluc3RlYWQgcmV2ZXJ0IHRoZSBibG9jayBhdCB0aGUgZ2l2ZW4gaGVpZ2h0LiBUaGlzIHNob3VsZCBiZSB0aGX8bnVtYmVyIG9mIHRoZSBjaGlsZCBvZiB0aGUgbGFzdCBrbm93biB2YWxpZCBibG9jayBpbiB0aGUgY2hhaW4uBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0RQgMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBkaXNwdXRlczxEaXNwdXRlTG9jYXRpb24AAQgUTG9jYWwAAAAYUmVtb3RlAAEAAEkIDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXM0RGlzcHV0ZVJlc3VsdAABCBRWYWxpZAAAABxJbnZhbGlkAAEAAE0IEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkb25fZGVtYW5kGHBhbGxldBRFdmVudAQEVAABCExPbkRlbWFuZE9yZGVyUGxhY2VkDAEccGFyYV9pZGkCARhQYXJhSWQAAShzcG90X3ByaWNlGAEwQmFsYW5jZU9mPFQ+AAEob3JkZXJlZF9ieQABMFQ6OkFjY291bnRJZAAABA0BQW4gb3JkZXIgd2FzIHBsYWNlZCBhdCBzb21lIHNwb3QgcHJpY2UgYW1vdW50IGJ5IG9yZGVyZXIgb3JkZXJlZF9ieTBTcG90UHJpY2VTZXQEAShzcG90X3ByaWNlGAEwQmFsYW5jZU9mPFQ+AAEEuFRoZSB2YWx1ZSBvZiB0aGUgc3BvdCBwcmljZSBoYXMgbGlrZWx5IGNoYW5nZWQEfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRRCBBccG9sa2Fkb3RfcnVudGltZV9jb21tb248cGFyYXNfcmVnaXN0cmFyGHBhbGxldBRFdmVudAQEVAABEChSZWdpc3RlcmVkCAEccGFyYV9pZGkCARhQYXJhSWQAARxtYW5hZ2VyAAEwVDo6QWNjb3VudElkAAAAMERlcmVnaXN0ZXJlZAQBHHBhcmFfaWRpAgEYUGFyYUlkAAEAIFJlc2VydmVkCAEccGFyYV9pZGkCARhQYXJhSWQAAQx3aG8AATBUOjpBY2NvdW50SWQAAgAcU3dhcHBlZAgBHHBhcmFfaWRpAgEYUGFyYUlkAAEgb3RoZXJfaWRpAgEYUGFyYUlkAAMABHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0VQgQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uFHNsb3RzGHBhbGxldBRFdmVudAQEVAABCDhOZXdMZWFzZVBlcmlvZAQBMGxlYXNlX3BlcmlvZBABQExlYXNlUGVyaW9kT2Y8VD4AAASQQSBuZXcgYFtsZWFzZV9wZXJpb2RdYCBpcyBiZWdpbm5pbmcuGExlYXNlZBgBHHBhcmFfaWRpAgEYUGFyYUlkAAEYbGVhc2VyAAEwVDo6QWNjb3VudElkAAEwcGVyaW9kX2JlZ2luEAFATGVhc2VQZXJpb2RPZjxUPgABMHBlcmlvZF9jb3VudBABQExlYXNlUGVyaW9kT2Y8VD4AAThleHRyYV9yZXNlcnZlZBgBMEJhbGFuY2VPZjxUPgABMHRvdGFsX2Ftb3VudBgBMEJhbGFuY2VPZjxUPgABDDUBQSBwYXJhIGhhcyB3b24gdGhlIHJpZ2h0IHRvIGEgY29udGludW91cyBzZXQgb2YgbGVhc2UgcGVyaW9kcyBhcyBhIHBhcmFjaGFpbi5FAUZpcnN0IGJhbGFuY2UgaXMgYW55IGV4dHJhIGFtb3VudCByZXNlcnZlZCBvbiB0b3Agb2YgdGhlIHBhcmEncyBleGlzdGluZyBkZXBvc2l0LrBTZWNvbmQgYmFsYW5jZSBpcyB0aGUgdG90YWwgYW1vdW50IHJlc2VydmVkLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldFkIEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbiBhdWN0aW9ucxhwYWxsZXQURXZlbnQEBFQAARw4QXVjdGlvblN0YXJ0ZWQMATRhdWN0aW9uX2luZGV4EAEwQXVjdGlvbkluZGV4AAEwbGVhc2VfcGVyaW9kEAFATGVhc2VQZXJpb2RPZjxUPgABGGVuZGluZxABREJsb2NrTnVtYmVyRm9yPFQ+AAAISQFBbiBhdWN0aW9uIHN0YXJ0ZWQuIFByb3ZpZGVzIGl0cyBpbmRleCBhbmQgdGhlIGJsb2NrIG51bWJlciB3aGVyZSBpdCB3aWxsIGJlZ2luIHRvFQFjbG9zZSBhbmQgdGhlIGZpcnN0IGxlYXNlIHBlcmlvZCBvZiB0aGUgcXVhZHJ1cGxldCB0aGF0IGlzIGF1Y3Rpb25lZC40QXVjdGlvbkNsb3NlZAQBNGF1Y3Rpb25faW5kZXgQATBBdWN0aW9uSW5kZXgAAQS4QW4gYXVjdGlvbiBlbmRlZC4gQWxsIGZ1bmRzIGJlY29tZSB1bnJlc2VydmVkLiBSZXNlcnZlZAwBGGJpZGRlcgABMFQ6OkFjY291bnRJZAABOGV4dHJhX3Jlc2VydmVkGAEwQmFsYW5jZU9mPFQ+AAEwdG90YWxfYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAIISQFGdW5kcyB3ZXJlIHJlc2VydmVkIGZvciBhIHdpbm5pbmcgYmlkLiBGaXJzdCBiYWxhbmNlIGlzIHRoZSBleHRyYSBhbW91bnQgcmVzZXJ2ZWQuUFNlY29uZCBpcyB0aGUgdG90YWwuKFVucmVzZXJ2ZWQIARhiaWRkZXIAATBUOjpBY2NvdW50SWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAwQpAUZ1bmRzIHdlcmUgdW5yZXNlcnZlZCBzaW5jZSBiaWRkZXIgaXMgbm8gbG9uZ2VyIGFjdGl2ZS4gYFtiaWRkZXIsIGFtb3VudF1gSFJlc2VydmVDb25maXNjYXRlZAwBHHBhcmFfaWRpAgEYUGFyYUlkAAEYbGVhc2VyAAEwVDo6QWNjb3VudElkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAQIVQFTb21lb25lIGF0dGVtcHRlZCB0byBsZWFzZSB0aGUgc2FtZSBzbG90IHR3aWNlIGZvciBhIHBhcmFjaGFpbi4gVGhlIGFtb3VudCBpcyBoZWxkIGluuHJlc2VydmUgYnV0IG5vIHBhcmFjaGFpbiBzbG90IGhhcyBiZWVuIGxlYXNlZC4sQmlkQWNjZXB0ZWQUARhiaWRkZXIAATBUOjpBY2NvdW50SWQAARxwYXJhX2lkaQIBGFBhcmFJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgABKGZpcnN0X3Nsb3QQAUBMZWFzZVBlcmlvZE9mPFQ+AAEkbGFzdF9zbG90EAFATGVhc2VQZXJpb2RPZjxUPgAFBMhBIG5ldyBiaWQgaGFzIGJlZW4gYWNjZXB0ZWQgYXMgdGhlIGN1cnJlbnQgd2lubmVyLjRXaW5uaW5nT2Zmc2V0CAE0YXVjdGlvbl9pbmRleBABMEF1Y3Rpb25JbmRleAABMGJsb2NrX251bWJlchABREJsb2NrTnVtYmVyRm9yPFQ+AAYIWQFUaGUgd2lubmluZyBvZmZzZXQgd2FzIGNob3NlbiBmb3IgYW4gYXVjdGlvbi4gVGhpcyB3aWxsIG1hcCBpbnRvIHRoZSBgV2lubmluZ2Agc3RvcmFnZRBtYXAuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0XQgQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uJGNyb3dkbG9hbhhwYWxsZXQURXZlbnQEBFQAASgcQ3JlYXRlZAQBHHBhcmFfaWRpAgEYUGFyYUlkAAAEjENyZWF0ZSBhIG5ldyBjcm93ZGxvYW5pbmcgY2FtcGFpZ24uLENvbnRyaWJ1dGVkDAEMd2hvAAEwVDo6QWNjb3VudElkAAEoZnVuZF9pbmRleGkCARhQYXJhSWQAARhhbW91bnQYATBCYWxhbmNlT2Y8VD4AAQRwQ29udHJpYnV0ZWQgdG8gYSBjcm93ZCBzYWxlLiBXaXRoZHJldwwBDHdobwABMFQ6OkFjY291bnRJZAABKGZ1bmRfaW5kZXhpAgEYUGFyYUlkAAEYYW1vdW50GAEwQmFsYW5jZU9mPFQ+AAIEnFdpdGhkcmV3IGZ1bGwgYmFsYW5jZSBvZiBhIGNvbnRyaWJ1dG9yLkRQYXJ0aWFsbHlSZWZ1bmRlZAQBHHBhcmFfaWRpAgEYUGFyYUlkAAMILQFUaGUgbG9hbnMgaW4gYSBmdW5kIGhhdmUgYmVlbiBwYXJ0aWFsbHkgZGlzc29sdmVkLCBpLmUuIHRoZXJlIGFyZSBzb21lIGxlZnS0b3ZlciBjaGlsZCBrZXlzIHRoYXQgc3RpbGwgbmVlZCB0byBiZSBraWxsZWQuLEFsbFJlZnVuZGVkBAEccGFyYV9pZGkCARhQYXJhSWQABAScQWxsIGxvYW5zIGluIGEgZnVuZCBoYXZlIGJlZW4gcmVmdW5kZWQuJERpc3NvbHZlZAQBHHBhcmFfaWRpAgEYUGFyYUlkAAUESEZ1bmQgaXMgZGlzc29sdmVkLjxIYW5kbGVCaWRSZXN1bHQIARxwYXJhX2lkaQIBGFBhcmFJZAABGHJlc3VsdNEHAThEaXNwYXRjaFJlc3VsdAAGBPRUaGUgcmVzdWx0IG9mIHRyeWluZyB0byBzdWJtaXQgYSBuZXcgYmlkIHRvIHRoZSBTbG90cyBwYWxsZXQuGEVkaXRlZAQBHHBhcmFfaWRpAgEYUGFyYUlkAAcExFRoZSBjb25maWd1cmF0aW9uIHRvIGEgY3Jvd2Rsb2FuIGhhcyBiZWVuIGVkaXRlZC4sTWVtb1VwZGF0ZWQMAQx3aG8AATBUOjpBY2NvdW50SWQAARxwYXJhX2lkaQIBGFBhcmFJZAABEG1lbW84ARxWZWM8dTg+AAgEYEEgbWVtbyBoYXMgYmVlbiB1cGRhdGVkLjxBZGRlZFRvTmV3UmFpc2UEARxwYXJhX2lkaQIBGFBhcmFJZAAJBKBBIHBhcmFjaGFpbiBoYXMgYmVlbiBtb3ZlZCB0byBgTmV3UmFpc2VgBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0YQgQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyBjb3JldGltZRhwYWxsZXQURXZlbnQEBFQAAQhQUmV2ZW51ZUluZm9SZXF1ZXN0ZWQEARB3aGVuEAFEQmxvY2tOdW1iZXJGb3I8VD4AAAQhAVRoZSBicm9rZXIgY2hhaW4gaGFzIGFza2VkIGZvciByZXZlbnVlIGluZm9ybWF0aW9uIGZvciBhIHNwZWNpZmljIGJsb2NrLjBDb3JlQXNzaWduZWQEARBjb3JlMQgBJENvcmVJbmRleAABBOxBIGNvcmUgaGFzIHJlY2VpdmVkIGEgbmV3IGFzc2lnbm1lbnQgZnJvbSB0aGUgYnJva2VyIGNoYWluLgR8VGhlIGBFdmVudGAgZW51bSBvZiB0aGlzIHBhbGxldGUIDChwYWxsZXRfeGNtGHBhbGxldBRFdmVudAQEVAABYCRBdHRlbXB0ZWQEARxvdXRjb21laQgBUHhjbTo6bGF0ZXN0OjpPdXRjb21lAAAEqEV4ZWN1dGlvbiBvZiBhbiBYQ00gbWVzc2FnZSB3YXMgYXR0ZW1wdGVkLhBTZW50EAEYb3JpZ2lu9AEgTG9jYXRpb24AASxkZXN0aW5hdGlvbvQBIExvY2F0aW9uAAEcbWVzc2FnZa0GARxYY208KCk+AAEobWVzc2FnZV9pZAQBHFhjbUhhc2gAAQRcQSBYQ00gbWVzc2FnZSB3YXMgc2VudC5IVW5leHBlY3RlZFJlc3BvbnNlCAEYb3JpZ2lu9AEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAAgxZAVF1ZXJ5IHJlc3BvbnNlIHJlY2VpdmVkIHdoaWNoIGRvZXMgbm90IG1hdGNoIGEgcmVnaXN0ZXJlZCBxdWVyeS4gVGhpcyBtYXkgYmUgYmVjYXVzZSBhVQFtYXRjaGluZyBxdWVyeSB3YXMgbmV2ZXIgcmVnaXN0ZXJlZCwgaXQgbWF5IGJlIGJlY2F1c2UgaXQgaXMgYSBkdXBsaWNhdGUgcmVzcG9uc2UsIG9ycGJlY2F1c2UgdGhlIHF1ZXJ5IHRpbWVkIG91dC40UmVzcG9uc2VSZWFkeQgBIHF1ZXJ5X2lkMAEcUXVlcnlJZAABIHJlc3BvbnNlzQYBIFJlc3BvbnNlAAMIXQFRdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBhbmQgaXMgcmVhZHkgZm9yIHRha2luZyB3aXRoIGB0YWtlX3Jlc3BvbnNlYC4gVGhlcmUgaXOAbm8gcmVnaXN0ZXJlZCBub3RpZmljYXRpb24gY2FsbC4gTm90aWZpZWQMASBxdWVyeV9pZDABHFF1ZXJ5SWQAATBwYWxsZXRfaW5kZXgIAQh1OAABKGNhbGxfaW5kZXgIAQh1OAAECFkBUXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIHF1ZXJ5IGlzIHJlbW92ZWQuIFRoZSByZWdpc3RlcmVkIG5vdGlmaWNhdGlvbiBoYXOoYmVlbiBkaXNwYXRjaGVkIGFuZCBleGVjdXRlZCBzdWNjZXNzZnVsbHkuQE5vdGlmeU92ZXJ3ZWlnaHQUASBxdWVyeV9pZDABHFF1ZXJ5SWQAATBwYWxsZXRfaW5kZXgIAQh1OAABKGNhbGxfaW5kZXgIAQh1OAABNGFjdHVhbF93ZWlnaHQoARhXZWlnaHQAAUxtYXhfYnVkZ2V0ZWRfd2VpZ2h0KAEYV2VpZ2h0AAUMSQFRdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBhbmQgcXVlcnkgaXMgcmVtb3ZlZC4gVGhlIHJlZ2lzdGVyZWQgbm90aWZpY2F0aW9uWQFjb3VsZCBub3QgYmUgZGlzcGF0Y2hlZCBiZWNhdXNlIHRoZSBkaXNwYXRjaCB3ZWlnaHQgaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtIHdlaWdodORvcmlnaW5hbGx5IGJ1ZGdldGVkIGJ5IHRoaXMgcnVudGltZSBmb3IgdGhlIHF1ZXJ5IHJlc3VsdC5MTm90aWZ5RGlzcGF0Y2hFcnJvcgwBIHF1ZXJ5X2lkMAEcUXVlcnlJZAABMHBhbGxldF9pbmRleAgBCHU4AAEoY2FsbF9pbmRleAgBCHU4AAYIVQFRdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBhbmQgcXVlcnkgaXMgcmVtb3ZlZC4gVGhlcmUgd2FzIGEgZ2VuZXJhbCBlcnJvciB3aXRoiGRpc3BhdGNoaW5nIHRoZSBub3RpZmljYXRpb24gY2FsbC5ITm90aWZ5RGVjb2RlRmFpbGVkDAEgcXVlcnlfaWQwARxRdWVyeUlkAAEwcGFsbGV0X2luZGV4CAEIdTgAAShjYWxsX2luZGV4CAEIdTgABwxRAVF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBxdWVyeSBpcyByZW1vdmVkLiBUaGUgZGlzcGF0Y2ggd2FzIHVuYWJsZSB0byBiZVkBZGVjb2RlZCBpbnRvIGEgYENhbGxgOyB0aGlzIG1pZ2h0IGJlIGR1ZSB0byBkaXNwYXRjaCBmdW5jdGlvbiBoYXZpbmcgYSBzaWduYXR1cmUgd2hpY2iUaXMgbm90IGAob3JpZ2luLCBRdWVyeUlkLCBSZXNwb25zZSlgLkBJbnZhbGlkUmVzcG9uZGVyDAEYb3JpZ2lu9AEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAAURleHBlY3RlZF9sb2NhdGlvbuEGAUBPcHRpb248TG9jYXRpb24+AAgMWQFFeHBlY3RlZCBxdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBidXQgdGhlIG9yaWdpbiBsb2NhdGlvbiBvZiB0aGUgcmVzcG9uc2UgZG9lc1UBbm90IG1hdGNoIHRoYXQgZXhwZWN0ZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQgZm9yIGEgbGF0ZXIsIHZhbGlkLCByZXNwb25zZSB0b2xiZSByZWNlaXZlZCBhbmQgYWN0ZWQgdXBvbi5cSW52YWxpZFJlc3BvbmRlclZlcnNpb24IARhvcmlnaW70ASBMb2NhdGlvbgABIHF1ZXJ5X2lkMAEcUXVlcnlJZAAJHFEBRXhwZWN0ZWQgcXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYnV0IHRoZSBleHBlY3RlZCBvcmlnaW4gbG9jYXRpb24gcGxhY2VkIGluTQFzdG9yYWdlIGJ5IHRoaXMgcnVudGltZSBwcmV2aW91c2x5IGNhbm5vdCBiZSBkZWNvZGVkLiBUaGUgcXVlcnkgcmVtYWlucyByZWdpc3RlcmVkLgBBAVRoaXMgaXMgdW5leHBlY3RlZCAoc2luY2UgYSBsb2NhdGlvbiBwbGFjZWQgaW4gc3RvcmFnZSBpbiBhIHByZXZpb3VzbHkgZXhlY3V0aW5nTQFydW50aW1lIHNob3VsZCBiZSByZWFkYWJsZSBwcmlvciB0byBxdWVyeSB0aW1lb3V0KSBhbmQgZGFuZ2Vyb3VzIHNpbmNlIHRoZSBwb3NzaWJseVkBdmFsaWQgcmVzcG9uc2Ugd2lsbCBiZSBkcm9wcGVkLiBNYW51YWwgZ292ZXJuYW5jZSBpbnRlcnZlbnRpb24gaXMgcHJvYmFibHkgZ29pbmcgdG8gYmUcbmVlZGVkLjRSZXNwb25zZVRha2VuBAEgcXVlcnlfaWQwARxRdWVyeUlkAAoEyFJlY2VpdmVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlYWQgYW5kIHJlbW92ZWQuNEFzc2V0c1RyYXBwZWQMARBoYXNoNAEQSDI1NgABGG9yaWdpbvQBIExvY2F0aW9uAAEYYXNzZXRz9QYBPFZlcnNpb25lZEFzc2V0cwALBLhTb21lIGFzc2V0cyBoYXZlIGJlZW4gcGxhY2VkIGluIGFuIGFzc2V0IHRyYXAuVFZlcnNpb25DaGFuZ2VOb3RpZmllZBABLGRlc3RpbmF0aW9u9AEgTG9jYXRpb24AARhyZXN1bHQQAShYY21WZXJzaW9uAAEQY29zdLkGARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAAMDCUBQW4gWENNIHZlcnNpb24gY2hhbmdlIG5vdGlmaWNhdGlvbiBtZXNzYWdlIGhhcyBiZWVuIGF0dGVtcHRlZCB0byBiZSBzZW50LgDgVGhlIGNvc3Qgb2Ygc2VuZGluZyBpdCAoYm9ybmUgYnkgdGhlIGNoYWluKSBpcyBpbmNsdWRlZC5cU3VwcG9ydGVkVmVyc2lvbkNoYW5nZWQIASBsb2NhdGlvbvQBIExvY2F0aW9uAAEcdmVyc2lvbhABKFhjbVZlcnNpb24ADQg5AVRoZSBzdXBwb3J0ZWQgdmVyc2lvbiBvZiBhIGxvY2F0aW9uIGhhcyBiZWVuIGNoYW5nZWQuIFRoaXMgbWlnaHQgYmUgdGhyb3VnaCBhbsBhdXRvbWF0aWMgbm90aWZpY2F0aW9uIG9yIGEgbWFudWFsIGludGVydmVudGlvbi5QTm90aWZ5VGFyZ2V0U2VuZEZhaWwMASBsb2NhdGlvbvQBIExvY2F0aW9uAAEgcXVlcnlfaWQwARxRdWVyeUlkAAEUZXJyb3J1BgEgWGNtRXJyb3IADghZAUEgZ2l2ZW4gbG9jYXRpb24gd2hpY2ggaGFkIGEgdmVyc2lvbiBjaGFuZ2Ugc3Vic2NyaXB0aW9uIHdhcyBkcm9wcGVkIG93aW5nIHRvIGFuIGVycm9yfHNlbmRpbmcgdGhlIG5vdGlmaWNhdGlvbiB0byBpdC5kTm90aWZ5VGFyZ2V0TWlncmF0aW9uRmFpbAgBIGxvY2F0aW9uLQEBRFZlcnNpb25lZExvY2F0aW9uAAEgcXVlcnlfaWQwARxRdWVyeUlkAA8IWQFBIGdpdmVuIGxvY2F0aW9uIHdoaWNoIGhhZCBhIHZlcnNpb24gY2hhbmdlIHN1YnNjcmlwdGlvbiB3YXMgZHJvcHBlZCBvd2luZyB0byBhbiBlcnJvcrRtaWdyYXRpbmcgdGhlIGxvY2F0aW9uIHRvIG91ciBuZXcgWENNIGZvcm1hdC5USW52YWxpZFF1ZXJpZXJWZXJzaW9uCAEYb3JpZ2lu9AEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAEBxVAUV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgZXhwZWN0ZWQgcXVlcmllciBsb2NhdGlvbiBwbGFjZWQgaW5NAXN0b3JhZ2UgYnkgdGhpcyBydW50aW1lIHByZXZpb3VzbHkgY2Fubm90IGJlIGRlY29kZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQuAEEBVGhpcyBpcyB1bmV4cGVjdGVkIChzaW5jZSBhIGxvY2F0aW9uIHBsYWNlZCBpbiBzdG9yYWdlIGluIGEgcHJldmlvdXNseSBleGVjdXRpbmdNAXJ1bnRpbWUgc2hvdWxkIGJlIHJlYWRhYmxlIHByaW9yIHRvIHF1ZXJ5IHRpbWVvdXQpIGFuZCBkYW5nZXJvdXMgc2luY2UgdGhlIHBvc3NpYmx5WQF2YWxpZCByZXNwb25zZSB3aWxsIGJlIGRyb3BwZWQuIE1hbnVhbCBnb3Zlcm5hbmNlIGludGVydmVudGlvbiBpcyBwcm9iYWJseSBnb2luZyB0byBiZRxuZWVkZWQuOEludmFsaWRRdWVyaWVyEAEYb3JpZ2lu9AEgTG9jYXRpb24AASBxdWVyeV9pZDABHFF1ZXJ5SWQAAUBleHBlY3RlZF9xdWVyaWVy9AEgTG9jYXRpb24AAVBtYXliZV9hY3R1YWxfcXVlcmllcuEGAUBPcHRpb248TG9jYXRpb24+ABEMXQFFeHBlY3RlZCBxdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBidXQgdGhlIHF1ZXJpZXIgbG9jYXRpb24gb2YgdGhlIHJlc3BvbnNlIGRvZXNRAW5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQgZm9yIGEgbGF0ZXIsIHZhbGlkLCByZXNwb25zZSB0b2xiZSByZWNlaXZlZCBhbmQgYWN0ZWQgdXBvbi5QVmVyc2lvbk5vdGlmeVN0YXJ0ZWQMASxkZXN0aW5hdGlvbvQBIExvY2F0aW9uAAEQY29zdLkGARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAASCFkBQSByZW1vdGUgaGFzIHJlcXVlc3RlZCBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9uIGZyb20gdXMgYW5kIHdlIGhhdmUgaG9ub3JlZCBpdC4dAUEgdmVyc2lvbiBpbmZvcm1hdGlvbiBtZXNzYWdlIGlzIHNlbnQgdG8gdGhlbSBhbmQgaXRzIGNvc3QgaXMgaW5jbHVkZWQuWFZlcnNpb25Ob3RpZnlSZXF1ZXN0ZWQMASxkZXN0aW5hdGlvbvQBIExvY2F0aW9uAAEQY29zdLkGARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAATBD0BV2UgaGF2ZSByZXF1ZXN0ZWQgdGhhdCBhIHJlbW90ZSBjaGFpbiBzZW5kIHVzIFhDTSB2ZXJzaW9uIGNoYW5nZSBub3RpZmljYXRpb25zLmBWZXJzaW9uTm90aWZ5VW5yZXF1ZXN0ZWQMASxkZXN0aW5hdGlvbvQBIExvY2F0aW9uAAEQY29zdLkGARhBc3NldHMAAShtZXNzYWdlX2lkBAEcWGNtSGFzaAAUCCUBV2UgaGF2ZSByZXF1ZXN0ZWQgdGhhdCBhIHJlbW90ZSBjaGFpbiBzdG9wcyBzZW5kaW5nIHVzIFhDTSB2ZXJzaW9uIGNoYW5nZThub3RpZmljYXRpb25zLiBGZWVzUGFpZAgBGHBheWluZ/QBIExvY2F0aW9uAAEQZmVlc7kGARhBc3NldHMAFQQxAUZlZXMgd2VyZSBwYWlkIGZyb20gYSBsb2NhdGlvbiBmb3IgYW4gb3BlcmF0aW9uIChvZnRlbiBmb3IgdXNpbmcgYFNlbmRYY21gKS40QXNzZXRzQ2xhaW1lZAwBEGhhc2g0ARBIMjU2AAEYb3JpZ2lu9AEgTG9jYXRpb24AARhhc3NldHP1BgE8VmVyc2lvbmVkQXNzZXRzABYEwFNvbWUgYXNzZXRzIGhhdmUgYmVlbiBjbGFpbWVkIGZyb20gYW4gYXNzZXQgdHJhcGBWZXJzaW9uTWlncmF0aW9uRmluaXNoZWQEARx2ZXJzaW9uEAEoWGNtVmVyc2lvbgAXBIRBIFhDTSB2ZXJzaW9uIG1pZ3JhdGlvbiBmaW5pc2hlZC4EfFRoZSBgRXZlbnRgIGVudW0gb2YgdGhpcyBwYWxsZXRpCBAsc3RhZ2luZ194Y20IdjQYdHJhaXRzHE91dGNvbWUAAQwgQ29tcGxldGUEARB1c2VkKAEYV2VpZ2h0AAAAKEluY29tcGxldGUIARB1c2VkKAEYV2VpZ2h0AAEUZXJyb3J1BgEURXJyb3IAAQAURXJyb3IEARRlcnJvcnUGARRFcnJvcgACAABtCAxQcGFsbGV0X21lc3NhZ2VfcXVldWUYcGFsbGV0FEV2ZW50BARUAAEQQFByb2Nlc3NpbmdGYWlsZWQMAQhpZDQBEEgyNTYElFRoZSBgYmxha2UyXzI1NmAgaGFzaCBvZiB0aGUgbWVzc2FnZS4BGG9yaWdpbjEHAUhNZXNzYWdlT3JpZ2luT2Y8VD4EZFRoZSBxdWV1ZSBvZiB0aGUgbWVzc2FnZS4BFGVycm9ycQgBTFByb2Nlc3NNZXNzYWdlRXJyb3IQYFRoZSBlcnJvciB0aGF0IG9jY3VycmVkLgBJAVRoaXMgZXJyb3IgaXMgcHJldHR5IG9wYXF1ZS4gTW9yZSBmaW5lLWdyYWluZWQgZXJyb3JzIG5lZWQgdG8gYmUgZW1pdHRlZCBhcyBldmVudHNoYnkgdGhlIGBNZXNzYWdlUHJvY2Vzc29yYC4ABFUBTWVzc2FnZSBkaXNjYXJkZWQgZHVlIHRvIGFuIGVycm9yIGluIHRoZSBgTWVzc2FnZVByb2Nlc3NvcmAgKHVzdWFsbHkgYSBmb3JtYXQgZXJyb3IpLiRQcm9jZXNzZWQQAQhpZDQBEEgyNTYElFRoZSBgYmxha2UyXzI1NmAgaGFzaCBvZiB0aGUgbWVzc2FnZS4BGG9yaWdpbjEHAUhNZXNzYWdlT3JpZ2luT2Y8VD4EZFRoZSBxdWV1ZSBvZiB0aGUgbWVzc2FnZS4BLHdlaWdodF91c2VkKAEYV2VpZ2h0BMBIb3cgbXVjaCB3ZWlnaHQgd2FzIHVzZWQgdG8gcHJvY2VzcyB0aGUgbWVzc2FnZS4BHHN1Y2Nlc3MgARBib29sGIhXaGV0aGVyIHRoZSBtZXNzYWdlIHdhcyBwcm9jZXNzZWQuAEkBTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgbWVhbiB0aGF0IHRoZSB1bmRlcmx5aW5nIGBNZXNzYWdlUHJvY2Vzc29yYCB3YXMgaW50ZXJuYWxseTUBc3VjY2Vzc2Z1bC4gSXQgKnNvbGVseSogbWVhbnMgdGhhdCB0aGUgTVEgcGFsbGV0IHdpbGwgdHJlYXQgdGhpcyBhcyBhIHN1Y2Nlc3NNAWNvbmRpdGlvbiBhbmQgZGlzY2FyZCB0aGUgbWVzc2FnZS4gQW55IGludGVybmFsIGVycm9yIG5lZWRzIHRvIGJlIGVtaXR0ZWQgYXMgZXZlbnRzaGJ5IHRoZSBgTWVzc2FnZVByb2Nlc3NvcmAuAQRUTWVzc2FnZSBpcyBwcm9jZXNzZWQuSE92ZXJ3ZWlnaHRFbnF1ZXVlZBABCGlkBAEgW3U4OyAzMl0ElFRoZSBgYmxha2UyXzI1NmAgaGFzaCBvZiB0aGUgbWVzc2FnZS4BGG9yaWdpbjEHAUhNZXNzYWdlT3JpZ2luT2Y8VD4EZFRoZSBxdWV1ZSBvZiB0aGUgbWVzc2FnZS4BKHBhZ2VfaW5kZXgQASRQYWdlSW5kZXgEYFRoZSBwYWdlIG9mIHRoZSBtZXNzYWdlLgE0bWVzc2FnZV9pbmRleBABHFQ6OlNpemUEpFRoZSBpbmRleCBvZiB0aGUgbWVzc2FnZSB3aXRoaW4gdGhlIHBhZ2UuAgSMTWVzc2FnZSBwbGFjZWQgaW4gb3ZlcndlaWdodCBxdWV1ZS4oUGFnZVJlYXBlZAgBGG9yaWdpbjEHAUhNZXNzYWdlT3JpZ2luT2Y8VD4EWFRoZSBxdWV1ZSBvZiB0aGUgcGFnZS4BFGluZGV4EAEkUGFnZUluZGV4BFhUaGUgaW5kZXggb2YgdGhlIHBhZ2UuAwRUVGhpcyBwYWdlIHdhcyByZWFwZWQuBHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0cQgQNGZyYW1lX3N1cHBvcnQYdHJhaXRzIG1lc3NhZ2VzTFByb2Nlc3NNZXNzYWdlRXJyb3IAARgkQmFkRm9ybWF0AAAAHENvcnJ1cHQAAQAsVW5zdXBwb3J0ZWQAAgAoT3ZlcndlaWdodAQAKAEYV2VpZ2h0AAMAFFlpZWxkAAQARFN0YWNrTGltaXRSZWFjaGVkAAUAAHUIDERwYWxsZXRfYXNzZXRfcmF0ZRhwYWxsZXQURXZlbnQEBFQAAQxAQXNzZXRSYXRlQ3JlYXRlZAgBKGFzc2V0X2tpbmTEATBUOjpBc3NldEtpbmQAARByYXRlPQcBJEZpeGVkVTEyOAAAAEBBc3NldFJhdGVSZW1vdmVkBAEoYXNzZXRfa2luZMQBMFQ6OkFzc2V0S2luZAABAEBBc3NldFJhdGVVcGRhdGVkDAEoYXNzZXRfa2luZMQBMFQ6OkFzc2V0S2luZAABDG9sZD0HASRGaXhlZFUxMjgAAQxuZXc9BwEkRml4ZWRVMTI4AAIABHxUaGUgYEV2ZW50YCBlbnVtIG9mIHRoaXMgcGFsbGV0eQgIMGZyYW1lX3N5c3RlbRRQaGFzZQABDDhBcHBseUV4dHJpbnNpYwQAEAEMdTMyAAAAMEZpbmFsaXphdGlvbgABADhJbml0aWFsaXphdGlvbgACAAB9CAAAAhEDAIEICDBmcmFtZV9zeXN0ZW1YTGFzdFJ1bnRpbWVVcGdyYWRlSW5mbwAACAEwc3BlY192ZXJzaW9u1AFMY29kZWM6OkNvbXBhY3Q8dTMyPgABJHNwZWNfbmFtZYUIAWRzcF9ydW50aW1lOjpSdW50aW1lU3RyaW5nAACFCAAABQIAiQgIMGZyYW1lX3N5c3RlbWBDb2RlVXBncmFkZUF1dGhvcml6YXRpb24EBFQAAAgBJGNvZGVfaGFzaDQBHFQ6Okhhc2gAATRjaGVja192ZXJzaW9uIAEQYm9vbAAAjQgMMGZyYW1lX3N5c3RlbRhsaW1pdHMwQmxvY2tXZWlnaHRzAAAMAShiYXNlX2Jsb2NrKAEYV2VpZ2h0AAEkbWF4X2Jsb2NrKAEYV2VpZ2h0AAEkcGVyX2NsYXNzkQgBhFBlckRpc3BhdGNoQ2xhc3M8V2VpZ2h0c1BlckNsYXNzPgAAkQgMNGZyYW1lX3N1cHBvcnQgZGlzcGF0Y2hAUGVyRGlzcGF0Y2hDbGFzcwQEVAGVCAAMARhub3JtYWyVCAEEVAABLG9wZXJhdGlvbmFslQgBBFQAASRtYW5kYXRvcnmVCAEEVAAAlQgMMGZyYW1lX3N5c3RlbRhsaW1pdHM8V2VpZ2h0c1BlckNsYXNzAAAQAThiYXNlX2V4dHJpbnNpYygBGFdlaWdodAABNG1heF9leHRyaW5zaWOhBwE4T3B0aW9uPFdlaWdodD4AASRtYXhfdG90YWyhBwE4T3B0aW9uPFdlaWdodD4AASByZXNlcnZlZKEHAThPcHRpb248V2VpZ2h0PgAAmQgMMGZyYW1lX3N5c3RlbRhsaW1pdHMsQmxvY2tMZW5ndGgAAAQBDG1heJ0IAVRQZXJEaXNwYXRjaENsYXNzPHUzMj4AAJ0IDDRmcmFtZV9zdXBwb3J0IGRpc3BhdGNoQFBlckRpc3BhdGNoQ2xhc3MEBFQBEAAMARhub3JtYWwQAQRUAAEsb3BlcmF0aW9uYWwQAQRUAAEkbWFuZGF0b3J5EAEEVAAAoQgIKHNwX3dlaWdodHM8UnVudGltZURiV2VpZ2h0AAAIARByZWFkMAEMdTY0AAEUd3JpdGUwAQx1NjQAAKUICChzcF92ZXJzaW9uOFJ1bnRpbWVWZXJzaW9uAAAgASRzcGVjX25hbWWFCAE0UnVudGltZVN0cmluZwABJGltcGxfbmFtZYUIATRSdW50aW1lU3RyaW5nAAFEYXV0aG9yaW5nX3ZlcnNpb24QAQx1MzIAATBzcGVjX3ZlcnNpb24QAQx1MzIAATBpbXBsX3ZlcnNpb24QAQx1MzIAARBhcGlzqQgBHEFwaXNWZWMAAUx0cmFuc2FjdGlvbl92ZXJzaW9uEAEMdTMyAAE0c3RhdGVfdmVyc2lvbggBCHU4AACpCAQMQ293BARUAa0IAAQArQgAAACtCAAAArEIALEIAAAECB0GEAC1CAwwZnJhbWVfc3lzdGVtGHBhbGxldBRFcnJvcgQEVAABJDxJbnZhbGlkU3BlY05hbWUAAAgRAVRoZSBuYW1lIG9mIHNwZWNpZmljYXRpb24gZG9lcyBub3QgbWF0Y2ggYmV0d2VlbiB0aGUgY3VycmVudCBydW50aW1lUGFuZCB0aGUgbmV3IHJ1bnRpbWUuaFNwZWNWZXJzaW9uTmVlZHNUb0luY3JlYXNlAAEIQQFUaGUgc3BlY2lmaWNhdGlvbiB2ZXJzaW9uIGlzIG5vdCBhbGxvd2VkIHRvIGRlY3JlYXNlIGJldHdlZW4gdGhlIGN1cnJlbnQgcnVudGltZVBhbmQgdGhlIG5ldyBydW50aW1lLnRGYWlsZWRUb0V4dHJhY3RSdW50aW1lVmVyc2lvbgACDOxGYWlsZWQgdG8gZXh0cmFjdCB0aGUgcnVudGltZSB2ZXJzaW9uIGZyb20gdGhlIG5ldyBydW50aW1lLgAJAUVpdGhlciBjYWxsaW5nIGBDb3JlX3ZlcnNpb25gIG9yIGRlY29kaW5nIGBSdW50aW1lVmVyc2lvbmAgZmFpbGVkLkxOb25EZWZhdWx0Q29tcG9zaXRlAAME/FN1aWNpZGUgY2FsbGVkIHdoZW4gdGhlIGFjY291bnQgaGFzIG5vbi1kZWZhdWx0IGNvbXBvc2l0ZSBkYXRhLjxOb25aZXJvUmVmQ291bnQABAQ1AVRoZXJlIGlzIGEgbm9uLXplcm8gcmVmZXJlbmNlIGNvdW50IHByZXZlbnRpbmcgdGhlIGFjY291bnQgZnJvbSBiZWluZyBwdXJnZWQuMENhbGxGaWx0ZXJlZAAFBNBUaGUgb3JpZ2luIGZpbHRlciBwcmV2ZW50IHRoZSBjYWxsIHRvIGJlIGRpc3BhdGNoZWQubE11bHRpQmxvY2tNaWdyYXRpb25zT25nb2luZwAGBFUBQSBtdWx0aS1ibG9jayBtaWdyYXRpb24gaXMgb25nb2luZyBhbmQgcHJldmVudHMgdGhlIGN1cnJlbnQgY29kZSBmcm9tIGJlaW5nIHJlcGxhY2VkLkROb3RoaW5nQXV0aG9yaXplZAAHBFhObyB1cGdyYWRlIGF1dGhvcml6ZWQuMFVuYXV0aG9yaXplZAAIBJRUaGUgc3VibWl0dGVkIGNvZGUgaXMgbm90IGF1dGhvcml6ZWQuBGxFcnJvciBmb3IgdGhlIFN5c3RlbSBwYWxsZXS5CAxMYm91bmRlZF9jb2xsZWN0aW9uc0B3ZWFrX2JvdW5kZWRfdmVjOFdlYWtCb3VuZGVkVmVjCARUAb0IBFMAAAQAwQgBGFZlYzxUPgAAvQgAAAQIhQEwAMEIAAACvQgAxQgMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEEBFMAAAQAyQgBGFZlYzxUPgAAyQgAAAIEAM0IBBhPcHRpb24EBFQB0QgBCBBOb25lAAAAEFNvbWUEANEIAAABAADRCAxEc3BfY29uc2Vuc3VzX2JhYmUcZGlnZXN0cyRQcmVEaWdlc3QAAQwcUHJpbWFyeQQA1QgBQFByaW1hcnlQcmVEaWdlc3QAAQA4U2Vjb25kYXJ5UGxhaW4EAN0IAVxTZWNvbmRhcnlQbGFpblByZURpZ2VzdAACADBTZWNvbmRhcnlWUkYEAOEIAVRTZWNvbmRhcnlWUkZQcmVEaWdlc3QAAwAA1QgMRHNwX2NvbnNlbnN1c19iYWJlHGRpZ2VzdHNAUHJpbWFyeVByZURpZ2VzdAAADAE8YXV0aG9yaXR5X2luZGV4EAFUc3VwZXI6OkF1dGhvcml0eUluZGV4AAEQc2xvdIkBARBTbG90AAE0dnJmX3NpZ25hdHVyZdkIATBWcmZTaWduYXR1cmUAANkIEBxzcF9jb3JlHHNyMjU1MTkMdnJmMFZyZlNpZ25hdHVyZQAACAEocHJlX291dHB1dAQBMFZyZlByZU91dHB1dAABFHByb29mLQIBIFZyZlByb29mAADdCAxEc3BfY29uc2Vuc3VzX2JhYmUcZGlnZXN0c1xTZWNvbmRhcnlQbGFpblByZURpZ2VzdAAACAE8YXV0aG9yaXR5X2luZGV4EAFUc3VwZXI6OkF1dGhvcml0eUluZGV4AAEQc2xvdIkBARBTbG90AADhCAxEc3BfY29uc2Vuc3VzX2JhYmUcZGlnZXN0c1RTZWNvbmRhcnlWUkZQcmVEaWdlc3QAAAwBPGF1dGhvcml0eV9pbmRleBABVHN1cGVyOjpBdXRob3JpdHlJbmRleAABEHNsb3SJAQEQU2xvdAABNHZyZl9zaWduYXR1cmXZCAEwVnJmU2lnbmF0dXJlAADlCAhEc3BfY29uc2Vuc3VzX2JhYmVYQmFiZUVwb2NoQ29uZmlndXJhdGlvbgAACAEEY5UBASgodTY0LCB1NjQpAAE0YWxsb3dlZF9zbG90c5kBATBBbGxvd2VkU2xvdHMAAOkIDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQB7QgEUwAABADxCAEYVmVjPFQ+AADtCAAABAgwEADxCAAAAu0IAPUIDCxwYWxsZXRfYmFiZRhwYWxsZXQURXJyb3IEBFQAARBgSW52YWxpZEVxdWl2b2NhdGlvblByb29mAAAEMQFBbiBlcXVpdm9jYXRpb24gcHJvb2YgcHJvdmlkZWQgYXMgcGFydCBvZiBhbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIGludmFsaWQuYEludmFsaWRLZXlPd25lcnNoaXBQcm9vZgABBDEBQSBrZXkgb3duZXJzaGlwIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLlhEdXBsaWNhdGVPZmZlbmNlUmVwb3J0AAIEFQFBIGdpdmVuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC5QSW52YWxpZENvbmZpZ3VyYXRpb24AAwSMU3VibWl0dGVkIGNvbmZpZ3VyYXRpb24gaXMgaW52YWxpZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQu+QgAAAQMABggAP0IDDhwYWxsZXRfaW5kaWNlcxhwYWxsZXQURXJyb3IEBFQAARQsTm90QXNzaWduZWQAAASMVGhlIGluZGV4IHdhcyBub3QgYWxyZWFkeSBhc3NpZ25lZC4gTm90T3duZXIAAQSkVGhlIGluZGV4IGlzIGFzc2lnbmVkIHRvIGFub3RoZXIgYWNjb3VudC4USW5Vc2UAAgRwVGhlIGluZGV4IHdhcyBub3QgYXZhaWxhYmxlLixOb3RUcmFuc2ZlcgADBMhUaGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBhY2NvdW50cyBhcmUgaWRlbnRpY2FsLiRQZXJtYW5lbnQABATQVGhlIGluZGV4IGlzIHBlcm1hbmVudCBhbmQgbWF5IG5vdCBiZSBmcmVlZC9jaGFuZ2VkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4BCQxMYm91bmRlZF9jb2xsZWN0aW9uc0B3ZWFrX2JvdW5kZWRfdmVjOFdlYWtCb3VuZGVkVmVjCARUAQUJBFMAAAQADQkBGFZlYzxUPgAABQkMPHBhbGxldF9iYWxhbmNlcxR0eXBlcyxCYWxhbmNlTG9jawQcQmFsYW5jZQEYAAwBCGlkHQYBOExvY2tJZGVudGlmaWVyAAEYYW1vdW50GAEcQmFsYW5jZQABHHJlYXNvbnMJCQEcUmVhc29ucwAACQkMPHBhbGxldF9iYWxhbmNlcxR0eXBlcxxSZWFzb25zAAEMDEZlZQAAABBNaXNjAAEADEFsbAACAAANCQAAAgUJABEJDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBFQkEUwAABAAZCQEYVmVjPFQ+AAAVCQw8cGFsbGV0X2JhbGFuY2VzFHR5cGVzLFJlc2VydmVEYXRhCERSZXNlcnZlSWRlbnRpZmllcgEdBhxCYWxhbmNlARgACAEIaWQdBgFEUmVzZXJ2ZUlkZW50aWZpZXIAARhhbW91bnQYARxCYWxhbmNlAAAZCQAAAhUJAB0JDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBIQkEUwAABAA1CQEYVmVjPFQ+AAAhCRQ0ZnJhbWVfc3VwcG9ydBh0cmFpdHMYdG9rZW5zEG1pc2MgSWRBbW91bnQICElkASUJHEJhbGFuY2UBGAAIAQhpZCUJAQhJZAABGGFtb3VudBgBHEJhbGFuY2UAACUJCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lRFJ1bnRpbWVIb2xkUmVhc29uAAEMIFByZWltYWdlBAApCQFscGFsbGV0X3ByZWltYWdlOjpIb2xkUmVhc29uACAADE5pcwQALQkBWHBhbGxldF9uaXM6OkhvbGRSZWFzb24AJgBARGVsZWdhdGVkU3Rha2luZwQAMQkBkHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZzo6SG9sZFJlYXNvbgAvAAApCQw8cGFsbGV0X3ByZWltYWdlGHBhbGxldChIb2xkUmVhc29uAAEEIFByZWltYWdlAAAAAC0JDChwYWxsZXRfbmlzGHBhbGxldChIb2xkUmVhc29uAAEEKE5mdFJlY2VpcHQAAAAAMQkMYHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZxhwYWxsZXQoSG9sZFJlYXNvbgABBERTdGFraW5nRGVsZWdhdGlvbgAAAAA1CQAAAiEJADkJDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBPQkEUwAABABJCQEYVmVjPFQ+AAA9CRQ0ZnJhbWVfc3VwcG9ydBh0cmFpdHMYdG9rZW5zEG1pc2MgSWRBbW91bnQICElkAUEJHEJhbGFuY2UBGAAIAQhpZEEJAQhJZAABGGFtb3VudBgBHEJhbGFuY2UAAEEJCFhzdGFnaW5nX2t1c2FtYV9ydW50aW1lTFJ1bnRpbWVGcmVlemVSZWFzb24AAQQ8Tm9taW5hdGlvblBvb2xzBABFCQGUcGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkZyZWV6ZVJlYXNvbgApAABFCQxccGFsbGV0X25vbWluYXRpb25fcG9vbHMYcGFsbGV0MEZyZWV6ZVJlYXNvbgABBDhQb29sTWluQmFsYW5jZQAAAABJCQAAAj0JAE0JDDxwYWxsZXRfYmFsYW5jZXMYcGFsbGV0FEVycm9yCARUAARJAAEwOFZlc3RpbmdCYWxhbmNlAAAEnFZlc3RpbmcgYmFsYW5jZSB0b28gaGlnaCB0byBzZW5kIHZhbHVlLlRMaXF1aWRpdHlSZXN0cmljdGlvbnMAAQTIQWNjb3VudCBsaXF1aWRpdHkgcmVzdHJpY3Rpb25zIHByZXZlbnQgd2l0aGRyYXdhbC5MSW5zdWZmaWNpZW50QmFsYW5jZQACBHhCYWxhbmNlIHRvbyBsb3cgdG8gc2VuZCB2YWx1ZS5IRXhpc3RlbnRpYWxEZXBvc2l0AAME7FZhbHVlIHRvbyBsb3cgdG8gY3JlYXRlIGFjY291bnQgZHVlIHRvIGV4aXN0ZW50aWFsIGRlcG9zaXQuNEV4cGVuZGFiaWxpdHkABASQVHJhbnNmZXIvcGF5bWVudCB3b3VsZCBraWxsIGFjY291bnQuXEV4aXN0aW5nVmVzdGluZ1NjaGVkdWxlAAUEzEEgdmVzdGluZyBzY2hlZHVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBhY2NvdW50LixEZWFkQWNjb3VudAAGBIxCZW5lZmljaWFyeSBhY2NvdW50IG11c3QgcHJlLWV4aXN0LjxUb29NYW55UmVzZXJ2ZXMABwS4TnVtYmVyIG9mIG5hbWVkIHJlc2VydmVzIGV4Y2VlZCBgTWF4UmVzZXJ2ZXNgLjBUb29NYW55SG9sZHMACAT4TnVtYmVyIG9mIGhvbGRzIGV4Y2VlZCBgVmFyaWFudENvdW50T2Y8VDo6UnVudGltZUhvbGRSZWFzb24+YC44VG9vTWFueUZyZWV6ZXMACQSYTnVtYmVyIG9mIGZyZWV6ZXMgZXhjZWVkIGBNYXhGcmVlemVzYC5MSXNzdWFuY2VEZWFjdGl2YXRlZAAKBAEBVGhlIGlzc3VhbmNlIGNhbm5vdCBiZSBtb2RpZmllZCBzaW5jZSBpdCBpcyBhbHJlYWR5IGRlYWN0aXZhdGVkLiREZWx0YVplcm8ACwRkVGhlIGRlbHRhIGNhbm5vdCBiZSB6ZXJvLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC5RCQhocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQgUmVsZWFzZXMAAQgkVjFBbmNpZW50AAAACFYyAAEAAFUJCDhwYWxsZXRfc3Rha2luZzRTdGFraW5nTGVkZ2VyBARUAAAUARRzdGFzaAABMFQ6OkFjY291bnRJZAABFHRvdGFs5AEwQmFsYW5jZU9mPFQ+AAEYYWN0aXZl5AEwQmFsYW5jZU9mPFQ+AAEkdW5sb2NraW5n7QEB8EJvdW5kZWRWZWM8VW5sb2NrQ2h1bms8QmFsYW5jZU9mPFQ+PiwgVDo6TWF4VW5sb2NraW5nQ2h1bmtzPgABWGxlZ2FjeV9jbGFpbWVkX3Jld2FyZHNZCQGUQm91bmRlZFZlYzxFcmFJbmRleCwgVDo6SGlzdG9yeURlcHRoPgAAWQkMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEQBFMAAAQAyQEBGFZlYzxUPgAAXQkIOHBhbGxldF9zdGFraW5nLE5vbWluYXRpb25zBARUAAAMARx0YXJnZXRzYQkBtEJvdW5kZWRWZWM8VDo6QWNjb3VudElkLCBNYXhOb21pbmF0aW9uc09mPFQ+PgABMHN1Ym1pdHRlZF9pbhABIEVyYUluZGV4AAEoc3VwcHJlc3NlZCABEGJvb2wAAGEJDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBAARTAAAEALUBARhWZWM8VD4AAGUJCDhwYWxsZXRfc3Rha2luZzRBY3RpdmVFcmFJbmZvAAAIARRpbmRleBABIEVyYUluZGV4AAEUc3RhcnRpCQEsT3B0aW9uPHU2ND4AAGkJBBhPcHRpb24EBFQBMAEIEE5vbmUAAAAQU29tZQQAMAAAAQAAbQkAAAQIEAAAcQkIKHNwX3N0YWtpbmcgRXhwb3N1cmUIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAMARR0b3RhbOQBHEJhbGFuY2UAAQxvd27kARxCYWxhbmNlAAEYb3RoZXJzdQkBrFZlYzxJbmRpdmlkdWFsRXhwb3N1cmU8QWNjb3VudElkLCBCYWxhbmNlPj4AAHUJAAACeQkAeQkIKHNwX3N0YWtpbmdISW5kaXZpZHVhbEV4cG9zdXJlCCRBY2NvdW50SWQBABxCYWxhbmNlARgACAEMd2hvAAEkQWNjb3VudElkAAEUdmFsdWXkARxCYWxhbmNlAAB9CQgoc3Bfc3Rha2luZ1RQYWdlZEV4cG9zdXJlTWV0YWRhdGEEHEJhbGFuY2UBGAAQARR0b3RhbOQBHEJhbGFuY2UAAQxvd27kARxCYWxhbmNlAAE8bm9taW5hdG9yX2NvdW50EAEMdTMyAAEocGFnZV9jb3VudBABEFBhZ2UAAIEJAAAEDBAAEACFCQgoc3Bfc3Rha2luZzBFeHBvc3VyZVBhZ2UIJEFjY291bnRJZAEAHEJhbGFuY2UBGAAIAShwYWdlX3RvdGFs5AEcQmFsYW5jZQABGG90aGVyc3UJAaxWZWM8SW5kaXZpZHVhbEV4cG9zdXJlPEFjY291bnRJZCwgQmFsYW5jZT4+AACJCQg4cGFsbGV0X3N0YWtpbmc8RXJhUmV3YXJkUG9pbnRzBCRBY2NvdW50SWQBAAAIARR0b3RhbBABLFJld2FyZFBvaW50AAEoaW5kaXZpZHVhbI0JAYBCVHJlZU1hcDxBY2NvdW50SWQsIFJld2FyZFBvaW50PgAAjQkEIEJUcmVlTWFwCARLAQAEVgEQAAQAkQkAAACRCQAAApUJAJUJAAAECAAQAJkJAAACnQkAnQkIOHBhbGxldF9zdGFraW5nOFVuYXBwbGllZFNsYXNoCCRBY2NvdW50SWQBABxCYWxhbmNlARgAFAEkdmFsaWRhdG9yAAEkQWNjb3VudElkAAEMb3duGAEcQmFsYW5jZQABGG90aGVyc4kEAWRWZWM8KEFjY291bnRJZCwgQmFsYW5jZSk+AAEkcmVwb3J0ZXJztQEBOFZlYzxBY2NvdW50SWQ+AAEYcGF5b3V0GAEcQmFsYW5jZQAAoQkAAAQIlBgApQkMOHBhbGxldF9zdGFraW5nIHNsYXNoaW5nNFNsYXNoaW5nU3BhbnMAABABKHNwYW5faW5kZXgQASRTcGFuSW5kZXgAAShsYXN0X3N0YXJ0EAEgRXJhSW5kZXgAAUhsYXN0X25vbnplcm9fc2xhc2gQASBFcmFJbmRleAABFHByaW9yyQEBNFZlYzxFcmFJbmRleD4AAKkJDDhwYWxsZXRfc3Rha2luZyBzbGFzaGluZyhTcGFuUmVjb3JkBBxCYWxhbmNlARgACAEcc2xhc2hlZBgBHEJhbGFuY2UAASBwYWlkX291dBgBHEJhbGFuY2UAAK0JEDhwYWxsZXRfc3Rha2luZxhwYWxsZXQYcGFsbGV0FEVycm9yBARUAAGANE5vdENvbnRyb2xsZXIAAARkTm90IGEgY29udHJvbGxlciBhY2NvdW50LiBOb3RTdGFzaAABBFBOb3QgYSBzdGFzaCBhY2NvdW50LjRBbHJlYWR5Qm9uZGVkAAIEYFN0YXNoIGlzIGFscmVhZHkgYm9uZGVkLjRBbHJlYWR5UGFpcmVkAAMEdENvbnRyb2xsZXIgaXMgYWxyZWFkeSBwYWlyZWQuMEVtcHR5VGFyZ2V0cwAEBGBUYXJnZXRzIGNhbm5vdCBiZSBlbXB0eS44RHVwbGljYXRlSW5kZXgABQRARHVwbGljYXRlIGluZGV4LkRJbnZhbGlkU2xhc2hJbmRleAAGBIRTbGFzaCByZWNvcmQgaW5kZXggb3V0IG9mIGJvdW5kcy5ASW5zdWZmaWNpZW50Qm9uZAAHDFkBQ2Fubm90IGhhdmUgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yIHJvbGUsIHdpdGggdmFsdWUgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIGRlZmluZWQgYnk9AWdvdmVybmFuY2UgKHNlZSBgTWluVmFsaWRhdG9yQm9uZGAgYW5kIGBNaW5Ob21pbmF0b3JCb25kYCkuIElmIHVuYm9uZGluZyBpcyB0aGUVAWludGVudGlvbiwgYGNoaWxsYCBmaXJzdCB0byByZW1vdmUgb25lJ3Mgcm9sZSBhcyB2YWxpZGF0b3Ivbm9taW5hdG9yLjBOb01vcmVDaHVua3MACASQQ2FuIG5vdCBzY2hlZHVsZSBtb3JlIHVubG9jayBjaHVua3MuNE5vVW5sb2NrQ2h1bmsACQSgQ2FuIG5vdCByZWJvbmQgd2l0aG91dCB1bmxvY2tpbmcgY2h1bmtzLjBGdW5kZWRUYXJnZXQACgTIQXR0ZW1wdGluZyB0byB0YXJnZXQgYSBzdGFzaCB0aGF0IHN0aWxsIGhhcyBmdW5kcy5ISW52YWxpZEVyYVRvUmV3YXJkAAsEWEludmFsaWQgZXJhIHRvIHJld2FyZC5oSW52YWxpZE51bWJlck9mTm9taW5hdGlvbnMADAR4SW52YWxpZCBudW1iZXIgb2Ygbm9taW5hdGlvbnMuSE5vdFNvcnRlZEFuZFVuaXF1ZQANBIBJdGVtcyBhcmUgbm90IHNvcnRlZCBhbmQgdW5pcXVlLjhBbHJlYWR5Q2xhaW1lZAAOBAkBUmV3YXJkcyBmb3IgdGhpcyBlcmEgaGF2ZSBhbHJlYWR5IGJlZW4gY2xhaW1lZCBmb3IgdGhpcyB2YWxpZGF0b3IuLEludmFsaWRQYWdlAA8EhE5vIG5vbWluYXRvcnMgZXhpc3Qgb24gdGhpcyBwYWdlLlRJbmNvcnJlY3RIaXN0b3J5RGVwdGgAEATASW5jb3JyZWN0IHByZXZpb3VzIGhpc3RvcnkgZGVwdGggaW5wdXQgcHJvdmlkZWQuWEluY29ycmVjdFNsYXNoaW5nU3BhbnMAEQSwSW5jb3JyZWN0IG51bWJlciBvZiBzbGFzaGluZyBzcGFucyBwcm92aWRlZC4gQmFkU3RhdGUAEgQ5AUludGVybmFsIHN0YXRlIGhhcyBiZWNvbWUgc29tZWhvdyBjb3JydXB0ZWQgYW5kIHRoZSBvcGVyYXRpb24gY2Fubm90IGNvbnRpbnVlLjhUb29NYW55VGFyZ2V0cwATBJRUb28gbWFueSBub21pbmF0aW9uIHRhcmdldHMgc3VwcGxpZWQuJEJhZFRhcmdldAAUBD0BQSBub21pbmF0aW9uIHRhcmdldCB3YXMgc3VwcGxpZWQgdGhhdCB3YXMgYmxvY2tlZCBvciBvdGhlcndpc2Ugbm90IGEgdmFsaWRhdG9yLkBDYW5ub3RDaGlsbE90aGVyABUEVQFUaGUgdXNlciBoYXMgZW5vdWdoIGJvbmQgYW5kIHRodXMgY2Fubm90IGJlIGNoaWxsZWQgZm9yY2VmdWxseSBieSBhbiBleHRlcm5hbCBwZXJzb24uRFRvb01hbnlOb21pbmF0b3JzABYITQFUaGVyZSBhcmUgdG9vIG1hbnkgbm9taW5hdG9ycyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGUgc3Rha2luZ7RzZXR0aW5ncyB0byBrZWVwIHRoaW5ncyBzYWZlIGZvciB0aGUgcnVudGltZS5EVG9vTWFueVZhbGlkYXRvcnMAFwhVAVRoZXJlIGFyZSB0b28gbWFueSB2YWxpZGF0b3IgY2FuZGlkYXRlcyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGXUc3Rha2luZyBzZXR0aW5ncyB0byBrZWVwIHRoaW5ncyBzYWZlIGZvciB0aGUgcnVudGltZS5AQ29tbWlzc2lvblRvb0xvdwAYBOBDb21taXNzaW9uIGlzIHRvbyBsb3cuIE11c3QgYmUgYXQgbGVhc3QgYE1pbkNvbW1pc3Npb25gLixCb3VuZE5vdE1ldAAZBFhTb21lIGJvdW5kIGlzIG5vdCBtZXQuUENvbnRyb2xsZXJEZXByZWNhdGVkABoEAQFVc2VkIHdoZW4gYXR0ZW1wdGluZyB0byB1c2UgZGVwcmVjYXRlZCBjb250cm9sbGVyIGFjY291bnQgbG9naWMuTENhbm5vdFJlc3RvcmVMZWRnZXIAGwRYQ2Fubm90IHJlc2V0IGEgbGVkZ2VyLmxSZXdhcmREZXN0aW5hdGlvblJlc3RyaWN0ZWQAHASsUHJvdmlkZWQgcmV3YXJkIGRlc3RpbmF0aW9uIGlzIG5vdCBhbGxvd2VkLjhOb3RFbm91Z2hGdW5kcwAdBJxOb3QgZW5vdWdoIGZ1bmRzIGF2YWlsYWJsZSB0byB3aXRoZHJhdy5cVmlydHVhbFN0YWtlck5vdEFsbG93ZWQAHgSoT3BlcmF0aW9uIG5vdCBhbGxvd2VkIGZvciB2aXJ0dWFsIHN0YWtlcnMuKFJlc3RyaWN0ZWQAHwhZAUFjY291bnQgaXMgcmVzdHJpY3RlZCBmcm9tIHBhcnRpY2lwYXRpb24gaW4gc3Rha2luZy4gVGhpcyBtYXkgaGFwcGVuIGlmIHRoZSBhY2NvdW50IGlzxHN0YWtpbmcgaW4gYW5vdGhlciB3YXkgYWxyZWFkeSwgc3VjaCBhcyB2aWEgcG9vbC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQusQkMKHNwX3N0YWtpbmccb2ZmZW5jZThPZmZlbmNlRGV0YWlscwggUmVwb3J0ZXIBACBPZmZlbmRlcgG1CQAIASBvZmZlbmRlcrUJASBPZmZlbmRlcgABJHJlcG9ydGVyc7UBATRWZWM8UmVwb3J0ZXI+AAC1CQAABAgAcQkAuQkAAAQIqDgAvQkAAAQINBAAwQkAAALFCQDFCQAABAgA/QEAyQkAAAQIzQk4AM0JDBxzcF9jb3JlGGNyeXB0byRLZXlUeXBlSWQAAAQASAEcW3U4OyA0XQAA0QkMOHBhbGxldF9zZXNzaW9uGHBhbGxldBRFcnJvcgQEVAABFDBJbnZhbGlkUHJvb2YAAARgSW52YWxpZCBvd25lcnNoaXAgcHJvb2YuXE5vQXNzb2NpYXRlZFZhbGlkYXRvcklkAAEEnE5vIGFzc29jaWF0ZWQgdmFsaWRhdG9yIElEIGZvciBhY2NvdW50LjREdXBsaWNhdGVkS2V5AAIEZFJlZ2lzdGVyZWQgZHVwbGljYXRlIGtleS4YTm9LZXlzAAMEpE5vIGtleXMgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGFjY291bnQuJE5vQWNjb3VudAAEBBkBS2V5IHNldHRpbmcgYWNjb3VudCBpcyBub3QgbGl2ZSwgc28gaXQncyBpbXBvc3NpYmxlIHRvIGFzc29jaWF0ZSBrZXlzLgR0RXJyb3IgZm9yIHRoZSBzZXNzaW9uIHBhbGxldC7VCQg4cGFsbGV0X2dyYW5kcGEsU3RvcmVkU3RhdGUEBE4BEAEQEExpdmUAAAAwUGVuZGluZ1BhdXNlCAEwc2NoZWR1bGVkX2F0EAEETgABFGRlbGF5EAEETgABABhQYXVzZWQAAgA0UGVuZGluZ1Jlc3VtZQgBMHNjaGVkdWxlZF9hdBABBE4AARRkZWxheRABBE4AAwAA2QkIOHBhbGxldF9ncmFuZHBhTFN0b3JlZFBlbmRpbmdDaGFuZ2UIBE4BEBRMaW1pdAAAEAEwc2NoZWR1bGVkX2F0EAEETgABFGRlbGF5EAEETgABQG5leHRfYXV0aG9yaXRpZXPdCQFsQm91bmRlZEF1dGhvcml0eUxpc3Q8TGltaXQ+AAEYZm9yY2VkRQIBJE9wdGlvbjxOPgAA3QkMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAG4BFMAAAQAtAEYVmVjPFQ+AADhCQw4cGFsbGV0X2dyYW5kcGEYcGFsbGV0FEVycm9yBARUAAEcLFBhdXNlRmFpbGVkAAAIBQFBdHRlbXB0IHRvIHNpZ25hbCBHUkFORFBBIHBhdXNlIHdoZW4gdGhlIGF1dGhvcml0eSBzZXQgaXNuJ3QgbGl2ZaQoZWl0aGVyIHBhdXNlZCBvciBhbHJlYWR5IHBlbmRpbmcgcGF1c2UpLjBSZXN1bWVGYWlsZWQAAQgRAUF0dGVtcHQgdG8gc2lnbmFsIEdSQU5EUEEgcmVzdW1lIHdoZW4gdGhlIGF1dGhvcml0eSBzZXQgaXNuJ3QgcGF1c2VkoChlaXRoZXIgbGl2ZSBvciBhbHJlYWR5IHBlbmRpbmcgcmVzdW1lKS40Q2hhbmdlUGVuZGluZwACBOhBdHRlbXB0IHRvIHNpZ25hbCBHUkFORFBBIGNoYW5nZSB3aXRoIG9uZSBhbHJlYWR5IHBlbmRpbmcuHFRvb1Nvb24AAwS8Q2Fubm90IHNpZ25hbCBmb3JjZWQgY2hhbmdlIHNvIHNvb24gYWZ0ZXIgbGFzdC5gSW52YWxpZEtleU93bmVyc2hpcFByb29mAAQEMQFBIGtleSBvd25lcnNoaXAgcHJvb2YgcHJvdmlkZWQgYXMgcGFydCBvZiBhbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIGludmFsaWQuYEludmFsaWRFcXVpdm9jYXRpb25Qcm9vZgAFBDEBQW4gZXF1aXZvY2F0aW9uIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLlhEdXBsaWNhdGVPZmZlbmNlUmVwb3J0AAYEFQFBIGdpdmVuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQu5QkMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAEJAgRTAAAEAOkJARhWZWM8VD4AAOkJAAACCQIA7QkIPHBhbGxldF90cmVhc3VyeSBQcm9wb3NhbAgkQWNjb3VudElkAQAcQmFsYW5jZQEYABABIHByb3Bvc2VyAAEkQWNjb3VudElkAAEUdmFsdWUYARxCYWxhbmNlAAEsYmVuZWZpY2lhcnkAASRBY2NvdW50SWQAARBib25kGAEcQmFsYW5jZQAA8QkMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEQBFMAAAQAyQEBGFZlYzxUPgAA9QkIPHBhbGxldF90cmVhc3VyeSxTcGVuZFN0YXR1cxQkQXNzZXRLaW5kAcQwQXNzZXRCYWxhbmNlARgsQmVuZWZpY2lhcnkBLQEsQmxvY2tOdW1iZXIBECRQYXltZW50SWQBMAAYAShhc3NldF9raW5kxAEkQXNzZXRLaW5kAAEYYW1vdW50GAEwQXNzZXRCYWxhbmNlAAEsYmVuZWZpY2lhcnktAQEsQmVuZWZpY2lhcnkAASh2YWxpZF9mcm9tEAEsQmxvY2tOdW1iZXIAASRleHBpcmVfYXQQASxCbG9ja051bWJlcgABGHN0YXR1c/kJAVxQYXltZW50U3RhdGU8UGF5bWVudElkPgAA+QkIPHBhbGxldF90cmVhc3VyeTBQYXltZW50U3RhdGUECElkATABDBxQZW5kaW5nAAAAJEF0dGVtcHRlZAQBCGlkMAEISWQAAQAYRmFpbGVkAAIAAP0JCDRmcmFtZV9zdXBwb3J0IFBhbGxldElkAAAEAB0GARxbdTg7IDhdAAABCgw8cGFsbGV0X3RyZWFzdXJ5GHBhbGxldBRFcnJvcggEVAAESQABLDBJbnZhbGlkSW5kZXgAAASsTm8gcHJvcG9zYWwsIGJvdW50eSBvciBzcGVuZCBhdCB0aGF0IGluZGV4LkBUb29NYW55QXBwcm92YWxzAAEEgFRvbyBtYW55IGFwcHJvdmFscyBpbiB0aGUgcXVldWUuWEluc3VmZmljaWVudFBlcm1pc3Npb24AAghFAVRoZSBzcGVuZCBvcmlnaW4gaXMgdmFsaWQgYnV0IHRoZSBhbW91bnQgaXQgaXMgYWxsb3dlZCB0byBzcGVuZCBpcyBsb3dlciB0aGFuIHRoZUxhbW91bnQgdG8gYmUgc3BlbnQuTFByb3Bvc2FsTm90QXBwcm92ZWQAAwR8UHJvcG9zYWwgaGFzIG5vdCBiZWVuIGFwcHJvdmVkLlhGYWlsZWRUb0NvbnZlcnRCYWxhbmNlAAQEUQFUaGUgYmFsYW5jZSBvZiB0aGUgYXNzZXQga2luZCBpcyBub3QgY29udmVydGlibGUgdG8gdGhlIGJhbGFuY2Ugb2YgdGhlIG5hdGl2ZSBhc3NldC4wU3BlbmRFeHBpcmVkAAUEsFRoZSBzcGVuZCBoYXMgZXhwaXJlZCBhbmQgY2Fubm90IGJlIGNsYWltZWQuLEVhcmx5UGF5b3V0AAYEpFRoZSBzcGVuZCBpcyBub3QgeWV0IGVsaWdpYmxlIGZvciBwYXlvdXQuQEFscmVhZHlBdHRlbXB0ZWQABwScVGhlIHBheW1lbnQgaGFzIGFscmVhZHkgYmVlbiBhdHRlbXB0ZWQuLFBheW91dEVycm9yAAgEzFRoZXJlIHdhcyBzb21lIGlzc3VlIHdpdGggdGhlIG1lY2hhbmlzbSBvZiBwYXltZW50LjBOb3RBdHRlbXB0ZWQACQSkVGhlIHBheW91dCB3YXMgbm90IHlldCBhdHRlbXB0ZWQvY2xhaW1lZC4wSW5jb25jbHVzaXZlAAoExFRoZSBwYXltZW50IGhhcyBuZWl0aGVyIGZhaWxlZCBub3Igc3VjY2VlZGVkIHlldC4EeEVycm9yIGZvciB0aGUgdHJlYXN1cnkgcGFsbGV0LgUKAAAECABdAQAJCgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nEHZvdGUYVm90aW5nFBxCYWxhbmNlARgkQWNjb3VudElkAQAsQmxvY2tOdW1iZXIBECRQb2xsSW5kZXgBECBNYXhWb3RlcwABCBxDYXN0aW5nBAANCgHIQ2FzdGluZzxCYWxhbmNlLCBCbG9ja051bWJlciwgUG9sbEluZGV4LCBNYXhWb3Rlcz4AAAAoRGVsZWdhdGluZwQAJQoBrERlbGVnYXRpbmc8QmFsYW5jZSwgQWNjb3VudElkLCBCbG9ja051bWJlcj4AAQAADQoMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxB2b3RlHENhc3RpbmcQHEJhbGFuY2UBGCxCbG9ja051bWJlcgEQJFBvbGxJbmRleAEQIE1heFZvdGVzAAAMARR2b3RlcxEKAdxCb3VuZGVkVmVjPChQb2xsSW5kZXgsIEFjY291bnRWb3RlPEJhbGFuY2U+KSwgTWF4Vm90ZXM+AAEsZGVsZWdhdGlvbnMdCgFQRGVsZWdhdGlvbnM8QmFsYW5jZT4AARRwcmlvciEKAXxQcmlvckxvY2s8QmxvY2tOdW1iZXIsIEJhbGFuY2U+AAARCgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUARUKBFMAAAQAGQoBGFZlYzxUPgAAFQoAAAQIEFEBABkKAAACFQoAHQoMYHBhbGxldF9jb252aWN0aW9uX3ZvdGluZxR0eXBlcyxEZWxlZ2F0aW9ucwQcQmFsYW5jZQEYAAgBFHZvdGVzGAEcQmFsYW5jZQABHGNhcGl0YWwYARxCYWxhbmNlAAAhCgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nEHZvdGUkUHJpb3JMb2NrCCxCbG9ja051bWJlcgEQHEJhbGFuY2UBGAAIABABLEJsb2NrTnVtYmVyAAAYARxCYWxhbmNlAAAlCgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nEHZvdGUoRGVsZWdhdGluZwwcQmFsYW5jZQEYJEFjY291bnRJZAEALEJsb2NrTnVtYmVyARAAFAEcYmFsYW5jZRgBHEJhbGFuY2UAARh0YXJnZXQAASRBY2NvdW50SWQAAShjb252aWN0aW9uTQIBKENvbnZpY3Rpb24AASxkZWxlZ2F0aW9ucx0KAVBEZWxlZ2F0aW9uczxCYWxhbmNlPgABFHByaW9yIQoBfFByaW9yTG9jazxCbG9ja051bWJlciwgQmFsYW5jZT4AACkKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBLQoEUwAABAAxCgEYVmVjPFQ+AAAtCgAABAhdARgAMQoAAAItCgA1CgxgcGFsbGV0X2NvbnZpY3Rpb25fdm90aW5nGHBhbGxldBRFcnJvcggEVAAESQABMChOb3RPbmdvaW5nAAAEUFBvbGwgaXMgbm90IG9uZ29pbmcuIE5vdFZvdGVyAAEErFRoZSBnaXZlbiBhY2NvdW50IGRpZCBub3Qgdm90ZSBvbiB0aGUgcG9sbC4wTm9QZXJtaXNzaW9uAAIEyFRoZSBhY3RvciBoYXMgbm8gcGVybWlzc2lvbiB0byBjb25kdWN0IHRoZSBhY3Rpb24uPE5vUGVybWlzc2lvbllldAADBFkBVGhlIGFjdG9yIGhhcyBubyBwZXJtaXNzaW9uIHRvIGNvbmR1Y3QgdGhlIGFjdGlvbiByaWdodCBub3cgYnV0IHdpbGwgZG8gaW4gdGhlIGZ1dHVyZS5EQWxyZWFkeURlbGVnYXRpbmcABASIVGhlIGFjY291bnQgaXMgYWxyZWFkeSBkZWxlZ2F0aW5nLjRBbHJlYWR5Vm90aW5nAAUIVQFUaGUgYWNjb3VudCBjdXJyZW50bHkgaGFzIHZvdGVzIGF0dGFjaGVkIHRvIGl0IGFuZCB0aGUgb3BlcmF0aW9uIGNhbm5vdCBzdWNjZWVkIHVudGlsoHRoZXNlIGFyZSByZW1vdmVkIHRocm91Z2ggYHJlbW92ZV92b3RlYC5ESW5zdWZmaWNpZW50RnVuZHMABgT8VG9vIGhpZ2ggYSBiYWxhbmNlIHdhcyBwcm92aWRlZCB0aGF0IHRoZSBhY2NvdW50IGNhbm5vdCBhZmZvcmQuNE5vdERlbGVnYXRpbmcABwSgVGhlIGFjY291bnQgaXMgbm90IGN1cnJlbnRseSBkZWxlZ2F0aW5nLiBOb25zZW5zZQAIBJREZWxlZ2F0aW9uIHRvIG9uZXNlbGYgbWFrZXMgbm8gc2Vuc2UuPE1heFZvdGVzUmVhY2hlZAAJBIBNYXhpbXVtIG51bWJlciBvZiB2b3RlcyByZWFjaGVkLixDbGFzc05lZWRlZAAKBDkBVGhlIGNsYXNzIG11c3QgYmUgc3VwcGxpZWQgc2luY2UgaXQgaXMgbm90IGVhc2lseSBkZXRlcm1pbmFibGUgZnJvbSB0aGUgc3RhdGUuIEJhZENsYXNzAAsEhFRoZSBjbGFzcyBJRCBzdXBwbGllZCBpcyBpbnZhbGlkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC45CgxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlczhSZWZlcmVuZHVtSW5mbyAcVHJhY2tJZAFdATRSdW50aW1lT3JpZ2luAVkCGE1vbWVudAEQEENhbGwBYQEcQmFsYW5jZQEYFFRhbGx5AYEHJEFjY291bnRJZAEAPFNjaGVkdWxlQWRkcmVzcwERAwEYHE9uZ29pbmcEAD0KAY0BUmVmZXJlbmR1bVN0YXR1czxUcmFja0lkLCBSdW50aW1lT3JpZ2luLCBNb21lbnQsIENhbGwsIEJhbGFuY2UsIFRhbGx5LApBY2NvdW50SWQsIFNjaGVkdWxlQWRkcmVzcyw+AAAAIEFwcHJvdmVkDAAQARhNb21lbnQAAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAARQoBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AAEAIFJlamVjdGVkDAAQARhNb21lbnQAAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAARQoBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AAIAJENhbmNlbGxlZAwAEAEYTW9tZW50AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgADACBUaW1lZE91dAwAEAEYTW9tZW50AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgAEABhLaWxsZWQEABABGE1vbWVudAAFAAA9CgxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlc0BSZWZlcmVuZHVtU3RhdHVzIBxUcmFja0lkAV0BNFJ1bnRpbWVPcmlnaW4BWQIYTW9tZW50ARAQQ2FsbAFhARxCYWxhbmNlARgUVGFsbHkBgQckQWNjb3VudElkAQA8U2NoZWR1bGVBZGRyZXNzAREDACwBFHRyYWNrXQEBHFRyYWNrSWQAARhvcmlnaW5ZAgE0UnVudGltZU9yaWdpbgABIHByb3Bvc2FsYQEBEENhbGwAASRlbmFjdG1lbnR1AgFQRGlzcGF0Y2hUaW1lPE1vbWVudD4AASRzdWJtaXR0ZWQQARhNb21lbnQAAUhzdWJtaXNzaW9uX2RlcG9zaXRBCgFsRGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+AAFAZGVjaXNpb25fZGVwb3NpdEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgABIGRlY2lkaW5nSQoBeE9wdGlvbjxEZWNpZGluZ1N0YXR1czxNb21lbnQ+PgABFHRhbGx5gQcBFFRhbGx5AAEgaW5fcXVldWUgARBib29sAAEUYWxhcm1RCgGET3B0aW9uPChNb21lbnQsIFNjaGVkdWxlQWRkcmVzcyk+AABBCgxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlcxxEZXBvc2l0CCRBY2NvdW50SWQBABxCYWxhbmNlARgACAEMd2hvAAEkQWNjb3VudElkAAEYYW1vdW50GAEcQmFsYW5jZQAARQoEGE9wdGlvbgQEVAFBCgEIEE5vbmUAAAAQU29tZQQAQQoAAAEAAEkKBBhPcHRpb24EBFQBTQoBCBBOb25lAAAAEFNvbWUEAE0KAAABAABNCgxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlczhEZWNpZGluZ1N0YXR1cwQsQmxvY2tOdW1iZXIBEAAIARRzaW5jZRABLEJsb2NrTnVtYmVyAAEoY29uZmlybWluZ0UCAUxPcHRpb248QmxvY2tOdW1iZXI+AABRCgQYT3B0aW9uBARUAVUKAQgQTm9uZQAAABBTb21lBABVCgAAAQAAVQoAAAQIEBEDAFkKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBXQoEUwAABABhCgEYVmVjPFQ+AABdCgAABAgQGABhCgAAAl0KAGUKAAACaQoAaQoAAAQIXQFtCgBtCgxAcGFsbGV0X3JlZmVyZW5kYRR0eXBlcyRUcmFja0luZm8IHEJhbGFuY2UBGBhNb21lbnQBEAAkARBuYW1lhQgBMCYnc3RhdGljIHN0cgABMG1heF9kZWNpZGluZxABDHUzMgABQGRlY2lzaW9uX2RlcG9zaXQYARxCYWxhbmNlAAE4cHJlcGFyZV9wZXJpb2QQARhNb21lbnQAATxkZWNpc2lvbl9wZXJpb2QQARhNb21lbnQAAThjb25maXJtX3BlcmlvZBABGE1vbWVudAABUG1pbl9lbmFjdG1lbnRfcGVyaW9kEAEYTW9tZW50AAEwbWluX2FwcHJvdmFscQoBFEN1cnZlAAEsbWluX3N1cHBvcnRxCgEUQ3VydmUAAHEKDEBwYWxsZXRfcmVmZXJlbmRhFHR5cGVzFEN1cnZlAAEMQExpbmVhckRlY3JlYXNpbmcMARhsZW5ndGiUARxQZXJiaWxsAAEUZmxvb3KUARxQZXJiaWxsAAEQY2VpbJQBHFBlcmJpbGwAAABEU3RlcHBlZERlY3JlYXNpbmcQARRiZWdpbpQBHFBlcmJpbGwAAQxlbmSUARxQZXJiaWxsAAEQc3RlcJQBHFBlcmJpbGwAARhwZXJpb2SUARxQZXJiaWxsAAEAKFJlY2lwcm9jYWwMARhmYWN0b3J1CgEgRml4ZWRJNjQAASB4X29mZnNldHUKASBGaXhlZEk2NAABIHlfb2Zmc2V0dQoBIEZpeGVkSTY0AAIAAHUKDDRzcF9hcml0aG1ldGljLGZpeGVkX3BvaW50IEZpeGVkSTY0AAAEAHkKAQxpNjQAAHkKAAAFDAB9CgxAcGFsbGV0X3JlZmVyZW5kYRhwYWxsZXQURXJyb3IIBFQABEkAATgoTm90T25nb2luZwAABGhSZWZlcmVuZHVtIGlzIG5vdCBvbmdvaW5nLihIYXNEZXBvc2l0AAEEuFJlZmVyZW5kdW0ncyBkZWNpc2lvbiBkZXBvc2l0IGlzIGFscmVhZHkgcGFpZC4gQmFkVHJhY2sAAgScVGhlIHRyYWNrIGlkZW50aWZpZXIgZ2l2ZW4gd2FzIGludmFsaWQuEEZ1bGwAAwQxAVRoZXJlIGFyZSBhbHJlYWR5IGEgZnVsbCBjb21wbGVtZW50IG9mIHJlZmVyZW5kYSBpbiBwcm9ncmVzcyBmb3IgdGhpcyB0cmFjay4oUXVldWVFbXB0eQAEBIBUaGUgcXVldWUgb2YgdGhlIHRyYWNrIGlzIGVtcHR5LjRCYWRSZWZlcmVuZHVtAAUE5FRoZSByZWZlcmVuZHVtIGluZGV4IHByb3ZpZGVkIGlzIGludmFsaWQgaW4gdGhpcyBjb250ZXh0LixOb3RoaW5nVG9EbwAGBKxUaGVyZSB3YXMgbm90aGluZyB0byBkbyBpbiB0aGUgYWR2YW5jZW1lbnQuHE5vVHJhY2sABwSgTm8gdHJhY2sgZXhpc3RzIGZvciB0aGUgcHJvcG9zYWwgb3JpZ2luLihVbmZpbmlzaGVkAAgEAQFBbnkgZGVwb3NpdCBjYW5ub3QgYmUgcmVmdW5kZWQgdW50aWwgYWZ0ZXIgdGhlIGRlY2lzaW9uIGlzIG92ZXIuME5vUGVybWlzc2lvbgAJBKhUaGUgZGVwb3NpdCByZWZ1bmRlciBpcyBub3QgdGhlIGRlcG9zaXRvci4kTm9EZXBvc2l0AAoEzFRoZSBkZXBvc2l0IGNhbm5vdCBiZSByZWZ1bmRlZCBzaW5jZSBub25lIHdhcyBtYWRlLiRCYWRTdGF0dXMACwTQVGhlIHJlZmVyZW5kdW0gc3RhdHVzIGlzIGludmFsaWQgZm9yIHRoaXMgb3BlcmF0aW9uLkBQcmVpbWFnZU5vdEV4aXN0AAwEcFRoZSBwcmVpbWFnZSBkb2VzIG5vdCBleGlzdC6EUHJlaW1hZ2VTdG9yZWRXaXRoRGlmZmVyZW50TGVuZ3RoAA0EFQFUaGUgcHJlaW1hZ2UgaXMgc3RvcmVkIHdpdGggYSBkaWZmZXJlbnQgbGVuZ3RoIHRoYW4gdGhlIG9uZSBwcm92aWRlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQugQoIYHBhbGxldF9yYW5rZWRfY29sbGVjdGl2ZTBNZW1iZXJSZWNvcmQAAAQBEHJhbmtdAQEQUmFuawAAhQoAAAQIXQEAAIkKAAAECF0BEACNCgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQgEUwAABAA4ARhWZWM8VD4AAJEKDGBwYWxsZXRfcmFua2VkX2NvbGxlY3RpdmUYcGFsbGV0FEVycm9yCARUAARJAAEsNEFscmVhZHlNZW1iZXIAAARwQWNjb3VudCBpcyBhbHJlYWR5IGEgbWVtYmVyLiROb3RNZW1iZXIAAQRgQWNjb3VudCBpcyBub3QgYSBtZW1iZXIuKE5vdFBvbGxpbmcAAgS4VGhlIGdpdmVuIHBvbGwgaW5kZXggaXMgdW5rbm93biBvciBoYXMgY2xvc2VkLhxPbmdvaW5nAAMEgFRoZSBnaXZlbiBwb2xsIGlzIHN0aWxsIG9uZ29pbmcuNE5vbmVSZW1haW5pbmcABASsVGhlcmUgYXJlIG5vIGZ1cnRoZXIgcmVjb3JkcyB0byBiZSByZW1vdmVkLihDb3JydXB0aW9uAAUEaFVuZXhwZWN0ZWQgZXJyb3IgaW4gc3RhdGUuKFJhbmtUb29Mb3cABgSUVGhlIG1lbWJlcidzIHJhbmsgaXMgdG9vIGxvdyB0byB2b3RlLjhJbnZhbGlkV2l0bmVzcwAHBJhUaGUgaW5mb3JtYXRpb24gcHJvdmlkZWQgaXMgaW5jb3JyZWN0LjBOb1Blcm1pc3Npb24ACAT4VGhlIG9yaWdpbiBpcyBub3Qgc3VmZmljaWVudGx5IHByaXZpbGVnZWQgdG8gZG8gdGhlIG9wZXJhdGlvbi4oU2FtZU1lbWJlcgAJBOBUaGUgbmV3IG1lbWJlciB0byBleGNoYW5nZSBpcyB0aGUgc2FtZSBhcyB0aGUgb2xkIG1lbWJlcjhUb29NYW55TWVtYmVycwAKBMxUaGUgbWF4IG1lbWJlciBjb3VudCBmb3IgdGhlIHJhbmsgaGFzIGJlZW4gcmVhY2hlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQulQoMQHBhbGxldF9yZWZlcmVuZGEUdHlwZXM4UmVmZXJlbmR1bUluZm8gHFRyYWNrSWQBXQE0UnVudGltZU9yaWdpbgFZAhhNb21lbnQBEBBDYWxsAWEBHEJhbGFuY2UBGBRUYWxseQGNByRBY2NvdW50SWQBADxTY2hlZHVsZUFkZHJlc3MBEQMBGBxPbmdvaW5nBACZCgGNAVJlZmVyZW5kdW1TdGF0dXM8VHJhY2tJZCwgUnVudGltZU9yaWdpbiwgTW9tZW50LCBDYWxsLCBCYWxhbmNlLCBUYWxseSwKQWNjb3VudElkLCBTY2hlZHVsZUFkZHJlc3MsPgAAACBBcHByb3ZlZAwAEAEYTW9tZW50AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgABACBSZWplY3RlZAwAEAEYTW9tZW50AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAEUKAYxPcHRpb248RGVwb3NpdDxBY2NvdW50SWQsIEJhbGFuY2U+PgACACRDYW5jZWxsZWQMABABGE1vbWVudAAARQoBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AAwAgVGltZWRPdXQMABABGE1vbWVudAAARQoBjE9wdGlvbjxEZXBvc2l0PEFjY291bnRJZCwgQmFsYW5jZT4+AABFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4ABAAYS2lsbGVkBAAQARhNb21lbnQABQAAmQoMQHBhbGxldF9yZWZlcmVuZGEUdHlwZXNAUmVmZXJlbmR1bVN0YXR1cyAcVHJhY2tJZAFdATRSdW50aW1lT3JpZ2luAVkCGE1vbWVudAEQEENhbGwBYQEcQmFsYW5jZQEYFFRhbGx5AY0HJEFjY291bnRJZAEAPFNjaGVkdWxlQWRkcmVzcwERAwAsARR0cmFja10BARxUcmFja0lkAAEYb3JpZ2luWQIBNFJ1bnRpbWVPcmlnaW4AASBwcm9wb3NhbGEBARBDYWxsAAEkZW5hY3RtZW50dQIBUERpc3BhdGNoVGltZTxNb21lbnQ+AAEkc3VibWl0dGVkEAEYTW9tZW50AAFIc3VibWlzc2lvbl9kZXBvc2l0QQoBbERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPgABQGRlY2lzaW9uX2RlcG9zaXRFCgGMT3B0aW9uPERlcG9zaXQ8QWNjb3VudElkLCBCYWxhbmNlPj4AASBkZWNpZGluZ0kKAXhPcHRpb248RGVjaWRpbmdTdGF0dXM8TW9tZW50Pj4AARR0YWxseY0HARRUYWxseQABIGluX3F1ZXVlIAEQYm9vbAABFGFsYXJtUQoBhE9wdGlvbjwoTW9tZW50LCBTY2hlZHVsZUFkZHJlc3MpPgAAnQoMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAERAwRTAAAEAH0IARhWZWM8VD4AAKEKDEBwYWxsZXRfcmVmZXJlbmRhGHBhbGxldBRFcnJvcggEVAAESQABOChOb3RPbmdvaW5nAAAEaFJlZmVyZW5kdW0gaXMgbm90IG9uZ29pbmcuKEhhc0RlcG9zaXQAAQS4UmVmZXJlbmR1bSdzIGRlY2lzaW9uIGRlcG9zaXQgaXMgYWxyZWFkeSBwYWlkLiBCYWRUcmFjawACBJxUaGUgdHJhY2sgaWRlbnRpZmllciBnaXZlbiB3YXMgaW52YWxpZC4QRnVsbAADBDEBVGhlcmUgYXJlIGFscmVhZHkgYSBmdWxsIGNvbXBsZW1lbnQgb2YgcmVmZXJlbmRhIGluIHByb2dyZXNzIGZvciB0aGlzIHRyYWNrLihRdWV1ZUVtcHR5AAQEgFRoZSBxdWV1ZSBvZiB0aGUgdHJhY2sgaXMgZW1wdHkuNEJhZFJlZmVyZW5kdW0ABQTkVGhlIHJlZmVyZW5kdW0gaW5kZXggcHJvdmlkZWQgaXMgaW52YWxpZCBpbiB0aGlzIGNvbnRleHQuLE5vdGhpbmdUb0RvAAYErFRoZXJlIHdhcyBub3RoaW5nIHRvIGRvIGluIHRoZSBhZHZhbmNlbWVudC4cTm9UcmFjawAHBKBObyB0cmFjayBleGlzdHMgZm9yIHRoZSBwcm9wb3NhbCBvcmlnaW4uKFVuZmluaXNoZWQACAQBAUFueSBkZXBvc2l0IGNhbm5vdCBiZSByZWZ1bmRlZCB1bnRpbCBhZnRlciB0aGUgZGVjaXNpb24gaXMgb3Zlci4wTm9QZXJtaXNzaW9uAAkEqFRoZSBkZXBvc2l0IHJlZnVuZGVyIGlzIG5vdCB0aGUgZGVwb3NpdG9yLiROb0RlcG9zaXQACgTMVGhlIGRlcG9zaXQgY2Fubm90IGJlIHJlZnVuZGVkIHNpbmNlIG5vbmUgd2FzIG1hZGUuJEJhZFN0YXR1cwALBNBUaGUgcmVmZXJlbmR1bSBzdGF0dXMgaXMgaW52YWxpZCBmb3IgdGhpcyBvcGVyYXRpb24uQFByZWltYWdlTm90RXhpc3QADARwVGhlIHByZWltYWdlIGRvZXMgbm90IGV4aXN0LoRQcmVpbWFnZVN0b3JlZFdpdGhEaWZmZXJlbnRMZW5ndGgADQQVAVRoZSBwcmVpbWFnZSBpcyBzdG9yZWQgd2l0aCBhIGRpZmZlcmVudCBsZW5ndGggdGhhbiB0aGUgb25lIHByb3ZpZGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6lCgxAcGFsbGV0X3doaXRlbGlzdBhwYWxsZXQURXJyb3IEBFQAARRMVW5hdmFpbGFibGVQcmVJbWFnZQAABMhUaGUgcHJlaW1hZ2Ugb2YgdGhlIGNhbGwgaGFzaCBjb3VsZCBub3QgYmUgbG9hZGVkLjxVbmRlY29kYWJsZUNhbGwAAQR4VGhlIGNhbGwgY291bGQgbm90IGJlIGRlY29kZWQuYEludmFsaWRDYWxsV2VpZ2h0V2l0bmVzcwACBOxUaGUgd2VpZ2h0IG9mIHRoZSBkZWNvZGVkIGNhbGwgd2FzIGhpZ2hlciB0aGFuIHRoZSB3aXRuZXNzLlBDYWxsSXNOb3RXaGl0ZWxpc3RlZAADBHRUaGUgY2FsbCB3YXMgbm90IHdoaXRlbGlzdGVkLlhDYWxsQWxyZWFkeVdoaXRlbGlzdGVkAAQEoFRoZSBjYWxsIHdhcyBhbHJlYWR5IHdoaXRlbGlzdGVkOyBOby1PcC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuqQoQXHBvbGthZG90X3J1bnRpbWVfY29tbW9uGGNsYWltcxhwYWxsZXQURXJyb3IEBFQAARhgSW52YWxpZEV0aGVyZXVtU2lnbmF0dXJlAAAEbEludmFsaWQgRXRoZXJldW0gc2lnbmF0dXJlLkBTaWduZXJIYXNOb0NsYWltAAEEeEV0aGVyZXVtIGFkZHJlc3MgaGFzIG5vIGNsYWltLkBTZW5kZXJIYXNOb0NsYWltAAIEsEFjY291bnQgSUQgc2VuZGluZyB0cmFuc2FjdGlvbiBoYXMgbm8gY2xhaW0uMFBvdFVuZGVyZmxvdwADCEkBVGhlcmUncyBub3QgZW5vdWdoIGluIHRoZSBwb3QgdG8gcGF5IG91dCBzb21lIHVudmVzdGVkIGFtb3VudC4gR2VuZXJhbGx5IGltcGxpZXMgYTBsb2dpYyBlcnJvci5ASW52YWxpZFN0YXRlbWVudAAEBJBBIG5lZWRlZCBzdGF0ZW1lbnQgd2FzIG5vdCBpbmNsdWRlZC5MVmVzdGVkQmFsYW5jZUV4aXN0cwAFBKRUaGUgYWNjb3VudCBhbHJlYWR5IGhhcyBhIHZlc3RlZCBiYWxhbmNlLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6tCgw4cGFsbGV0X3V0aWxpdHkYcGFsbGV0FEVycm9yBARUAAEEMFRvb01hbnlDYWxscwAABFxUb28gbWFueSBjYWxscyBiYXRjaGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6xCgg4cGFsbGV0X3NvY2lldHkwTWVtYmVyUmVjb3JkAAAQARByYW5rEAEQUmFuawABHHN0cmlrZXMQASxTdHJpa2VDb3VudAABIHZvdWNoaW5ntQoBWE9wdGlvbjxWb3VjaGluZ1N0YXR1cz4AARRpbmRleBABDHUzMgAAtQoEGE9wdGlvbgQEVAG5CgEIEE5vbmUAAAAQU29tZQQAuQoAAAEAALkKCDhwYWxsZXRfc29jaWV0eThWb3VjaGluZ1N0YXR1cwABCCBWb3VjaGluZwAAABhCYW5uZWQAAQAAvQoIOHBhbGxldF9zb2NpZXR5MFBheW91dFJlY29yZAgcQmFsYW5jZQEYKFBheW91dHNWZWMBwQoACAEQcGFpZBgBHEJhbGFuY2UAARxwYXlvdXRzwQoBKFBheW91dHNWZWMAAMEKDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBXQoEUwAABABhCgEYVmVjPFQ+AADFCgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAckKBFMAAAQA0QoBGFZlYzxUPgAAyQoIOHBhbGxldF9zb2NpZXR5DEJpZAgkQWNjb3VudElkAQAcQmFsYW5jZQEYAAwBDHdobwABJEFjY291bnRJZAABEGtpbmTNCgFsQmlkS2luZDxBY2NvdW50SWQsIEJhbGFuY2U+AAEUdmFsdWUYARxCYWxhbmNlAADNCgg4cGFsbGV0X3NvY2lldHkcQmlkS2luZAgkQWNjb3VudElkAQAcQmFsYW5jZQEYAQgcRGVwb3NpdAQAGAEcQmFsYW5jZQAAABRWb3VjaAgAAAEkQWNjb3VudElkAAAYARxCYWxhbmNlAAEAANEKAAACyQoA1QoIOHBhbGxldF9zb2NpZXR5JENhbmRpZGFjeQgkQWNjb3VudElkAQAcQmFsYW5jZQEYABQBFHJvdW5kEAEoUm91bmRJbmRleAABEGtpbmTNCgFsQmlkS2luZDxBY2NvdW50SWQsIEJhbGFuY2U+AAEMYmlkGAEcQmFsYW5jZQABFHRhbGx52QoBFFRhbGx5AAE4c2tlcHRpY19zdHJ1Y2sgARBib29sAADZCgg4cGFsbGV0X3NvY2lldHkUVGFsbHkAAAgBJGFwcHJvdmFscxABJFZvdGVDb3VudAABKHJlamVjdGlvbnMQASRWb3RlQ291bnQAAN0KAAAECAAAAOEKCDhwYWxsZXRfc29jaWV0eRBWb3RlAAAIARxhcHByb3ZlIAEQYm9vbAABGHdlaWdodBABDHUzMgAA5QoMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEIBFMAAAQAOAEYVmVjPFQ+AADpCgg4cGFsbGV0X3NvY2lldHkwSW50YWtlUmVjb3JkCCRBY2NvdW50SWQBABxCYWxhbmNlARgADAEMd2hvAAEkQWNjb3VudElkAAEMYmlkGAEcQmFsYW5jZQABFHJvdW5kEAEoUm91bmRJbmRleAAA7QoAAAQMAADZCgDxCgw4cGFsbGV0X3NvY2lldHkYcGFsbGV0FEVycm9yCARUAARJAAGAJE5vdE1lbWJlcgAABFRVc2VyIGlzIG5vdCBhIG1lbWJlci40QWxyZWFkeU1lbWJlcgABBGRVc2VyIGlzIGFscmVhZHkgYSBtZW1iZXIuJFN1c3BlbmRlZAACBEhVc2VyIGlzIHN1c3BlbmRlZC4wTm90U3VzcGVuZGVkAAMEWFVzZXIgaXMgbm90IHN1c3BlbmRlZC4gTm9QYXlvdXQABARITm90aGluZyB0byBwYXlvdXQuOEFscmVhZHlGb3VuZGVkAAUEYFNvY2lldHkgYWxyZWFkeSBmb3VuZGVkLjxJbnN1ZmZpY2llbnRQb3QABgSYTm90IGVub3VnaCBpbiBwb3QgdG8gYWNjZXB0IGNhbmRpZGF0ZS48QWxyZWFkeVZvdWNoaW5nAAcE5E1lbWJlciBpcyBhbHJlYWR5IHZvdWNoaW5nIG9yIGJhbm5lZCBmcm9tIHZvdWNoaW5nIGFnYWluLkxOb3RWb3VjaGluZ09uQmlkZGVyAAgEXE1lbWJlciBpcyBub3Qgdm91Y2hpbmcuEEhlYWQACQSQQ2Fubm90IHJlbW92ZSB0aGUgaGVhZCBvZiB0aGUgY2hhaW4uHEZvdW5kZXIACgRoQ2Fubm90IHJlbW92ZSB0aGUgZm91bmRlci4oQWxyZWFkeUJpZAALBHBVc2VyIGhhcyBhbHJlYWR5IG1hZGUgYSBiaWQuQEFscmVhZHlDYW5kaWRhdGUADARwVXNlciBpcyBhbHJlYWR5IGEgY2FuZGlkYXRlLjBOb3RDYW5kaWRhdGUADQRgVXNlciBpcyBub3QgYSBjYW5kaWRhdGUuKE1heE1lbWJlcnMADgSAVG9vIG1hbnkgbWVtYmVycyBpbiB0aGUgc29jaWV0eS4oTm90Rm91bmRlcgAPBHhUaGUgY2FsbGVyIGlzIG5vdCB0aGUgZm91bmRlci4cTm90SGVhZAAQBGxUaGUgY2FsbGVyIGlzIG5vdCB0aGUgaGVhZC4sTm90QXBwcm92ZWQAEQQtAVRoZSBtZW1iZXJzaGlwIGNhbm5vdCBiZSBjbGFpbWVkIGFzIHRoZSBjYW5kaWRhdGUgd2FzIG5vdCBjbGVhcmx5IGFwcHJvdmVkLixOb3RSZWplY3RlZAASBCUBVGhlIGNhbmRpZGF0ZSBjYW5ub3QgYmUga2lja2VkIGFzIHRoZSBjYW5kaWRhdGUgd2FzIG5vdCBjbGVhcmx5IHJlamVjdGVkLiBBcHByb3ZlZAATBBkBVGhlIGNhbmRpZGFjeSBjYW5ub3QgYmUgZHJvcHBlZCBhcyB0aGUgY2FuZGlkYXRlIHdhcyBjbGVhcmx5IGFwcHJvdmVkLiBSZWplY3RlZAAUBB0BVGhlIGNhbmRpZGFjeSBjYW5ub3QgYmUgYmVzdG93ZWQgYXMgdGhlIGNhbmRpZGF0ZSB3YXMgY2xlYXJseSByZWplY3RlZC4oSW5Qcm9ncmVzcwAVBBUBVGhlIGNhbmRpZGFjeSBjYW5ub3QgYmUgY29uY2x1ZGVkIGFzIHRoZSB2b3RpbmcgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MuIFRvb0Vhcmx5ABYEQQFUaGUgY2FuZGlkYWN5IGNhbm5vdCBiZSBwcnVuZWQgdW50aWwgYSBmdWxsIGFkZGl0aW9uYWwgaW50YWtlIHBlcmlvZCBoYXMgcGFzc2VkLhRWb3RlZAAXBGhUaGUgc2tlcHRpYyBhbHJlYWR5IHZvdGVkLhxFeHBpcmVkABgE8FRoZSBza2VwdGljIG5lZWQgbm90IHZvdGUgb24gY2FuZGlkYXRlcyBmcm9tIGV4cGlyZWQgcm91bmRzLiROb3RCaWRkZXIAGQRUVXNlciBpcyBub3QgYSBiaWRkZXIuKE5vRGVmZW5kZXIAGgR8VGhlcmUgaXMgbm8gZGVmZW5kZXIgY3VycmVudGx5LiBOb3RHcm91cAAbBFBHcm91cCBkb2Vzbid0IGV4aXN0LjxBbHJlYWR5RWxldmF0ZWQAHASwVGhlIG1lbWJlciBpcyBhbHJlYWR5IGVsZXZhdGVkIHRvIHRoaXMgcmFuay48QWxyZWFkeVB1bmlzaGVkAB0E3FRoZSBza2VwdGljIGhhcyBhbHJlYWR5IGJlZW4gcHVuaXNoZWQgZm9yIHRoaXMgb2ZmZW5jZS5ESW5zdWZmaWNpZW50RnVuZHMAHgTARnVuZHMgYXJlIGluc3VmZmljaWVudCB0byBwYXkgb2ZmIHNvY2lldHkgZGVidHMuHE5vVm90ZXMAHwTQVGhlIGNhbmRpZGF0ZS9kZWZlbmRlciBoYXMgbm8gc3RhbGUgdm90ZXMgdG8gcmVtb3ZlLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC71Cgg8cGFsbGV0X3JlY292ZXJ5OFJlY292ZXJ5Q29uZmlnDCxCbG9ja051bWJlcgEQHEJhbGFuY2UBGBxGcmllbmRzAfkKABABMGRlbGF5X3BlcmlvZBABLEJsb2NrTnVtYmVyAAEcZGVwb3NpdBgBHEJhbGFuY2UAARxmcmllbmRz+QoBHEZyaWVuZHMAASR0aHJlc2hvbGRdAQEMdTE2AAD5CgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAQAEUwAABAC1AQEYVmVjPFQ+AAD9Cgg8cGFsbGV0X3JlY292ZXJ5OEFjdGl2ZVJlY292ZXJ5DCxCbG9ja051bWJlcgEQHEJhbGFuY2UBGBxGcmllbmRzAfkKAAwBHGNyZWF0ZWQQASxCbG9ja051bWJlcgABHGRlcG9zaXQYARxCYWxhbmNlAAEcZnJpZW5kc/kKARxGcmllbmRzAAABCww8cGFsbGV0X3JlY292ZXJ5GHBhbGxldBRFcnJvcgQEVAABQChOb3RBbGxvd2VkAAAE8FVzZXIgaXMgbm90IGFsbG93ZWQgdG8gbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mIHRoaXMgYWNjb3VudDRaZXJvVGhyZXNob2xkAAEEjFRocmVzaG9sZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvQE5vdEVub3VnaEZyaWVuZHMAAgTQRnJpZW5kcyBsaXN0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8gYW5kIHRocmVzaG9sZChNYXhGcmllbmRzAAMEqEZyaWVuZHMgbGlzdCBtdXN0IGJlIGxlc3MgdGhhbiBtYXggZnJpZW5kcyROb3RTb3J0ZWQABATIRnJpZW5kcyBsaXN0IG11c3QgYmUgc29ydGVkIGFuZCBmcmVlIG9mIGR1cGxpY2F0ZXM4Tm90UmVjb3ZlcmFibGUABQScVGhpcyBhY2NvdW50IGlzIG5vdCBzZXQgdXAgZm9yIHJlY292ZXJ5SEFscmVhZHlSZWNvdmVyYWJsZQAGBKxUaGlzIGFjY291bnQgaXMgYWxyZWFkeSBzZXQgdXAgZm9yIHJlY292ZXJ5OEFscmVhZHlTdGFydGVkAAcE3EEgcmVjb3ZlcnkgcHJvY2VzcyBoYXMgYWxyZWFkeSBzdGFydGVkIGZvciB0aGlzIGFjY291bnQoTm90U3RhcnRlZAAIBMxBIHJlY292ZXJ5IHByb2Nlc3MgaGFzIG5vdCBzdGFydGVkIGZvciB0aGlzIHJlc2N1ZXIkTm90RnJpZW5kAAkEqFRoaXMgYWNjb3VudCBpcyBub3QgYSBmcmllbmQgd2hvIGNhbiB2b3VjaCxEZWxheVBlcmlvZAAKBBkBVGhlIGZyaWVuZCBtdXN0IHdhaXQgdW50aWwgdGhlIGRlbGF5IHBlcmlvZCB0byB2b3VjaCBmb3IgdGhpcyByZWNvdmVyeThBbHJlYWR5Vm91Y2hlZAALBLxUaGlzIHVzZXIgaGFzIGFscmVhZHkgdm91Y2hlZCBmb3IgdGhpcyByZWNvdmVyeSRUaHJlc2hvbGQADAToVGhlIHRocmVzaG9sZCBmb3IgcmVjb3ZlcmluZyB0aGlzIGFjY291bnQgaGFzIG5vdCBiZWVuIG1ldCxTdGlsbEFjdGl2ZQANBPxUaGVyZSBhcmUgc3RpbGwgYWN0aXZlIHJlY292ZXJ5IGF0dGVtcHRzIHRoYXQgbmVlZCB0byBiZSBjbG9zZWQwQWxyZWFkeVByb3h5AA4ErFRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IHNldCB1cCBmb3IgcmVjb3ZlcnkgQmFkU3RhdGUADwR4U29tZSBpbnRlcm5hbCBzdGF0ZSBpcyBicm9rZW4uBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LgULDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBBQMEUwAABAAJCwEYVmVjPFQ+AAAJCwAAAgUDAA0LCDhwYWxsZXRfdmVzdGluZyBSZWxlYXNlcwABCAhWMAAAAAhWMQABAAARCww4cGFsbGV0X3Zlc3RpbmcYcGFsbGV0FEVycm9yBARUAAEUKE5vdFZlc3RpbmcAAASEVGhlIGFjY291bnQgZ2l2ZW4gaXMgbm90IHZlc3RpbmcuVEF0TWF4VmVzdGluZ1NjaGVkdWxlcwABCCUBVGhlIGFjY291bnQgYWxyZWFkeSBoYXMgYE1heFZlc3RpbmdTY2hlZHVsZXNgIGNvdW50IG9mIHNjaGVkdWxlcyBhbmQgdGh1c1EBY2Fubm90IGFkZCBhbm90aGVyIG9uZS4gQ29uc2lkZXIgbWVyZ2luZyBleGlzdGluZyBzY2hlZHVsZXMgaW4gb3JkZXIgdG8gYWRkIGFub3RoZXIuJEFtb3VudExvdwACBAUBQW1vdW50IGJlaW5nIHRyYW5zZmVycmVkIGlzIHRvbyBsb3cgdG8gY3JlYXRlIGEgdmVzdGluZyBzY2hlZHVsZS5gU2NoZWR1bGVJbmRleE91dE9mQm91bmRzAAME0EFuIGluZGV4IHdhcyBvdXQgb2YgYm91bmRzIG9mIHRoZSB2ZXN0aW5nIHNjaGVkdWxlcy5USW52YWxpZFNjaGVkdWxlUGFyYW1zAAQEDQFGYWlsZWQgdG8gY3JlYXRlIGEgbmV3IHNjaGVkdWxlIGJlY2F1c2Ugc29tZSBwYXJhbWV0ZXIgd2FzIGludmFsaWQuBHRFcnJvciBmb3IgdGhlIHZlc3RpbmcgcGFsbGV0LhULDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBGQsEUwAABAAhCwEYVmVjPFQ+AAAZCwQYT3B0aW9uBARUAR0LAQgQTm9uZQAAABBTb21lBAAdCwAAAQAAHQsIQHBhbGxldF9zY2hlZHVsZXIkU2NoZWR1bGVkFBBOYW1lAQQQQ2FsbAFhASxCbG9ja051bWJlcgEQNFBhbGxldHNPcmlnaW4BWQIkQWNjb3VudElkAQAAFAEgbWF5YmVfaWTpBwEwT3B0aW9uPE5hbWU+AAEgcHJpb3JpdHkIAUhzY2hlZHVsZTo6UHJpb3JpdHkAARBjYWxsYQEBEENhbGwAAThtYXliZV9wZXJpb2RpYw0DAZRPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlcj4+AAEYb3JpZ2luWQIBNFBhbGxldHNPcmlnaW4AACELAAACGQsAJQsIQHBhbGxldF9zY2hlZHVsZXIsUmV0cnlDb25maWcEGFBlcmlvZAEQAAwBNHRvdGFsX3JldHJpZXMIAQh1OAABJHJlbWFpbmluZwgBCHU4AAEYcGVyaW9kEAEYUGVyaW9kAAApCwxAcGFsbGV0X3NjaGVkdWxlchhwYWxsZXQURXJyb3IEBFQAARRARmFpbGVkVG9TY2hlZHVsZQAABGRGYWlsZWQgdG8gc2NoZWR1bGUgYSBjYWxsIE5vdEZvdW5kAAEEfENhbm5vdCBmaW5kIHRoZSBzY2hlZHVsZWQgY2FsbC5cVGFyZ2V0QmxvY2tOdW1iZXJJblBhc3QAAgSkR2l2ZW4gdGFyZ2V0IGJsb2NrIG51bWJlciBpcyBpbiB0aGUgcGFzdC5IUmVzY2hlZHVsZU5vQ2hhbmdlAAME8FJlc2NoZWR1bGUgZmFpbGVkIGJlY2F1c2UgaXQgZG9lcyBub3QgY2hhbmdlIHNjaGVkdWxlZCB0aW1lLhROYW1lZAAEBNBBdHRlbXB0IHRvIHVzZSBhIG5vbi1uYW1lZCBmdW5jdGlvbiBvbiBhIG5hbWVkIHRhc2suBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0Li0LAAAECDELGAAxCwxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUATULBFMAAAQAOQsBGFZlYzxUPgAANQsIMHBhbGxldF9wcm94eTxQcm94eURlZmluaXRpb24MJEFjY291bnRJZAEAJFByb3h5VHlwZQEdAyxCbG9ja051bWJlcgEQAAwBIGRlbGVnYXRlAAEkQWNjb3VudElkAAEocHJveHlfdHlwZR0DASRQcm94eVR5cGUAARRkZWxheRABLEJsb2NrTnVtYmVyAAA5CwAAAjULAD0LAAAECEELGABBCwxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAUULBFMAAAQASQsBGFZlYzxUPgAARQsIMHBhbGxldF9wcm94eTBBbm5vdW5jZW1lbnQMJEFjY291bnRJZAEAEEhhc2gBNCxCbG9ja051bWJlcgEQAAwBEHJlYWwAASRBY2NvdW50SWQAASRjYWxsX2hhc2g0ARBIYXNoAAEYaGVpZ2h0EAEsQmxvY2tOdW1iZXIAAEkLAAACRQsATQsMMHBhbGxldF9wcm94eRhwYWxsZXQURXJyb3IEBFQAASAcVG9vTWFueQAABCEBVGhlcmUgYXJlIHRvbyBtYW55IHByb3hpZXMgcmVnaXN0ZXJlZCBvciB0b28gbWFueSBhbm5vdW5jZW1lbnRzIHBlbmRpbmcuIE5vdEZvdW5kAAEEdFByb3h5IHJlZ2lzdHJhdGlvbiBub3QgZm91bmQuIE5vdFByb3h5AAIEzFNlbmRlciBpcyBub3QgYSBwcm94eSBvZiB0aGUgYWNjb3VudCB0byBiZSBwcm94aWVkLixVbnByb3h5YWJsZQADBCEBQSBjYWxsIHdoaWNoIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBwcm94eSB0eXBlJ3MgZmlsdGVyIHdhcyBhdHRlbXB0ZWQuJER1cGxpY2F0ZQAEBGxBY2NvdW50IGlzIGFscmVhZHkgYSBwcm94eS4wTm9QZXJtaXNzaW9uAAUEFQFDYWxsIG1heSBub3QgYmUgbWFkZSBieSBwcm94eSBiZWNhdXNlIGl0IG1heSBlc2NhbGF0ZSBpdHMgcHJpdmlsZWdlcy4sVW5hbm5vdW5jZWQABgTQQW5ub3VuY2VtZW50LCBpZiBtYWRlIGF0IGFsbCwgd2FzIG1hZGUgdG9vIHJlY2VudGx5LixOb1NlbGZQcm94eQAHBGRDYW5ub3QgYWRkIHNlbGYgYXMgcHJveHkuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LlELAAAECAAEAFULCDxwYWxsZXRfbXVsdGlzaWcgTXVsdGlzaWcQLEJsb2NrTnVtYmVyARAcQmFsYW5jZQEYJEFjY291bnRJZAEAME1heEFwcHJvdmFscwAAEAEQd2hlbikDAVhUaW1lcG9pbnQ8QmxvY2tOdW1iZXI+AAEcZGVwb3NpdBgBHEJhbGFuY2UAASRkZXBvc2l0b3IAASRBY2NvdW50SWQAASRhcHByb3ZhbHNZCwGMQm91bmRlZFZlYzxBY2NvdW50SWQsIE1heEFwcHJvdmFscz4AAFkLDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBAARTAAAEALUBARhWZWM8VD4AAF0LDDxwYWxsZXRfbXVsdGlzaWcYcGFsbGV0FEVycm9yBARUAAE4QE1pbmltdW1UaHJlc2hvbGQAAAR8VGhyZXNob2xkIG11c3QgYmUgMiBvciBncmVhdGVyLjxBbHJlYWR5QXBwcm92ZWQAAQSsQ2FsbCBpcyBhbHJlYWR5IGFwcHJvdmVkIGJ5IHRoaXMgc2lnbmF0b3J5LkROb0FwcHJvdmFsc05lZWRlZAACBJxDYWxsIGRvZXNuJ3QgbmVlZCBhbnkgKG1vcmUpIGFwcHJvdmFscy5EVG9vRmV3U2lnbmF0b3JpZXMAAwSoVGhlcmUgYXJlIHRvbyBmZXcgc2lnbmF0b3JpZXMgaW4gdGhlIGxpc3QuSFRvb01hbnlTaWduYXRvcmllcwAEBKxUaGVyZSBhcmUgdG9vIG1hbnkgc2lnbmF0b3JpZXMgaW4gdGhlIGxpc3QuVFNpZ25hdG9yaWVzT3V0T2ZPcmRlcgAFBA0BVGhlIHNpZ25hdG9yaWVzIHdlcmUgcHJvdmlkZWQgb3V0IG9mIG9yZGVyOyB0aGV5IHNob3VsZCBiZSBvcmRlcmVkLkxTZW5kZXJJblNpZ25hdG9yaWVzAAYEDQFUaGUgc2VuZGVyIHdhcyBjb250YWluZWQgaW4gdGhlIG90aGVyIHNpZ25hdG9yaWVzOyBpdCBzaG91bGRuJ3QgYmUuIE5vdEZvdW5kAAcE3E11bHRpc2lnIG9wZXJhdGlvbiBub3QgZm91bmQgd2hlbiBhdHRlbXB0aW5nIHRvIGNhbmNlbC4gTm90T3duZXIACAQtAU9ubHkgdGhlIGFjY291bnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhlIG11bHRpc2lnIGlzIGFibGUgdG8gY2FuY2VsIGl0LixOb1RpbWVwb2ludAAJBB0BTm8gdGltZXBvaW50IHdhcyBnaXZlbiwgeWV0IHRoZSBtdWx0aXNpZyBvcGVyYXRpb24gaXMgYWxyZWFkeSB1bmRlcndheS44V3JvbmdUaW1lcG9pbnQACgQtAUEgZGlmZmVyZW50IHRpbWVwb2ludCB3YXMgZ2l2ZW4gdG8gdGhlIG11bHRpc2lnIG9wZXJhdGlvbiB0aGF0IGlzIHVuZGVyd2F5LkxVbmV4cGVjdGVkVGltZXBvaW50AAsE9EEgdGltZXBvaW50IHdhcyBnaXZlbiwgeWV0IG5vIG11bHRpc2lnIG9wZXJhdGlvbiBpcyB1bmRlcndheS48TWF4V2VpZ2h0VG9vTG93AAwE0FRoZSBtYXhpbXVtIHdlaWdodCBpbmZvcm1hdGlvbiBwcm92aWRlZCB3YXMgdG9vIGxvdy40QWxyZWFkeVN0b3JlZAANBKBUaGUgZGF0YSB0byBiZSBzdG9yZWQgaXMgYWxyZWFkeSBzdG9yZWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LmELCDxwYWxsZXRfcHJlaW1hZ2VAT2xkUmVxdWVzdFN0YXR1cwgkQWNjb3VudElkAQAcQmFsYW5jZQEYAQgsVW5yZXF1ZXN0ZWQIARxkZXBvc2l0jQQBUChBY2NvdW50SWQsIEJhbGFuY2UpAAEMbGVuEAEMdTMyAAAAJFJlcXVlc3RlZAwBHGRlcG9zaXRlCwFwT3B0aW9uPChBY2NvdW50SWQsIEJhbGFuY2UpPgABFGNvdW50EAEMdTMyAAEMbGVuRQIBLE9wdGlvbjx1MzI+AAEAAGULBBhPcHRpb24EBFQBjQQBCBBOb25lAAAAEFNvbWUEAI0EAAABAABpCwg8cGFsbGV0X3ByZWltYWdlNFJlcXVlc3RTdGF0dXMIJEFjY291bnRJZAEAGFRpY2tldAFtCwEILFVucmVxdWVzdGVkCAEYdGlja2V0cQsBTChBY2NvdW50SWQsIFRpY2tldCkAAQxsZW4QAQx1MzIAAAAkUmVxdWVzdGVkDAEwbWF5YmVfdGlja2V0dQsBbE9wdGlvbjwoQWNjb3VudElkLCBUaWNrZXQpPgABFGNvdW50EAEMdTMyAAEkbWF5YmVfbGVuRQIBLE9wdGlvbjx1MzI+AAEAAG0LFDRmcmFtZV9zdXBwb3J0GHRyYWl0cxh0b2tlbnMgZnVuZ2libGVESG9sZENvbnNpZGVyYXRpb24UBEEABEYABFIABEQACEZwAAAEABgBKEY6OkJhbGFuY2UAAHELAAAECABtCwB1CwQYT3B0aW9uBARUAXELAQgQTm9uZQAAABBTb21lBABxCwAAAQAAeQsMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEIBFMAAAQAOAEYVmVjPFQ+AAB9Cww8cGFsbGV0X3ByZWltYWdlGHBhbGxldBRFcnJvcgQEVAABIBhUb29CaWcAAASgUHJlaW1hZ2UgaXMgdG9vIGxhcmdlIHRvIHN0b3JlIG9uLWNoYWluLjBBbHJlYWR5Tm90ZWQAAQSkUHJlaW1hZ2UgaGFzIGFscmVhZHkgYmVlbiBub3RlZCBvbi1jaGFpbi40Tm90QXV0aG9yaXplZAACBMhUaGUgdXNlciBpcyBub3QgYXV0aG9yaXplZCB0byBwZXJmb3JtIHRoaXMgYWN0aW9uLiBOb3ROb3RlZAADBPxUaGUgcHJlaW1hZ2UgY2Fubm90IGJlIHJlbW92ZWQgc2luY2UgaXQgaGFzIG5vdCB5ZXQgYmVlbiBub3RlZC4kUmVxdWVzdGVkAAQECQFBIHByZWltYWdlIG1heSBub3QgYmUgcmVtb3ZlZCB3aGVuIHRoZXJlIGFyZSBvdXRzdGFuZGluZyByZXF1ZXN0cy4wTm90UmVxdWVzdGVkAAUELQFUaGUgcHJlaW1hZ2UgcmVxdWVzdCBjYW5ub3QgYmUgcmVtb3ZlZCBzaW5jZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cyBleGlzdC4cVG9vTWFueQAGBFUBTW9yZSB0aGFuIGBNQVhfSEFTSF9VUEdSQURFX0JVTEtfQ09VTlRgIGhhc2hlcyB3ZXJlIHJlcXVlc3RlZCB0byBiZSB1cGdyYWRlZCBhdCBvbmNlLhhUb29GZXcABwTkVG9vIGZldyBoYXNoZXMgd2VyZSByZXF1ZXN0ZWQgdG8gYmUgdXBncmFkZWQgKGkuZS4gemVybykuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LoELCDxwYWxsZXRfYm91bnRpZXMYQm91bnR5DCRBY2NvdW50SWQBABxCYWxhbmNlARgsQmxvY2tOdW1iZXIBEAAYASBwcm9wb3NlcgABJEFjY291bnRJZAABFHZhbHVlGAEcQmFsYW5jZQABDGZlZRgBHEJhbGFuY2UAATxjdXJhdG9yX2RlcG9zaXQYARxCYWxhbmNlAAEQYm9uZBgBHEJhbGFuY2UAARhzdGF0dXOFCwGQQm91bnR5U3RhdHVzPEFjY291bnRJZCwgQmxvY2tOdW1iZXI+AACFCwg8cGFsbGV0X2JvdW50aWVzMEJvdW50eVN0YXR1cwgkQWNjb3VudElkAQAsQmxvY2tOdW1iZXIBEAEYIFByb3Bvc2VkAAAAIEFwcHJvdmVkAAEAGEZ1bmRlZAACADxDdXJhdG9yUHJvcG9zZWQEARxjdXJhdG9yAAEkQWNjb3VudElkAAMAGEFjdGl2ZQgBHGN1cmF0b3IAASRBY2NvdW50SWQAASh1cGRhdGVfZHVlEAEsQmxvY2tOdW1iZXIABAA0UGVuZGluZ1BheW91dAwBHGN1cmF0b3IAASRBY2NvdW50SWQAASxiZW5lZmljaWFyeQABJEFjY291bnRJZAABJHVubG9ja19hdBABLEJsb2NrTnVtYmVyAAUAAIkLDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAjQsMPHBhbGxldF9ib3VudGllcxhwYWxsZXQURXJyb3IIBFQABEkAASxwSW5zdWZmaWNpZW50UHJvcG9zZXJzQmFsYW5jZQAABHhQcm9wb3NlcidzIGJhbGFuY2UgaXMgdG9vIGxvdy4wSW52YWxpZEluZGV4AAEEkE5vIHByb3Bvc2FsIG9yIGJvdW50eSBhdCB0aGF0IGluZGV4LjBSZWFzb25Ub29CaWcAAgSEVGhlIHJlYXNvbiBnaXZlbiBpcyBqdXN0IHRvbyBiaWcuQFVuZXhwZWN0ZWRTdGF0dXMAAwSAVGhlIGJvdW50eSBzdGF0dXMgaXMgdW5leHBlY3RlZC44UmVxdWlyZUN1cmF0b3IABARcUmVxdWlyZSBib3VudHkgY3VyYXRvci4wSW52YWxpZFZhbHVlAAUEVEludmFsaWQgYm91bnR5IHZhbHVlLihJbnZhbGlkRmVlAAYETEludmFsaWQgYm91bnR5IGZlZS40UGVuZGluZ1BheW91dAAHCGxBIGJvdW50eSBwYXlvdXQgaXMgcGVuZGluZy74VG8gY2FuY2VsIHRoZSBib3VudHksIHlvdSBtdXN0IHVuYXNzaWduIGFuZCBzbGFzaCB0aGUgY3VyYXRvci4kUHJlbWF0dXJlAAgERQFUaGUgYm91bnRpZXMgY2Fubm90IGJlIGNsYWltZWQvY2xvc2VkIGJlY2F1c2UgaXQncyBzdGlsbCBpbiB0aGUgY291bnRkb3duIHBlcmlvZC5QSGFzQWN0aXZlQ2hpbGRCb3VudHkACQQFAVRoZSBib3VudHkgY2Fubm90IGJlIGNsb3NlZCBiZWNhdXNlIGl0IGhhcyBhY3RpdmUgY2hpbGQgYm91bnRpZXMuNFRvb01hbnlRdWV1ZWQACgSYVG9vIG1hbnkgYXBwcm92YWxzIGFyZSBhbHJlYWR5IHF1ZXVlZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQukQsIVHBhbGxldF9jaGlsZF9ib3VudGllcyxDaGlsZEJvdW50eQwkQWNjb3VudElkAQAcQmFsYW5jZQEYLEJsb2NrTnVtYmVyARAAFAE0cGFyZW50X2JvdW50eRABLEJvdW50eUluZGV4AAEUdmFsdWUYARxCYWxhbmNlAAEMZmVlGAEcQmFsYW5jZQABPGN1cmF0b3JfZGVwb3NpdBgBHEJhbGFuY2UAARhzdGF0dXOVCwGkQ2hpbGRCb3VudHlTdGF0dXM8QWNjb3VudElkLCBCbG9ja051bWJlcj4AAJULCFRwYWxsZXRfY2hpbGRfYm91bnRpZXNEQ2hpbGRCb3VudHlTdGF0dXMIJEFjY291bnRJZAEALEJsb2NrTnVtYmVyARABEBRBZGRlZAAAADxDdXJhdG9yUHJvcG9zZWQEARxjdXJhdG9yAAEkQWNjb3VudElkAAEAGEFjdGl2ZQQBHGN1cmF0b3IAASRBY2NvdW50SWQAAgA0UGVuZGluZ1BheW91dAwBHGN1cmF0b3IAASRBY2NvdW50SWQAASxiZW5lZmljaWFyeQABJEFjY291bnRJZAABJHVubG9ja19hdBABLEJsb2NrTnVtYmVyAAMAAJkLDFRwYWxsZXRfY2hpbGRfYm91bnRpZXMYcGFsbGV0FEVycm9yBARUAAEMVFBhcmVudEJvdW50eU5vdEFjdGl2ZQAABKRUaGUgcGFyZW50IGJvdW50eSBpcyBub3QgaW4gYWN0aXZlIHN0YXRlLmRJbnN1ZmZpY2llbnRCb3VudHlCYWxhbmNlAAEE5FRoZSBib3VudHkgYmFsYW5jZSBpcyBub3QgZW5vdWdoIHRvIGFkZCBuZXcgY2hpbGQtYm91bnR5LlBUb29NYW55Q2hpbGRCb3VudGllcwACBA0BTnVtYmVyIG9mIGNoaWxkIGJvdW50aWVzIGV4Y2VlZHMgbGltaXQgYE1heEFjdGl2ZUNoaWxkQm91bnR5Q291bnRgLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6dCwiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlNFJlYWR5U29sdXRpb24IJEFjY291bnRJZAAoTWF4V2lubmVycwAADAEgc3VwcG9ydHOhCwGYQm91bmRlZFN1cHBvcnRzPEFjY291bnRJZCwgTWF4V2lubmVycz4AARRzY29yZXEEATRFbGVjdGlvblNjb3JlAAEcY29tcHV0ZQUIATxFbGVjdGlvbkNvbXB1dGUAAKELDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBgQQEUwAABAB9BAEYVmVjPFQ+AAClCwiQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlNFJvdW5kU25hcHNob3QIJEFjY291bnRJZAEAMERhdGFQcm92aWRlcgGpCwAIARh2b3RlcnOtCwFEVmVjPERhdGFQcm92aWRlcj4AARx0YXJnZXRztQEBOFZlYzxBY2NvdW50SWQ+AACpCwAABAwAMGEJAK0LAAACqQsAsQsMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAG1CwRTAAAEALkLARhWZWM8VD4AALULAAAEDHEEEBAAuQsAAAK1CwC9CwyQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlGHNpZ25lZEBTaWduZWRTdWJtaXNzaW9uDCRBY2NvdW50SWQBABxCYWxhbmNlARggU29sdXRpb24BRQMAEAEMd2hvAAEkQWNjb3VudElkAAEcZGVwb3NpdBgBHEJhbGFuY2UAATByYXdfc29sdXRpb25BAwFUUmF3U29sdXRpb248U29sdXRpb24+AAEgY2FsbF9mZWUYARxCYWxhbmNlAADBCwyQcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlGHBhbGxldBRFcnJvcgQEVAABPGhQcmVEaXNwYXRjaEVhcmx5U3VibWlzc2lvbgAABGRTdWJtaXNzaW9uIHdhcyB0b28gZWFybHkubFByZURpc3BhdGNoV3JvbmdXaW5uZXJDb3VudAABBIhXcm9uZyBudW1iZXIgb2Ygd2lubmVycyBwcmVzZW50ZWQuZFByZURpc3BhdGNoV2Vha1N1Ym1pc3Npb24AAgSQU3VibWlzc2lvbiB3YXMgdG9vIHdlYWssIHNjb3JlLXdpc2UuPFNpZ25lZFF1ZXVlRnVsbAADBEkBVGhlIHF1ZXVlIHdhcyBmdWxsLCBhbmQgdGhlIHNvbHV0aW9uIHdhcyBub3QgYmV0dGVyIHRoYW4gYW55IG9mIHRoZSBleGlzdGluZyBvbmVzLlhTaWduZWRDYW5ub3RQYXlEZXBvc2l0AAQElFRoZSBvcmlnaW4gZmFpbGVkIHRvIHBheSB0aGUgZGVwb3NpdC5QU2lnbmVkSW52YWxpZFdpdG5lc3MABQSgV2l0bmVzcyBkYXRhIHRvIGRpc3BhdGNoYWJsZSBpcyBpbnZhbGlkLkxTaWduZWRUb29NdWNoV2VpZ2h0AAYEuFRoZSBzaWduZWQgc3VibWlzc2lvbiBjb25zdW1lcyB0b28gbXVjaCB3ZWlnaHQ8T2N3Q2FsbFdyb25nRXJhAAcEmE9DVyBzdWJtaXR0ZWQgc29sdXRpb24gZm9yIHdyb25nIHJvdW5kXE1pc3NpbmdTbmFwc2hvdE1ldGFkYXRhAAgEqFNuYXBzaG90IG1ldGFkYXRhIHNob3VsZCBleGlzdCBidXQgZGlkbid0LlhJbnZhbGlkU3VibWlzc2lvbkluZGV4AAkE0GBTZWxmOjppbnNlcnRfc3VibWlzc2lvbmAgcmV0dXJuZWQgYW4gaW52YWxpZCBpbmRleC44Q2FsbE5vdEFsbG93ZWQACgSYVGhlIGNhbGwgaXMgbm90IGFsbG93ZWQgYXQgdGhpcyBwb2ludC44RmFsbGJhY2tGYWlsZWQACwRMVGhlIGZhbGxiYWNrIGZhaWxlZCxCb3VuZE5vdE1ldAAMBEhTb21lIGJvdW5kIG5vdCBtZXQ4VG9vTWFueVdpbm5lcnMADQScU3VibWl0dGVkIHNvbHV0aW9uIGhhcyB0b28gbWFueSB3aW5uZXJzZFByZURpc3BhdGNoRGlmZmVyZW50Um91bmQADgS4U3VibWlzc2lvbiB3YXMgcHJlcGFyZWQgZm9yIGEgZGlmZmVyZW50IHJvdW5kLgQNAUVycm9yIG9mIHRoZSBwYWxsZXQgdGhhdCBjYW4gYmUgcmV0dXJuZWQgaW4gcmVzcG9uc2UgdG8gZGlzcGF0Y2hlcy7FCwxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAV0KBFMAAAQAYQoBGFZlYzxUPgAAyQsMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAHNCwRTAAAEANELARhWZWM8VD4AAM0LDChwYWxsZXRfbmlzGHBhbGxldAxCaWQIHEJhbGFuY2UBGCRBY2NvdW50SWQBAAAIARhhbW91bnQYARxCYWxhbmNlAAEMd2hvAAEkQWNjb3VudElkAADRCwAAAs0LANULDChwYWxsZXRfbmlzGHBhbGxldDRTdW1tYXJ5UmVjb3JkCCxCbG9ja051bWJlcgEQHEJhbGFuY2UBGAAUATxwcm9wb3J0aW9uX293ZWSdAgEsUGVycXVpbnRpbGwAARRpbmRleBABMFJlY2VpcHRJbmRleAABGHRoYXdlZJ0CASxQZXJxdWludGlsbAABLGxhc3RfcGVyaW9kEAEsQmxvY2tOdW1iZXIAAUByZWNlaXB0c19vbl9ob2xkGAEcQmFsYW5jZQAA2QsMKHBhbGxldF9uaXMYcGFsbGV0NFJlY2VpcHRSZWNvcmQMJEFjY291bnRJZAEALEJsb2NrTnVtYmVyARAcQmFsYW5jZQEYAAwBKHByb3BvcnRpb26dAgEsUGVycXVpbnRpbGwAARRvd25lcmULAXBPcHRpb248KEFjY291bnRJZCwgQmFsYW5jZSk+AAEYZXhwaXJ5EAEsQmxvY2tOdW1iZXIAAN0LAAAECJ0CEADhCwwocGFsbGV0X25pcxhwYWxsZXQURXJyb3IEBFQAATxARHVyYXRpb25Ub29TbWFsbAAABKRUaGUgZHVyYXRpb24gb2YgdGhlIGJpZCBpcyBsZXNzIHRoYW4gb25lLjhEdXJhdGlvblRvb0JpZwABBPRUaGUgZHVyYXRpb24gaXMgdGhlIGJpZCBpcyBncmVhdGVyIHRoYW4gdGhlIG51bWJlciBvZiBxdWV1ZXMuOEFtb3VudFRvb1NtYWxsAAIE3FRoZSBhbW91bnQgb2YgdGhlIGJpZCBpcyBsZXNzIHRoYW4gdGhlIG1pbmltdW0gYWxsb3dlZC4kQmlkVG9vTG93AAMIQQFUaGUgcXVldWUgZm9yIHRoZSBiaWQncyBkdXJhdGlvbiBpcyBmdWxsIGFuZCB0aGUgYW1vdW50IGJpZCBpcyB0b28gbG93IHRvIGdldCBpboh0aHJvdWdoIHJlcGxhY2luZyBhbiBleGlzdGluZyBiaWQuOFVua25vd25SZWNlaXB0AAQEZFJlY2VpcHQgaW5kZXggaXMgdW5rbm93bi4gTm90T3duZXIABQR0Tm90IHRoZSBvd25lciBvZiB0aGUgcmVjZWlwdC4oTm90RXhwaXJlZAAGBHBCb25kIG5vdCB5ZXQgYXQgZXhwaXJ5IGRhdGUuKFVua25vd25CaWQABwSoVGhlIGdpdmVuIGJpZCBmb3IgcmV0cmFjdGlvbiBpcyBub3QgZm91bmQuNFBvcnRpb25Ub29CaWcACATgVGhlIHBvcnRpb24gc3VwcGxpZWQgaXMgYmV5b25kIHRoZSB2YWx1ZSBvZiB0aGUgcmVjZWlwdC4gVW5mdW5kZWQACQSUTm90IGVub3VnaCBmdW5kcyBhcmUgaGVsZCB0byBwYXkgb3V0LjRBbHJlYWR5RnVuZGVkAAoEsFRoZXJlIGFyZSBlbm91Z2ggZnVuZHMgZm9yIHdoYXQgaXMgcmVxdWlyZWQuJFRocm90dGxlZAALBMxUaGUgdGhhdyB0aHJvdHRsZSBoYXMgYmVlbiByZWFjaGVkIGZvciB0aGlzIHBlcmlvZC4kTWFrZXNEdXN0AAwEFQFUaGUgb3BlcmF0aW9uIHdvdWxkIHJlc3VsdCBpbiBhIHJlY2VpcHQgd29ydGggYW4gaW5zaWduaWZpY2FudCB2YWx1ZS48QWxyZWFkeUNvbW11bmFsAA0EgFRoZSByZWNlaXB0IGlzIGFscmVhZHkgY29tbXVuYWwuOEFscmVhZHlQcml2YXRlAA4EfFRoZSByZWNlaXB0IGlzIGFscmVhZHkgcHJpdmF0ZS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQu5QsMTGJvdW5kZWRfY29sbGVjdGlvbnNAd2Vha19ib3VuZGVkX3ZlYzhXZWFrQm91bmRlZFZlYwgEVAEFCQRTAAAEAA0JARhWZWM8VD4AAOkLDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBFQkEUwAABAAZCQEYVmVjPFQ+AADtCwxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAfELBFMAAAQA9QsBGFZlYzxUPgAA8QsUNGZyYW1lX3N1cHBvcnQYdHJhaXRzGHRva2VucxBtaXNjIElkQW1vdW50CAhJZAGpARxCYWxhbmNlARgACAEIaWSpAQEISWQAARhhbW91bnQYARxCYWxhbmNlAAD1CwAAAvELAPkLDDxwYWxsZXRfYmFsYW5jZXMYcGFsbGV0FEVycm9yCARUAARJAAEwOFZlc3RpbmdCYWxhbmNlAAAEnFZlc3RpbmcgYmFsYW5jZSB0b28gaGlnaCB0byBzZW5kIHZhbHVlLlRMaXF1aWRpdHlSZXN0cmljdGlvbnMAAQTIQWNjb3VudCBsaXF1aWRpdHkgcmVzdHJpY3Rpb25zIHByZXZlbnQgd2l0aGRyYXdhbC5MSW5zdWZmaWNpZW50QmFsYW5jZQACBHhCYWxhbmNlIHRvbyBsb3cgdG8gc2VuZCB2YWx1ZS5IRXhpc3RlbnRpYWxEZXBvc2l0AAME7FZhbHVlIHRvbyBsb3cgdG8gY3JlYXRlIGFjY291bnQgZHVlIHRvIGV4aXN0ZW50aWFsIGRlcG9zaXQuNEV4cGVuZGFiaWxpdHkABASQVHJhbnNmZXIvcGF5bWVudCB3b3VsZCBraWxsIGFjY291bnQuXEV4aXN0aW5nVmVzdGluZ1NjaGVkdWxlAAUEzEEgdmVzdGluZyBzY2hlZHVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBhY2NvdW50LixEZWFkQWNjb3VudAAGBIxCZW5lZmljaWFyeSBhY2NvdW50IG11c3QgcHJlLWV4aXN0LjxUb29NYW55UmVzZXJ2ZXMABwS4TnVtYmVyIG9mIG5hbWVkIHJlc2VydmVzIGV4Y2VlZCBgTWF4UmVzZXJ2ZXNgLjBUb29NYW55SG9sZHMACAT4TnVtYmVyIG9mIGhvbGRzIGV4Y2VlZCBgVmFyaWFudENvdW50T2Y8VDo6UnVudGltZUhvbGRSZWFzb24+YC44VG9vTWFueUZyZWV6ZXMACQSYTnVtYmVyIG9mIGZyZWV6ZXMgZXhjZWVkIGBNYXhGcmVlemVzYC5MSXNzdWFuY2VEZWFjdGl2YXRlZAAKBAEBVGhlIGlzc3VhbmNlIGNhbm5vdCBiZSBtb2RpZmllZCBzaW5jZSBpdCBpcyBhbHJlYWR5IGRlYWN0aXZhdGVkLiREZWx0YVplcm8ACwRkVGhlIGRlbHRhIGNhbm5vdCBiZSB6ZXJvLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC79CwxAcGFsbGV0X2JhZ3NfbGlzdBBsaXN0EE5vZGUIBFQABEkAABQBCGlkAAEwVDo6QWNjb3VudElkAAEQcHJlduEBAVBPcHRpb248VDo6QWNjb3VudElkPgABEG5leHThAQFQT3B0aW9uPFQ6OkFjY291bnRJZD4AASRiYWdfdXBwZXIwASBUOjpTY29yZQABFHNjb3JlMAEgVDo6U2NvcmUAAAEMDEBwYWxsZXRfYmFnc19saXN0EGxpc3QMQmFnCARUAARJAAAIARBoZWFk4QEBUE9wdGlvbjxUOjpBY2NvdW50SWQ+AAEQdGFpbOEBAVBPcHRpb248VDo6QWNjb3VudElkPgAABQwAAAIwAAkMDEBwYWxsZXRfYmFnc19saXN0GHBhbGxldBRFcnJvcggEVAAESQABBBBMaXN0BAANDAEkTGlzdEVycm9yAAAEtEEgZXJyb3IgaW4gdGhlIGxpc3QgaW50ZXJmYWNlIGltcGxlbWVudGF0aW9uLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4NDAxAcGFsbGV0X2JhZ3NfbGlzdBBsaXN0JExpc3RFcnJvcgABECREdXBsaWNhdGUAAAAoTm90SGVhdmllcgABADBOb3RJblNhbWVCYWcAAgAwTm9kZU5vdEZvdW5kAAMAABEMCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyhQb29sTWVtYmVyBARUAAAQARxwb29sX2lkEAEYUG9vbElkAAEYcG9pbnRzGAEwQmFsYW5jZU9mPFQ+AAFwbGFzdF9yZWNvcmRlZF9yZXdhcmRfY291bnRlcj0HAUBUOjpSZXdhcmRDb3VudGVyAAE4dW5ib25kaW5nX2VyYXMVDAHgQm91bmRlZEJUcmVlTWFwPEVyYUluZGV4LCBCYWxhbmNlT2Y8VD4sIFQ6Ok1heFVuYm9uZGluZz4AABUMDExib3VuZGVkX2NvbGxlY3Rpb25zRGJvdW5kZWRfYnRyZWVfbWFwPEJvdW5kZWRCVHJlZU1hcAwESwEQBFYBGARTAAAEABkMAThCVHJlZU1hcDxLLCBWPgAAGQwEIEJUcmVlTWFwCARLARAEVgEYAAQAYQoAAAAdDAhccGFsbGV0X25vbWluYXRpb25fcG9vbHM8Qm9uZGVkUG9vbElubmVyBARUAAAUAShjb21taXNzaW9uIQwBNENvbW1pc3Npb248VD4AAThtZW1iZXJfY291bnRlchABDHUzMgABGHBvaW50cxgBMEJhbGFuY2VPZjxUPgABFHJvbGVzLQwBXFBvb2xSb2xlczxUOjpBY2NvdW50SWQ+AAEUc3RhdGWlBAEkUG9vbFN0YXRlAAAhDAhccGFsbGV0X25vbWluYXRpb25fcG9vbHMoQ29tbWlzc2lvbgQEVAAAFAEcY3VycmVudL0EAXxPcHRpb248KFBlcmJpbGwsIFQ6OkFjY291bnRJZCk+AAEMbWF4JQwBPE9wdGlvbjxQZXJiaWxsPgABLGNoYW5nZV9yYXRlKQwBvE9wdGlvbjxDb21taXNzaW9uQ2hhbmdlUmF0ZTxCbG9ja051bWJlckZvcjxUPj4+AAE0dGhyb3R0bGVfZnJvbUUCAWRPcHRpb248QmxvY2tOdW1iZXJGb3I8VD4+AAFAY2xhaW1fcGVybWlzc2lvbskEAbxPcHRpb248Q29tbWlzc2lvbkNsYWltUGVybWlzc2lvbjxUOjpBY2NvdW50SWQ+PgAAJQwEGE9wdGlvbgQEVAGUAQgQTm9uZQAAABBTb21lBACUAAABAAApDAQYT3B0aW9uBARUAcUEAQgQTm9uZQAAABBTb21lBADFBAAAAQAALQwIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzJFBvb2xSb2xlcwQkQWNjb3VudElkAQAAEAEkZGVwb3NpdG9yAAEkQWNjb3VudElkAAEQcm9vdOEBAURPcHRpb248QWNjb3VudElkPgABJG5vbWluYXRvcuEBAURPcHRpb248QWNjb3VudElkPgABHGJvdW5jZXLhAQFET3B0aW9uPEFjY291bnRJZD4AADEMCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyhSZXdhcmRQb29sBARUAAAUAXBsYXN0X3JlY29yZGVkX3Jld2FyZF9jb3VudGVyPQcBQFQ6OlJld2FyZENvdW50ZXIAAWxsYXN0X3JlY29yZGVkX3RvdGFsX3BheW91dHMYATBCYWxhbmNlT2Y8VD4AAVR0b3RhbF9yZXdhcmRzX2NsYWltZWQYATBCYWxhbmNlT2Y8VD4AAWB0b3RhbF9jb21taXNzaW9uX3BlbmRpbmcYATBCYWxhbmNlT2Y8VD4AAWB0b3RhbF9jb21taXNzaW9uX2NsYWltZWQYATBCYWxhbmNlT2Y8VD4AADUMCFxwYWxsZXRfbm9taW5hdGlvbl9wb29scyBTdWJQb29scwQEVAAACAEYbm9fZXJhOQwBNFVuYm9uZFBvb2w8VD4AASB3aXRoX2VyYT0MAQEBQm91bmRlZEJUcmVlTWFwPEVyYUluZGV4LCBVbmJvbmRQb29sPFQ+LCBUb3RhbFVuYm9uZGluZ1Bvb2xzPFQ+PgAAOQwIXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzKFVuYm9uZFBvb2wEBFQAAAgBGHBvaW50cxgBMEJhbGFuY2VPZjxUPgABHGJhbGFuY2UYATBCYWxhbmNlT2Y8VD4AAD0MDExib3VuZGVkX2NvbGxlY3Rpb25zRGJvdW5kZWRfYnRyZWVfbWFwPEJvdW5kZWRCVHJlZU1hcAwESwEQBFYBOQwEUwAABABBDAE4QlRyZWVNYXA8SywgVj4AAEEMBCBCVHJlZU1hcAgESwEQBFYBOQwABABFDAAAAEUMAAACSQwASQwAAAQIEDkMAE0MDExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAUQwMXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzGHBhbGxldBRFcnJvcgQEVAABmDBQb29sTm90Rm91bmQAAASIQSAoYm9uZGVkKSBwb29sIGlkIGRvZXMgbm90IGV4aXN0LkhQb29sTWVtYmVyTm90Rm91bmQAAQRsQW4gYWNjb3VudCBpcyBub3QgYSBtZW1iZXIuSFJld2FyZFBvb2xOb3RGb3VuZAACBCEBQSByZXdhcmQgcG9vbCBkb2VzIG5vdCBleGlzdC4gSW4gYWxsIGNhc2VzIHRoaXMgaXMgYSBzeXN0ZW0gbG9naWMgZXJyb3IuQFN1YlBvb2xzTm90Rm91bmQAAwRoQSBzdWIgcG9vbCBkb2VzIG5vdCBleGlzdC5kQWNjb3VudEJlbG9uZ3NUb090aGVyUG9vbAAECE0BQW4gYWNjb3VudCBpcyBhbHJlYWR5IGRlbGVnYXRpbmcgaW4gYW5vdGhlciBwb29sLiBBbiBhY2NvdW50IG1heSBvbmx5IGJlbG9uZyB0byBvbmU8cG9vbCBhdCBhIHRpbWUuOEZ1bGx5VW5ib25kaW5nAAUIPQFUaGUgbWVtYmVyIGlzIGZ1bGx5IHVuYm9uZGVkIChhbmQgdGh1cyBjYW5ub3QgYWNjZXNzIHRoZSBib25kZWQgYW5kIHJld2FyZCBwb29sqGFueW1vcmUgdG8sIGZvciBleGFtcGxlLCBjb2xsZWN0IHJld2FyZHMpLkRNYXhVbmJvbmRpbmdMaW1pdAAGBAkBVGhlIG1lbWJlciBjYW5ub3QgdW5ib25kIGZ1cnRoZXIgY2h1bmtzIGR1ZSB0byByZWFjaGluZyB0aGUgbGltaXQuRENhbm5vdFdpdGhkcmF3QW55AAcETQFOb25lIG9mIHRoZSBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIHlldCBiZWNhdXNlIHRoZSBib25kaW5nIGR1cmF0aW9uIGhhcyBub3QgcGFzc2VkLkRNaW5pbXVtQm9uZE5vdE1ldAAIFCkBVGhlIGFtb3VudCBkb2VzIG5vdCBtZWV0IHRoZSBtaW5pbXVtIGJvbmQgdG8gZWl0aGVyIGpvaW4gb3IgY3JlYXRlIGEgcG9vbC4AVQFUaGUgZGVwb3NpdG9yIGNhbiBuZXZlciB1bmJvbmQgdG8gYSB2YWx1ZSBsZXNzIHRoYW4gYFBhbGxldDo6ZGVwb3NpdG9yX21pbl9ib25kYC4gVGhlXQFjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5nIHBlcm1pc3Npb25zIGZvciB0aGUgcG9vbC4gTWVtYmVycyBjYW4gbmV2ZXIgdW5ib25kIHRvIGFodmFsdWUgYmVsb3cgYE1pbkpvaW5Cb25kYC4wT3ZlcmZsb3dSaXNrAAkEIQFUaGUgdHJhbnNhY3Rpb24gY291bGQgbm90IGJlIGV4ZWN1dGVkIGR1ZSB0byBvdmVyZmxvdyByaXNrIGZvciB0aGUgcG9vbC40Tm90RGVzdHJveWluZwAKCF0BQSBwb29sIG11c3QgYmUgaW4gW2BQb29sU3RhdGU6OkRlc3Ryb3lpbmdgXSBpbiBvcmRlciBmb3IgdGhlIGRlcG9zaXRvciB0byB1bmJvbmQgb3IgZm9yuG90aGVyIG1lbWJlcnMgdG8gYmUgcGVybWlzc2lvbmxlc3NseSB1bmJvbmRlZC4wTm90Tm9taW5hdG9yAAsE9FRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5nIHBlcm1pc3Npb25zIGZvciB0aGUgcG9vbC5UTm90S2lja2VyT3JEZXN0cm95aW5nAAwEPQFFaXRoZXIgYSkgdGhlIGNhbGxlciBjYW5ub3QgbWFrZSBhIHZhbGlkIGtpY2sgb3IgYikgdGhlIHBvb2wgaXMgbm90IGRlc3Ryb3lpbmcuHE5vdE9wZW4ADQRwVGhlIHBvb2wgaXMgbm90IG9wZW4gdG8gam9pbiBNYXhQb29scwAOBIRUaGUgc3lzdGVtIGlzIG1heGVkIG91dCBvbiBwb29scy44TWF4UG9vbE1lbWJlcnMADwScVG9vIG1hbnkgbWVtYmVycyBpbiB0aGUgcG9vbCBvciBzeXN0ZW0uRENhbk5vdENoYW5nZVN0YXRlABAEiFRoZSBwb29scyBzdGF0ZSBjYW5ub3QgYmUgY2hhbmdlZC5URG9lc05vdEhhdmVQZXJtaXNzaW9uABEEuFRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBhZGVxdWF0ZSBwZXJtaXNzaW9ucy5UTWV0YWRhdGFFeGNlZWRzTWF4TGVuABIErE1ldGFkYXRhIGV4Y2VlZHMgW2BDb25maWc6Ok1heE1ldGFkYXRhTGVuYF0kRGVmZW5zaXZlBABVDAE4RGVmZW5zaXZlRXJyb3IAEwgxAVNvbWUgZXJyb3Igb2NjdXJyZWQgdGhhdCBzaG91bGQgbmV2ZXIgaGFwcGVuLiBUaGlzIHNob3VsZCBiZSByZXBvcnRlZCB0byB0aGUwbWFpbnRhaW5lcnMunFBhcnRpYWxVbmJvbmROb3RBbGxvd2VkUGVybWlzc2lvbmxlc3NseQAUBLxQYXJ0aWFsIHVuYm9uZGluZyBub3cgYWxsb3dlZCBwZXJtaXNzaW9ubGVzc2x5LlxNYXhDb21taXNzaW9uUmVzdHJpY3RlZAAVBB0BVGhlIHBvb2wncyBtYXggY29tbWlzc2lvbiBjYW5ub3QgYmUgc2V0IGhpZ2hlciB0aGFuIHRoZSBleGlzdGluZyB2YWx1ZS5gQ29tbWlzc2lvbkV4Y2VlZHNNYXhpbXVtABYE7FRoZSBzdXBwbGllZCBjb21taXNzaW9uIGV4Y2VlZHMgdGhlIG1heCBhbGxvd2VkIGNvbW1pc3Npb24ueENvbW1pc3Npb25FeGNlZWRzR2xvYmFsTWF4aW11bQAXBOhUaGUgc3VwcGxpZWQgY29tbWlzc2lvbiBleGNlZWRzIGdsb2JhbCBtYXhpbXVtIGNvbW1pc3Npb24uZENvbW1pc3Npb25DaGFuZ2VUaHJvdHRsZWQAGAQJAU5vdCBlbm91Z2ggYmxvY2tzIGhhdmUgc3VycGFzc2VkIHNpbmNlIHRoZSBsYXN0IGNvbW1pc3Npb24gdXBkYXRlLnhDb21taXNzaW9uQ2hhbmdlUmF0ZU5vdEFsbG93ZWQAGQQBAVRoZSBzdWJtaXR0ZWQgY2hhbmdlcyB0byBjb21taXNzaW9uIGNoYW5nZSByYXRlIGFyZSBub3QgYWxsb3dlZC5MTm9QZW5kaW5nQ29tbWlzc2lvbgAaBKBUaGVyZSBpcyBubyBwZW5kaW5nIGNvbW1pc3Npb24gdG8gY2xhaW0uWE5vQ29tbWlzc2lvbkN1cnJlbnRTZXQAGwSMTm8gY29tbWlzc2lvbiBjdXJyZW50IGhhcyBiZWVuIHNldC4sUG9vbElkSW5Vc2UAHARkUG9vbCBpZCBjdXJyZW50bHkgaW4gdXNlLjRJbnZhbGlkUG9vbElkAB0EnFBvb2wgaWQgcHJvdmlkZWQgaXMgbm90IGNvcnJlY3QvdXNhYmxlLkxCb25kRXh0cmFSZXN0cmljdGVkAB4E/EJvbmRpbmcgZXh0cmEgaXMgcmVzdHJpY3RlZCB0byB0aGUgZXhhY3QgcGVuZGluZyByZXdhcmQgYW1vdW50LjxOb3RoaW5nVG9BZGp1c3QAHwSwTm8gaW1iYWxhbmNlIGluIHRoZSBFRCBkZXBvc2l0IGZvciB0aGUgcG9vbC44Tm90aGluZ1RvU2xhc2gAIATMTm8gc2xhc2ggcGVuZGluZyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBtZW1iZXIuLFNsYXNoVG9vTG93ACEEqFRoZSBzbGFzaCBhbW91bnQgaXMgdG9vIGxvdyB0byBiZSBhcHBsaWVkLjxBbHJlYWR5TWlncmF0ZWQAIgQVAVRoZSBwb29sIG9yIG1lbWJlciBkZWxlZ2F0aW9uIGhhcyBhbHJlYWR5IG1pZ3JhdGVkIHRvIGRlbGVnYXRlIHN0YWtlLixOb3RNaWdyYXRlZAAjBBUBVGhlIHBvb2wgb3IgbWVtYmVyIGRlbGVnYXRpb24gaGFzIG5vdCBtaWdyYXRlZCB5ZXQgdG8gZGVsZWdhdGUgc3Rha2UuME5vdFN1cHBvcnRlZAAkBPBUaGlzIGNhbGwgaXMgbm90IGFsbG93ZWQgaW4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHBhbGxldC4oUmVzdHJpY3RlZAAlCFEBQWNjb3VudCBpcyByZXN0cmljdGVkIGZyb20gcGFydGljaXBhdGlvbiBpbiBwb29scy4gVGhpcyBtYXkgaGFwcGVuIGlmIHRoZSBhY2NvdW50IGlzfHN0YWtpbmcgaW4gYW5vdGhlciB3YXkgYWxyZWFkeS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuVQwMXHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzGHBhbGxldDhEZWZlbnNpdmVFcnJvcgABHGhOb3RFbm91Z2hTcGFjZUluVW5ib25kUG9vbAAAADBQb29sTm90Rm91bmQAAQBIUmV3YXJkUG9vbE5vdEZvdW5kAAIAQFN1YlBvb2xzTm90Rm91bmQAAwBwQm9uZGVkU3Rhc2hLaWxsZWRQcmVtYXR1cmVseQAEAFREZWxlZ2F0aW9uVW5zdXBwb3J0ZWQABQA8U2xhc2hOb3RBcHBsaWVkAAYAAFkMDExwYWxsZXRfZmFzdF91bnN0YWtlFHR5cGVzOFVuc3Rha2VSZXF1ZXN0BARUAAAIARxzdGFzaGVzXQwB2EJvdW5kZWRWZWM8KFQ6OkFjY291bnRJZCwgQmFsYW5jZU9mPFQ+KSwgVDo6QmF0Y2hTaXplPgABHGNoZWNrZWRhDAGQQm91bmRlZFZlYzxFcmFJbmRleCwgTWF4Q2hlY2tpbmc8VD4+AABdDAxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAY0EBFMAAAQAiQQBGFZlYzxUPgAAYQwMTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAEQBFMAAAQAyQEBGFZlYzxUPgAAZQwMTHBhbGxldF9mYXN0X3Vuc3Rha2UYcGFsbGV0FEVycm9yBARUAAEYNE5vdENvbnRyb2xsZXIAAAy4VGhlIHByb3ZpZGVkIENvbnRyb2xsZXIgYWNjb3VudCB3YXMgbm90IGZvdW5kLgDAVGhpcyBtZWFucyB0aGF0IHRoZSBnaXZlbiBhY2NvdW50IGlzIG5vdCBib25kZWQuNEFscmVhZHlRdWV1ZWQAAQSsVGhlIGJvbmRlZCBhY2NvdW50IGhhcyBhbHJlYWR5IGJlZW4gcXVldWVkLjhOb3RGdWxseUJvbmRlZAACBLxUaGUgYm9uZGVkIGFjY291bnQgaGFzIGFjdGl2ZSB1bmxvY2tpbmcgY2h1bmtzLiROb3RRdWV1ZWQAAwS0VGhlIHByb3ZpZGVkIHVuLXN0YWtlciBpcyBub3QgaW4gdGhlIGBRdWV1ZWAuLEFscmVhZHlIZWFkAAQEBQFUaGUgcHJvdmlkZWQgdW4tc3Rha2VyIGlzIGFscmVhZHkgaW4gSGVhZCwgYW5kIGNhbm5vdCBkZXJlZ2lzdGVyLjhDYWxsTm90QWxsb3dlZAAFBB0BVGhlIGNhbGwgaXMgbm90IGFsbG93ZWQgYXQgdGhpcyBwb2ludCBiZWNhdXNlIHRoZSBwYWxsZXQgaXMgbm90IGFjdGl2ZS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuaQwMYHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZxR0eXBlcyhEZWxlZ2F0aW9uBARUAAAIARRhZ2VudAABMFQ6OkFjY291bnRJZAABGGFtb3VudBgBMEJhbGFuY2VPZjxUPgAAbQwMYHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZxR0eXBlcyxBZ2VudExlZGdlcgQEVAAAEAEUcGF5ZWUAATBUOjpBY2NvdW50SWQAATx0b3RhbF9kZWxlZ2F0ZWTkATBCYWxhbmNlT2Y8VD4AAVR1bmNsYWltZWRfd2l0aGRyYXdhbHPkATBCYWxhbmNlT2Y8VD4AATRwZW5kaW5nX3NsYXNo5AEwQmFsYW5jZU9mPFQ+AABxDAxgcGFsbGV0X2RlbGVnYXRlZF9zdGFraW5nGHBhbGxldBRFcnJvcgQEVAABMChOb3RBbGxvd2VkAAAEqFRoZSBhY2NvdW50IGNhbm5vdCBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLjhBbHJlYWR5U3Rha2luZwABBLhBbiBleGlzdGluZyBzdGFrZXIgY2Fubm90IHBlcmZvcm0gdGhpcyBhY3Rpb24uYEludmFsaWRSZXdhcmREZXN0aW5hdGlvbgACBNRSZXdhcmQgRGVzdGluYXRpb24gY2Fubm90IGJlIHNhbWUgYXMgYEFnZW50YCBhY2NvdW50LkRJbnZhbGlkRGVsZWdhdGlvbgADFIhEZWxlZ2F0aW9uIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuAExQb3NzaWJsZSBpc3N1ZXMgYXJlbDEpIENhbm5vdCBkZWxlZ2F0ZSB0byBzZWxmLKQyKSBDYW5ub3QgZGVsZWdhdGUgdG8gbXVsdGlwbGUgZGVsZWdhdGVzLjhOb3RFbm91Z2hGdW5kcwAEBAEBVGhlIGFjY291bnQgZG9lcyBub3QgaGF2ZSBlbm91Z2ggZnVuZHMgdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLiBOb3RBZ2VudAAFBIBOb3QgYW4gZXhpc3RpbmcgYEFnZW50YCBhY2NvdW50LjBOb3REZWxlZ2F0b3IABgRgTm90IGEgRGVsZWdhdG9yIGFjY291bnQuIEJhZFN0YXRlAAcEiFNvbWUgY29ycnVwdGlvbiBpbiBpbnRlcm5hbCBzdGF0ZS44VW5hcHBsaWVkU2xhc2gACATcVW5hcHBsaWVkIHBlbmRpbmcgc2xhc2ggcmVzdHJpY3RzIG9wZXJhdGlvbiBvbiBgQWdlbnRgLjhOb3RoaW5nVG9TbGFzaAAJBKxgQWdlbnRgIGhhcyBubyBwZW5kaW5nIHNsYXNoIHRvIGJlIGFwcGxpZWQuOFdpdGhkcmF3RmFpbGVkAAoEsEZhaWxlZCB0byB3aXRoZHJhdyBhbW91bnQgZnJvbSBDb3JlIFN0YWtpbmcuME5vdFN1cHBvcnRlZAALBJxPcGVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIHBhbGxldC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQudQwMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluczRjb25maWd1cmF0aW9uREhvc3RDb25maWd1cmF0aW9uBCxCbG9ja051bWJlcgEQAIwBNG1heF9jb2RlX3NpemUQAQx1MzIAAUhtYXhfaGVhZF9kYXRhX3NpemUQAQx1MzIAAVhtYXhfdXB3YXJkX3F1ZXVlX2NvdW50EAEMdTMyAAFUbWF4X3Vwd2FyZF9xdWV1ZV9zaXplEAEMdTMyAAFcbWF4X3Vwd2FyZF9tZXNzYWdlX3NpemUQAQx1MzIAAZBtYXhfdXB3YXJkX21lc3NhZ2VfbnVtX3Blcl9jYW5kaWRhdGUQAQx1MzIAAYhocm1wX21heF9tZXNzYWdlX251bV9wZXJfY2FuZGlkYXRlEAEMdTMyAAFsdmFsaWRhdGlvbl91cGdyYWRlX2Nvb2xkb3duEAEsQmxvY2tOdW1iZXIAAWB2YWxpZGF0aW9uX3VwZ3JhZGVfZGVsYXkQASxCbG9ja051bWJlcgABUGFzeW5jX2JhY2tpbmdfcGFyYW1z2QQBSEFzeW5jQmFja2luZ1BhcmFtcwABMG1heF9wb3Zfc2l6ZRABDHUzMgABZG1heF9kb3dud2FyZF9tZXNzYWdlX3NpemUQAQx1MzIAAZBocm1wX21heF9wYXJhY2hhaW5fb3V0Ym91bmRfY2hhbm5lbHMQAQx1MzIAAUxocm1wX3NlbmRlcl9kZXBvc2l0GAEcQmFsYW5jZQABWGhybXBfcmVjaXBpZW50X2RlcG9zaXQYARxCYWxhbmNlAAFkaHJtcF9jaGFubmVsX21heF9jYXBhY2l0eRABDHUzMgABbGhybXBfY2hhbm5lbF9tYXhfdG90YWxfc2l6ZRABDHUzMgABjGhybXBfbWF4X3BhcmFjaGFpbl9pbmJvdW5kX2NoYW5uZWxzEAEMdTMyAAF0aHJtcF9jaGFubmVsX21heF9tZXNzYWdlX3NpemUQAQx1MzIAATxleGVjdXRvcl9wYXJhbXPdBAE4RXhlY3V0b3JQYXJhbXMAAVRjb2RlX3JldGVudGlvbl9wZXJpb2QQASxCbG9ja051bWJlcgABOG1heF92YWxpZGF0b3JzRQIBLE9wdGlvbjx1MzI+AAE4ZGlzcHV0ZV9wZXJpb2QQATBTZXNzaW9uSW5kZXgAAaRkaXNwdXRlX3Bvc3RfY29uY2x1c2lvbl9hY2NlcHRhbmNlX3BlcmlvZBABLEJsb2NrTnVtYmVyAAE0bm9fc2hvd19zbG90cxABDHUzMgABQG5fZGVsYXlfdHJhbmNoZXMQAQx1MzIAAWh6ZXJvdGhfZGVsYXlfdHJhbmNoZV93aWR0aBABDHUzMgABQG5lZWRlZF9hcHByb3ZhbHMQAQx1MzIAAWByZWxheV92cmZfbW9kdWxvX3NhbXBsZXMQAQx1MzIAAThwdmZfdm90aW5nX3R0bBABMFNlc3Npb25JbmRleAABgG1pbmltdW1fdmFsaWRhdGlvbl91cGdyYWRlX2RlbGF5EAEsQmxvY2tOdW1iZXIAAVRtaW5pbXVtX2JhY2tpbmdfdm90ZXMQAQx1MzIAATRub2RlX2ZlYXR1cmVzFQUBME5vZGVGZWF0dXJlcwABWGFwcHJvdmFsX3ZvdGluZ19wYXJhbXPxBAFQQXBwcm92YWxWb3RpbmdQYXJhbXMAAUBzY2hlZHVsZXJfcGFyYW1z9QQBcFNjaGVkdWxlclBhcmFtczxCbG9ja051bWJlcj4AAHkMAAACfQwAfQwAAAQIEHUMAIEMEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnM0Y29uZmlndXJhdGlvbhhwYWxsZXQURXJyb3IEBFQAAQQ8SW52YWxpZE5ld1ZhbHVlAAAE3FRoZSBuZXcgdmFsdWUgZm9yIGEgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgaXMgaW52YWxpZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuhQwAAAIdBQCJDAAAAgECAI0MDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMYc2hhcmVkaEFsbG93ZWRSZWxheVBhcmVudHNUcmFja2VyCBBIYXNoATQsQmxvY2tOdW1iZXIBEAAIARhidWZmZXKRDAFYVmVjRGVxdWU8KEhhc2gsIEhhc2gpPgABNGxhdGVzdF9udW1iZXIQASxCbG9ja051bWJlcgAAkQwAAAKVDACVDAAABAg0NACZDAAAAp0MAJ0MDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkaW5jbHVzaW9ucENhbmRpZGF0ZVBlbmRpbmdBdmFpbGFiaWxpdHkIBEgBNAROARAAJAEQY29yZTEIASRDb3JlSW5kZXgAARBoYXNocQUBNENhbmRpZGF0ZUhhc2gAAShkZXNjcmlwdG9yMQUBWENhbmRpZGF0ZURlc2NyaXB0b3I8SD4AASxjb21taXRtZW50c0EFAVBDYW5kaWRhdGVDb21taXRtZW50cwABSGF2YWlsYWJpbGl0eV92b3RlcxUFAWBCaXRWZWM8dTgsIEJpdE9yZGVyTHNiMD4AARxiYWNrZXJzFQUBYEJpdFZlYzx1OCwgQml0T3JkZXJMc2IwPgABTHJlbGF5X3BhcmVudF9udW1iZXIQAQROAAFAYmFja2VkX2luX251bWJlchABBE4AATRiYWNraW5nX2dyb3VwNQgBKEdyb3VwSW5kZXgAAKEMEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkaW5jbHVzaW9uGHBhbGxldBRFcnJvcgQEVAABRGRWYWxpZGF0b3JJbmRleE91dE9mQm91bmRzAAAEeFZhbGlkYXRvciBpbmRleCBvdXQgb2YgYm91bmRzLlBVbnNjaGVkdWxlZENhbmRpZGF0ZQABBKxDYW5kaWRhdGUgc3VibWl0dGVkIGJ1dCBwYXJhIG5vdCBzY2hlZHVsZWQuQEhlYWREYXRhVG9vTGFyZ2UAAgSkSGVhZCBkYXRhIGV4Y2VlZHMgdGhlIGNvbmZpZ3VyZWQgbWF4aW11bS5QUHJlbWF0dXJlQ29kZVVwZ3JhZGUAAwRkQ29kZSB1cGdyYWRlIHByZW1hdHVyZWx5LjxOZXdDb2RlVG9vTGFyZ2UABARgT3V0cHV0IGNvZGUgaXMgdG9vIGxhcmdlVERpc2FsbG93ZWRSZWxheVBhcmVudAAFCOxUaGUgY2FuZGlkYXRlJ3MgcmVsYXktcGFyZW50IHdhcyBub3QgYWxsb3dlZC4gRWl0aGVyIGl0IHdhcyUBbm90IHJlY2VudCBlbm91Z2ggb3IgaXQgZGlkbid0IGFkdmFuY2UgYmFzZWQgb24gdGhlIGxhc3QgcGFyYWNoYWluIGJsb2NrLkRJbnZhbGlkQXNzaWdubWVudAAGCBUBRmFpbGVkIHRvIGNvbXB1dGUgZ3JvdXAgaW5kZXggZm9yIHRoZSBjb3JlOiBlaXRoZXIgaXQncyBvdXQgb2YgYm91bmRz6G9yIHRoZSByZWxheSBwYXJlbnQgZG9lc24ndCBiZWxvbmcgdG8gdGhlIGN1cnJlbnQgc2Vzc2lvbi5ESW52YWxpZEdyb3VwSW5kZXgABwScSW52YWxpZCBncm91cCBpbmRleCBpbiBjb3JlIGFzc2lnbm1lbnQuTEluc3VmZmljaWVudEJhY2tpbmcACASQSW5zdWZmaWNpZW50IChub24tbWFqb3JpdHkpIGJhY2tpbmcuOEludmFsaWRCYWNraW5nAAkE5EludmFsaWQgKGJhZCBzaWduYXR1cmUsIHVua25vd24gdmFsaWRhdG9yLCBldGMuKSBiYWNraW5nLmhWYWxpZGF0aW9uRGF0YUhhc2hNaXNtYXRjaAAKBMRUaGUgdmFsaWRhdGlvbiBkYXRhIGhhc2ggZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQugEluY29ycmVjdERvd253YXJkTWVzc2FnZUhhbmRsaW5nAAsE2FRoZSBkb3dud2FyZCBtZXNzYWdlIHF1ZXVlIGlzIG5vdCBwcm9jZXNzZWQgY29ycmVjdGx5LlRJbnZhbGlkVXB3YXJkTWVzc2FnZXMADAQdAUF0IGxlYXN0IG9uZSB1cHdhcmQgbWVzc2FnZSBzZW50IGRvZXMgbm90IHBhc3MgdGhlIGFjY2VwdGFuY2UgY3JpdGVyaWEuYEhybXBXYXRlcm1hcmtNaXNoYW5kbGluZwANBBEBVGhlIGNhbmRpZGF0ZSBkaWRuJ3QgZm9sbG93IHRoZSBydWxlcyBvZiBIUk1QIHdhdGVybWFyayBhZHZhbmNlbWVudC5MSW52YWxpZE91dGJvdW5kSHJtcAAOBNRUaGUgSFJNUCBtZXNzYWdlcyBzZW50IGJ5IHRoZSBjYW5kaWRhdGUgaXMgbm90IHZhbGlkLmRJbnZhbGlkVmFsaWRhdGlvbkNvZGVIYXNoAA8E3FRoZSB2YWxpZGF0aW9uIGNvZGUgaGFzaCBvZiB0aGUgY2FuZGlkYXRlIGlzIG5vdCB2YWxpZC5AUGFyYUhlYWRNaXNtYXRjaAAQCFUBVGhlIGBwYXJhX2hlYWRgIGhhc2ggaW4gdGhlIGNhbmRpZGF0ZSBkZXNjcmlwdG9yIGRvZXNuJ3QgbWF0Y2ggdGhlIGhhc2ggb2YgdGhlIGFjdHVhbHRwYXJhIGhlYWQgaW4gdGhlIGNvbW1pdG1lbnRzLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6lDAxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OExTY3JhcGVkT25DaGFpblZvdGVzBARIATQADAEcc2Vzc2lvbhABMFNlc3Npb25JbmRleAABgGJhY2tpbmdfdmFsaWRhdG9yc19wZXJfY2FuZGlkYXRlqQwBHQFWZWM8KENhbmRpZGF0ZVJlY2VpcHQ8SD4sIFZlYzwoVmFsaWRhdG9ySW5kZXgsIFZhbGlkaXR5QXR0ZXN0YXRpb24pPikKPgABIGRpc3B1dGVzaQUBYE11bHRpRGlzcHV0ZVN0YXRlbWVudFNldAAAqQwAAAKtDACtDAAABAgtCLEMALEMAAACtQwAtQwAAAQIHQVlBQC5DBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zOHBhcmFzX2luaGVyZW50GHBhbGxldBRFcnJvcgQEVAABFGRUb29NYW55SW5jbHVzaW9uSW5oZXJlbnRzAAAEzEluY2x1c2lvbiBpbmhlcmVudCBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGJsb2NrLkxJbnZhbGlkUGFyZW50SGVhZGVyAAEIVQFUaGUgaGFzaCBvZiB0aGUgc3VibWl0dGVkIHBhcmVudCBoZWFkZXIgZG9lc24ndCBjb3JyZXNwb25kIHRvIHRoZSBzYXZlZCBibG9jayBoYXNoIG9mLHRoZSBwYXJlbnQuSEluaGVyZW50T3ZlcndlaWdodAACBAkBVGhlIGRhdGEgZ2l2ZW4gdG8gdGhlIGluaGVyZW50IHdpbGwgcmVzdWx0IGluIGFuIG92ZXJ3ZWlnaHQgYmxvY2suhENhbmRpZGF0ZXNGaWx0ZXJlZER1cmluZ0V4ZWN1dGlvbgADCE0BQSBjYW5kaWRhdGUgd2FzIGZpbHRlcmVkIGR1cmluZyBpbmhlcmVudCBleGVjdXRpb24uIFRoaXMgc2hvdWxkIGhhdmUgb25seSBiZWVuIGRvbmVAZHVyaW5nIGNyZWF0aW9uLlBVbnNjaGVkdWxlZENhbmRpZGF0ZQAEBHRUb28gbWFueSBjYW5kaWRhdGVzIHN1cHBsaWVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC69DAAAAoUMAMEMAAACxQwAxQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRzY2hlZHVsZXIYcGFsbGV0MENvcmVPY2N1cGllZAQETgEQAQgQRnJlZQAAABRQYXJhcwQAyQwBNFBhcmFzRW50cnk8Tj4AAQAAyQwQbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRzY2hlZHVsZXIYcGFsbGV0KFBhcmFzRW50cnkEBE4BEAAMAShhc3NpZ25tZW50zQwBKEFzc2lnbm1lbnQAAVRhdmFpbGFiaWxpdHlfdGltZW91dHMQAQx1MzIAAQx0dGwQAQROAADNDBBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJHNjaGVkdWxlchhjb21tb24oQXNzaWdubWVudAABCBBQb29sCAEccGFyYV9pZGkCARhQYXJhSWQAAShjb3JlX2luZGV4MQgBJENvcmVJbmRleAAAABBCdWxrBABpAgEYUGFyYUlkAAEAANEMBCBCVHJlZU1hcAgESwExCARWAdUMAAQA2QwAAADVDAAAAskMANkMAAAC3QwA3QwAAAQIMQjVDADhDAxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzXFB2ZkNoZWNrQWN0aXZlVm90ZVN0YXRlBCxCbG9ja051bWJlcgEQABQBMHZvdGVzX2FjY2VwdBUFAWBCaXRWZWM8dTgsIEJpdE9yZGVyTHNiMD4AATB2b3Rlc19yZWplY3QVBQFgQml0VmVjPHU4LCBCaXRPcmRlckxzYjA+AAEMYWdlEAEwU2Vzc2lvbkluZGV4AAEoY3JlYXRlZF9hdBABLEJsb2NrTnVtYmVyAAEYY2F1c2Vz5QwBfFZlYzxQdmZDaGVja0NhdXNlPEJsb2NrTnVtYmVyPj4AAOUMAAAC6QwA6QwMbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxRwYXJhczRQdmZDaGVja0NhdXNlBCxCbG9ja051bWJlcgEQAQgoT25ib2FyZGluZwQAaQIBGFBhcmFJZAAAABxVcGdyYWRlDAEIaWRpAgEYUGFyYUlkAAEsaW5jbHVkZWRfYXQQASxCbG9ja051bWJlcgABQHVwZ3JhZGVfc3RyYXRlZ3ntDAE8VXBncmFkZVN0cmF0ZWd5AAEAAO0MDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXM8VXBncmFkZVN0cmF0ZWd5AAEIQFNldEdvQWhlYWRTaWduYWwAAABQQXBwbHlBdEV4cGVjdGVkQmxvY2sAAQAA8QwAAAI9BQD1DAAAAmkCAPkMDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMUcGFyYXM0UGFyYUxpZmVjeWNsZQABHChPbmJvYXJkaW5nAAAAKFBhcmF0aHJlYWQAAQAkUGFyYWNoYWluAAIATFVwZ3JhZGluZ1BhcmF0aHJlYWQAAwBQRG93bmdyYWRpbmdQYXJhY2hhaW4ABABUT2ZmYm9hcmRpbmdQYXJhdGhyZWFkAAUAUE9mZmJvYXJkaW5nUGFyYWNoYWluAAYAAP0MAAAECGkCEAABDQxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzQFBhcmFQYXN0Q29kZU1ldGEEBE4BEAAIATR1cGdyYWRlX3RpbWVzBQ0BYFZlYzxSZXBsYWNlbWVudFRpbWVzPE4+PgABLGxhc3RfcHJ1bmVkRQIBJE9wdGlvbjxOPgAABQ0AAAIJDQAJDQxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzQFJlcGxhY2VtZW50VGltZXMEBE4BEAAIASxleHBlY3RlZF9hdBABBE4AATBhY3RpdmF0ZWRfYXQQAQROAAANDQAAAv0MABENDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4OFVwZ3JhZGVHb0FoZWFkAAEIFEFib3J0AAAAHEdvQWhlYWQAAQAAFQ0MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhIVXBncmFkZVJlc3RyaWN0aW9uAAEEHFByZXNlbnQAAAAAGQ0MbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxRwYXJhczxQYXJhR2VuZXNpc0FyZ3MAAAwBMGdlbmVzaXNfaGVhZF0FASBIZWFkRGF0YQABPHZhbGlkYXRpb25fY29kZVkFAThWYWxpZGF0aW9uQ29kZQABJHBhcmFfa2luZCABIFBhcmFLaW5kAAAdDRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zFHBhcmFzGHBhbGxldBRFcnJvcgQEVAABNDROb3RSZWdpc3RlcmVkAAAElFBhcmEgaXMgbm90IHJlZ2lzdGVyZWQgaW4gb3VyIHN5c3RlbS40Q2Fubm90T25ib2FyZAABBBUBUGFyYSBjYW5ub3QgYmUgb25ib2FyZGVkIGJlY2F1c2UgaXQgaXMgYWxyZWFkeSB0cmFja2VkIGJ5IG91ciBzeXN0ZW0uOENhbm5vdE9mZmJvYXJkAAIEnFBhcmEgY2Fubm90IGJlIG9mZmJvYXJkZWQgYXQgdGhpcyB0aW1lLjRDYW5ub3RVcGdyYWRlAAME1FBhcmEgY2Fubm90IGJlIHVwZ3JhZGVkIHRvIGEgbGVhc2UgaG9sZGluZyBwYXJhY2hhaW4uPENhbm5vdERvd25ncmFkZQAEBNBQYXJhIGNhbm5vdCBiZSBkb3duZ3JhZGVkIHRvIGFuIG9uLWRlbWFuZCBwYXJhY2hhaW4uWFB2ZkNoZWNrU3RhdGVtZW50U3RhbGUABQSwVGhlIHN0YXRlbWVudCBmb3IgUFZGIHByZS1jaGVja2luZyBpcyBzdGFsZS5cUHZmQ2hlY2tTdGF0ZW1lbnRGdXR1cmUABgTsVGhlIHN0YXRlbWVudCBmb3IgUFZGIHByZS1jaGVja2luZyBpcyBmb3IgYSBmdXR1cmUgc2Vzc2lvbi6EUHZmQ2hlY2tWYWxpZGF0b3JJbmRleE91dE9mQm91bmRzAAcEpENsYWltZWQgdmFsaWRhdG9yIGluZGV4IGlzIG91dCBvZiBib3VuZHMuYFB2ZkNoZWNrSW52YWxpZFNpZ25hdHVyZQAIBMhUaGUgc2lnbmF0dXJlIGZvciB0aGUgUFZGIHByZS1jaGVja2luZyBpcyBpbnZhbGlkLkhQdmZDaGVja0RvdWJsZVZvdGUACQSwVGhlIGdpdmVuIHZhbGlkYXRvciBhbHJlYWR5IGhhcyBjYXN0IGEgdm90ZS5YUHZmQ2hlY2tTdWJqZWN0SW52YWxpZAAKBPRUaGUgZ2l2ZW4gUFZGIGRvZXMgbm90IGV4aXN0IGF0IHRoZSBtb21lbnQgb2YgcHJvY2VzcyBhIHZvdGUuRENhbm5vdFVwZ3JhZGVDb2RlAAsEzFBhcmFjaGFpbiBjYW5ub3QgY3VycmVudGx5IHNjaGVkdWxlIGEgY29kZSB1cGdyYWRlLixJbnZhbGlkQ29kZQAMBHRJbnZhbGlkIHZhbGlkYXRpb24gY29kZSBzaXplLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4hDQAAAiUNACUNDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMsaW5pdGlhbGl6ZXJUQnVmZmVyZWRTZXNzaW9uQ2hhbmdlAAAMASh2YWxpZGF0b3JziQwBQFZlYzxWYWxpZGF0b3JJZD4AARhxdWV1ZWSJDAFAVmVjPFZhbGlkYXRvcklkPgABNHNlc3Npb25faW5kZXgQATBTZXNzaW9uSW5kZXgAACkNAAACLQ0ALQ0IYHBvbGthZG90X2NvcmVfcHJpbWl0aXZlc1hJbmJvdW5kRG93bndhcmRNZXNzYWdlBCxCbG9ja051bWJlcgEQAAgBHHNlbnRfYXQQASxCbG9ja051bWJlcgABDG1zZzgBPERvd253YXJkTWVzc2FnZQAAMQ0MbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxBocm1wWEhybXBPcGVuQ2hhbm5lbFJlcXVlc3QAABgBJGNvbmZpcm1lZCABEGJvb2wAARBfYWdlEAEwU2Vzc2lvbkluZGV4AAE4c2VuZGVyX2RlcG9zaXQYARxCYWxhbmNlAAFAbWF4X21lc3NhZ2Vfc2l6ZRABDHUzMgABMG1heF9jYXBhY2l0eRABDHUzMgABOG1heF90b3RhbF9zaXplEAEMdTMyAAA1DQAAAp0FADkNDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMQaHJtcCxIcm1wQ2hhbm5lbAAAIAEwbWF4X2NhcGFjaXR5EAEMdTMyAAE4bWF4X3RvdGFsX3NpemUQAQx1MzIAAUBtYXhfbWVzc2FnZV9zaXplEAEMdTMyAAEkbXNnX2NvdW50EAEMdTMyAAEodG90YWxfc2l6ZRABDHUzMgABIG1xY19oZWFkeQIBME9wdGlvbjxIYXNoPgABOHNlbmRlcl9kZXBvc2l0GAEcQmFsYW5jZQABRHJlY2lwaWVudF9kZXBvc2l0GAEcQmFsYW5jZQAAPQ0AAAJBDQBBDQhgcG9sa2Fkb3RfY29yZV9wcmltaXRpdmVzSEluYm91bmRIcm1wTWVzc2FnZQQsQmxvY2tOdW1iZXIBEAAIARxzZW50X2F0EAEsQmxvY2tOdW1iZXIAARBkYXRhOAFMYWxsb2M6OnZlYzo6VmVjPHU4PgAARQ0AAAJJDQBJDQAABAgQ9QwATQ0QbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucxBocm1wGHBhbGxldBRFcnJvcgQEVAABUFRPcGVuSHJtcENoYW5uZWxUb1NlbGYAAATEVGhlIHNlbmRlciB0cmllZCB0byBvcGVuIGEgY2hhbm5lbCB0byB0aGVtc2VsdmVzLnxPcGVuSHJtcENoYW5uZWxJbnZhbGlkUmVjaXBpZW50AAEEiFRoZSByZWNpcGllbnQgaXMgbm90IGEgdmFsaWQgcGFyYS5sT3BlbkhybXBDaGFubmVsWmVyb0NhcGFjaXR5AAIEfFRoZSByZXF1ZXN0ZWQgY2FwYWNpdHkgaXMgemVyby6MT3BlbkhybXBDaGFubmVsQ2FwYWNpdHlFeGNlZWRzTGltaXQAAwTAVGhlIHJlcXVlc3RlZCBjYXBhY2l0eSBleGNlZWRzIHRoZSBnbG9iYWwgbGltaXQueE9wZW5Icm1wQ2hhbm5lbFplcm9NZXNzYWdlU2l6ZQAEBKBUaGUgcmVxdWVzdGVkIG1heGltdW0gbWVzc2FnZSBzaXplIGlzIDAumE9wZW5Icm1wQ2hhbm5lbE1lc3NhZ2VTaXplRXhjZWVkc0xpbWl0AAUEKQFUaGUgb3BlbiByZXF1ZXN0IHJlcXVlc3RlZCB0aGUgbWVzc2FnZSBzaXplIHRoYXQgZXhjZWVkcyB0aGUgZ2xvYmFsIGxpbWl0LnBPcGVuSHJtcENoYW5uZWxBbHJlYWR5RXhpc3RzAAYEaFRoZSBjaGFubmVsIGFscmVhZHkgZXhpc3RzfE9wZW5Icm1wQ2hhbm5lbEFscmVhZHlSZXF1ZXN0ZWQABwTQVGhlcmUgaXMgYWxyZWFkeSBhIHJlcXVlc3QgdG8gb3BlbiB0aGUgc2FtZSBjaGFubmVsLnBPcGVuSHJtcENoYW5uZWxMaW1pdEV4Y2VlZGVkAAgEHQFUaGUgc2VuZGVyIGFscmVhZHkgaGFzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBhbGxvd2VkIG91dGJvdW5kIGNoYW5uZWxzLnBBY2NlcHRIcm1wQ2hhbm5lbERvZXNudEV4aXN0AAkE4FRoZSBjaGFubmVsIGZyb20gdGhlIHNlbmRlciB0byB0aGUgb3JpZ2luIGRvZXNuJ3QgZXhpc3QuhEFjY2VwdEhybXBDaGFubmVsQWxyZWFkeUNvbmZpcm1lZAAKBIRUaGUgY2hhbm5lbCBpcyBhbHJlYWR5IGNvbmZpcm1lZC54QWNjZXB0SHJtcENoYW5uZWxMaW1pdEV4Y2VlZGVkAAsEJQFUaGUgcmVjaXBpZW50IGFscmVhZHkgaGFzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBhbGxvd2VkIGluYm91bmQgY2hhbm5lbHMucENsb3NlSHJtcENoYW5uZWxVbmF1dGhvcml6ZWQADARVAVRoZSBvcmlnaW4gdHJpZXMgdG8gY2xvc2UgYSBjaGFubmVsIHdoZXJlIGl0IGlzIG5laXRoZXIgdGhlIHNlbmRlciBub3IgdGhlIHJlY2lwaWVudC5sQ2xvc2VIcm1wQ2hhbm5lbERvZXNudEV4aXN0AA0EnFRoZSBjaGFubmVsIHRvIGJlIGNsb3NlZCBkb2Vzbid0IGV4aXN0LnxDbG9zZUhybXBDaGFubmVsQWxyZWFkeVVuZGVyd2F5AA4EvFRoZSBjaGFubmVsIGNsb3NlIHJlcXVlc3QgaXMgYWxyZWFkeSByZXF1ZXN0ZWQuhENhbmNlbEhybXBPcGVuQ2hhbm5lbFVuYXV0aG9yaXplZAAPBF0BQ2FuY2VsaW5nIGlzIHJlcXVlc3RlZCBieSBuZWl0aGVyIHRoZSBzZW5kZXIgbm9yIHJlY2lwaWVudCBvZiB0aGUgb3BlbiBjaGFubmVsIHJlcXVlc3QuaE9wZW5Icm1wQ2hhbm5lbERvZXNudEV4aXN0ABAEfFRoZSBvcGVuIHJlcXVlc3QgZG9lc24ndCBleGlzdC58T3BlbkhybXBDaGFubmVsQWxyZWFkeUNvbmZpcm1lZAARBC0BQ2Fubm90IGNhbmNlbCBhbiBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0IGJlY2F1c2UgaXQgaXMgYWxyZWFkeSBjb25maXJtZWQuMFdyb25nV2l0bmVzcwASBIxUaGUgcHJvdmlkZWQgd2l0bmVzcyBkYXRhIGlzIHdyb25nLnBDaGFubmVsQ3JlYXRpb25Ob3RBdXRob3JpemVkABME6FRoZSBjaGFubmVsIGJldHdlZW4gdGhlc2UgdHdvIGNoYWlucyBjYW5ub3QgYmUgYXV0aG9yaXplZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuUQ0AAAIFAgBVDQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCxTZXNzaW9uSW5mbwAANAFgYWN0aXZlX3ZhbGlkYXRvcl9pbmRpY2VzhQwBTFZlYzxWYWxpZGF0b3JJbmRleD4AASxyYW5kb21fc2VlZAQBIFt1ODsgMzJdAAE4ZGlzcHV0ZV9wZXJpb2QQATBTZXNzaW9uSW5kZXgAASh2YWxpZGF0b3JzWQ0BnEluZGV4ZWRWZWM8VmFsaWRhdG9ySW5kZXgsIFZhbGlkYXRvcklkPgABOGRpc2NvdmVyeV9rZXlz6QkBZFZlYzxBdXRob3JpdHlEaXNjb3ZlcnlJZD4AATxhc3NpZ25tZW50X2tleXNRDQFEVmVjPEFzc2lnbm1lbnRJZD4AAUB2YWxpZGF0b3JfZ3JvdXBzXQ0BrEluZGV4ZWRWZWM8R3JvdXBJbmRleCwgVmVjPFZhbGlkYXRvckluZGV4Pj4AARxuX2NvcmVzEAEMdTMyAAFoemVyb3RoX2RlbGF5X3RyYW5jaGVfd2lkdGgQAQx1MzIAAWByZWxheV92cmZfbW9kdWxvX3NhbXBsZXMQAQx1MzIAAUBuX2RlbGF5X3RyYW5jaGVzEAEMdTMyAAE0bm9fc2hvd19zbG90cxABDHUzMgABQG5lZWRlZF9hcHByb3ZhbHMQAQx1MzIAAFkNDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4KEluZGV4ZWRWZWMIBEsBHQUEVgEBAgAEAIkMARhWZWM8Vj4AAF0NDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4KEluZGV4ZWRWZWMIBEsBNQgEVgGFDAAEAL0MARhWZWM8Vj4AAGENAAAECBBxBQBlDQxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODBEaXNwdXRlU3RhdGUEBE4BEAAQATh2YWxpZGF0b3JzX2ZvchUFAXxCaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+AAFIdmFsaWRhdG9yc19hZ2FpbnN0FQUBfEJpdFZlYzx1OCwgYml0dmVjOjpvcmRlcjo6THNiMD4AARRzdGFydBABBE4AATBjb25jbHVkZWRfYXRFAgEkT3B0aW9uPE4+AABpDQQgQlRyZWVTZXQEBFQBHQUABACFDAAAAG0NEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMYcGFsbGV0FEVycm9yBARUAAEkdER1cGxpY2F0ZURpc3B1dGVTdGF0ZW1lbnRTZXRzAAAEqER1cGxpY2F0ZSBkaXNwdXRlIHN0YXRlbWVudCBzZXRzIHByb3ZpZGVkLlxBbmNpZW50RGlzcHV0ZVN0YXRlbWVudAABBIxBbmNpZW50IGRpc3B1dGUgc3RhdGVtZW50IHByb3ZpZGVkLmRWYWxpZGF0b3JJbmRleE91dE9mQm91bmRzAAIE6FZhbGlkYXRvciBpbmRleCBvbiBzdGF0ZW1lbnQgaXMgb3V0IG9mIGJvdW5kcyBmb3Igc2Vzc2lvbi5ASW52YWxpZFNpZ25hdHVyZQADBHxJbnZhbGlkIHNpZ25hdHVyZSBvbiBzdGF0ZW1lbnQuSER1cGxpY2F0ZVN0YXRlbWVudAAEBMxWYWxpZGF0b3Igdm90ZSBzdWJtaXR0ZWQgbW9yZSB0aGFuIG9uY2UgdG8gZGlzcHV0ZS5IU2luZ2xlU2lkZWREaXNwdXRlAAUExEEgZGlzcHV0ZSB3aGVyZSB0aGVyZSBhcmUgb25seSB2b3RlcyBvbiBvbmUgc2lkZS48TWFsaWNpb3VzQmFja2VyAAYEnEEgZGlzcHV0ZSB2b3RlIGZyb20gYSBtYWxpY2lvdXMgYmFja2VyLkxNaXNzaW5nQmFja2luZ1ZvdGVzAAcE4E5vIGJhY2tpbmcgdm90ZXMgd2VyZSBwcm92aWRlcyBhbG9uZyBkaXNwdXRlIHN0YXRlbWVudHMuSFVuY29uZmlybWVkRGlzcHV0ZQAIBLBVbmNvbmZpcm1lZCBkaXNwdXRlIHN0YXRlbWVudCBzZXRzIHByb3ZpZGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC5xDRBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCBzbGFzaGluZzhQZW5kaW5nU2xhc2hlcwAACAEQa2V5c3UNAZRCVHJlZU1hcDxWYWxpZGF0b3JJbmRleCwgVmFsaWRhdG9ySWQ+AAEQa2luZLEFAUxTbGFzaGluZ09mZmVuY2VLaW5kAAB1DQQgQlRyZWVNYXAIBEsBHQUEVgEBAgAEAHkNAAAAeQ0AAAJ9DQB9DQAABAgdBQECAIENFGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMgZGlzcHV0ZXMgc2xhc2hpbmcYcGFsbGV0FEVycm9yBARUAAEYYEludmFsaWRLZXlPd25lcnNoaXBQcm9vZgAABIxUaGUga2V5IG93bmVyc2hpcCBwcm9vZiBpcyBpbnZhbGlkLkxJbnZhbGlkU2Vzc2lvbkluZGV4AAEEoFRoZSBzZXNzaW9uIGluZGV4IGlzIHRvbyBvbGQgb3IgaW52YWxpZC5QSW52YWxpZENhbmRpZGF0ZUhhc2gAAgR4VGhlIGNhbmRpZGF0ZSBoYXNoIGlzIGludmFsaWQuVEludmFsaWRWYWxpZGF0b3JJbmRleAADCAEBVGhlcmUgaXMgbm8gcGVuZGluZyBzbGFzaCBmb3IgdGhlIGdpdmVuIHZhbGlkYXRvciBpbmRleCBhbmQgdGltZRRzbG90LmBWYWxpZGF0b3JJbmRleElkTWlzbWF0Y2gABATQVGhlIHZhbGlkYXRvciBpbmRleCBkb2VzIG5vdCBtYXRjaCB0aGUgdmFsaWRhdG9yIGlkLlxEdXBsaWNhdGVTbGFzaGluZ1JlcG9ydAAFBA0BVGhlIGdpdmVuIHNsYXNoaW5nIHJlcG9ydCBpcyB2YWxpZCBidXQgYWxyZWFkeSBwcmV2aW91c2x5IHJlcG9ydGVkLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6FDRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJG9uX2RlbWFuZBR0eXBlc0RDb3JlQWZmaW5pdHlDb3VudAAACAEoY29yZV9pbmRleDEIASRDb3JlSW5kZXgAARRjb3VudBABDHUzMgAAiQ0QbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRvbl9kZW1hbmQUdHlwZXM8UXVldWVTdGF0dXNUeXBlAAAQARx0cmFmZmljPQcBJEZpeGVkVTEyOAABKG5leHRfaW5kZXiNDQEoUXVldWVJbmRleAABOHNtYWxsZXN0X2luZGV4jQ0BKFF1ZXVlSW5kZXgAATRmcmVlZF9pbmRpY2VzkQ0BdEJpbmFyeUhlYXA8UmV2ZXJzZVF1ZXVlSW5kZXg+AACNDRBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zJG9uX2RlbWFuZBR0eXBlcyhRdWV1ZUluZGV4AAAEABABDHUzMgAAkQ0EKEJpbmFyeUhlYXAEBFQBlQ0ABACZDQAAAJUNEGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnMkb25fZGVtYW5kFHR5cGVzRFJldmVyc2VRdWV1ZUluZGV4AAAEABABDHUzMgAAmQ0AAAKVDQCdDQQoQmluYXJ5SGVhcAQEVAGhDQAEAKUNAAAAoQ0QbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRvbl9kZW1hbmQUdHlwZXM0RW5xdWV1ZWRPcmRlcgAACAEccGFyYV9pZGkCARhQYXJhSWQAAQxpZHiNDQEoUXVldWVJbmRleAAApQ0AAAKhDQCpDQxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUARgEUwAABACtDQEYVmVjPFQ+AACtDQAAAhgAsQ0QbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWlucyRvbl9kZW1hbmQYcGFsbGV0FEVycm9yBARUAAEIJFF1ZXVlRnVsbAAABORUaGUgb3JkZXIgcXVldWUgaXMgZnVsbCwgYHBsYWNlX29yZGVyYCB3aWxsIG5vdCBjb250aW51ZS5wU3BvdFByaWNlSGlnaGVyVGhhbk1heEFtb3VudAABCE0BVGhlIGN1cnJlbnQgc3BvdCBwcmljZSBpcyBoaWdoZXIgdGhhbiB0aGUgbWF4IGFtb3VudCBzcGVjaWZpZWQgaW4gdGhlIGBwbGFjZV9vcmRlcmBgY2FsbCwgbWFraW5nIGl0IGludmFsaWQuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LrUNAAAECBAxCAC5DQxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zRGFzc2lnbmVyX2NvcmV0aW1lIFNjaGVkdWxlBAROARAADAEsYXNzaWdubWVudHPhBQGMVmVjPChDb3JlQXNzaWdubWVudCwgUGFydHNPZjU3NjAwKT4AASBlbmRfaGludEUCASRPcHRpb248Tj4AATRuZXh0X3NjaGVkdWxlRQIBJE9wdGlvbjxOPgAAvQ0MbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZThDb3JlRGVzY3JpcHRvcgQETgEQAAgBFHF1ZXVlwQ0BaE9wdGlvbjxRdWV1ZURlc2NyaXB0b3I8Tj4+AAEwY3VycmVudF93b3JryQ0BUE9wdGlvbjxXb3JrU3RhdGU8Tj4+AADBDQQYT3B0aW9uBARUAcUNAQgQTm9uZQAAABBTb21lBADFDQAAAQAAxQ0MbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZTxRdWV1ZURlc2NyaXB0b3IEBE4BEAAIARRmaXJzdBABBE4AARBsYXN0EAEETgAAyQ0EGE9wdGlvbgQEVAHNDQEIEE5vbmUAAAAQU29tZQQAzQ0AAAEAAM0NDGxwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnNEYXNzaWduZXJfY29yZXRpbWUkV29ya1N0YXRlBAROARAAEAEsYXNzaWdubWVudHPRDQGYVmVjPChDb3JlQXNzaWdubWVudCwgQXNzaWdubWVudFN0YXRlKT4AASBlbmRfaGludEUCASRPcHRpb248Tj4AAQxwb3NdAQEMdTE2AAEQc3RlcO0FATBQYXJ0c09mNTc2MDAAANENAAAC1Q0A1Q0AAAQI6QXZDQDZDQxscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zRGFzc2lnbmVyX2NvcmV0aW1lPEFzc2lnbm1lbnRTdGF0ZQAACAEUcmF0aW/tBQEwUGFydHNPZjU3NjAwAAEkcmVtYWluaW5n7QUBMFBhcnRzT2Y1NzYwMAAA3Q0QbHBvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc0Rhc3NpZ25lcl9jb3JldGltZRhwYWxsZXQURXJyb3IEBFQAARhAQXNzaWdubWVudHNFbXB0eQAAADRPdmVyU2NoZWR1bGVkAAEEkEFzc2lnbm1lbnRzIHRvZ2V0aGVyIGV4Y2VlZGVkIDU3NjAwLjhVbmRlclNjaGVkdWxlZAACBJBBc3NpZ25tZW50cyB0b2dldGhlciBsZXNzIHRoYW4gNTc2MDBARGlzYWxsb3dlZEluc2VydAADCFEBYXNzaWduX2NvcmUgaXMgb25seSBhbGxvd2VkIHRvIGFwcGVuZCBuZXcgYXNzaWdubWVudHMgYXQgdGhlIGVuZCBvZiBhbHJlYWR5IGV4aXN0aW5nFG9uZXMuPER1cGxpY2F0ZUluc2VydAAEBFUBVHJpZWQgdG8gaW5zZXJ0IGEgc2NoZWR1bGUgZm9yIHRoZSBzYW1lIGNvcmUgYW5kIGJsb2NrIG51bWJlciBhcyBhbiBleGlzdGluZyBzY2hlZHVsZVBBc3NpZ25tZW50c05vdFNvcnRlZAAFBKxUcmllZCB0byBhZGQgYW4gdW5zb3J0ZWQgc2V0IG9mIGFzc2lnbm1lbnRzBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LuENDFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIgUGFyYUluZm8IHEFjY291bnQBABxCYWxhbmNlARgADAEcbWFuYWdlcgABHEFjY291bnQAARxkZXBvc2l0GAEcQmFsYW5jZQABGGxvY2tlZLECATBPcHRpb248Ym9vbD4AAOUNEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbjxwYXJhc19yZWdpc3RyYXIYcGFsbGV0FEVycm9yBARUAAE4NE5vdFJlZ2lzdGVyZWQAAARkVGhlIElEIGlzIG5vdCByZWdpc3RlcmVkLkRBbHJlYWR5UmVnaXN0ZXJlZAABBHRUaGUgSUQgaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBOb3RPd25lcgACBJxUaGUgY2FsbGVyIGlzIG5vdCB0aGUgb3duZXIgb2YgdGhpcyBJZC4wQ29kZVRvb0xhcmdlAAMEXEludmFsaWQgcGFyYSBjb2RlIHNpemUuQEhlYWREYXRhVG9vTGFyZ2UABARwSW52YWxpZCBwYXJhIGhlYWQgZGF0YSBzaXplLjBOb3RQYXJhY2hhaW4ABQRgUGFyYSBpcyBub3QgYSBQYXJhY2hhaW4uNE5vdFBhcmF0aHJlYWQABgS8UGFyYSBpcyBub3QgYSBQYXJhdGhyZWFkIChvbi1kZW1hbmQgcGFyYWNoYWluKS5AQ2Fubm90RGVyZWdpc3RlcgAHBFhDYW5ub3QgZGVyZWdpc3RlciBwYXJhPENhbm5vdERvd25ncmFkZQAIBC0BQ2Fubm90IHNjaGVkdWxlIGRvd25ncmFkZSBvZiBsZWFzZSBob2xkaW5nIHBhcmFjaGFpbiB0byBvbi1kZW1hbmQgcGFyYWNoYWluNENhbm5vdFVwZ3JhZGUACQQlAUNhbm5vdCBzY2hlZHVsZSB1cGdyYWRlIG9mIG9uLWRlbWFuZCBwYXJhY2hhaW4gdG8gbGVhc2UgaG9sZGluZyBwYXJhY2hhaW4oUGFyYUxvY2tlZAAKCEkBUGFyYSBpcyBsb2NrZWQgZnJvbSBtYW5pcHVsYXRpb24gYnkgdGhlIG1hbmFnZXIuIE11c3QgdXNlIHBhcmFjaGFpbiBvciByZWxheSBjaGFpbixnb3Zlcm5hbmNlLixOb3RSZXNlcnZlZAALBNBUaGUgSUQgZ2l2ZW4gZm9yIHJlZ2lzdHJhdGlvbiBoYXMgbm90IGJlZW4gcmVzZXJ2ZWQuLEludmFsaWRDb2RlAAwEfFRoZSB2YWxpZGF0aW9uIGNvZGUgaXMgaW52YWxpZC4oQ2Fubm90U3dhcAANCFEBQ2Fubm90IHBlcmZvcm0gYSBwYXJhY2hhaW4gc2xvdCAvIGxpZmVjeWNsZSBzd2FwLiBDaGVjayB0aGF0IHRoZSBzdGF0ZSBvZiBib3RoIHBhcmFzhGFyZSBjb3JyZWN0IGZvciB0aGUgc3dhcCB0byB3b3JrLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC7pDQAAAmULAO0NEFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbhRzbG90cxhwYWxsZXQURXJyb3IEBFQAAQhEUGFyYU5vdE9uYm9hcmRpbmcAAASMVGhlIHBhcmFjaGFpbiBJRCBpcyBub3Qgb25ib2FyZGluZy4oTGVhc2VFcnJvcgABBIhUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgbGVhc2UuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LvENAAAECABpAgD1DQAAAyQAAAD5DQD5DQQYT3B0aW9uBARUAf0NAQgQTm9uZQAAABBTb21lBAD9DQAAAQAA/Q0AAAQMAGkCGAABDhBccG9sa2Fkb3RfcnVudGltZV9jb21tb24gYXVjdGlvbnMYcGFsbGV0FEVycm9yBARUAAEcREF1Y3Rpb25JblByb2dyZXNzAAAEkFRoaXMgYXVjdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLkRMZWFzZVBlcmlvZEluUGFzdAABBIBUaGUgbGVhc2UgcGVyaW9kIGlzIGluIHRoZSBwYXN0LkRQYXJhTm90UmVnaXN0ZXJlZAACBFhQYXJhIGlzIG5vdCByZWdpc3RlcmVkRE5vdEN1cnJlbnRBdWN0aW9uAAMEWE5vdCBhIGN1cnJlbnQgYXVjdGlvbi4oTm90QXVjdGlvbgAEBDxOb3QgYW4gYXVjdGlvbi4wQXVjdGlvbkVuZGVkAAUEaEF1Y3Rpb24gaGFzIGFscmVhZHkgZW5kZWQuQEFscmVhZHlMZWFzZWRPdXQABgTYVGhlIHBhcmEgaXMgYWxyZWFkeSBsZWFzZWQgb3V0IGZvciBwYXJ0IG9mIHRoaXMgcmFuZ2UuBIBUaGUgYEVycm9yYCBlbnVtIG9mIHRoaXMgcGFsbGV0LgUODFxwb2xrYWRvdF9ydW50aW1lX2NvbW1vbiRjcm93ZGxvYW4gRnVuZEluZm8QJEFjY291bnRJZAEAHEJhbGFuY2UBGCxCbG9ja051bWJlcgEQLExlYXNlUGVyaW9kARAAKAEkZGVwb3NpdG9yAAEkQWNjb3VudElkAAEgdmVyaWZpZXLNBQFMT3B0aW9uPE11bHRpU2lnbmVyPgABHGRlcG9zaXQYARxCYWxhbmNlAAEYcmFpc2VkGAEcQmFsYW5jZQABDGVuZBABLEJsb2NrTnVtYmVyAAEMY2FwGAEcQmFsYW5jZQABRGxhc3RfY29udHJpYnV0aW9uCQ4BdExhc3RDb250cmlidXRpb248QmxvY2tOdW1iZXI+AAEwZmlyc3RfcGVyaW9kEAEsTGVhc2VQZXJpb2QAASxsYXN0X3BlcmlvZBABLExlYXNlUGVyaW9kAAEoZnVuZF9pbmRleBABJEZ1bmRJbmRleAAACQ4MXHBvbGthZG90X3J1bnRpbWVfY29tbW9uJGNyb3dkbG9hbkBMYXN0Q29udHJpYnV0aW9uBCxCbG9ja051bWJlcgEQAQwUTmV2ZXIAAAAkUHJlRW5kaW5nBAAQAQx1MzIAAQAYRW5kaW5nBAAQASxCbG9ja051bWJlcgACAAANDhBccG9sa2Fkb3RfcnVudGltZV9jb21tb24kY3Jvd2Rsb2FuGHBhbGxldBRFcnJvcgQEVAABXERGaXJzdFBlcmlvZEluUGFzdAAABPRUaGUgY3VycmVudCBsZWFzZSBwZXJpb2QgaXMgbW9yZSB0aGFuIHRoZSBmaXJzdCBsZWFzZSBwZXJpb2QuZEZpcnN0UGVyaW9kVG9vRmFySW5GdXR1cmUAAQQRAVRoZSBmaXJzdCBsZWFzZSBwZXJpb2QgbmVlZHMgdG8gYXQgbGVhc3QgYmUgbGVzcyB0aGFuIDMgYG1heF92YWx1ZWAubExhc3RQZXJpb2RCZWZvcmVGaXJzdFBlcmlvZAACBOhMYXN0IGxlYXNlIHBlcmlvZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBmaXJzdCBsZWFzZSBwZXJpb2QuYExhc3RQZXJpb2RUb29GYXJJbkZ1dHVyZQADBC0BVGhlIGxhc3QgbGVhc2UgcGVyaW9kIGNhbm5vdCBiZSBtb3JlIHRoYW4gMyBwZXJpb2RzIGFmdGVyIHRoZSBmaXJzdCBwZXJpb2QuPENhbm5vdEVuZEluUGFzdAAEBEUBVGhlIGNhbXBhaWduIGVuZHMgYmVmb3JlIHRoZSBjdXJyZW50IGJsb2NrIG51bWJlci4gVGhlIGVuZCBtdXN0IGJlIGluIHRoZSBmdXR1cmUuREVuZFRvb0ZhckluRnV0dXJlAAUEwFRoZSBlbmQgZGF0ZSBmb3IgdGhpcyBjcm93ZGxvYW4gaXMgbm90IHNlbnNpYmxlLiBPdmVyZmxvdwAGBFhUaGVyZSB3YXMgYW4gb3ZlcmZsb3cuUENvbnRyaWJ1dGlvblRvb1NtYWxsAAcE6FRoZSBjb250cmlidXRpb24gd2FzIGJlbG93IHRoZSBtaW5pbXVtLCBgTWluQ29udHJpYnV0aW9uYC40SW52YWxpZFBhcmFJZAAIBExJbnZhbGlkIGZ1bmQgaW5kZXguLENhcEV4Y2VlZGVkAAkEkENvbnRyaWJ1dGlvbnMgZXhjZWVkIG1heGltdW0gYW1vdW50LlhDb250cmlidXRpb25QZXJpb2RPdmVyAAoEqFRoZSBjb250cmlidXRpb24gcGVyaW9kIGhhcyBhbHJlYWR5IGVuZGVkLjRJbnZhbGlkT3JpZ2luAAsEjFRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsIGlzIGludmFsaWQuME5vdFBhcmFjaGFpbgAMBMhUaGlzIGNyb3dkbG9hbiBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGEgcGFyYWNoYWluLixMZWFzZUFjdGl2ZQANBBUBVGhpcyBwYXJhY2hhaW4gbGVhc2UgaXMgc3RpbGwgYWN0aXZlIGFuZCByZXRpcmVtZW50IGNhbm5vdCB5ZXQgYmVnaW4uQEJpZE9yTGVhc2VBY3RpdmUADgQxAVRoaXMgcGFyYWNoYWluJ3MgYmlkIG9yIGxlYXNlIGlzIHN0aWxsIGFjdGl2ZSBhbmQgd2l0aGRyYXcgY2Fubm90IHlldCBiZWdpbi4wRnVuZE5vdEVuZGVkAA8EgFRoZSBjcm93ZGxvYW4gaGFzIG5vdCB5ZXQgZW5kZWQuPE5vQ29udHJpYnV0aW9ucwAQBNBUaGVyZSBhcmUgbm8gY29udHJpYnV0aW9ucyBzdG9yZWQgaW4gdGhpcyBjcm93ZGxvYW4uSE5vdFJlYWR5VG9EaXNzb2x2ZQARCFUBVGhlIGNyb3dkbG9hbiBpcyBub3QgcmVhZHkgdG8gZGlzc29sdmUuIFBvdGVudGlhbGx5IHN0aWxsIGhhcyBhIHNsb3Qgb3IgaW4gcmV0aXJlbWVudBxwZXJpb2QuQEludmFsaWRTaWduYXR1cmUAEgRISW52YWxpZCBzaWduYXR1cmUuME1lbW9Ub29MYXJnZQATBHxUaGUgcHJvdmlkZWQgbWVtbyBpcyB0b28gbGFyZ2UuREFscmVhZHlJbk5ld1JhaXNlABQEhFRoZSBmdW5kIGlzIGFscmVhZHkgaW4gYE5ld1JhaXNlYEhWcmZEZWxheUluUHJvZ3Jlc3MAFQS0Tm8gY29udHJpYnV0aW9ucyBhbGxvd2VkIGR1cmluZyB0aGUgVlJGIGRlbGF5NE5vTGVhc2VQZXJpb2QAFgQtAUEgbGVhc2UgcGVyaW9kIGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGR1ZSB0byBhbiBvZmZzZXQgaW4gdGhlIHN0YXJ0aW5nIGJsb2NrLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC4RDhBscG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zIGNvcmV0aW1lGHBhbGxldBRFcnJvcgQEVAABDCROb3RCcm9rZXIAAAQpAVRoZSBwYXJhaWQgbWFraW5nIHRoZSBjYWxsIGlzIG5vdCB0aGUgY29yZXRpbWUgYnJva2VyYWdlIHN5c3RlbSBwYXJhY2hhaW4uWFJlcXVlc3RlZEZ1dHVyZVJldmVudWUAAQhFAVJlcXVlc3RlZCByZXZlbnVlIGluZm9ybWF0aW9uIGB3aGVuYCBwYXJhbWV0ZXIgd2FzIGluIHRoZSBmdXR1cmUgZnJvbSB0aGUgY3VycmVudDRibG9jayBoZWlnaHQuTEFzc2V0VHJhbnNmZXJGYWlsZWQAAgS8RmFpbGVkIHRvIHRyYW5zZmVyIGFzc2V0cyB0byB0aGUgY29yZXRpbWUgY2hhaW4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuFQ4MKHBhbGxldF94Y20YcGFsbGV0LFF1ZXJ5U3RhdHVzBCxCbG9ja051bWJlcgEQAQwcUGVuZGluZxABJHJlc3BvbmRlci0BAURWZXJzaW9uZWRMb2NhdGlvbgABTG1heWJlX21hdGNoX3F1ZXJpZXIZDgFkT3B0aW9uPFZlcnNpb25lZExvY2F0aW9uPgABMG1heWJlX25vdGlmeR0OAUBPcHRpb248KHU4LCB1OCk+AAEcdGltZW91dBABLEJsb2NrTnVtYmVyAAAAPFZlcnNpb25Ob3RpZmllcggBGG9yaWdpbi0BAURWZXJzaW9uZWRMb2NhdGlvbgABJGlzX2FjdGl2ZSABEGJvb2wAAQAUUmVhZHkIASByZXNwb25zZSUOAURWZXJzaW9uZWRSZXNwb25zZQABCGF0EAEsQmxvY2tOdW1iZXIAAgAAGQ4EGE9wdGlvbgQEVAEtAQEIEE5vbmUAAAAQU29tZQQALQEAAAEAAB0OBBhPcHRpb24EBFQBIQ4BCBBOb25lAAAAEFNvbWUEACEOAAABAAAhDgAABAgICAAlDggMeGNtRFZlcnNpb25lZFJlc3BvbnNlAAEMCFYyBAAhBgEwdjI6OlJlc3BvbnNlAAIACFYzBABpBgEwdjM6OlJlc3BvbnNlAAMACFY0BADNBgEwdjQ6OlJlc3BvbnNlAAQAACkOAAAECBAtAQAtDgAABAwwKBAAMQ4MTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAE1DgRTAAAEADkOARhWZWM8VD4AADUOAAAECC0BEAA5DgAAAjUOAD0ODChwYWxsZXRfeGNtGHBhbGxldFRWZXJzaW9uTWlncmF0aW9uU3RhZ2UAARBcTWlncmF0ZVN1cHBvcnRlZFZlcnNpb24AAABcTWlncmF0ZVZlcnNpb25Ob3RpZmllcnMAAQBQTm90aWZ5Q3VycmVudFRhcmdldHMEAEEOATxPcHRpb248VmVjPHU4Pj4AAgBoTWlncmF0ZUFuZE5vdGlmeU9sZFRhcmdldHMAAwAAQQ4EGE9wdGlvbgQEVAE4AQgQTm9uZQAAABBTb21lBAA4AAABAABFDgAABAwQACkHAEkODChwYWxsZXRfeGNtGHBhbGxldGhSZW1vdGVMb2NrZWRGdW5naWJsZVJlY29yZAhIQ29uc3VtZXJJZGVudGlmaWVyAakBME1heENvbnN1bWVycwAAEAEYYW1vdW50GAEQdTEyOAABFG93bmVyLQEBRFZlcnNpb25lZExvY2F0aW9uAAEYbG9ja2VyLQEBRFZlcnNpb25lZExvY2F0aW9uAAEkY29uc3VtZXJzTQ4B0EJvdW5kZWRWZWM8KENvbnN1bWVySWRlbnRpZmllciwgdTEyOCksIE1heENvbnN1bWVycz4AAE0ODExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBUQ4EUwAABABVDgEYVmVjPFQ+AABRDgAABAipARgAVQ4AAAJRDgBZDgxMYm91bmRlZF9jb2xsZWN0aW9ucyxib3VuZGVkX3ZlYyhCb3VuZGVkVmVjCARUAV0OBFMAAAQAYQ4BGFZlYzxUPgAAXQ4AAAQIGC0BAGEOAAACXQ4AZQ4MKHBhbGxldF94Y20YcGFsbGV0FEVycm9yBARUAAFgLFVucmVhY2hhYmxlAAAIXQFUaGUgZGVzaXJlZCBkZXN0aW5hdGlvbiB3YXMgdW5yZWFjaGFibGUsIGdlbmVyYWxseSBiZWNhdXNlIHRoZXJlIGlzIGEgbm8gd2F5IG9mIHJvdXRpbmcYdG8gaXQuLFNlbmRGYWlsdXJlAAEIQQFUaGVyZSB3YXMgc29tZSBvdGhlciBpc3N1ZSAoaS5lLiBub3QgdG8gZG8gd2l0aCByb3V0aW5nKSBpbiBzZW5kaW5nIHRoZSBtZXNzYWdlLshQZXJoYXBzIGEgbGFjayBvZiBzcGFjZSBmb3IgYnVmZmVyaW5nIHRoZSBtZXNzYWdlLiBGaWx0ZXJlZAACBJxUaGUgbWVzc2FnZSBleGVjdXRpb24gZmFpbHMgdGhlIGZpbHRlci5IVW53ZWlnaGFibGVNZXNzYWdlAAMEtFRoZSBtZXNzYWdlJ3Mgd2VpZ2h0IGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLmBEZXN0aW5hdGlvbk5vdEludmVydGlibGUABATcVGhlIGRlc3RpbmF0aW9uIGBMb2NhdGlvbmAgcHJvdmlkZWQgY2Fubm90IGJlIGludmVydGVkLhRFbXB0eQAFBIBUaGUgYXNzZXRzIHRvIGJlIHNlbnQgYXJlIGVtcHR5LjhDYW5ub3RSZWFuY2hvcgAGBDUBQ291bGQgbm90IHJlLWFuY2hvciB0aGUgYXNzZXRzIHRvIGRlY2xhcmUgdGhlIGZlZXMgZm9yIHRoZSBkZXN0aW5hdGlvbiBjaGFpbi40VG9vTWFueUFzc2V0cwAHBMRUb28gbWFueSBhc3NldHMgaGF2ZSBiZWVuIGF0dGVtcHRlZCBmb3IgdHJhbnNmZXIuNEludmFsaWRPcmlnaW4ACAR4T3JpZ2luIGlzIGludmFsaWQgZm9yIHNlbmRpbmcuKEJhZFZlcnNpb24ACQQhAVRoZSB2ZXJzaW9uIG9mIHRoZSBgVmVyc2lvbmVkYCB2YWx1ZSB1c2VkIGlzIG5vdCBhYmxlIHRvIGJlIGludGVycHJldGVkLixCYWRMb2NhdGlvbgAKCEEBVGhlIGdpdmVuIGxvY2F0aW9uIGNvdWxkIG5vdCBiZSB1c2VkIChlLmcuIGJlY2F1c2UgaXQgY2Fubm90IGJlIGV4cHJlc3NlZCBpbiB0aGVgZGVzaXJlZCB2ZXJzaW9uIG9mIFhDTSkuOE5vU3Vic2NyaXB0aW9uAAsEvFRoZSByZWZlcmVuY2VkIHN1YnNjcmlwdGlvbiBjb3VsZCBub3QgYmUgZm91bmQuREFscmVhZHlTdWJzY3JpYmVkAAwEEQFUaGUgbG9jYXRpb24gaXMgaW52YWxpZCBzaW5jZSBpdCBhbHJlYWR5IGhhcyBhIHN1YnNjcmlwdGlvbiBmcm9tIHVzLlhDYW5ub3RDaGVja091dFRlbGVwb3J0AA0EKQFDb3VsZCBub3QgY2hlY2stb3V0IHRoZSBhc3NldHMgZm9yIHRlbGVwb3J0YXRpb24gdG8gdGhlIGRlc3RpbmF0aW9uIGNoYWluLihMb3dCYWxhbmNlAA4EQQFUaGUgb3duZXIgZG9lcyBub3Qgb3duIChhbGwpIG9mIHRoZSBhc3NldCB0aGF0IHRoZXkgd2lzaCB0byBkbyB0aGUgb3BlcmF0aW9uIG9uLjBUb29NYW55TG9ja3MADwTAVGhlIGFzc2V0IG93bmVyIGhhcyB0b28gbWFueSBsb2NrcyBvbiB0aGUgYXNzZXQuTEFjY291bnROb3RTb3ZlcmVpZ24AEAQxAVRoZSBnaXZlbiBhY2NvdW50IGlzIG5vdCBhbiBpZGVudGlmaWFibGUgc292ZXJlaWduIGFjY291bnQgZm9yIGFueSBsb2NhdGlvbi4oRmVlc05vdE1ldAARBCkBVGhlIG9wZXJhdGlvbiByZXF1aXJlZCBmZWVzIHRvIGJlIHBhaWQgd2hpY2ggdGhlIGluaXRpYXRvciBjb3VsZCBub3QgbWVldC4wTG9ja05vdEZvdW5kABIE9EEgcmVtb3RlIGxvY2sgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIGNvdWxkIG5vdCBiZSBmb3VuZC4USW5Vc2UAEwRJAVRoZSB1bmxvY2sgb3BlcmF0aW9uIGNhbm5vdCBzdWNjZWVkIGJlY2F1c2UgdGhlcmUgYXJlIHN0aWxsIGNvbnN1bWVycyBvZiB0aGUgbG9jay5oSW52YWxpZEFzc2V0VW5rbm93blJlc2VydmUAFQTwSW52YWxpZCBhc3NldCwgcmVzZXJ2ZSBjaGFpbiBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBmb3IgaXQueEludmFsaWRBc3NldFVuc3VwcG9ydGVkUmVzZXJ2ZQAWBEUBSW52YWxpZCBhc3NldCwgZG8gbm90IHN1cHBvcnQgcmVtb3RlIGFzc2V0IHJlc2VydmVzIHdpdGggZGlmZmVyZW50IGZlZXMgcmVzZXJ2ZXMuPFRvb01hbnlSZXNlcnZlcwAXBEkBVG9vIG1hbnkgYXNzZXRzIHdpdGggZGlmZmVyZW50IHJlc2VydmUgbG9jYXRpb25zIGhhdmUgYmVlbiBhdHRlbXB0ZWQgZm9yIHRyYW5zZmVyLmBMb2NhbEV4ZWN1dGlvbkluY29tcGxldGUAGAR8TG9jYWwgWENNIGV4ZWN1dGlvbiBpbmNvbXBsZXRlLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC5pDghQcGFsbGV0X21lc3NhZ2VfcXVldWUkQm9va1N0YXRlBDRNZXNzYWdlT3JpZ2luATEHABgBFGJlZ2luEAEkUGFnZUluZGV4AAEMZW5kEAEkUGFnZUluZGV4AAEUY291bnQQASRQYWdlSW5kZXgAAUByZWFkeV9uZWlnaGJvdXJzbQ4BhE9wdGlvbjxOZWlnaGJvdXJzPE1lc3NhZ2VPcmlnaW4+PgABNG1lc3NhZ2VfY291bnQwAQx1NjQAARBzaXplMAEMdTY0AABtDgQYT3B0aW9uBARUAXEOAQgQTm9uZQAAABBTb21lBABxDgAAAQAAcQ4IUHBhbGxldF9tZXNzYWdlX3F1ZXVlKE5laWdoYm91cnMENE1lc3NhZ2VPcmlnaW4BMQcACAEQcHJldjEHATRNZXNzYWdlT3JpZ2luAAEQbmV4dDEHATRNZXNzYWdlT3JpZ2luAAB1DgAABAgxBxAAeQ4IUHBhbGxldF9tZXNzYWdlX3F1ZXVlEFBhZ2UIEFNpemUBECBIZWFwU2l6ZQAAGAEkcmVtYWluaW5nEAEQU2l6ZQABOHJlbWFpbmluZ19zaXplEAEQU2l6ZQABLGZpcnN0X2luZGV4EAEQU2l6ZQABFGZpcnN0EAEQU2l6ZQABEGxhc3QQARBTaXplAAEQaGVhcH0OAZxCb3VuZGVkVmVjPHU4LCBJbnRvVTMyPEhlYXBTaXplLCBTaXplPj4AAH0ODExib3VuZGVkX2NvbGxlY3Rpb25zLGJvdW5kZWRfdmVjKEJvdW5kZWRWZWMIBFQBCARTAAAEADgBGFZlYzxUPgAAgQ4MUHBhbGxldF9tZXNzYWdlX3F1ZXVlGHBhbGxldBRFcnJvcgQEVAABJCxOb3RSZWFwYWJsZQAACEkBUGFnZSBpcyBub3QgcmVhcGFibGUgYmVjYXVzZSBpdCBoYXMgaXRlbXMgcmVtYWluaW5nIHRvIGJlIHByb2Nlc3NlZCBhbmQgaXMgbm90IG9sZBxlbm91Z2guGE5vUGFnZQABBIRQYWdlIHRvIGJlIHJlYXBlZCBkb2VzIG5vdCBleGlzdC4kTm9NZXNzYWdlAAIEqFRoZSByZWZlcmVuY2VkIG1lc3NhZ2UgY291bGQgbm90IGJlIGZvdW5kLkBBbHJlYWR5UHJvY2Vzc2VkAAMEAQFUaGUgbWVzc2FnZSB3YXMgYWxyZWFkeSBwcm9jZXNzZWQgYW5kIGNhbm5vdCBiZSBwcm9jZXNzZWQgYWdhaW4uGFF1ZXVlZAAEBKxUaGUgbWVzc2FnZSBpcyBxdWV1ZWQgZm9yIGZ1dHVyZSBleGVjdXRpb24uSEluc3VmZmljaWVudFdlaWdodAAFBBkBVGhlcmUgaXMgdGVtcG9yYXJpbHkgbm90IGVub3VnaCB3ZWlnaHQgdG8gY29udGludWUgc2VydmljaW5nIG1lc3NhZ2VzLmBUZW1wb3JhcmlseVVucHJvY2Vzc2FibGUABhCoVGhpcyBtZXNzYWdlIGlzIHRlbXBvcmFyaWx5IHVucHJvY2Vzc2FibGUuAFkBU3VjaCBlcnJvcnMgYXJlIGV4cGVjdGVkLCBidXQgbm90IGd1YXJhbnRlZWQsIHRvIHJlc29sdmUgdGhlbXNlbHZlcyBldmVudHVhbGx5IHRocm91Z2gkcmV0cnlpbmcuLFF1ZXVlUGF1c2VkAAcM7FRoZSBxdWV1ZSBpcyBwYXVzZWQgYW5kIG5vIG1lc3NhZ2UgY2FuIGJlIGV4ZWN1dGVkIGZyb20gaXQuAB0BVGhpcyBjYW4gY2hhbmdlIGF0IGFueSB0aW1lIGFuZCBtYXkgcmVzb2x2ZSBpbiB0aGUgZnV0dXJlIGJ5IHJlLXRyeWluZy5MUmVjdXJzaXZlRGlzYWxsb3dlZAAIBDEBQW5vdGhlciBjYWxsIGlzIGluIHByb2dyZXNzIGFuZCBuZWVkcyB0byBmaW5pc2ggYmVmb3JlIHRoaXMgY2FsbCBjYW4gaGFwcGVuLgSAVGhlIGBFcnJvcmAgZW51bSBvZiB0aGlzIHBhbGxldC6FDgxEcGFsbGV0X2Fzc2V0X3JhdGUYcGFsbGV0FEVycm9yBARUAAEMQFVua25vd25Bc3NldEtpbmQAAAR4VGhlIGdpdmVuIGFzc2V0IElEIGlzIHVua25vd24uNEFscmVhZHlFeGlzdHMAAQRRAVRoZSBnaXZlbiBhc3NldCBJRCBhbHJlYWR5IGhhcyBhbiBhc3NpZ25lZCBjb252ZXJzaW9uIHJhdGUgYW5kIGNhbm5vdCBiZSByZS1jcmVhdGVkLiBPdmVyZmxvdwACBMxPdmVyZmxvdyBvY3VycmVkIHdoZW4gY2FsY3VsYXRpbmcgdGhlIGludmVyc2UgcmF0ZS4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQuiQ4MTGJvdW5kZWRfY29sbGVjdGlvbnMsYm91bmRlZF92ZWMoQm91bmRlZFZlYwgEVAENAgRTAAAEAI0OARhWZWM8VD4AAI0OAAACDQIAkQ4MMHBhbGxldF9iZWVmeRhwYWxsZXQURXJyb3IEBFQAARxgSW52YWxpZEtleU93bmVyc2hpcFByb29mAAAEMQFBIGtleSBvd25lcnNoaXAgcHJvb2YgcHJvdmlkZWQgYXMgcGFydCBvZiBhbiBlcXVpdm9jYXRpb24gcmVwb3J0IGlzIGludmFsaWQuYEludmFsaWREb3VibGVWb3RpbmdQcm9vZgABBDEBQSBkb3VibGUgdm90aW5nIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLlhJbnZhbGlkRm9ya1ZvdGluZ1Byb29mAAIEKQFBIGZvcmsgdm90aW5nIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLnRJbnZhbGlkRnV0dXJlQmxvY2tWb3RpbmdQcm9vZgADBEkBQSBmdXR1cmUgYmxvY2sgdm90aW5nIHByb29mIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gZXF1aXZvY2F0aW9uIHJlcG9ydCBpcyBpbnZhbGlkLnxJbnZhbGlkRXF1aXZvY2F0aW9uUHJvb2ZTZXNzaW9uAAQEwFRoZSBzZXNzaW9uIG9mIHRoZSBlcXVpdm9jYXRpb24gcHJvb2YgaXMgaW52YWxpZFhEdXBsaWNhdGVPZmZlbmNlUmVwb3J0AAUEFQFBIGdpdmVuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC5QSW52YWxpZENvbmZpZ3VyYXRpb24ABgSMU3VibWl0dGVkIGNvbmZpZ3VyYXRpb24gaXMgaW52YWxpZC4EgFRoZSBgRXJyb3JgIGVudW0gb2YgdGhpcyBwYWxsZXQulQ4MSHNwX2NvbnNlbnN1c19iZWVmeQxtbXJEQmVlZnlBdXRob3JpdHlTZXQEWEF1dGhvcml0eVNldENvbW1pdG1lbnQBNAAMAQhpZDABVGNyYXRlOjpWYWxpZGF0b3JTZXRJZAABDGxlbhABDHUzMgABRGtleXNldF9jb21taXRtZW50NAFYQXV0aG9yaXR5U2V0Q29tbWl0bWVudAAAmQ4AAAQknQ6hDqUOqQ6tDrUOuQ69DsEOAJ0OEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9uc1RjaGVja19ub25femVyb19zZW5kZXJIQ2hlY2tOb25aZXJvU2VuZGVyBARUAAAAAKEOEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9uc0hjaGVja19zcGVjX3ZlcnNpb25AQ2hlY2tTcGVjVmVyc2lvbgQEVAAAAAClDhAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnNAY2hlY2tfdHhfdmVyc2lvbjhDaGVja1R4VmVyc2lvbgQEVAAAAACpDhAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnM0Y2hlY2tfZ2VuZXNpczBDaGVja0dlbmVzaXMEBFQAAAAArQ4QMGZyYW1lX3N5c3RlbShleHRlbnNpb25zPGNoZWNrX21vcnRhbGl0eThDaGVja01vcnRhbGl0eQQEVAAABACxDgEMRXJhAACxDhAoc3BfcnVudGltZRxnZW5lcmljDGVyYQxFcmEAAQEEIEltbW9ydGFsAAAAHE1vcnRhbDEEAAgAAAEAHE1vcnRhbDIEAAgAAAIAHE1vcnRhbDMEAAgAAAMAHE1vcnRhbDQEAAgAAAQAHE1vcnRhbDUEAAgAAAUAHE1vcnRhbDYEAAgAAAYAHE1vcnRhbDcEAAgAAAcAHE1vcnRhbDgEAAgAAAgAHE1vcnRhbDkEAAgAAAkAIE1vcnRhbDEwBAAIAAAKACBNb3J0YWwxMQQACAAACwAgTW9ydGFsMTIEAAgAAAwAIE1vcnRhbDEzBAAIAAANACBNb3J0YWwxNAQACAAADgAgTW9ydGFsMTUEAAgAAA8AIE1vcnRhbDE2BAAIAAAQACBNb3J0YWwxNwQACAAAEQAgTW9ydGFsMTgEAAgAABIAIE1vcnRhbDE5BAAIAAATACBNb3J0YWwyMAQACAAAFAAgTW9ydGFsMjEEAAgAABUAIE1vcnRhbDIyBAAIAAAWACBNb3J0YWwyMwQACAAAFwAgTW9ydGFsMjQEAAgAABgAIE1vcnRhbDI1BAAIAAAZACBNb3J0YWwyNgQACAAAGgAgTW9ydGFsMjcEAAgAABsAIE1vcnRhbDI4BAAIAAAcACBNb3J0YWwyOQQACAAAHQAgTW9ydGFsMzAEAAgAAB4AIE1vcnRhbDMxBAAIAAAfACBNb3J0YWwzMgQACAAAIAAgTW9ydGFsMzMEAAgAACEAIE1vcnRhbDM0BAAIAAAiACBNb3J0YWwzNQQACAAAIwAgTW9ydGFsMzYEAAgAACQAIE1vcnRhbDM3BAAIAAAlACBNb3J0YWwzOAQACAAAJgAgTW9ydGFsMzkEAAgAACcAIE1vcnRhbDQwBAAIAAAoACBNb3J0YWw0MQQACAAAKQAgTW9ydGFsNDIEAAgAACoAIE1vcnRhbDQzBAAIAAArACBNb3J0YWw0NAQACAAALAAgTW9ydGFsNDUEAAgAAC0AIE1vcnRhbDQ2BAAIAAAuACBNb3J0YWw0NwQACAAALwAgTW9ydGFsNDgEAAgAADAAIE1vcnRhbDQ5BAAIAAAxACBNb3J0YWw1MAQACAAAMgAgTW9ydGFsNTEEAAgAADMAIE1vcnRhbDUyBAAIAAA0ACBNb3J0YWw1MwQACAAANQAgTW9ydGFsNTQEAAgAADYAIE1vcnRhbDU1BAAIAAA3ACBNb3J0YWw1NgQACAAAOAAgTW9ydGFsNTcEAAgAADkAIE1vcnRhbDU4BAAIAAA6ACBNb3J0YWw1OQQACAAAOwAgTW9ydGFsNjAEAAgAADwAIE1vcnRhbDYxBAAIAAA9ACBNb3J0YWw2MgQACAAAPgAgTW9ydGFsNjMEAAgAAD8AIE1vcnRhbDY0BAAIAABAACBNb3J0YWw2NQQACAAAQQAgTW9ydGFsNjYEAAgAAEIAIE1vcnRhbDY3BAAIAABDACBNb3J0YWw2OAQACAAARAAgTW9ydGFsNjkEAAgAAEUAIE1vcnRhbDcwBAAIAABGACBNb3J0YWw3MQQACAAARwAgTW9ydGFsNzIEAAgAAEgAIE1vcnRhbDczBAAIAABJACBNb3J0YWw3NAQACAAASgAgTW9ydGFsNzUEAAgAAEsAIE1vcnRhbDc2BAAIAABMACBNb3J0YWw3NwQACAAATQAgTW9ydGFsNzgEAAgAAE4AIE1vcnRhbDc5BAAIAABPACBNb3J0YWw4MAQACAAAUAAgTW9ydGFsODEEAAgAAFEAIE1vcnRhbDgyBAAIAABSACBNb3J0YWw4MwQACAAAUwAgTW9ydGFsODQEAAgAAFQAIE1vcnRhbDg1BAAIAABVACBNb3J0YWw4NgQACAAAVgAgTW9ydGFsODcEAAgAAFcAIE1vcnRhbDg4BAAIAABYACBNb3J0YWw4OQQACAAAWQAgTW9ydGFsOTAEAAgAAFoAIE1vcnRhbDkxBAAIAABbACBNb3J0YWw5MgQACAAAXAAgTW9ydGFsOTMEAAgAAF0AIE1vcnRhbDk0BAAIAABeACBNb3J0YWw5NQQACAAAXwAgTW9ydGFsOTYEAAgAAGAAIE1vcnRhbDk3BAAIAABhACBNb3J0YWw5OAQACAAAYgAgTW9ydGFsOTkEAAgAAGMAJE1vcnRhbDEwMAQACAAAZAAkTW9ydGFsMTAxBAAIAABlACRNb3J0YWwxMDIEAAgAAGYAJE1vcnRhbDEwMwQACAAAZwAkTW9ydGFsMTA0BAAIAABoACRNb3J0YWwxMDUEAAgAAGkAJE1vcnRhbDEwNgQACAAAagAkTW9ydGFsMTA3BAAIAABrACRNb3J0YWwxMDgEAAgAAGwAJE1vcnRhbDEwOQQACAAAbQAkTW9ydGFsMTEwBAAIAABuACRNb3J0YWwxMTEEAAgAAG8AJE1vcnRhbDExMgQACAAAcAAkTW9ydGFsMTEzBAAIAABxACRNb3J0YWwxMTQEAAgAAHIAJE1vcnRhbDExNQQACAAAcwAkTW9ydGFsMTE2BAAIAAB0ACRNb3J0YWwxMTcEAAgAAHUAJE1vcnRhbDExOAQACAAAdgAkTW9ydGFsMTE5BAAIAAB3ACRNb3J0YWwxMjAEAAgAAHgAJE1vcnRhbDEyMQQACAAAeQAkTW9ydGFsMTIyBAAIAAB6ACRNb3J0YWwxMjMEAAgAAHsAJE1vcnRhbDEyNAQACAAAfAAkTW9ydGFsMTI1BAAIAAB9ACRNb3J0YWwxMjYEAAgAAH4AJE1vcnRhbDEyNwQACAAAfwAkTW9ydGFsMTI4BAAIAACAACRNb3J0YWwxMjkEAAgAAIEAJE1vcnRhbDEzMAQACAAAggAkTW9ydGFsMTMxBAAIAACDACRNb3J0YWwxMzIEAAgAAIQAJE1vcnRhbDEzMwQACAAAhQAkTW9ydGFsMTM0BAAIAACGACRNb3J0YWwxMzUEAAgAAIcAJE1vcnRhbDEzNgQACAAAiAAkTW9ydGFsMTM3BAAIAACJACRNb3J0YWwxMzgEAAgAAIoAJE1vcnRhbDEzOQQACAAAiwAkTW9ydGFsMTQwBAAIAACMACRNb3J0YWwxNDEEAAgAAI0AJE1vcnRhbDE0MgQACAAAjgAkTW9ydGFsMTQzBAAIAACPACRNb3J0YWwxNDQEAAgAAJAAJE1vcnRhbDE0NQQACAAAkQAkTW9ydGFsMTQ2BAAIAACSACRNb3J0YWwxNDcEAAgAAJMAJE1vcnRhbDE0OAQACAAAlAAkTW9ydGFsMTQ5BAAIAACVACRNb3J0YWwxNTAEAAgAAJYAJE1vcnRhbDE1MQQACAAAlwAkTW9ydGFsMTUyBAAIAACYACRNb3J0YWwxNTMEAAgAAJkAJE1vcnRhbDE1NAQACAAAmgAkTW9ydGFsMTU1BAAIAACbACRNb3J0YWwxNTYEAAgAAJwAJE1vcnRhbDE1NwQACAAAnQAkTW9ydGFsMTU4BAAIAACeACRNb3J0YWwxNTkEAAgAAJ8AJE1vcnRhbDE2MAQACAAAoAAkTW9ydGFsMTYxBAAIAAChACRNb3J0YWwxNjIEAAgAAKIAJE1vcnRhbDE2MwQACAAAowAkTW9ydGFsMTY0BAAIAACkACRNb3J0YWwxNjUEAAgAAKUAJE1vcnRhbDE2NgQACAAApgAkTW9ydGFsMTY3BAAIAACnACRNb3J0YWwxNjgEAAgAAKgAJE1vcnRhbDE2OQQACAAAqQAkTW9ydGFsMTcwBAAIAACqACRNb3J0YWwxNzEEAAgAAKsAJE1vcnRhbDE3MgQACAAArAAkTW9ydGFsMTczBAAIAACtACRNb3J0YWwxNzQEAAgAAK4AJE1vcnRhbDE3NQQACAAArwAkTW9ydGFsMTc2BAAIAACwACRNb3J0YWwxNzcEAAgAALEAJE1vcnRhbDE3OAQACAAAsgAkTW9ydGFsMTc5BAAIAACzACRNb3J0YWwxODAEAAgAALQAJE1vcnRhbDE4MQQACAAAtQAkTW9ydGFsMTgyBAAIAAC2ACRNb3J0YWwxODMEAAgAALcAJE1vcnRhbDE4NAQACAAAuAAkTW9ydGFsMTg1BAAIAAC5ACRNb3J0YWwxODYEAAgAALoAJE1vcnRhbDE4NwQACAAAuwAkTW9ydGFsMTg4BAAIAAC8ACRNb3J0YWwxODkEAAgAAL0AJE1vcnRhbDE5MAQACAAAvgAkTW9ydGFsMTkxBAAIAAC/ACRNb3J0YWwxOTIEAAgAAMAAJE1vcnRhbDE5MwQACAAAwQAkTW9ydGFsMTk0BAAIAADCACRNb3J0YWwxOTUEAAgAAMMAJE1vcnRhbDE5NgQACAAAxAAkTW9ydGFsMTk3BAAIAADFACRNb3J0YWwxOTgEAAgAAMYAJE1vcnRhbDE5OQQACAAAxwAkTW9ydGFsMjAwBAAIAADIACRNb3J0YWwyMDEEAAgAAMkAJE1vcnRhbDIwMgQACAAAygAkTW9ydGFsMjAzBAAIAADLACRNb3J0YWwyMDQEAAgAAMwAJE1vcnRhbDIwNQQACAAAzQAkTW9ydGFsMjA2BAAIAADOACRNb3J0YWwyMDcEAAgAAM8AJE1vcnRhbDIwOAQACAAA0AAkTW9ydGFsMjA5BAAIAADRACRNb3J0YWwyMTAEAAgAANIAJE1vcnRhbDIxMQQACAAA0wAkTW9ydGFsMjEyBAAIAADUACRNb3J0YWwyMTMEAAgAANUAJE1vcnRhbDIxNAQACAAA1gAkTW9ydGFsMjE1BAAIAADXACRNb3J0YWwyMTYEAAgAANgAJE1vcnRhbDIxNwQACAAA2QAkTW9ydGFsMjE4BAAIAADaACRNb3J0YWwyMTkEAAgAANsAJE1vcnRhbDIyMAQACAAA3AAkTW9ydGFsMjIxBAAIAADdACRNb3J0YWwyMjIEAAgAAN4AJE1vcnRhbDIyMwQACAAA3wAkTW9ydGFsMjI0BAAIAADgACRNb3J0YWwyMjUEAAgAAOEAJE1vcnRhbDIyNgQACAAA4gAkTW9ydGFsMjI3BAAIAADjACRNb3J0YWwyMjgEAAgAAOQAJE1vcnRhbDIyOQQACAAA5QAkTW9ydGFsMjMwBAAIAADmACRNb3J0YWwyMzEEAAgAAOcAJE1vcnRhbDIzMgQACAAA6AAkTW9ydGFsMjMzBAAIAADpACRNb3J0YWwyMzQEAAgAAOoAJE1vcnRhbDIzNQQACAAA6wAkTW9ydGFsMjM2BAAIAADsACRNb3J0YWwyMzcEAAgAAO0AJE1vcnRhbDIzOAQACAAA7gAkTW9ydGFsMjM5BAAIAADvACRNb3J0YWwyNDAEAAgAAPAAJE1vcnRhbDI0MQQACAAA8QAkTW9ydGFsMjQyBAAIAADyACRNb3J0YWwyNDMEAAgAAPMAJE1vcnRhbDI0NAQACAAA9AAkTW9ydGFsMjQ1BAAIAAD1ACRNb3J0YWwyNDYEAAgAAPYAJE1vcnRhbDI0NwQACAAA9wAkTW9ydGFsMjQ4BAAIAAD4ACRNb3J0YWwyNDkEAAgAAPkAJE1vcnRhbDI1MAQACAAA+gAkTW9ydGFsMjUxBAAIAAD7ACRNb3J0YWwyNTIEAAgAAPwAJE1vcnRhbDI1MwQACAAA/QAkTW9ydGFsMjU0BAAIAAD+ACRNb3J0YWwyNTUEAAgAAP8AALUOEDBmcmFtZV9zeXN0ZW0oZXh0ZW5zaW9ucyxjaGVja19ub25jZShDaGVja05vbmNlBARUAAAEANQBIFQ6Ok5vbmNlAAC5DhAwZnJhbWVfc3lzdGVtKGV4dGVuc2lvbnMwY2hlY2tfd2VpZ2h0LENoZWNrV2VpZ2h0BARUAAAAAL0OCGhwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudGBDaGFyZ2VUcmFuc2FjdGlvblBheW1lbnQEBFQAAAQA5AEwQmFsYW5jZU9mPFQ+AADBDgh0ZnJhbWVfbWV0YWRhdGFfaGFzaF9leHRlbnNpb25EQ2hlY2tNZXRhZGF0YUhhc2gEBFQAAAQBEG1vZGXFDgEQTW9kZQAAxQ4IdGZyYW1lX21ldGFkYXRhX2hhc2hfZXh0ZW5zaW9uEE1vZGUAAQggRGlzYWJsZWQAAAAcRW5hYmxlZAABAADJDghYc3RhZ2luZ19rdXNhbWFfcnVudGltZRxSdW50aW1lAAAAAM0ODDByZWxheV9jb21tb24QYXBpczRJbmZsYXRpb25JbmZvAAAIASRpbmZsYXRpb26dAgFcc3BfcnVudGltZTo6UGVycXVpbnRpbGwAASRuZXh0X21pbnTRDgHwKHBvbGthZG90X3ByaW1pdGl2ZXM6OkJhbGFuY2UsIHBvbGthZG90X3ByaW1pdGl2ZXM6OkJhbGFuY2UpAADRDgAABAgYGADVDhAoc3BfcnVudGltZRxnZW5lcmljFGJsb2NrFEJsb2NrCBhIZWFkZXIBgQEkRXh0cmluc2ljAdkOAAgBGGhlYWRlcoEBARhIZWFkZXIAAShleHRyaW5zaWNz3Q4BOFZlYzxFeHRyaW5zaWM+AADZDhAoc3BfcnVudGltZRxnZW5lcmljTHVuY2hlY2tlZF9leHRyaW5zaWNIVW5jaGVja2VkRXh0cmluc2ljEBxBZGRyZXNzAaUBEENhbGwBZQEkU2lnbmF0dXJlAdkFFEV4dHJhAZkOAAQAOAAAAN0OAAAC2Q4A4Q4IKHNwX3J1bnRpbWVYRXh0cmluc2ljSW5jbHVzaW9uTW9kZQABCDRBbGxFeHRyaW5zaWNzAAAANE9ubHlJbmhlcmVudHMAAQAA5Q4IHHNwX2NvcmU4T3BhcXVlTWV0YWRhdGEAAAQAOAEcVmVjPHU4PgAA6Q4EGE9wdGlvbgQEVAHlDgEIEE5vbmUAAAAQU29tZQQA5Q4AAAEAAO0OBBhSZXN1bHQIBFQB0QcERQHxDgEICE9rBADRBwAAAAAMRXJyBADxDgAAAQAA8Q4MKHNwX3J1bnRpbWVQdHJhbnNhY3Rpb25fdmFsaWRpdHlgVHJhbnNhY3Rpb25WYWxpZGl0eUVycm9yAAEIHEludmFsaWQEAPUOAUhJbnZhbGlkVHJhbnNhY3Rpb24AAAAcVW5rbm93bgQA+Q4BSFVua25vd25UcmFuc2FjdGlvbgABAAD1Dgwoc3BfcnVudGltZVB0cmFuc2FjdGlvbl92YWxpZGl0eUhJbnZhbGlkVHJhbnNhY3Rpb24AASwQQ2FsbAAAABxQYXltZW50AAEAGEZ1dHVyZQACABRTdGFsZQADACBCYWRQcm9vZgAEAERBbmNpZW50QmlydGhCbG9jawAFAERFeGhhdXN0c1Jlc291cmNlcwAGABhDdXN0b20EAAgBCHU4AAcAMEJhZE1hbmRhdG9yeQAIAExNYW5kYXRvcnlWYWxpZGF0aW9uAAkAJEJhZFNpZ25lcgAKAAD5Dgwoc3BfcnVudGltZVB0cmFuc2FjdGlvbl92YWxpZGl0eUhVbmtub3duVHJhbnNhY3Rpb24AAQwwQ2Fubm90TG9va3VwAAAATE5vVW5zaWduZWRWYWxpZGF0b3IAAQAYQ3VzdG9tBAAIAQh1OAACAAD9Dggwc3BfaW5oZXJlbnRzMEluaGVyZW50RGF0YQAABAEQZGF0YQEPAZRCVHJlZU1hcDxJbmhlcmVudElkZW50aWZpZXIsIFZlYzx1OD4+AAABDwQgQlRyZWVNYXAIBEsBHQYEVgE4AAQABQ8AAAAFDwAAAgkPAAkPAAAECB0GOAANDwgwc3BfaW5oZXJlbnRzUENoZWNrSW5oZXJlbnRzUmVzdWx0AAAMARBva2F5IAEQYm9vbAABLGZhdGFsX2Vycm9yIAEQYm9vbAABGGVycm9yc/0OATBJbmhlcmVudERhdGEAABEPDChzcF9ydW50aW1lUHRyYW5zYWN0aW9uX3ZhbGlkaXR5RFRyYW5zYWN0aW9uU291cmNlAAEMHEluQmxvY2sAAAAUTG9jYWwAAQAgRXh0ZXJuYWwAAgAAFQ8EGFJlc3VsdAgEVAEZDwRFAfEOAQgIT2sEABkPAAAAAAxFcnIEAPEOAAABAAAZDwwoc3BfcnVudGltZVB0cmFuc2FjdGlvbl92YWxpZGl0eUBWYWxpZFRyYW5zYWN0aW9uAAAUASBwcmlvcml0eTABTFRyYW5zYWN0aW9uUHJpb3JpdHkAASByZXF1aXJlc3UBAUxWZWM8VHJhbnNhY3Rpb25UYWc+AAEgcHJvdmlkZXN1AQFMVmVjPFRyYW5zYWN0aW9uVGFnPgABJGxvbmdldml0eTABUFRyYW5zYWN0aW9uTG9uZ2V2aXR5AAEkcHJvcGFnYXRlIAEQYm9vbAAAHQ8AAAQIvQwhDwAhDwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OERHcm91cFJvdGF0aW9uSW5mbwQETgEQAAwBTHNlc3Npb25fc3RhcnRfYmxvY2sQAQROAAFgZ3JvdXBfcm90YXRpb25fZnJlcXVlbmN5EAEETgABDG5vdxABBE4AACUPAAACKQ8AKQ8MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjgkQ29yZVN0YXRlCARIATQETgEQAQwgT2NjdXBpZWQEAC0PAUhPY2N1cGllZENvcmU8SCwgTj4AAAAkU2NoZWR1bGVkBAA1DwE0U2NoZWR1bGVkQ29yZQABABBGcmVlAAIAAC0PDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4ME9jY3VwaWVkQ29yZQgESAE0BE4BEAAgAVBuZXh0X3VwX29uX2F2YWlsYWJsZTEPAVRPcHRpb248U2NoZWR1bGVkQ29yZT4AAThvY2N1cGllZF9zaW5jZRABBE4AASx0aW1lX291dF9hdBABBE4AAUxuZXh0X3VwX29uX3RpbWVfb3V0MQ8BVE9wdGlvbjxTY2hlZHVsZWRDb3JlPgABMGF2YWlsYWJpbGl0eRUFAXxCaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+AAFEZ3JvdXBfcmVzcG9uc2libGU1CAEoR3JvdXBJbmRleAABOGNhbmRpZGF0ZV9oYXNocQUBNENhbmRpZGF0ZUhhc2gAAVBjYW5kaWRhdGVfZGVzY3JpcHRvcjEFAVhDYW5kaWRhdGVEZXNjcmlwdG9yPEg+AAAxDwQYT3B0aW9uBARUATUPAQgQTm9uZQAAABBTb21lBAA1DwAAAQAANQ8MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjg0U2NoZWR1bGVkQ29yZQAACAEccGFyYV9pZGkCAQhJZAABIGNvbGxhdG9yOQ8BSE9wdGlvbjxDb2xsYXRvcklkPgAAOQ8EGE9wdGlvbgQEVAE1BQEIEE5vbmUAAAAQU29tZQQANQUAAAEAAD0PDExwb2xrYWRvdF9wcmltaXRpdmVzCHY4WE9jY3VwaWVkQ29yZUFzc3VtcHRpb24AAQwgSW5jbHVkZWQAAAAgVGltZWRPdXQAAQAQRnJlZQACAABBDwQYT3B0aW9uBARUAUUPAQgQTm9uZQAAABBTb21lBABFDwAAAQAARQ8MTHBvbGthZG90X3ByaW1pdGl2ZXMIdjhcUGVyc2lzdGVkVmFsaWRhdGlvbkRhdGEIBEgBNAROARAAEAEscGFyZW50X2hlYWRdBQEgSGVhZERhdGEAAUxyZWxheV9wYXJlbnRfbnVtYmVyEAEETgABZHJlbGF5X3BhcmVudF9zdG9yYWdlX3Jvb3Q0AQRIAAEwbWF4X3Bvdl9zaXplEAEMdTMyAABJDwQYT3B0aW9uBARUAU0PAQgQTm9uZQAAABBTb21lBABNDwAAAQAATQ8AAAQIRQ89BQBRDwQYT3B0aW9uBARUAS0FAQgQTm9uZQAAABBTb21lBAAtBQAAAQAAVQ8AAAJZDwBZDwxMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODhDYW5kaWRhdGVFdmVudAQESAE0AQw8Q2FuZGlkYXRlQmFja2VkEAAtCAFMQ2FuZGlkYXRlUmVjZWlwdDxIPgAAXQUBIEhlYWREYXRhAAAxCAEkQ29yZUluZGV4AAA1CAEoR3JvdXBJbmRleAAAAERDYW5kaWRhdGVJbmNsdWRlZBAALQgBTENhbmRpZGF0ZVJlY2VpcHQ8SD4AAF0FASBIZWFkRGF0YQAAMQgBJENvcmVJbmRleAAANQgBKEdyb3VwSW5kZXgAAQBEQ2FuZGlkYXRlVGltZWRPdXQMAC0IAUxDYW5kaWRhdGVSZWNlaXB0PEg+AABdBQEgSGVhZERhdGEAADEIASRDb3JlSW5kZXgAAgAAXQ8EIEJUcmVlTWFwCARLAWkCBFYBPQ0ABABhDwAAAGEPAAACZQ8AZQ8AAAQIaQI9DQBpDwQYT3B0aW9uBARUAaUMAQgQTm9uZQAAABBTb21lBAClDAAAAQAAbQ8EGE9wdGlvbgQEVAFVDQEIEE5vbmUAAAAQU29tZQQAVQ0AAAEAAHEPBBhPcHRpb24EBFQBPQUBCBBOb25lAAAAEFNvbWUEAD0FAAABAAB1DwAAAnkPAHkPAAAEDBBxBWUNAH0PBBhPcHRpb24EBFQB3QQBCBBOb25lAAAAEFNvbWUEAN0EAAABAACBDwAAAoUPAIUPAAAEDBBxBXENAIkPBBhPcHRpb24EBFQBjQ8BCBBOb25lAAAAEFNvbWUEAI0PAAABAACNDxBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2OCBzbGFzaGluZ1xPcGFxdWVLZXlPd25lcnNoaXBQcm9vZgAABAA4ARxWZWM8dTg+AACRDwQYT3B0aW9uBARUAakBAQgQTm9uZQAAABBTb21lBACpAQAAAQAAlQ8EGE9wdGlvbgQEVAGZDwEIEE5vbmUAAAAQU29tZQQAmQ8AAAEAAJkPEExwb2xrYWRvdF9wcmltaXRpdmVzCHY4NGFzeW5jX2JhY2tpbmcwQmFja2luZ1N0YXRlCARIATQETgEQAAgBLGNvbnN0cmFpbnRznQ8BOENvbnN0cmFpbnRzPE4+AAFQcGVuZGluZ19hdmFpbGFiaWxpdHm9DwGcVmVjPENhbmRpZGF0ZVBlbmRpbmdBdmFpbGFiaWxpdHk8SCwgTj4+AACdDxBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODRhc3luY19iYWNraW5nLENvbnN0cmFpbnRzBAROARAAOAFcbWluX3JlbGF5X3BhcmVudF9udW1iZXIQAQROAAEwbWF4X3Bvdl9zaXplEAEMdTMyAAE0bWF4X2NvZGVfc2l6ZRABDHUzMgABNHVtcF9yZW1haW5pbmcQAQx1MzIAAUx1bXBfcmVtYWluaW5nX2J5dGVzEAEMdTMyAAFkbWF4X3VtcF9udW1fcGVyX2NhbmRpZGF0ZRABDHUzMgABWGRtcF9yZW1haW5pbmdfbWVzc2FnZXPJAQEYVmVjPE4+AAEwaHJtcF9pbmJvdW5koQ8BZEluYm91bmRIcm1wTGltaXRhdGlvbnM8Tj4AAURocm1wX2NoYW5uZWxzX291dKUPAaRWZWM8KElkLCBPdXRib3VuZEhybXBDaGFubmVsTGltaXRhdGlvbnMpPgABaG1heF9ocm1wX251bV9wZXJfY2FuZGlkYXRlEAEMdTMyAAE8cmVxdWlyZWRfcGFyZW50XQUBIEhlYWREYXRhAAFQdmFsaWRhdGlvbl9jb2RlX2hhc2g9BQFIVmFsaWRhdGlvbkNvZGVIYXNoAAFMdXBncmFkZV9yZXN0cmljdGlvbrEPAWhPcHRpb248VXBncmFkZVJlc3RyaWN0aW9uPgABWGZ1dHVyZV92YWxpZGF0aW9uX2NvZGW1DwF8T3B0aW9uPChOLCBWYWxpZGF0aW9uQ29kZUhhc2gpPgAAoQ8QTHBvbGthZG90X3ByaW1pdGl2ZXMIdjg0YXN5bmNfYmFja2luZ1hJbmJvdW5kSHJtcExpbWl0YXRpb25zBAROARAABAFAdmFsaWRfd2F0ZXJtYXJrc8kBARhWZWM8Tj4AAKUPAAACqQ8AqQ8AAAQIaQKtDwCtDxBMcG9sa2Fkb3RfcHJpbWl0aXZlcwh2ODRhc3luY19iYWNraW5neE91dGJvdW5kSHJtcENoYW5uZWxMaW1pdGF0aW9ucwAACAE8Ynl0ZXNfcmVtYWluaW5nEAEMdTMyAAFIbWVzc2FnZXNfcmVtYWluaW5nEAEMdTMyAACxDwQYT3B0aW9uBARUARUNAQgQTm9uZQAAABBTb21lBAAVDQAAAQAAtQ8EGE9wdGlvbgQEVAG5DwEIEE5vbmUAAAAQU29tZQQAuQ8AAAEAALkPAAAECBA9BQC9DwAAAsEPAMEPEExwb2xrYWRvdF9wcmltaXRpdmVzCHY4NGFzeW5jX2JhY2tpbmdwQ2FuZGlkYXRlUGVuZGluZ0F2YWlsYWJpbGl0eQgESAE0BE4BEAAUAThjYW5kaWRhdGVfaGFzaHEFATRDYW5kaWRhdGVIYXNoAAEoZGVzY3JpcHRvcjEFAVhDYW5kaWRhdGVEZXNjcmlwdG9yPEg+AAEsY29tbWl0bWVudHNBBQFQQ2FuZGlkYXRlQ29tbWl0bWVudHMAAUxyZWxheV9wYXJlbnRfbnVtYmVyEAEETgABMG1heF9wb3Zfc2l6ZRABDHUzMgAAxQ8EIEJUcmVlTWFwCARLATEIBFYB9QwABADJDwAAAMkPAAACzQ8AzQ8AAAQIMQj1DADRDwAAAi0FANUPBBhPcHRpb24EBFQB2Q8BCBBOb25lAAAAEFNvbWUEANkPAAABAADZDwhIc3BfY29uc2Vuc3VzX2JlZWZ5MFZhbGlkYXRvclNldAQsQXV0aG9yaXR5SWQBDQIACAEodmFsaWRhdG9yc40OAUBWZWM8QXV0aG9yaXR5SWQ+AAEIaWQwAThWYWxpZGF0b3JTZXRJZAAA3Q8IKHNwX3J1bnRpbWUsT3BhcXVlVmFsdWUAAAQAOAEcVmVjPHU4PgAA4Q8ISHNwX2NvbnNlbnN1c19iZWVmeTxGb3JrVm90aW5nUHJvb2YMGEhlYWRlcgGBAQhJZAENAjRBbmNlc3RyeVByb29mAd0PAAwBEHZvdGVNBwG4Vm90ZU1lc3NhZ2U8SGVhZGVyOjpOdW1iZXIsIElkLCBJZDo6U2lnbmF0dXJlPgABOGFuY2VzdHJ5X3Byb29m3Q8BNEFuY2VzdHJ5UHJvb2YAARhoZWFkZXKBAQEYSGVhZGVyAADlDwQYT3B0aW9uBARUAd0PAQgQTm9uZQAAABBTb21lBADdDwAAAQAA6Q8EGFJlc3VsdAgEVAE0BEUB7Q8BCAhPawQANAAAAAAMRXJyBADtDwAAAQAA7Q8IRHNwX21tcl9wcmltaXRpdmVzFEVycm9yAAEoQEludmFsaWROdW1lcmljT3AAAAAQUHVzaAABABxHZXRSb290AAIAGENvbW1pdAADADRHZW5lcmF0ZVByb29mAAQAGFZlcmlmeQAFADBMZWFmTm90Rm91bmQABgBEUGFsbGV0Tm90SW5jbHVkZWQABwBASW52YWxpZExlYWZJbmRleAAIAFRJbnZhbGlkQmVzdEtub3duQmxvY2sACQAA8Q8EGFJlc3VsdAgEVAEwBEUB7Q8BCAhPawQAMAAAAAAMRXJyBADtDwAAAQAA9Q8EGFJlc3VsdAgEVAH5DwRFAe0PAQgIT2sEAPkPAAAAAAxFcnIEAO0PAAABAAD5DwAABAj9DwUQAP0PAAACARAAARAIRHNwX21tcl9wcmltaXRpdmVzTEVuY29kYWJsZU9wYXF1ZUxlYWYAAAQAOAEcVmVjPHU4PgAABRAIRHNwX21tcl9wcmltaXRpdmVzJExlYWZQcm9vZgQQSGFzaAE0AAwBMGxlYWZfaW5kaWNlcwUMAThWZWM8TGVhZkluZGV4PgABKGxlYWZfY291bnQwASROb2RlSW5kZXgAARRpdGVtczEDASRWZWM8SGFzaD4AAAkQBBhSZXN1bHQIBFQBqQEERQHtDwEICE9rBACpAQAAAAAMRXJyBADtDwAAAQAADRAIRHNwX2NvbnNlbnN1c19iYWJlREJhYmVDb25maWd1cmF0aW9uAAAYATRzbG90X2R1cmF0aW9uMAEMdTY0AAEwZXBvY2hfbGVuZ3RoMAEMdTY0AAEEY5UBASgodTY0LCB1NjQpAAEsYXV0aG9yaXRpZXPBCAGcVmVjPChBdXRob3JpdHlJZCwgQmFiZUF1dGhvcml0eVdlaWdodCk+AAEocmFuZG9tbmVzcwQBKFJhbmRvbW5lc3MAATRhbGxvd2VkX3Nsb3RzmQEBMEFsbG93ZWRTbG90cwAAERAIRHNwX2NvbnNlbnN1c19iYWJlFEVwb2NoAAAYASxlcG9jaF9pbmRleDABDHU2NAABKHN0YXJ0X3Nsb3SJAQEQU2xvdAABIGR1cmF0aW9uMAEMdTY0AAEsYXV0aG9yaXRpZXPBCAGcVmVjPChBdXRob3JpdHlJZCwgQmFiZUF1dGhvcml0eVdlaWdodCk+AAEocmFuZG9tbmVzcwQBKFJhbmRvbW5lc3MAARhjb25maWflCAFYQmFiZUVwb2NoQ29uZmlndXJhdGlvbgAAFRAEGE9wdGlvbgQEVAEZEAEIEE5vbmUAAAAQU29tZQQAGRAAAAEAABkQCERzcF9jb25zZW5zdXNfYmFiZVxPcGFxdWVLZXlPd25lcnNoaXBQcm9vZgAABAA4ARxWZWM8dTg+AAAdEAQYT3B0aW9uBARUASEQAQgQTm9uZQAAABBTb21lBAAhEAAAAQAAIRAAAAIlEAAlEAAABAg4zQkAKRAMaHBhbGxldF90cmFuc2FjdGlvbl9wYXltZW50FHR5cGVzTFJ1bnRpbWVEaXNwYXRjaEluZm8IHEJhbGFuY2UBGBhXZWlnaHQBKAAMARh3ZWlnaHQoARhXZWlnaHQAARRjbGFzc2ABNERpc3BhdGNoQ2xhc3MAASxwYXJ0aWFsX2ZlZRgBHEJhbGFuY2UAAC0QDGhwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudBR0eXBlcyhGZWVEZXRhaWxzBBxCYWxhbmNlARgACAE0aW5jbHVzaW9uX2ZlZTEQAXRPcHRpb248SW5jbHVzaW9uRmVlPEJhbGFuY2U+PgABDHRpcBgBHEJhbGFuY2UAADEQBBhPcHRpb24EBFQBNRABCBBOb25lAAAAEFNvbWUEADUQAAABAAA1EAxocGFsbGV0X3RyYW5zYWN0aW9uX3BheW1lbnQUdHlwZXMwSW5jbHVzaW9uRmVlBBxCYWxhbmNlARgADAEgYmFzZV9mZWUYARxCYWxhbmNlAAEcbGVuX2ZlZRgBHEJhbGFuY2UAAUxhZGp1c3RlZF93ZWlnaHRfZmVlGAEcQmFsYW5jZQAAORAEGFJlc3VsdAgEVAE9EARFAUEQAQgIT2sEAD0QAAAAAAxFcnIEAEEQAAABAAA9EAAAAikHAEEQDEB4Y21fcnVudGltZV9hcGlzEGZlZXMURXJyb3IAARg0VW5pbXBsZW1lbnRlZAAAAGRWZXJzaW9uZWRDb252ZXJzaW9uRmFpbGVkAAEATFdlaWdodE5vdENvbXB1dGFibGUAAgBMVW5oYW5kbGVkWGNtVmVyc2lvbgADADRBc3NldE5vdEZvdW5kAAQAKFVucm91dGFibGUABQAARRAEGFJlc3VsdAgEVAEoBEUBQRABCAhPawQAKAAAAAAMRXJyBABBEAAAAQAASRAEGFJlc3VsdAgEVAEYBEUBQRABCAhPawQAGAAAAAAMRXJyBABBEAAAAQAATRAEGFJlc3VsdAgEVAH1BgRFAUEQAQgIT2sEAPUGAAAAAAxFcnIEAEEQAAABAABREAQYUmVzdWx0CARUAVUQBEUBbRABCAhPawQAVRAAAAAADEVycgQAbRAAAAEAAFUQDEB4Y21fcnVudGltZV9hcGlzHGRyeV9ydW5EQ2FsbERyeVJ1bkVmZmVjdHMEFEV2ZW50AVQAEAFAZXhlY3V0aW9uX3Jlc3VsdJkHAWhEaXNwYXRjaFJlc3VsdFdpdGhQb3N0SW5mbwABOGVtaXR0ZWRfZXZlbnRzWRABKFZlYzxFdmVudD4AASRsb2NhbF94Y21dEAFgT3B0aW9uPFZlcnNpb25lZFhjbTwoKT4+AAE4Zm9yd2FyZGVkX3hjbXNhEAG8VmVjPChWZXJzaW9uZWRMb2NhdGlvbiwgVmVjPFZlcnNpb25lZFhjbTwoKT4+KT4AAFkQAAACVABdEAQYT3B0aW9uBARUAfUFAQgQTm9uZQAAABBTb21lBAD1BQAAAQAAYRAAAAJlEABlEAAABAgtAWkQAGkQAAAC9QUAbRAMQHhjbV9ydW50aW1lX2FwaXMcZHJ5X3J1bhRFcnJvcgABCDRVbmltcGxlbWVudGVkAAAAZFZlcnNpb25lZENvbnZlcnNpb25GYWlsZWQAAQAAcRAEGFJlc3VsdAgEVAF1EARFAW0QAQgIT2sEAHUQAAAAAAxFcnIEAG0QAAABAAB1EAxAeGNtX3J1bnRpbWVfYXBpcxxkcnlfcnVuQFhjbURyeVJ1bkVmZmVjdHMEFEV2ZW50AVQADAFAZXhlY3V0aW9uX3Jlc3VsdGkIARxPdXRjb21lAAE4ZW1pdHRlZF9ldmVudHNZEAEoVmVjPEV2ZW50PgABOGZvcndhcmRlZF94Y21zYRABvFZlYzwoVmVyc2lvbmVkTG9jYXRpb24sIFZlYzxWZXJzaW9uZWRYY208KCk+Pik+AAB5EAQYUmVzdWx0CARUAQAERQF9EAEICE9rBAAAAAAAAAxFcnIEAH0QAAABAAB9EAxAeGNtX3J1bnRpbWVfYXBpcyxjb252ZXJzaW9ucxRFcnJvcgABCCxVbnN1cHBvcnRlZAAAAGRWZXJzaW9uZWRDb252ZXJzaW9uRmFpbGVkAAEAAIEQBBhSZXN1bHQIBFQBqQEERQGFCAEICE9rBACpAQAAAAAMRXJyBACFCAAAAQAAhRAEGE9wdGlvbgQEVAGFCAEIEE5vbmUAAAAQU29tZQQAhQgAAAEAAIkQAAAChQgAjRAIWHN0YWdpbmdfa3VzYW1hX3J1bnRpbWUwUnVudGltZUVycm9yAAHEGFN5c3RlbQQAtQgBcGZyYW1lX3N5c3RlbTo6RXJyb3I8UnVudGltZT4AAAAQQmFiZQQA9QgBbHBhbGxldF9iYWJlOjpFcnJvcjxSdW50aW1lPgABABxJbmRpY2VzBAD9CAF4cGFsbGV0X2luZGljZXM6OkVycm9yPFJ1bnRpbWU+AAMAIEJhbGFuY2VzBABNCQF8cGFsbGV0X2JhbGFuY2VzOjpFcnJvcjxSdW50aW1lPgAEABxTdGFraW5nBACtCQF4cGFsbGV0X3N0YWtpbmc6OkVycm9yPFJ1bnRpbWU+AAYAHFNlc3Npb24EANEJAXhwYWxsZXRfc2Vzc2lvbjo6RXJyb3I8UnVudGltZT4ACAAcR3JhbmRwYQQA4QkBeHBhbGxldF9ncmFuZHBhOjpFcnJvcjxSdW50aW1lPgAKACBUcmVhc3VyeQQAAQoBfHBhbGxldF90cmVhc3VyeTo6RXJyb3I8UnVudGltZT4AEgBAQ29udmljdGlvblZvdGluZwQANQoBoHBhbGxldF9jb252aWN0aW9uX3ZvdGluZzo6RXJyb3I8UnVudGltZT4AFAAkUmVmZXJlbmRhBAB9CgGAcGFsbGV0X3JlZmVyZW5kYTo6RXJyb3I8UnVudGltZT4AFQBQRmVsbG93c2hpcENvbGxlY3RpdmUEAJEKATkBcGFsbGV0X3JhbmtlZF9jb2xsZWN0aXZlOjpFcnJvcjxSdW50aW1lLCBwYWxsZXRfcmFua2VkX2NvbGxlY3RpdmU6OgpJbnN0YW5jZTE+ABYATEZlbGxvd3NoaXBSZWZlcmVuZGEEAKEKAfRwYWxsZXRfcmVmZXJlbmRhOjpFcnJvcjxSdW50aW1lLCBwYWxsZXRfcmVmZXJlbmRhOjpJbnN0YW5jZTI+ABcAJFdoaXRlbGlzdAQApQoBgHBhbGxldF93aGl0ZWxpc3Q6OkVycm9yPFJ1bnRpbWU+ACwAGENsYWltcwQAqQoBWGNsYWltczo6RXJyb3I8UnVudGltZT4AEwAcVXRpbGl0eQQArQoBeHBhbGxldF91dGlsaXR5OjpFcnJvcjxSdW50aW1lPgAYABxTb2NpZXR5BADxCgF4cGFsbGV0X3NvY2lldHk6OkVycm9yPFJ1bnRpbWU+ABoAIFJlY292ZXJ5BAABCwF8cGFsbGV0X3JlY292ZXJ5OjpFcnJvcjxSdW50aW1lPgAbABxWZXN0aW5nBAARCwF4cGFsbGV0X3Zlc3Rpbmc6OkVycm9yPFJ1bnRpbWU+ABwAJFNjaGVkdWxlcgQAKQsBgHBhbGxldF9zY2hlZHVsZXI6OkVycm9yPFJ1bnRpbWU+AB0AFFByb3h5BABNCwFwcGFsbGV0X3Byb3h5OjpFcnJvcjxSdW50aW1lPgAeACBNdWx0aXNpZwQAXQsBfHBhbGxldF9tdWx0aXNpZzo6RXJyb3I8UnVudGltZT4AHwAgUHJlaW1hZ2UEAH0LAXxwYWxsZXRfcHJlaW1hZ2U6OkVycm9yPFJ1bnRpbWU+ACAAIEJvdW50aWVzBACNCwF8cGFsbGV0X2JvdW50aWVzOjpFcnJvcjxSdW50aW1lPgAjADRDaGlsZEJvdW50aWVzBACZCwGUcGFsbGV0X2NoaWxkX2JvdW50aWVzOjpFcnJvcjxSdW50aW1lPgAoAGhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZQQAwQsB0HBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZTo6RXJyb3I8UnVudGltZT4AJQAMTmlzBADhCwFocGFsbGV0X25pczo6RXJyb3I8UnVudGltZT4AJgBYTmlzQ291bnRlcnBhcnRCYWxhbmNlcwQA+QsB7HBhbGxldF9iYWxhbmNlczo6RXJyb3I8UnVudGltZSwgcGFsbGV0X2JhbGFuY2VzOjpJbnN0YW5jZTI+AC0AJFZvdGVyTGlzdAQACQwB9HBhbGxldF9iYWdzX2xpc3Q6OkVycm9yPFJ1bnRpbWUsIHBhbGxldF9iYWdzX2xpc3Q6Okluc3RhbmNlMT4AJwA8Tm9taW5hdGlvblBvb2xzBABRDAGccGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkVycm9yPFJ1bnRpbWU+ACkALEZhc3RVbnN0YWtlBABlDAGMcGFsbGV0X2Zhc3RfdW5zdGFrZTo6RXJyb3I8UnVudGltZT4AKgBARGVsZWdhdGVkU3Rha2luZwQAcQwBoHBhbGxldF9kZWxlZ2F0ZWRfc3Rha2luZzo6RXJyb3I8UnVudGltZT4ALwA0Q29uZmlndXJhdGlvbgQAgQwBoHBhcmFjaGFpbnNfY29uZmlndXJhdGlvbjo6RXJyb3I8UnVudGltZT4AMwA0UGFyYUluY2x1c2lvbgQAoQwBkHBhcmFjaGFpbnNfaW5jbHVzaW9uOjpFcnJvcjxSdW50aW1lPgA1ADBQYXJhSW5oZXJlbnQEALkMAaRwYXJhY2hhaW5zX3BhcmFzX2luaGVyZW50OjpFcnJvcjxSdW50aW1lPgA2ABRQYXJhcwQAHQ0BgHBhcmFjaGFpbnNfcGFyYXM6OkVycm9yPFJ1bnRpbWU+ADgAEEhybXAEAE0NAXxwYXJhY2hhaW5zX2hybXA6OkVycm9yPFJ1bnRpbWU+ADwANFBhcmFzRGlzcHV0ZXMEAG0NAYxwYXJhY2hhaW5zX2Rpc3B1dGVzOjpFcnJvcjxSdW50aW1lPgA+ADRQYXJhc1NsYXNoaW5nBACBDQGMcGFyYWNoYWluc19zbGFzaGluZzo6RXJyb3I8UnVudGltZT4APwBoT25EZW1hbmRBc3NpZ25tZW50UHJvdmlkZXIEALENAZBwYXJhY2hhaW5zX29uX2RlbWFuZDo6RXJyb3I8UnVudGltZT4AQABoQ29yZXRpbWVBc3NpZ25tZW50UHJvdmlkZXIEAN0NAbBwYXJhY2hhaW5zX2Fzc2lnbmVyX2NvcmV0aW1lOjpFcnJvcjxSdW50aW1lPgBBACRSZWdpc3RyYXIEAOUNAXxwYXJhc19yZWdpc3RyYXI6OkVycm9yPFJ1bnRpbWU+AEYAFFNsb3RzBADtDQFUc2xvdHM6OkVycm9yPFJ1bnRpbWU+AEcAIEF1Y3Rpb25zBAABDgFgYXVjdGlvbnM6OkVycm9yPFJ1bnRpbWU+AEgAJENyb3dkbG9hbgQADQ4BZGNyb3dkbG9hbjo6RXJyb3I8UnVudGltZT4ASQAgQ29yZXRpbWUEABEOAWBjb3JldGltZTo6RXJyb3I8UnVudGltZT4ASgAkWGNtUGFsbGV0BABlDgFocGFsbGV0X3hjbTo6RXJyb3I8UnVudGltZT4AYwAwTWVzc2FnZVF1ZXVlBACBDgGQcGFsbGV0X21lc3NhZ2VfcXVldWU6OkVycm9yPFJ1bnRpbWU+AGQAJEFzc2V0UmF0ZQQAhQ4BhHBhbGxldF9hc3NldF9yYXRlOjpFcnJvcjxSdW50aW1lPgBlABRCZWVmeQQAkQ4BcHBhbGxldF9iZWVmeTo6RXJyb3I8UnVudGltZT4AyAAABQEYU3lzdGVtARhTeXN0ZW1IHEFjY291bnQBAQQCAAxBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACABOggVGhlIGZ1bGwgYWNjb3VudCBpbmZvcm1hdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIGFjY291bnQgSUQuOEV4dHJpbnNpY0NvdW50AAAQBAAEuCBUb3RhbCBleHRyaW5zaWNzIGNvdW50IGZvciB0aGUgY3VycmVudCBibG9jay5ASW5oZXJlbnRzQXBwbGllZAEAIAQABKQgV2hldGhlciBhbGwgaW5oZXJlbnRzIGhhdmUgYmVlbiBhcHBsaWVkLixCbG9ja1dlaWdodAEAJBgAAAAAAAAEiCBUaGUgY3VycmVudCB3ZWlnaHQgZm9yIHRoZSBibG9jay5AQWxsRXh0cmluc2ljc0xlbgAAEAQABEEBIFRvdGFsIGxlbmd0aCAoaW4gYnl0ZXMpIGZvciBhbGwgZXh0cmluc2ljcyBwdXQgdG9nZXRoZXIsIGZvciB0aGUgY3VycmVudCBibG9jay4kQmxvY2tIYXNoAQEEBRA0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJggTWFwIG9mIGJsb2NrIG51bWJlcnMgdG8gYmxvY2sgaGFzaGVzLjRFeHRyaW5zaWNEYXRhAQEEBRA4BAAEPQEgRXh0cmluc2ljcyBkYXRhIGZvciB0aGUgY3VycmVudCBibG9jayAobWFwcyBhbiBleHRyaW5zaWMncyBpbmRleCB0byBpdHMgZGF0YSkuGE51bWJlcgEAEBAAAAAABAkBIFRoZSBjdXJyZW50IGJsb2NrIG51bWJlciBiZWluZyBwcm9jZXNzZWQuIFNldCBieSBgZXhlY3V0ZV9ibG9ja2AuKFBhcmVudEhhc2gBADSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEcCBIYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jay4YRGlnZXN0AQA8BAAE8CBEaWdlc3Qgb2YgdGhlIGN1cnJlbnQgYmxvY2ssIGFsc28gcGFydCBvZiB0aGUgYmxvY2sgaGVhZGVyLhhFdmVudHMBAEwEABygIEV2ZW50cyBkZXBvc2l0ZWQgZm9yIHRoZSBjdXJyZW50IGJsb2NrLgAdASBOT1RFOiBUaGUgaXRlbSBpcyB1bmJvdW5kIGFuZCBzaG91bGQgdGhlcmVmb3JlIG5ldmVyIGJlIHJlYWQgb24gY2hhaW4u0CBJdCBjb3VsZCBvdGhlcndpc2UgaW5mbGF0ZSB0aGUgUG9WIHNpemUgb2YgYSBibG9jay4ALQEgRXZlbnRzIGhhdmUgYSBsYXJnZSBpbi1tZW1vcnkgc2l6ZS4gQm94IHRoZSBldmVudHMgdG8gbm90IGdvIG91dC1vZi1tZW1vcnn8IGp1c3QgaW4gY2FzZSBzb21lb25lIHN0aWxsIHJlYWRzIHRoZW0gZnJvbSB3aXRoaW4gdGhlIHJ1bnRpbWUuKEV2ZW50Q291bnQBABAQAAAAAAS4IFRoZSBudW1iZXIgb2YgZXZlbnRzIGluIHRoZSBgRXZlbnRzPFQ+YCBsaXN0LixFdmVudFRvcGljcwEBBAI0fQgEACglASBNYXBwaW5nIGJldHdlZW4gYSB0b3BpYyAocmVwcmVzZW50ZWQgYnkgVDo6SGFzaCkgYW5kIGEgdmVjdG9yIG9mIGluZGV4ZXOUIG9mIGV2ZW50cyBpbiB0aGUgYDxFdmVudHM8VD4+YCBsaXN0LgBRASBBbGwgdG9waWMgdmVjdG9ycyBoYXZlIGRldGVybWluaXN0aWMgc3RvcmFnZSBsb2NhdGlvbnMgZGVwZW5kaW5nIG9uIHRoZSB0b3BpYy4gVGhpc0UBIGFsbG93cyBsaWdodC1jbGllbnRzIHRvIGxldmVyYWdlIHRoZSBjaGFuZ2VzIHRyaWUgc3RvcmFnZSB0cmFja2luZyBtZWNoYW5pc20gYW5k5CBpbiBjYXNlIG9mIGNoYW5nZXMgZmV0Y2ggdGhlIGxpc3Qgb2YgZXZlbnRzIG9mIGludGVyZXN0LgBZASBUaGUgdmFsdWUgaGFzIHRoZSB0eXBlIGAoQmxvY2tOdW1iZXJGb3I8VD4sIEV2ZW50SW5kZXgpYCBiZWNhdXNlIGlmIHdlIHVzZWQgb25seSBqdXN0TQEgdGhlIGBFdmVudEluZGV4YCB0aGVuIGluIGNhc2UgaWYgdGhlIHRvcGljIGhhcyB0aGUgc2FtZSBjb250ZW50cyBvbiB0aGUgbmV4dCBibG9jawEBIG5vIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCB0aHVzIHRoZSBldmVudCBtaWdodCBiZSBsb3N0LkhMYXN0UnVudGltZVVwZ3JhZGUAAIEIBAAEVQEgU3RvcmVzIHRoZSBgc3BlY192ZXJzaW9uYCBhbmQgYHNwZWNfbmFtZWAgb2Ygd2hlbiB0aGUgbGFzdCBydW50aW1lIHVwZ3JhZGUgaGFwcGVuZWQuVFVwZ3JhZGVkVG9VMzJSZWZDb3VudAEAIAQABE0BIFRydWUgaWYgd2UgaGF2ZSB1cGdyYWRlZCBzbyB0aGF0IGB0eXBlIFJlZkNvdW50YCBpcyBgdTMyYC4gRmFsc2UgKGRlZmF1bHQpIGlmIG5vdC5gVXBncmFkZWRUb1RyaXBsZVJlZkNvdW50AQAgBAAIXQEgVHJ1ZSBpZiB3ZSBoYXZlIHVwZ3JhZGVkIHNvIHRoYXQgQWNjb3VudEluZm8gY29udGFpbnMgdGhyZWUgdHlwZXMgb2YgYFJlZkNvdW50YC4gRmFsc2VIIChkZWZhdWx0KSBpZiBub3QuOEV4ZWN1dGlvblBoYXNlAAB5CAQABIggVGhlIGV4ZWN1dGlvbiBwaGFzZSBvZiB0aGUgYmxvY2suREF1dGhvcml6ZWRVcGdyYWRlAACJCAQABLggYFNvbWVgIGlmIGEgY29kZSB1cGdyYWRlIGhhcyBiZWVuIGF1dGhvcml6ZWQuAWkBAVgYMEJsb2NrV2VpZ2h0c40IAQIHqBoKUwMACwAgSqnRARP//////////0Jzux0AAQsw83CPWAETo3A9CtejcL0BCwCY9z5dARP/////////vwEAAEJzux0AAQswe8P5zAETo3A9CtejcP0BCwAgSqnRARP//////////wEHAIhSanQTAAAAAAAAAEBCc7sdAAAAAATQIEJsb2NrICYgZXh0cmluc2ljcyB3ZWlnaHRzOiBiYXNlIHZhbHVlcyBhbmQgbGltaXRzLixCbG9ja0xlbmd0aJkIMAAAPAAAAFAAAABQAASoIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiBhIGJsb2NrIChpbiBieXRlcykuOEJsb2NrSGFzaENvdW50EBAAEAAABFUBIE1heGltdW0gbnVtYmVyIG9mIGJsb2NrIG51bWJlciB0byBibG9jayBoYXNoIG1hcHBpbmdzIHRvIGtlZXAgKG9sZGVzdCBwcnVuZWQgZmlyc3QpLiBEYldlaWdodKEIQEB4fQEAAAAAAOH1BQAAAAAECQEgVGhlIHdlaWdodCBvZiBydW50aW1lIGRhdGFiYXNlIG9wZXJhdGlvbnMgdGhlIHJ1bnRpbWUgY2FuIGludm9rZS4cVmVyc2lvbqUI7QQYa3VzYW1hNHBhcml0eS1rdXNhbWECAAAA4VEPAAAAAABcxR/x+j9dDMoBAAAA32rLaJkHYJsFAAAAN+OX/HyR9eQCAAAAQP461AH4lZoGAAAA0ryYl+7QjxUDAAAA94sni+U/RUwCAAAArywCl6I+bT0LAAAASeqvG1SKDLAFAAAAkdXfGLDSz1gCAAAAKl6SRlU5nmABAAAA7ZnFrLJe7fUDAAAAy8ol458UI4cCAAAAaHrUStN/A8IBAAAAqzwFcikf64sBAAAAvJ2JkE9bkj8BAAAAN8i7E1CpoqgEAAAA8/8U1atScFkDAAAAb/Uu6Fjmxb0BAAAAkbHIsWMo65IBAAAAn/tQWqc41pwBAAAAF6a8DQBirrMBAAAAGO9Yo7Z7p3ABAAAA+8V3uddH79YBAAAAGgAAAAEEhCBHZXQgdGhlIGNoYWluJ3MgaW4tY29kZSB2ZXJzaW9uLihTUzU4UHJlZml4XQEIAgAUqCBUaGUgZGVzaWduYXRlZCBTUzU4IHByZWZpeCBvZiB0aGlzIGNoYWluLgA5ASBUaGlzIHJlcGxhY2VzIHRoZSAic3M1OEZvcm1hdCIgcHJvcGVydHkgZGVjbGFyZWQgaW4gdGhlIGNoYWluIHNwZWMuIFJlYXNvbiBpczEBIHRoYXQgdGhlIHJ1bnRpbWUgc2hvdWxkIGtub3cgYWJvdXQgdGhlIHByZWZpeCBpbiBvcmRlciB0byBtYWtlIHVzZSBvZiBpdCBhc3AgYW4gaWRlbnRpZmllciBvZiB0aGUgY2hhaW4uAbUIAAAQQmFiZQEQQmFiZUQoRXBvY2hJbmRleAEAMCAAAAAAAAAAAARUIEN1cnJlbnQgZXBvY2ggaW5kZXguLEF1dGhvcml0aWVzAQC5CAQABGwgQ3VycmVudCBlcG9jaCBhdXRob3JpdGllcy4sR2VuZXNpc1Nsb3QBAIkBIAAAAAAAAAAACPggVGhlIHNsb3QgYXQgd2hpY2ggdGhlIGZpcnN0IGVwb2NoIGFjdHVhbGx5IHN0YXJ0ZWQuIFRoaXMgaXMgMJAgdW50aWwgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBjaGFpbi4sQ3VycmVudFNsb3QBAIkBIAAAAAAAAAAABFQgQ3VycmVudCBzbG90IG51bWJlci4oUmFuZG9tbmVzcwEABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACi4IFRoZSBlcG9jaCByYW5kb21uZXNzIGZvciB0aGUgKmN1cnJlbnQqIGVwb2NoLgAsICMgU2VjdXJpdHkABQEgVGhpcyBNVVNUIE5PVCBiZSB1c2VkIGZvciBnYW1ibGluZywgYXMgaXQgY2FuIGJlIGluZmx1ZW5jZWQgYnkgYfggbWFsaWNpb3VzIHZhbGlkYXRvciBpbiB0aGUgc2hvcnQgdGVybS4gSXQgTUFZIGJlIHVzZWQgaW4gbWFueRUBIGNyeXB0b2dyYXBoaWMgcHJvdG9jb2xzLCBob3dldmVyLCBzbyBsb25nIGFzIG9uZSByZW1lbWJlcnMgdGhhdCB0aGlzFQEgKGxpa2UgZXZlcnl0aGluZyBlbHNlIG9uLWNoYWluKSBpdCBpcyBwdWJsaWMuIEZvciBleGFtcGxlLCBpdCBjYW4gYmUFASB1c2VkIHdoZXJlIGEgbnVtYmVyIGlzIG5lZWRlZCB0aGF0IGNhbm5vdCBoYXZlIGJlZW4gY2hvc2VuIGJ5IGFuDQEgYWR2ZXJzYXJ5LCBmb3IgcHVycG9zZXMgc3VjaCBhcyBwdWJsaWMtY29pbiB6ZXJvLWtub3dsZWRnZSBwcm9vZnMuYFBlbmRpbmdFcG9jaENvbmZpZ0NoYW5nZQAAkQEEAARhASBQZW5kaW5nIGVwb2NoIGNvbmZpZ3VyYXRpb24gY2hhbmdlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIG5leHQgZXBvY2ggaXMgZW5hY3RlZC44TmV4dFJhbmRvbW5lc3MBAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEXCBOZXh0IGVwb2NoIHJhbmRvbW5lc3MuPE5leHRBdXRob3JpdGllcwEAuQgEAARgIE5leHQgZXBvY2ggYXV0aG9yaXRpZXMuMFNlZ21lbnRJbmRleAEAEBAAAAAAJHwgUmFuZG9tbmVzcyB1bmRlciBjb25zdHJ1Y3Rpb24uAPggV2UgbWFrZSBhIHRyYWRlLW9mZiBiZXR3ZWVuIHN0b3JhZ2UgYWNjZXNzZXMgYW5kIGxpc3QgbGVuZ3RoLgEBIFdlIHN0b3JlIHRoZSB1bmRlci1jb25zdHJ1Y3Rpb24gcmFuZG9tbmVzcyBpbiBzZWdtZW50cyBvZiB1cCB0b5QgYFVOREVSX0NPTlNUUlVDVElPTl9TRUdNRU5UX0xFTkdUSGAuAOwgT25jZSBhIHNlZ21lbnQgcmVhY2hlcyB0aGlzIGxlbmd0aCwgd2UgYmVnaW4gdGhlIG5leHQgb25lLgkBIFdlIHJlc2V0IGFsbCBzZWdtZW50cyBhbmQgcmV0dXJuIHRvIGAwYCBhdCB0aGUgYmVnaW5uaW5nIG9mIGV2ZXJ5HCBlcG9jaC5EVW5kZXJDb25zdHJ1Y3Rpb24BAQQFEMUIBAAEFQEgVFdPWC1OT1RFOiBgU2VnbWVudEluZGV4YCBpcyBhbiBpbmNyZWFzaW5nIGludGVnZXIsIHNvIHRoaXMgaXMgb2theS4sSW5pdGlhbGl6ZWQAAM0IBAAIAQEgVGVtcG9yYXJ5IHZhbHVlIChjbGVhcmVkIGF0IGJsb2NrIGZpbmFsaXphdGlvbikgd2hpY2ggaXMgYFNvbWVgHQEgaWYgcGVyLWJsb2NrIGluaXRpYWxpemF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIGZvciBjdXJyZW50IGJsb2NrLkxBdXRob3JWcmZSYW5kb21uZXNzAQDpBwQAEBUBIFRoaXMgZmllbGQgc2hvdWxkIGFsd2F5cyBiZSBwb3B1bGF0ZWQgZHVyaW5nIGJsb2NrIHByb2Nlc3NpbmcgdW5sZXNzGQEgc2Vjb25kYXJ5IHBsYWluIHNsb3RzIGFyZSBlbmFibGVkICh3aGljaCBkb24ndCBjb250YWluIGEgVlJGIG91dHB1dCkuAEkBIEl0IGlzIHNldCBpbiBgb25fZmluYWxpemVgLCBiZWZvcmUgaXQgd2lsbCBjb250YWluIHRoZSB2YWx1ZSBmcm9tIHRoZSBsYXN0IGJsb2NrLihFcG9jaFN0YXJ0AQARAyAAAAAAAAAAABRdASBUaGUgYmxvY2sgbnVtYmVycyB3aGVuIHRoZSBsYXN0IGFuZCBjdXJyZW50IGVwb2NoIGhhdmUgc3RhcnRlZCwgcmVzcGVjdGl2ZWx5IGBOLTFgIGFuZBQgYE5gLkkBIE5PVEU6IFdlIHRyYWNrIHRoaXMgaXMgaW4gb3JkZXIgdG8gYW5ub3RhdGUgdGhlIGJsb2NrIG51bWJlciB3aGVuIGEgZ2l2ZW4gcG9vbCBvZlkBIGVudHJvcHkgd2FzIGZpeGVkIChpLmUuIGl0IHdhcyBrbm93biB0byBjaGFpbiBvYnNlcnZlcnMpLiBTaW5jZSBlcG9jaHMgYXJlIGRlZmluZWQgaW5ZASBzbG90cywgd2hpY2ggbWF5IGJlIHNraXBwZWQsIHRoZSBibG9jayBudW1iZXJzIG1heSBub3QgbGluZSB1cCB3aXRoIHRoZSBzbG90IG51bWJlcnMuIExhdGVuZXNzAQAQEAAAAAAU2CBIb3cgbGF0ZSB0aGUgY3VycmVudCBibG9jayBpcyBjb21wYXJlZCB0byBpdHMgcGFyZW50LgAVASBUaGlzIGVudHJ5IGlzIHBvcHVsYXRlZCBhcyBwYXJ0IG9mIGJsb2NrIGV4ZWN1dGlvbiBhbmQgaXMgY2xlYW5lZCB1cBEBIG9uIGJsb2NrIGZpbmFsaXphdGlvbi4gUXVlcnlpbmcgdGhpcyBzdG9yYWdlIGVudHJ5IG91dHNpZGUgb2YgYmxvY2uwIGV4ZWN1dGlvbiBjb250ZXh0IHNob3VsZCBhbHdheXMgeWllbGQgemVyby4sRXBvY2hDb25maWcAAOUIBAAIYQEgVGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBjdXJyZW50IGVwb2NoLiBTaG91bGQgbmV2ZXIgYmUgYE5vbmVgIGFzIGl0IGlzIGluaXRpYWxpemVkIGluJCBnZW5lc2lzLjxOZXh0RXBvY2hDb25maWcAAOUIBAAILQEgVGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBuZXh0IGVwb2NoLCBgTm9uZWAgaWYgdGhlIGNvbmZpZyB3aWxsIG5vdCBjaGFuZ2XoICh5b3UgY2FuIGZhbGxiYWNrIHRvIGBFcG9jaENvbmZpZ2AgaW5zdGVhZCBpbiB0aGF0IGNhc2UpLjRTa2lwcGVkRXBvY2hzAQDpCAQAICkBIEEgbGlzdCBvZiB0aGUgbGFzdCAxMDAgc2tpcHBlZCBlcG9jaHMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHNlc3Npb24gaW5kZXhwIHdoZW4gdGhlIGVwb2NoIHdhcyBza2lwcGVkLgAxASBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgdmFsaWRhdGluZyBlcXVpdm9jYXRpb24gcHJvb2ZzLiBBbiBlcXVpdm9jYXRpb24gcHJvb2Y1ASBtdXN0IGNvbnRhaW5zIGEga2V5LW93bmVyc2hpcCBwcm9vZiBmb3IgYSBnaXZlbiBzZXNzaW9uLCB0aGVyZWZvcmUgd2UgbmVlZCBhOQEgd2F5IHRvIHRpZSB0b2dldGhlciBzZXNzaW9ucyBhbmQgZXBvY2ggaW5kaWNlcywgaS5lLiB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoYXQpASBhIHZhbGlkYXRvciB3YXMgdGhlIG93bmVyIG9mIGEgZ2l2ZW4ga2V5IG9uIGEgZ2l2ZW4gc2Vzc2lvbiwgYW5kIHdoYXQgdGhlsCBhY3RpdmUgZXBvY2ggaW5kZXggd2FzIGR1cmluZyB0aGF0IHNlc3Npb24uAXkBABA0RXBvY2hEdXJhdGlvbjAgWAIAAAAAAAAM7CBUaGUgYW1vdW50IG9mIHRpbWUsIGluIHNsb3RzLCB0aGF0IGVhY2ggZXBvY2ggc2hvdWxkIGxhc3QuGQEgTk9URTogQ3VycmVudGx5IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBjaGFuZ2UgdGhlIGVwb2NoIGR1cmF0aW9uIGFmdGVyIQEgdGhlIGNoYWluIGhhcyBzdGFydGVkLiBBdHRlbXB0aW5nIHRvIGRvIHNvIHdpbGwgYnJpY2sgYmxvY2sgcHJvZHVjdGlvbi5ERXhwZWN0ZWRCbG9ja1RpbWUwIHAXAAAAAAAAFAUBIFRoZSBleHBlY3RlZCBhdmVyYWdlIGJsb2NrIHRpbWUgYXQgd2hpY2ggQkFCRSBzaG91bGQgYmUgY3JlYXRpbmcRASBibG9ja3MuIFNpbmNlIEJBQkUgaXMgcHJvYmFiaWxpc3RpYyBpdCBpcyBub3QgdHJpdmlhbCB0byBmaWd1cmUgb3V0BQEgd2hhdCB0aGUgZXhwZWN0ZWQgYXZlcmFnZSBibG9jayB0aW1lIHNob3VsZCBiZSBiYXNlZCBvbiB0aGUgc2xvdAkBIGR1cmF0aW9uIGFuZCB0aGUgc2VjdXJpdHkgcGFyYW1ldGVyIGBjYCAod2hlcmUgYDEgLSBjYCByZXByZXNlbnRzoCB0aGUgcHJvYmFiaWxpdHkgb2YgYSBzbG90IGJlaW5nIGVtcHR5KS44TWF4QXV0aG9yaXRpZXMQEKCGAQAEiCBNYXggbnVtYmVyIG9mIGF1dGhvcml0aWVzIGFsbG93ZWQ0TWF4Tm9taW5hdG9ycxAQAAIAAATUIFRoZSBtYXhpbXVtIG51bWJlciBvZiBub21pbmF0b3JzIGZvciBlYWNoIHZhbGlkYXRvci4B9QgBACRUaW1lc3RhbXABJFRpbWVzdGFtcAgMTm93AQAwIAAAAAAAAAAABKAgVGhlIGN1cnJlbnQgdGltZSBmb3IgdGhlIGN1cnJlbnQgYmxvY2suJERpZFVwZGF0ZQEAIAQAENggV2hldGhlciB0aGUgdGltZXN0YW1wIGhhcyBiZWVuIHVwZGF0ZWQgaW4gdGhpcyBibG9jay4AVQEgVGhpcyB2YWx1ZSBpcyB1cGRhdGVkIHRvIGB0cnVlYCB1cG9uIHN1Y2Nlc3NmdWwgc3VibWlzc2lvbiBvZiBhIHRpbWVzdGFtcCBieSBhIG5vZGUuRQEgSXQgaXMgdGhlbiBjaGVja2VkIGF0IHRoZSBlbmQgb2YgZWFjaCBibG9jayBleGVjdXRpb24gaW4gdGhlIGBvbl9maW5hbGl6ZWAgaG9vay4BnQEABDRNaW5pbXVtUGVyaW9kMCC4CwAAAAAAABiMIFRoZSBtaW5pbXVtIHBlcmlvZCBiZXR3ZWVuIGJsb2Nrcy4ATQEgQmUgYXdhcmUgdGhhdCB0aGlzIGlzIGRpZmZlcmVudCB0byB0aGUgKmV4cGVjdGVkKiBwZXJpb2QgdGhhdCB0aGUgYmxvY2sgcHJvZHVjdGlvbkkBIGFwcGFyYXR1cyBwcm92aWRlcy4gWW91ciBjaG9zZW4gY29uc2Vuc3VzIHN5c3RlbSB3aWxsIGdlbmVyYWxseSB3b3JrIHdpdGggdGhpcyB0b2EBIGRldGVybWluZSBhIHNlbnNpYmxlIGJsb2NrIHRpbWUuIEZvciBleGFtcGxlLCBpbiB0aGUgQXVyYSBwYWxsZXQgaXQgd2lsbCBiZSBkb3VibGUgdGhpc3AgcGVyaW9kIG9uIGRlZmF1bHQgc2V0dGluZ3MuAAIAHEluZGljZXMBHEluZGljZXMEIEFjY291bnRzAAEEAhD5CAQABIggVGhlIGxvb2t1cCBmcm9tIGluZGV4IHRvIGFjY291bnQuAaEBAXwEHERlcG9zaXQYQDRN0sIHAAAAAAAAAAAAAAAErCBUaGUgZGVwb3NpdCBuZWVkZWQgZm9yIHJlc2VydmluZyBhbiBpbmRleC4B/QgDACBCYWxhbmNlcwEgQmFsYW5jZXMcNFRvdGFsSXNzdWFuY2UBABhAAAAAAAAAAAAAAAAAAAAAAASYIFRoZSB0b3RhbCB1bml0cyBpc3N1ZWQgaW4gdGhlIHN5c3RlbS5ASW5hY3RpdmVJc3N1YW5jZQEAGEAAAAAAAAAAAAAAAAAAAAAABAkBIFRoZSB0b3RhbCB1bml0cyBvZiBvdXRzdGFuZGluZyBkZWFjdGl2YXRlZCBiYWxhbmNlIGluIHRoZSBzeXN0ZW0uHEFjY291bnQBAQQCABQBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBgCQEgVGhlIEJhbGFuY2VzIHBhbGxldCBleGFtcGxlIG9mIHN0b3JpbmcgdGhlIGJhbGFuY2Ugb2YgYW4gYWNjb3VudC4AKCAjIEV4YW1wbGUANCBgYGBub2NvbXBpbGWwICBpbXBsIHBhbGxldF9iYWxhbmNlczo6Q29uZmlnIGZvciBSdW50aW1lIHsZAiAgICB0eXBlIEFjY291bnRTdG9yZSA9IFN0b3JhZ2VNYXBTaGltPFNlbGY6OkFjY291bnQ8UnVudGltZT4sIGZyYW1lX3N5c3RlbTo6UHJvdmlkZXI8UnVudGltZT4sIEFjY291bnRJZCwgU2VsZjo6QWNjb3VudERhdGE8QmFsYW5jZT4+DCAgfRAgYGBgABUBIFlvdSBjYW4gYWxzbyBzdG9yZSB0aGUgYmFsYW5jZSBvZiBhbiBhY2NvdW50IGluIHRoZSBgU3lzdGVtYCBwYWxsZXQuACggIyBFeGFtcGxlADQgYGBgbm9jb21waWxlsCAgaW1wbCBwYWxsZXRfYmFsYW5jZXM6OkNvbmZpZyBmb3IgUnVudGltZSB7dCAgIHR5cGUgQWNjb3VudFN0b3JlID0gU3lzdGVtDCAgfRAgYGBgAFEBIEJ1dCB0aGlzIGNvbWVzIHdpdGggdHJhZGVvZmZzLCBzdG9yaW5nIGFjY291bnQgYmFsYW5jZXMgaW4gdGhlIHN5c3RlbSBwYWxsZXQgc3RvcmVzbQEgYGZyYW1lX3N5c3RlbWAgZGF0YSBhbG9uZ3NpZGUgdGhlIGFjY291bnQgZGF0YSBjb250cmFyeSB0byBzdG9yaW5nIGFjY291bnQgYmFsYW5jZXMgaW4gdGhlKQEgYEJhbGFuY2VzYCBwYWxsZXQsIHdoaWNoIHVzZXMgYSBgU3RvcmFnZU1hcGAgdG8gc3RvcmUgYmFsYW5jZXMgZGF0YSBvbmx5LkEBIE5PVEU6IFRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBjYXNlIHRoYXQgdGhpcyBwYWxsZXQgaXMgdXNlZCB0byBzdG9yZSBiYWxhbmNlcy4UTG9ja3MBAQQCAAEJBAAQuCBBbnkgbGlxdWlkaXR5IGxvY2tzIG9uIHNvbWUgYWNjb3VudCBiYWxhbmNlcy4lASBOT1RFOiBTaG91bGQgb25seSBiZSBhY2Nlc3NlZCB3aGVuIHNldHRpbmcsIGNoYW5naW5nIGFuZCBmcmVlaW5nIGEgbG9jay4ArQEgVXNlIG9mIGxvY2tzIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIGZyZWV6ZXMuIFNlZSBgaHR0cHM6Ly9naXRodWIuY29tL3Bhcml0eXRlY2gvc3Vic3RyYXRlL3B1bGwvMTI5NTEvYCBSZXNlcnZlcwEBBAIAEQkEAAykIE5hbWVkIHJlc2VydmVzIG9uIHNvbWUgYWNjb3VudCBiYWxhbmNlcy4AsQEgVXNlIG9mIHJlc2VydmVzIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIGhvbGRzLiBTZWUgYGh0dHBzOi8vZ2l0aHViLmNvbS9wYXJpdHl0ZWNoL3N1YnN0cmF0ZS9wdWxsLzEyOTUxL2AUSG9sZHMBAQQCAB0JBAAEbCBIb2xkcyBvbiBhY2NvdW50IGJhbGFuY2VzLhxGcmVlemVzAQEEAgA5CQQABIggRnJlZXplIGxvY2tzIG9uIGFjY291bnQgYmFsYW5jZXMuAbEBAYAQSEV4aXN0ZW50aWFsRGVwb3NpdBhAVUPeEwAAAAAAAAAAAAAAACBBASBUaGUgbWluaW11bSBhbW91bnQgcmVxdWlyZWQgdG8ga2VlcCBhbiBhY2NvdW50IG9wZW4uIE1VU1QgQkUgR1JFQVRFUiBUSEFOIFpFUk8hAFkBIElmIHlvdSAqcmVhbGx5KiBuZWVkIGl0IHRvIGJlIHplcm8sIHlvdSBjYW4gZW5hYmxlIHRoZSBmZWF0dXJlIGBpbnNlY3VyZV96ZXJvX2VkYCBmb3JhASB0aGlzIHBhbGxldC4gSG93ZXZlciwgeW91IGRvIHNvIGF0IHlvdXIgb3duIHJpc2s6IHRoaXMgd2lsbCBvcGVuIHVwIGEgbWFqb3IgRG9TIHZlY3Rvci5ZASBJbiBjYXNlIHlvdSBoYXZlIG11bHRpcGxlIHNvdXJjZXMgb2YgcHJvdmlkZXIgcmVmZXJlbmNlcywgeW91IG1heSBhbHNvIGdldCB1bmV4cGVjdGVkjCBiZWhhdmlvdXIgaWYgeW91IHNldCB0aGlzIHRvIHplcm8uAPAgQm90dG9tIGxpbmU6IERvIHlvdXJzZWxmIGEgZmF2b3VyIGFuZCBtYWtlIGl0IGF0IGxlYXN0IG9uZSEgTWF4TG9ja3MQEDIAAAAQ9CBUaGUgbWF4aW11bSBudW1iZXIgb2YgbG9ja3MgdGhhdCBzaG91bGQgZXhpc3Qgb24gYW4gYWNjb3VudC7cIE5vdCBzdHJpY3RseSBlbmZvcmNlZCwgYnV0IHVzZWQgZm9yIHdlaWdodCBlc3RpbWF0aW9uLgCtASBVc2Ugb2YgbG9ja3MgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgZnJlZXplcy4gU2VlIGBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvcHVsbC8xMjk1MS9gLE1heFJlc2VydmVzEBAyAAAADA0BIFRoZSBtYXhpbXVtIG51bWJlciBvZiBuYW1lZCByZXNlcnZlcyB0aGF0IGNhbiBleGlzdCBvbiBhbiBhY2NvdW50LgCxASBVc2Ugb2YgcmVzZXJ2ZXMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgaG9sZHMuIFNlZSBgaHR0cHM6Ly9naXRodWIuY29tL3Bhcml0eXRlY2gvc3Vic3RyYXRlL3B1bGwvMTI5NTEvYChNYXhGcmVlemVzEBAIAAAABGEBIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbmRpdmlkdWFsIGZyZWV6ZSBsb2NrcyB0aGF0IGNhbiBleGlzdCBvbiBhbiBhY2NvdW50IGF0IGFueSB0aW1lLgFNCQQASFRyYW5zYWN0aW9uUGF5bWVudAFIVHJhbnNhY3Rpb25QYXltZW50CEROZXh0RmVlTXVsdGlwbGllcgEAPQdAAABkp7O24A0AAAAAAAAAAAA4U3RvcmFnZVZlcnNpb24BAFEJBAAAAAGIBGBPcGVyYXRpb25hbEZlZU11bHRpcGxpZXIIBAVUWQEgQSBmZWUgbXVsdGlwbGllciBmb3IgYE9wZXJhdGlvbmFsYCBleHRyaW5zaWNzIHRvIGNvbXB1dGUgInZpcnR1YWwgdGlwIiB0byBib29zdCB0aGVpciwgYHByaW9yaXR5YABRASBUaGlzIHZhbHVlIGlzIG11bHRpcGxpZWQgYnkgdGhlIGBmaW5hbF9mZWVgIHRvIG9idGFpbiBhICJ2aXJ0dWFsIHRpcCIgdGhhdCBpcyBsYXRlcvQgYWRkZWQgdG8gYSB0aXAgY29tcG9uZW50IGluIHJlZ3VsYXIgYHByaW9yaXR5YCBjYWxjdWxhdGlvbnMuTQEgSXQgbWVhbnMgdGhhdCBhIGBOb3JtYWxgIHRyYW5zYWN0aW9uIGNhbiBmcm9udC1ydW4gYSBzaW1pbGFybHktc2l6ZWQgYE9wZXJhdGlvbmFsYEEBIGV4dHJpbnNpYyAod2l0aCBubyB0aXApLCBieSBpbmNsdWRpbmcgYSB0aXAgdmFsdWUgZ3JlYXRlciB0aGFuIHRoZSB2aXJ0dWFsIHRpcC4APCBgYGBydXN0LGlnbm9yZUAgLy8gRm9yIGBOb3JtYWxgjCBsZXQgcHJpb3JpdHkgPSBwcmlvcml0eV9jYWxjKHRpcCk7AFQgLy8gRm9yIGBPcGVyYXRpb25hbGARASBsZXQgdmlydHVhbF90aXAgPSAoaW5jbHVzaW9uX2ZlZSArIHRpcCkgKiBPcGVyYXRpb25hbEZlZU11bHRpcGxpZXI7xCBsZXQgcHJpb3JpdHkgPSBwcmlvcml0eV9jYWxjKHRpcCArIHZpcnR1YWxfdGlwKTsQIGBgYABRASBOb3RlIHRoYXQgc2luY2Ugd2UgdXNlIGBmaW5hbF9mZWVgIHRoZSBtdWx0aXBsaWVyIGFwcGxpZXMgYWxzbyB0byB0aGUgcmVndWxhciBgdGlwYF0BIHNlbnQgd2l0aCB0aGUgdHJhbnNhY3Rpb24uIFNvLCBub3Qgb25seSBkb2VzIHRoZSB0cmFuc2FjdGlvbiBnZXQgYSBwcmlvcml0eSBidW1wIGJhc2VkYQEgb24gdGhlIGBpbmNsdXNpb25fZmVlYCwgYnV0IHdlIGFsc28gYW1wbGlmeSB0aGUgaW1wYWN0IG9mIHRpcHMgYXBwbGllZCB0byBgT3BlcmF0aW9uYWxgOCB0cmFuc2FjdGlvbnMuACEAKEF1dGhvcnNoaXABKEF1dGhvcnNoaXAEGEF1dGhvcgAAAAQABGQgQXV0aG9yIG9mIGN1cnJlbnQgYmxvY2suAAAAAAUAHFN0YWtpbmcBHFN0YWtpbmesOFZhbGlkYXRvckNvdW50AQAQEAAAAAAEnCBUaGUgaWRlYWwgbnVtYmVyIG9mIGFjdGl2ZSB2YWxpZGF0b3JzLlRNaW5pbXVtVmFsaWRhdG9yQ291bnQBABAQAAAAAARBASBNaW5pbXVtIG51bWJlciBvZiBzdGFraW5nIHBhcnRpY2lwYW50cyBiZWZvcmUgZW1lcmdlbmN5IGNvbmRpdGlvbnMgYXJlIGltcG9zZWQuNEludnVsbmVyYWJsZXMBALUBBAAMWQEgQW55IHZhbGlkYXRvcnMgdGhhdCBtYXkgbmV2ZXIgYmUgc2xhc2hlZCBvciBmb3JjaWJseSBraWNrZWQuIEl0J3MgYSBWZWMgc2luY2UgdGhleSdyZU0BIGVhc3kgdG8gaW5pdGlhbGl6ZSBhbmQgdGhlIHBlcmZvcm1hbmNlIGhpdCBpcyBtaW5pbWFsICh3ZSBleHBlY3Qgbm8gbW9yZSB0aGFuIGZvdXKsIGludnVsbmVyYWJsZXMpIGFuZCByZXN0cmljdGVkIHRvIHRlc3RuZXRzLhhCb25kZWQAAQQFAAAEAAwBASBNYXAgZnJvbSBhbGwgbG9ja2VkICJzdGFzaCIgYWNjb3VudHMgdG8gdGhlIGNvbnRyb2xsZXIgYWNjb3VudC4A0CBUV09YLU5PVEU6IFNBRkUgc2luY2UgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC5ATWluTm9taW5hdG9yQm9uZAEAGEAAAAAAAAAAAAAAAAAAAAAABCEBIFRoZSBtaW5pbXVtIGFjdGl2ZSBib25kIHRvIGJlY29tZSBhbmQgbWFpbnRhaW4gdGhlIHJvbGUgb2YgYSBub21pbmF0b3IuQE1pblZhbGlkYXRvckJvbmQBABhAAAAAAAAAAAAAAAAAAAAAAAQhASBUaGUgbWluaW11bSBhY3RpdmUgYm9uZCB0byBiZWNvbWUgYW5kIG1haW50YWluIHRoZSByb2xlIG9mIGEgdmFsaWRhdG9yLkhNaW5pbXVtQWN0aXZlU3Rha2UBABhAAAAAAAAAAAAAAAAAAAAAAAQRASBUaGUgbWluaW11bSBhY3RpdmUgbm9taW5hdG9yIHN0YWtlIG9mIHRoZSBsYXN0IHN1Y2Nlc3NmdWwgZWxlY3Rpb24uNE1pbkNvbW1pc3Npb24BAJQQAAAAAAzoIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBjb21taXNzaW9uIHRoYXQgdmFsaWRhdG9ycyBjYW4gc2V0LgCAIElmIHNldCB0byBgMGAsIG5vIGxpbWl0IGV4aXN0cy4YTGVkZ2VyAAEEAgBVCQQAEEUBIE1hcCBmcm9tIGFsbCAodW5sb2NrZWQpICJjb250cm9sbGVyIiBhY2NvdW50cyB0byB0aGUgaW5mbyByZWdhcmRpbmcgdGhlIHN0YWtpbmcuAHUBIE5vdGU6IEFsbCB0aGUgcmVhZHMgYW5kIG11dGF0aW9ucyB0byB0aGlzIHN0b3JhZ2UgKk1VU1QqIGJlIGRvbmUgdGhyb3VnaCB0aGUgbWV0aG9kcyBleHBvc2Vk6CBieSBbYFN0YWtpbmdMZWRnZXJgXSB0byBlbnN1cmUgZGF0YSBhbmQgbG9jayBjb25zaXN0ZW5jeS4UUGF5ZWUAAQQFAJAEAAzkIFdoZXJlIHRoZSByZXdhcmQgcGF5bWVudCBzaG91bGQgYmUgbWFkZS4gS2V5ZWQgYnkgc3Rhc2guANAgVFdPWC1OT1RFOiBTQUZFIHNpbmNlIGBBY2NvdW50SWRgIGlzIGEgc2VjdXJlIGhhc2guKFZhbGlkYXRvcnMBAQQFAJgIAAAMRQEgVGhlIG1hcCBmcm9tICh3YW5uYWJlKSB2YWxpZGF0b3Igc3Rhc2gga2V5IHRvIHRoZSBwcmVmZXJlbmNlcyBvZiB0aGF0IHZhbGlkYXRvci4A0CBUV09YLU5PVEU6IFNBRkUgc2luY2UgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC5QQ291bnRlckZvclZhbGlkYXRvcnMBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcEhNYXhWYWxpZGF0b3JzQ291bnQAABAEAAwxASBUaGUgbWF4aW11bSB2YWxpZGF0b3IgY291bnQgYmVmb3JlIHdlIHN0b3AgYWxsb3dpbmcgbmV3IHZhbGlkYXRvcnMgdG8gam9pbi4A0CBXaGVuIHRoaXMgdmFsdWUgaXMgbm90IHNldCwgbm8gbGltaXRzIGFyZSBlbmZvcmNlZC4oTm9taW5hdG9ycwABBAUAXQkEAEx1ASBUaGUgbWFwIGZyb20gbm9taW5hdG9yIHN0YXNoIGtleSB0byB0aGVpciBub21pbmF0aW9uIHByZWZlcmVuY2VzLCBuYW1lbHkgdGhlIHZhbGlkYXRvcnMgdGhhdFggdGhleSB3aXNoIHRvIHN1cHBvcnQuADkBIE5vdGUgdGhhdCB0aGUga2V5cyBvZiB0aGlzIHN0b3JhZ2UgbWFwIG1pZ2h0IGJlY29tZSBub24tZGVjb2RhYmxlIGluIGNhc2UgdGhlLQEgYWNjb3VudCdzIFtgTm9taW5hdGlvbnNRdW90YTo6TWF4Tm9taW5hdGlvbnNgXSBjb25maWd1cmF0aW9uIGlzIGRlY3JlYXNlZC6QIEluIHRoaXMgcmFyZSBjYXNlLCB0aGVzZSBub21pbmF0b3JzZQEgYXJlIHN0aWxsIGV4aXN0ZW50IGluIHN0b3JhZ2UsIHRoZWlyIGtleSBpcyBjb3JyZWN0IGFuZCByZXRyaWV2YWJsZSAoaS5lLiBgY29udGFpbnNfa2V5YHEBIGluZGljYXRlcyB0aGF0IHRoZXkgZXhpc3QpLCBidXQgdGhlaXIgdmFsdWUgY2Fubm90IGJlIGRlY29kZWQuIFRoZXJlZm9yZSwgdGhlIG5vbi1kZWNvZGFibGVtASBub21pbmF0b3JzIHdpbGwgZWZmZWN0aXZlbHkgbm90LWV4aXN0LCB1bnRpbCB0aGV5IHJlLXN1Ym1pdCB0aGVpciBwcmVmZXJlbmNlcyBzdWNoIHRoYXQgaXQBASBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgbmV3bHkgc2V0IGBDb25maWc6Ok1heE5vbWluYXRpb25zYC4AYQEgVGhpcyBpbXBsaWVzIHRoYXQgYDo6aXRlcl9rZXlzKCkuY291bnQoKWAgYW5kIGA6Oml0ZXIoKS5jb3VudCgpYCBtaWdodCByZXR1cm4gZGlmZmVyZW50bQEgdmFsdWVzIGZvciB0aGlzIG1hcC4gTW9yZW92ZXIsIHRoZSBtYWluIGA6OmNvdW50KClgIGlzIGFsaWduZWQgd2l0aCB0aGUgZm9ybWVyLCBuYW1lbHkgdGhlbCBudW1iZXIgb2Yga2V5cyB0aGF0IGV4aXN0LgBtASBMYXN0bHksIGlmIGFueSBvZiB0aGUgbm9taW5hdG9ycyBiZWNvbWUgbm9uLWRlY29kYWJsZSwgdGhleSBjYW4gYmUgY2hpbGxlZCBpbW1lZGlhdGVseSB2aWG4IFtgQ2FsbDo6Y2hpbGxfb3RoZXJgXSBkaXNwYXRjaGFibGUgYnkgYW55b25lLgDQIFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLlBDb3VudGVyRm9yTm9taW5hdG9ycwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwOFZpcnR1YWxTdGFrZXJzAAEEBQCpAQQAGMggU3Rha2VycyB3aG9zZSBmdW5kcyBhcmUgbWFuYWdlZCBieSBvdGhlciBwYWxsZXRzLgB1ASBUaGlzIHBhbGxldCBkb2VzIG5vdCBhcHBseSBhbnkgbG9ja3Mgb24gdGhlbSwgdGhlcmVmb3JlIHRoZXkgYXJlIG9ubHkgdmlydHVhbGx5IGJvbmRlZC4gVGhleW0BIGFyZSBleHBlY3RlZCB0byBiZSBrZXlsZXNzIGFjY291bnRzIGFuZCBoZW5jZSBzaG91bGQgbm90IGJlIGFsbG93ZWQgdG8gbXV0YXRlIHRoZWlyIGxlZGdlcnEBIGRpcmVjdGx5IHZpYSB0aGlzIHBhbGxldC4gSW5zdGVhZCwgdGhlc2UgYWNjb3VudHMgYXJlIG1hbmFnZWQgYnkgb3RoZXIgcGFsbGV0cyBhbmQgYWNjZXNzZWQpASB2aWEgbG93IGxldmVsIGFwaXMuIFdlIGtlZXAgdHJhY2sgb2YgdGhlbSB0byBkbyBtaW5pbWFsIGludGVncml0eSBjaGVja3MuYENvdW50ZXJGb3JWaXJ0dWFsU3Rha2VycwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwSE1heE5vbWluYXRvcnNDb3VudAAAEAQADDEBIFRoZSBtYXhpbXVtIG5vbWluYXRvciBjb3VudCBiZWZvcmUgd2Ugc3RvcCBhbGxvd2luZyBuZXcgdmFsaWRhdG9ycyB0byBqb2luLgDQIFdoZW4gdGhpcyB2YWx1ZSBpcyBub3Qgc2V0LCBubyBsaW1pdHMgYXJlIGVuZm9yY2VkLihDdXJyZW50RXJhAAAQBAAQXCBUaGUgY3VycmVudCBlcmEgaW5kZXguAGUBIFRoaXMgaXMgdGhlIGxhdGVzdCBwbGFubmVkIGVyYSwgZGVwZW5kaW5nIG9uIGhvdyB0aGUgU2Vzc2lvbiBwYWxsZXQgcXVldWVzIHRoZSB2YWxpZGF0b3KAIHNldCwgaXQgbWlnaHQgYmUgYWN0aXZlIG9yIG5vdC4kQWN0aXZlRXJhAABlCQQAENggVGhlIGFjdGl2ZSBlcmEgaW5mb3JtYXRpb24sIGl0IGhvbGRzIGluZGV4IGFuZCBzdGFydC4AWQEgVGhlIGFjdGl2ZSBlcmEgaXMgdGhlIGVyYSBiZWluZyBjdXJyZW50bHkgcmV3YXJkZWQuIFZhbGlkYXRvciBzZXQgb2YgdGhpcyBlcmEgbXVzdCBiZawgZXF1YWwgdG8gW2BTZXNzaW9uSW50ZXJmYWNlOjp2YWxpZGF0b3JzYF0uVEVyYXNTdGFydFNlc3Npb25JbmRleAABBAUQEAQAEFUBIFRoZSBzZXNzaW9uIGluZGV4IGF0IHdoaWNoIHRoZSBlcmEgc3RhcnQgZm9yIHRoZSBsYXN0IFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLgBhASBOb3RlOiBUaGlzIHRyYWNrcyB0aGUgc3RhcnRpbmcgc2Vzc2lvbiAoaS5lLiBzZXNzaW9uIGluZGV4IHdoZW4gZXJhIHN0YXJ0IGJlaW5nIGFjdGl2ZSnwIGZvciB0aGUgZXJhcyBpbiBgW0N1cnJlbnRFcmEgLSBISVNUT1JZX0RFUFRILCBDdXJyZW50RXJhXWAuLEVyYXNTdGFrZXJzAQEIBQVtCXEJDAAAACB4IEV4cG9zdXJlIG9mIHZhbGlkYXRvciBhdCBlcmEuAGEBIFRoaXMgaXMga2V5ZWQgZmlyc3QgYnkgdGhlIGVyYSBpbmRleCB0byBhbGxvdyBidWxrIGRlbGV0aW9uIGFuZCB0aGVuIHRoZSBzdGFzaCBhY2NvdW50LgDMIElzIGl0IHJlbW92ZWQgYWZ0ZXIgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuQQEgSWYgc3Rha2VycyBoYXNuJ3QgYmVlbiBzZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCB0aGVuIGVtcHR5IGV4cG9zdXJlIGlzIHJldHVybmVkLgApASBOb3RlOiBEZXByZWNhdGVkIHNpbmNlIHYxNC4gVXNlIGBFcmFJbmZvYCBpbnN0ZWFkIHRvIHdvcmsgd2l0aCBleHBvc3VyZXMuTEVyYXNTdGFrZXJzT3ZlcnZpZXcAAQgFBW0JfQkEADC4IFN1bW1hcnkgb2YgdmFsaWRhdG9yIGV4cG9zdXJlIGF0IGEgZ2l2ZW4gZXJhLgBxASBUaGlzIGNvbnRhaW5zIHRoZSB0b3RhbCBzdGFrZSBpbiBzdXBwb3J0IG9mIHRoZSB2YWxpZGF0b3IgYW5kIHRoZWlyIG93biBzdGFrZS4gSW4gYWRkaXRpb24sdQEgaXQgY2FuIGFsc28gYmUgdXNlZCB0byBnZXQgdGhlIG51bWJlciBvZiBub21pbmF0b3JzIGJhY2tpbmcgdGhpcyB2YWxpZGF0b3IgYW5kIHRoZSBudW1iZXIgb2ZpASBleHBvc3VyZSBwYWdlcyB0aGV5IGFyZSBkaXZpZGVkIGludG8uIFRoZSBwYWdlIGNvdW50IGlzIHVzZWZ1bCB0byBkZXRlcm1pbmUgdGhlIG51bWJlciBvZqwgcGFnZXMgb2YgcmV3YXJkcyB0aGF0IG5lZWRzIHRvIGJlIGNsYWltZWQuAGEBIFRoaXMgaXMga2V5ZWQgZmlyc3QgYnkgdGhlIGVyYSBpbmRleCB0byBhbGxvdyBidWxrIGRlbGV0aW9uIGFuZCB0aGVuIHRoZSBzdGFzaCBhY2NvdW50LqwgU2hvdWxkIG9ubHkgYmUgYWNjZXNzZWQgdGhyb3VnaCBgRXJhSW5mb2AuAMwgSXMgaXQgcmVtb3ZlZCBhZnRlciBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy5BASBJZiBzdGFrZXJzIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gZW1wdHkgb3ZlcnZpZXcgaXMgcmV0dXJuZWQuSEVyYXNTdGFrZXJzQ2xpcHBlZAEBCAUFbQlxCQwAAABAmCBDbGlwcGVkIEV4cG9zdXJlIG9mIHZhbGlkYXRvciBhdCBlcmEuAGUBIE5vdGU6IFRoaXMgaXMgZGVwcmVjYXRlZCwgc2hvdWxkIGJlIHVzZWQgYXMgcmVhZC1vbmx5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4xASBOZXcgYEV4cG9zdXJlYHMgYXJlIHN0b3JlZCBpbiBhIHBhZ2VkIG1hbm5lciBpbiBgRXJhc1N0YWtlcnNQYWdlZGAgaW5zdGVhZC4AWQEgVGhpcyBpcyBzaW1pbGFyIHRvIFtgRXJhc1N0YWtlcnNgXSBidXQgbnVtYmVyIG9mIG5vbWluYXRvcnMgZXhwb3NlZCBpcyByZWR1Y2VkIHRvIHRoZaggYFQ6Ok1heEV4cG9zdXJlUGFnZVNpemVgIGJpZ2dlc3Qgc3Rha2Vycy4dASAoTm90ZTogdGhlIGZpZWxkIGB0b3RhbGAgYW5kIGBvd25gIG9mIHRoZSBleHBvc3VyZSByZW1haW5zIHVuY2hhbmdlZCku9CBUaGlzIGlzIHVzZWQgdG8gbGltaXQgdGhlIGkvbyBjb3N0IGZvciB0aGUgbm9taW5hdG9yIHBheW91dC4AXQEgVGhpcyBpcyBrZXllZCBmaXN0IGJ5IHRoZSBlcmEgaW5kZXggdG8gYWxsb3cgYnVsayBkZWxldGlvbiBhbmQgdGhlbiB0aGUgc3Rhc2ggYWNjb3VudC4AzCBJdCBpcyByZW1vdmVkIGFmdGVyIFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLkEBIElmIHN0YWtlcnMgaGFzbid0IGJlZW4gc2V0IG9yIGhhcyBiZWVuIHJlbW92ZWQgdGhlbiBlbXB0eSBleHBvc3VyZSBpcyByZXR1cm5lZC4AKQEgTm90ZTogRGVwcmVjYXRlZCBzaW5jZSB2MTQuIFVzZSBgRXJhSW5mb2AgaW5zdGVhZCB0byB3b3JrIHdpdGggZXhwb3N1cmVzLkBFcmFzU3Rha2Vyc1BhZ2VkAAEMBQUFgQmFCQQAGMAgUGFnaW5hdGVkIGV4cG9zdXJlIG9mIGEgdmFsaWRhdG9yIGF0IGdpdmVuIGVyYS4AcQEgVGhpcyBpcyBrZXllZCBmaXJzdCBieSB0aGUgZXJhIGluZGV4IHRvIGFsbG93IGJ1bGsgZGVsZXRpb24sIHRoZW4gc3Rhc2ggYWNjb3VudCBhbmQgZmluYWxsedQgdGhlIHBhZ2UuIFNob3VsZCBvbmx5IGJlIGFjY2Vzc2VkIHRocm91Z2ggYEVyYUluZm9gLgDUIFRoaXMgaXMgY2xlYXJlZCBhZnRlciBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy44Q2xhaW1lZFJld2FyZHMBAQgFBW0JyQEEABjcIEhpc3Rvcnkgb2YgY2xhaW1lZCBwYWdlZCByZXdhcmRzIGJ5IGVyYSBhbmQgdmFsaWRhdG9yLgBpASBUaGlzIGlzIGtleWVkIGJ5IGVyYSBhbmQgdmFsaWRhdG9yIHN0YXNoIHdoaWNoIG1hcHMgdG8gdGhlIHNldCBvZiBwYWdlIGluZGV4ZXMgd2hpY2ggaGF2ZTggYmVlbiBjbGFpbWVkLgDMIEl0IGlzIHJlbW92ZWQgYWZ0ZXIgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuSEVyYXNWYWxpZGF0b3JQcmVmcwEBCAUFbQmYCAAAFBEBIFNpbWlsYXIgdG8gYEVyYXNTdGFrZXJzYCwgdGhpcyBob2xkcyB0aGUgcHJlZmVyZW5jZXMgb2YgdmFsaWRhdG9ycy4AYQEgVGhpcyBpcyBrZXllZCBmaXJzdCBieSB0aGUgZXJhIGluZGV4IHRvIGFsbG93IGJ1bGsgZGVsZXRpb24gYW5kIHRoZW4gdGhlIHN0YXNoIGFjY291bnQuAMwgSXMgaXQgcmVtb3ZlZCBhZnRlciBbYENvbmZpZzo6SGlzdG9yeURlcHRoYF0gZXJhcy5MRXJhc1ZhbGlkYXRvclJld2FyZAABBAUQGAQADC0BIFRoZSB0b3RhbCB2YWxpZGF0b3IgZXJhIHBheW91dCBmb3IgdGhlIGxhc3QgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuACEBIEVyYXMgdGhhdCBoYXZlbid0IGZpbmlzaGVkIHlldCBvciBoYXMgYmVlbiByZW1vdmVkIGRvZXNuJ3QgaGF2ZSByZXdhcmQuQEVyYXNSZXdhcmRQb2ludHMBAQQFEIkJFAAAAAAACNAgUmV3YXJkcyBmb3IgdGhlIGxhc3QgW2BDb25maWc6Okhpc3RvcnlEZXB0aGBdIGVyYXMuJQEgSWYgcmV3YXJkIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gMCByZXdhcmQgaXMgcmV0dXJuZWQuOEVyYXNUb3RhbFN0YWtlAQEEBRAYQAAAAAAAAAAAAAAAAAAAAAAIEQEgVGhlIHRvdGFsIGFtb3VudCBzdGFrZWQgZm9yIHRoZSBsYXN0IFtgQ29uZmlnOjpIaXN0b3J5RGVwdGhgXSBlcmFzLh0BIElmIHRvdGFsIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gMCBzdGFrZSBpcyByZXR1cm5lZC4gRm9yY2VFcmEBAKAEAARUIE1vZGUgb2YgZXJhIGZvcmNpbmcuQE1heFN0YWtlZFJld2FyZHMAAMUBBAAMGQEgTWF4aW11bSBzdGFrZWQgcmV3YXJkcywgaS5lLiB0aGUgcGVyY2VudGFnZSBvZiB0aGUgZXJhIGluZmxhdGlvbiB0aGF0bCBpcyB1c2VkIGZvciBzdGFrZSByZXdhcmRzLqwgU2VlIFtFcmEgcGF5b3V0XSguL2luZGV4Lmh0bWwjZXJhLXBheW91dCkuTFNsYXNoUmV3YXJkRnJhY3Rpb24BAJQQAAAAAAz4IFRoZSBwZXJjZW50YWdlIG9mIHRoZSBzbGFzaCB0aGF0IGlzIGRpc3RyaWJ1dGVkIHRvIHJlcG9ydGVycy4A5CBUaGUgcmVzdCBvZiB0aGUgc2xhc2hlZCB2YWx1ZSBpcyBoYW5kbGVkIGJ5IHRoZSBgU2xhc2hgLkxDYW5jZWxlZFNsYXNoUGF5b3V0AQAYQAAAAAAAAAAAAAAAAAAAAAAIFQEgVGhlIGFtb3VudCBvZiBjdXJyZW5jeSBnaXZlbiB0byByZXBvcnRlcnMgb2YgYSBzbGFzaCBldmVudCB3aGljaCB3YXPsIGNhbmNlbGVkIGJ5IGV4dHJhb3JkaW5hcnkgY2lyY3Vtc3RhbmNlcyAoZS5nLiBnb3Zlcm5hbmNlKS5AVW5hcHBsaWVkU2xhc2hlcwEBBAUQmQkEAATEIEFsbCB1bmFwcGxpZWQgc2xhc2hlcyB0aGF0IGFyZSBxdWV1ZWQgZm9yIGxhdGVyLihCb25kZWRFcmFzAQB9CAQAECUBIEEgbWFwcGluZyBmcm9tIHN0aWxsLWJvbmRlZCBlcmFzIHRvIHRoZSBmaXJzdCBzZXNzaW9uIGluZGV4IG9mIHRoYXQgZXJhLgDIIE11c3QgY29udGFpbnMgaW5mb3JtYXRpb24gZm9yIGVyYXMgZm9yIHRoZSByYW5nZTq8IGBbYWN0aXZlX2VyYSAtIGJvdW5kaW5nX2R1cmF0aW9uOyBhY3RpdmVfZXJhXWBMVmFsaWRhdG9yU2xhc2hJbkVyYQABCAUFbQmhCQQACEUBIEFsbCBzbGFzaGluZyBldmVudHMgb24gdmFsaWRhdG9ycywgbWFwcGVkIGJ5IGVyYSB0byB0aGUgaGlnaGVzdCBzbGFzaCBwcm9wb3J0aW9ucCBhbmQgc2xhc2ggdmFsdWUgb2YgdGhlIGVyYS5MTm9taW5hdG9yU2xhc2hJbkVyYQABCAUFbQkYBAAEYQEgQWxsIHNsYXNoaW5nIGV2ZW50cyBvbiBub21pbmF0b3JzLCBtYXBwZWQgYnkgZXJhIHRvIHRoZSBoaWdoZXN0IHNsYXNoIHZhbHVlIG9mIHRoZSBlcmEuNFNsYXNoaW5nU3BhbnMAAQQFAKUJBAAEjCBTbGFzaGluZyBzcGFucyBmb3Igc3Rhc2ggYWNjb3VudHMuJFNwYW5TbGFzaAEBBAWVCakJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACD0BIFJlY29yZHMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1heGltdW0gc2xhc2ggb2YgYSBzdGFzaCB3aXRoaW4gYSBzbGFzaGluZyBzcGFuLLggYXMgd2VsbCBhcyBob3cgbXVjaCByZXdhcmQgaGFzIGJlZW4gcGFpZCBvdXQuVEN1cnJlbnRQbGFubmVkU2Vzc2lvbgEAEBAAAAAADOggVGhlIGxhc3QgcGxhbm5lZCBzZXNzaW9uIHNjaGVkdWxlZCBieSB0aGUgc2Vzc2lvbiBwYWxsZXQuAHEBIFRoaXMgaXMgYmFzaWNhbGx5IGluIHN5bmMgd2l0aCB0aGUgY2FsbCB0byBbYHBhbGxldF9zZXNzaW9uOjpTZXNzaW9uTWFuYWdlcjo6bmV3X3Nlc3Npb25gXS5IRGlzYWJsZWRWYWxpZGF0b3JzAQDJAQQAHHUBIEluZGljZXMgb2YgdmFsaWRhdG9ycyB0aGF0IGhhdmUgb2ZmZW5kZWQgaW4gdGhlIGFjdGl2ZSBlcmEuIFRoZSBvZmZlbmRlcnMgYXJlIGRpc2FibGVkIGZvciBhaQEgd2hvbGUgZXJhLiBGb3IgdGhpcyByZWFzb24gdGhleSBhcmUga2VwdCBoZXJlIC0gb25seSBzdGFraW5nIHBhbGxldCBrbm93cyBhYm91dCBlcmFzLiBUaGVVASBpbXBsZW1lbnRvciBvZiBbYERpc2FibGluZ1N0cmF0ZWd5YF0gZGVmaW5lcyBpZiBhIHZhbGlkYXRvciBzaG91bGQgYmUgZGlzYWJsZWQgd2hpY2htASBpbXBsaWNpdGx5IG1lYW5zIHRoYXQgdGhlIGltcGxlbWVudG9yIGFsc28gY29udHJvbHMgdGhlIG1heCBudW1iZXIgb2YgZGlzYWJsZWQgdmFsaWRhdG9ycy4AbQEgVGhlIHZlYyBpcyBhbHdheXMga2VwdCBzb3J0ZWQgc28gdGhhdCB3ZSBjYW4gZmluZCB3aGV0aGVyIGEgZ2l2ZW4gdmFsaWRhdG9yIGhhcyBwcmV2aW91c2x5eCBvZmZlbmRlZCB1c2luZyBiaW5hcnkgc2VhcmNoLjhDaGlsbFRocmVzaG9sZAAAxQEEAAxRASBUaGUgdGhyZXNob2xkIGZvciB3aGVuIHVzZXJzIGNhbiBzdGFydCBjYWxsaW5nIGBjaGlsbF9vdGhlcmAgZm9yIG90aGVyIHZhbGlkYXRvcnMgL1kBIG5vbWluYXRvcnMuIFRoZSB0aHJlc2hvbGQgaXMgY29tcGFyZWQgdG8gdGhlIGFjdHVhbCBudW1iZXIgb2YgdmFsaWRhdG9ycyAvIG5vbWluYXRvcnMpASAoYENvdW50Rm9yKmApIGluIHRoZSBzeXN0ZW0gY29tcGFyZWQgdG8gdGhlIGNvbmZpZ3VyZWQgbWF4IChgTWF4KkNvdW50YCkuAb0BAYwYMEhpc3RvcnlEZXB0aBAQVAAAAFCMIE51bWJlciBvZiBlcmFzIHRvIGtlZXAgaW4gaGlzdG9yeS4A6CBGb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMga2VwdCBmb3IgZXJhcyBpbiBgW2N1cnJlbnRfZXJhIC0JASBIaXN0b3J5RGVwdGgsIGN1cnJlbnRfZXJhXWA6IGBFcmFzU3Rha2Vyc2AsIGBFcmFzU3Rha2Vyc0NsaXBwZWRgLAUBIGBFcmFzVmFsaWRhdG9yUHJlZnNgLCBgRXJhc1ZhbGlkYXRvclJld2FyZGAsIGBFcmFzUmV3YXJkUG9pbnRzYCxFASBgRXJhc1RvdGFsU3Rha2VgLCBgRXJhc1N0YXJ0U2Vzc2lvbkluZGV4YCwgYENsYWltZWRSZXdhcmRzYCwgYEVyYXNTdGFrZXJzUGFnZWRgLFwgYEVyYXNTdGFrZXJzT3ZlcnZpZXdgLgDkIE11c3QgYmUgbW9yZSB0aGFuIHRoZSBudW1iZXIgb2YgZXJhcyBkZWxheWVkIGJ5IHNlc3Npb24u+CBJLmUuIGFjdGl2ZSBlcmEgbXVzdCBhbHdheXMgYmUgaW4gaGlzdG9yeS4gSS5lLiBgYWN0aXZlX2VyYSA+xCBjdXJyZW50X2VyYSAtIGhpc3RvcnlfZGVwdGhgIG11c3QgYmUgZ3VhcmFudGVlZC4AEQEgSWYgbWlncmF0aW5nIGFuIGV4aXN0aW5nIHBhbGxldCBmcm9tIHN0b3JhZ2UgdmFsdWUgdG8gY29uZmlnIHZhbHVlLOwgdGhpcyBzaG91bGQgYmUgc2V0IHRvIHNhbWUgdmFsdWUgb3IgZ3JlYXRlciBhcyBpbiBzdG9yYWdlLgAVASBOb3RlOiBgSGlzdG9yeURlcHRoYCBpcyB1c2VkIGFzIHRoZSB1cHBlciBib3VuZCBmb3IgdGhlIGBCb3VuZGVkVmVjYC0BIGl0ZW0gYFN0YWtpbmdMZWRnZXIubGVnYWN5X2NsYWltZWRfcmV3YXJkc2AuIFNldHRpbmcgdGhpcyB2YWx1ZSBsb3dlciB0aGFu2CB0aGUgZXhpc3RpbmcgdmFsdWUgY2FuIGxlYWQgdG8gaW5jb25zaXN0ZW5jaWVzIGluIHRoZRUBIGBTdGFraW5nTGVkZ2VyYCBhbmQgd2lsbCBuZWVkIHRvIGJlIGhhbmRsZWQgcHJvcGVybHkgaW4gYSBtaWdyYXRpb24u8CBUaGUgdGVzdCBgcmVkdWNpbmdfaGlzdG9yeV9kZXB0aF9hYnJ1cHRgIHNob3dzIHRoaXMgZWZmZWN0LjhTZXNzaW9uc1BlckVyYRAQBgAAAARwIE51bWJlciBvZiBzZXNzaW9ucyBwZXIgZXJhLjxCb25kaW5nRHVyYXRpb24QEBwAAAAE5CBOdW1iZXIgb2YgZXJhcyB0aGF0IHN0YWtlZCBmdW5kcyBtdXN0IHJlbWFpbiBib25kZWQgZm9yLkhTbGFzaERlZmVyRHVyYXRpb24QEBsAAAAQAQEgTnVtYmVyIG9mIGVyYXMgdGhhdCBzbGFzaGVzIGFyZSBkZWZlcnJlZCBieSwgYWZ0ZXIgY29tcHV0YXRpb24uAA0BIFRoaXMgc2hvdWxkIGJlIGxlc3MgdGhhbiB0aGUgYm9uZGluZyBkdXJhdGlvbi4gU2V0IHRvIDAgaWYgc2xhc2hlcxUBIHNob3VsZCBiZSBhcHBsaWVkIGltbWVkaWF0ZWx5LCB3aXRob3V0IG9wcG9ydHVuaXR5IGZvciBpbnRlcnZlbnRpb24uTE1heEV4cG9zdXJlUGFnZVNpemUQEAACAAAssCBUaGUgbWF4aW11bSBzaXplIG9mIGVhY2ggYFQ6OkV4cG9zdXJlUGFnZWAuACkBIEFuIGBFeHBvc3VyZVBhZ2VgIGlzIHdlYWtseSBib3VuZGVkIHRvIGEgbWF4aW11bSBvZiBgTWF4RXhwb3N1cmVQYWdlU2l6ZWAwIG5vbWluYXRvcnMuACEBIEZvciBvbGRlciBub24tcGFnZWQgZXhwb3N1cmUsIGEgcmV3YXJkIHBheW91dCB3YXMgcmVzdHJpY3RlZCB0byB0aGUgdG9wIQEgYE1heEV4cG9zdXJlUGFnZVNpemVgIG5vbWluYXRvcnMuIFRoaXMgaXMgdG8gbGltaXQgdGhlIGkvbyBjb3N0IGZvciB0aGVIIG5vbWluYXRvciBwYXlvdXQuAFkBIE5vdGU6IGBNYXhFeHBvc3VyZVBhZ2VTaXplYCBpcyB1c2VkIHRvIGJvdW5kIGBDbGFpbWVkUmV3YXJkc2AgYW5kIGlzIHVuc2FmZSB0byByZWR1Y2WQIHdpdGhvdXQgaGFuZGxpbmcgaXQgaW4gYSBtaWdyYXRpb24uSE1heFVubG9ja2luZ0NodW5rcxAQIAAAACgFASBUaGUgbWF4aW11bSBudW1iZXIgb2YgYHVubG9ja2luZ2AgY2h1bmtzIGEgW2BTdGFraW5nTGVkZ2VyYF0gY2FuCQEgaGF2ZS4gRWZmZWN0aXZlbHkgZGV0ZXJtaW5lcyBob3cgbWFueSB1bmlxdWUgZXJhcyBhIHN0YWtlciBtYXkgYmU4IHVuYm9uZGluZyBpbi4A+CBOb3RlOiBgTWF4VW5sb2NraW5nQ2h1bmtzYCBpcyB1c2VkIGFzIHRoZSB1cHBlciBib3VuZCBmb3IgdGhlAQEgYEJvdW5kZWRWZWNgIGl0ZW0gYFN0YWtpbmdMZWRnZXIudW5sb2NraW5nYC4gU2V0dGluZyB0aGlzIHZhbHVlBQEgbG93ZXIgdGhhbiB0aGUgZXhpc3RpbmcgdmFsdWUgY2FuIGxlYWQgdG8gaW5jb25zaXN0ZW5jaWVzIGluIHRoZQkBIGBTdGFraW5nTGVkZ2VyYCBhbmQgd2lsbCBuZWVkIHRvIGJlIGhhbmRsZWQgcHJvcGVybHkgaW4gYSBydW50aW1lBQEgbWlncmF0aW9uLiBUaGUgdGVzdCBgcmVkdWNpbmdfbWF4X3VubG9ja2luZ19jaHVua3NfYWJydXB0YCBzaG93czQgdGhpcyBlZmZlY3QuAa0JBgAgT2ZmZW5jZXMBIE9mZmVuY2VzCBxSZXBvcnRzAAEEBTSxCQQABEkBIFRoZSBwcmltYXJ5IHN0cnVjdHVyZSB0aGF0IGhvbGRzIGFsbCBvZmZlbmNlIHJlY29yZHMga2V5ZWQgYnkgcmVwb3J0IGlkZW50aWZpZXJzLlhDb25jdXJyZW50UmVwb3J0c0luZGV4AQEIBQW5CTEDBAAEKQEgQSB2ZWN0b3Igb2YgcmVwb3J0cyBvZiB0aGUgc2FtZSBraW5kIHRoYXQgaGFwcGVuZWQgYXQgdGhlIHNhbWUgdGltZSBzbG90LgABpAAABwAoSGlzdG9yaWNhbAEoSGlzdG9yaWNhbAhISGlzdG9yaWNhbFNlc3Npb25zAAEEBRC9CQQABF0BIE1hcHBpbmcgZnJvbSBoaXN0b3JpY2FsIHNlc3Npb24gaW5kaWNlcyB0byBzZXNzaW9uLWRhdGEgcm9vdCBoYXNoIGFuZCB2YWxpZGF0b3IgY291bnQuLFN0b3JlZFJhbmdlAAARAwQABOQgVGhlIHJhbmdlIG9mIGhpc3RvcmljYWwgc2Vzc2lvbnMgd2Ugc3RvcmUuIFtmaXJzdCwgbGFzdCkAAAAAIgAcU2Vzc2lvbgEcU2Vzc2lvbhwoVmFsaWRhdG9ycwEAtQEEAAR8IFRoZSBjdXJyZW50IHNldCBvZiB2YWxpZGF0b3JzLjBDdXJyZW50SW5kZXgBABAQAAAAAAR4IEN1cnJlbnQgaW5kZXggb2YgdGhlIHNlc3Npb24uNFF1ZXVlZENoYW5nZWQBACAEAAg5ASBUcnVlIGlmIHRoZSB1bmRlcmx5aW5nIGVjb25vbWljIGlkZW50aXRpZXMgb3Igd2VpZ2h0aW5nIGJlaGluZCB0aGUgdmFsaWRhdG9yc6QgaGFzIGNoYW5nZWQgaW4gdGhlIHF1ZXVlZCB2YWxpZGF0b3Igc2V0LihRdWV1ZWRLZXlzAQDBCQQACD0BIFRoZSBxdWV1ZWQga2V5cyBmb3IgdGhlIG5leHQgc2Vzc2lvbi4gV2hlbiB0aGUgbmV4dCBzZXNzaW9uIGJlZ2lucywgdGhlc2Uga2V5c+Agd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgdmFsaWRhdG9yJ3Mgc2Vzc2lvbiBrZXlzLkhEaXNhYmxlZFZhbGlkYXRvcnMBAMkBBAAUgCBJbmRpY2VzIG9mIGRpc2FibGVkIHZhbGlkYXRvcnMuAD0BIFRoZSB2ZWMgaXMgYWx3YXlzIGtlcHQgc29ydGVkIHNvIHRoYXQgd2UgY2FuIGZpbmQgd2hldGhlciBhIGdpdmVuIHZhbGlkYXRvciBpcz0BIGRpc2FibGVkIHVzaW5nIGJpbmFyeSBzZWFyY2guIEl0IGdldHMgY2xlYXJlZCB3aGVuIGBvbl9zZXNzaW9uX2VuZGluZ2AgcmV0dXJuc2QgYSBuZXcgc2V0IG9mIGlkZW50aXRpZXMuIE5leHRLZXlzAAEEBQD9AQQABJwgVGhlIG5leHQgc2Vzc2lvbiBrZXlzIGZvciBhIHZhbGlkYXRvci4gS2V5T3duZXIAAQQFyQkABAAECQEgVGhlIG93bmVyIG9mIGEga2V5LiBUaGUga2V5IGlzIHRoZSBgS2V5VHlwZUlkYCArIHRoZSBlbmNvZGVkIGtleS4B+QEBrAAB0QkIABxHcmFuZHBhARxHcmFuZHBhHBRTdGF0ZQEA1QkEAASQIFN0YXRlIG9mIHRoZSBjdXJyZW50IGF1dGhvcml0eSBzZXQuNFBlbmRpbmdDaGFuZ2UAANkJBAAExCBQZW5kaW5nIGNoYW5nZTogKHNpZ25hbGVkIGF0LCBzY2hlZHVsZWQgY2hhbmdlKS4oTmV4dEZvcmNlZAAAEAQABLwgbmV4dCBibG9jayBudW1iZXIgd2hlcmUgd2UgY2FuIGZvcmNlIGEgY2hhbmdlLhxTdGFsbGVkAAARAwQABJAgYHRydWVgIGlmIHdlIGFyZSBjdXJyZW50bHkgc3RhbGxlZC4wQ3VycmVudFNldElkAQAwIAAAAAAAAAAACF0BIFRoZSBudW1iZXIgb2YgY2hhbmdlcyAoYm90aCBpbiB0ZXJtcyBvZiBrZXlzIGFuZCB1bmRlcmx5aW5nIGVjb25vbWljIHJlc3BvbnNpYmlsaXRpZXMpxCBpbiB0aGUgInNldCIgb2YgR3JhbmRwYSB2YWxpZGF0b3JzIGZyb20gZ2VuZXNpcy4wU2V0SWRTZXNzaW9uAAEEBTAQBAAoWQEgQSBtYXBwaW5nIGZyb20gZ3JhbmRwYSBzZXQgSUQgdG8gdGhlIGluZGV4IG9mIHRoZSAqbW9zdCByZWNlbnQqIHNlc3Npb24gZm9yIHdoaWNoIGl0c2ggbWVtYmVycyB3ZXJlIHJlc3BvbnNpYmxlLgBFASBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgdmFsaWRhdGluZyBlcXVpdm9jYXRpb24gcHJvb2ZzLiBBbiBlcXVpdm9jYXRpb24gcHJvb2YgbXVzdE0BIGNvbnRhaW5zIGEga2V5LW93bmVyc2hpcCBwcm9vZiBmb3IgYSBnaXZlbiBzZXNzaW9uLCB0aGVyZWZvcmUgd2UgbmVlZCBhIHdheSB0byB0aWVFASB0b2dldGhlciBzZXNzaW9ucyBhbmQgR1JBTkRQQSBzZXQgaWRzLCBpLmUuIHdlIG5lZWQgdG8gdmFsaWRhdGUgdGhhdCBhIHZhbGlkYXRvckEBIHdhcyB0aGUgb3duZXIgb2YgYSBnaXZlbiBrZXkgb24gYSBnaXZlbiBzZXNzaW9uLCBhbmQgd2hhdCB0aGUgYWN0aXZlIHNldCBJRCB3YXNUIGR1cmluZyB0aGF0IHNlc3Npb24uALggVFdPWC1OT1RFOiBgU2V0SWRgIGlzIG5vdCB1bmRlciB1c2VyIGNvbnRyb2wuLEF1dGhvcml0aWVzAQDdCQQABIQgVGhlIGN1cnJlbnQgbGlzdCBvZiBhdXRob3JpdGllcy4BFQIBsAw4TWF4QXV0aG9yaXRpZXMQEKCGAQAEXCBNYXggQXV0aG9yaXRpZXMgaW4gdXNlNE1heE5vbWluYXRvcnMQEAACAAAE1CBUaGUgbWF4aW11bSBudW1iZXIgb2Ygbm9taW5hdG9ycyBmb3IgZWFjaCB2YWxpZGF0b3IuWE1heFNldElkU2Vzc2lvbkVudHJpZXMwIKgAAAAAAAAAGDkBIFRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIHRvIGtlZXAgaW4gdGhlIHNldCBpZCB0byBzZXNzaW9uIGluZGV4IG1hcHBpbmcuADEBIFNpbmNlIHRoZSBgU2V0SWRTZXNzaW9uYCBtYXAgaXMgb25seSB1c2VkIGZvciB2YWxpZGF0aW5nIGVxdWl2b2NhdGlvbnMgdGhpcykBIHZhbHVlIHNob3VsZCByZWxhdGUgdG8gdGhlIGJvbmRpbmcgZHVyYXRpb24gb2Ygd2hhdGV2ZXIgc3Rha2luZyBzeXN0ZW0gaXM1ASBiZWluZyB1c2VkIChpZiBhbnkpLiBJZiBlcXVpdm9jYXRpb24gaGFuZGxpbmcgaXMgbm90IGVuYWJsZWQgdGhlbiB0aGlzIHZhbHVlNCBjYW4gYmUgemVyby4B4QkKAEhBdXRob3JpdHlEaXNjb3ZlcnkBSEF1dGhvcml0eURpc2NvdmVyeQgQS2V5cwEA5QkEAASMIEtleXMgb2YgdGhlIGN1cnJlbnQgYXV0aG9yaXR5IHNldC4gTmV4dEtleXMBAOUJBAAEgCBLZXlzIG9mIHRoZSBuZXh0IGF1dGhvcml0eSBzZXQuAAAAAAwAIFRyZWFzdXJ5ASBUcmVhc3VyeRg0UHJvcG9zYWxDb3VudAEAEBAAAAAABKQgTnVtYmVyIG9mIHByb3Bvc2FscyB0aGF0IGhhdmUgYmVlbiBtYWRlLiRQcm9wb3NhbHMAAQQFEO0JBAAEfCBQcm9wb3NhbHMgdGhhdCBoYXZlIGJlZW4gbWFkZS4sRGVhY3RpdmF0ZWQBABhAAAAAAAAAAAAAAAAAAAAAAATwIFRoZSBhbW91bnQgd2hpY2ggaGFzIGJlZW4gcmVwb3J0ZWQgYXMgaW5hY3RpdmUgdG8gQ3VycmVuY3kuJEFwcHJvdmFscwEA8QkEAAT4IFByb3Bvc2FsIGluZGljZXMgdGhhdCBoYXZlIGJlZW4gYXBwcm92ZWQgYnV0IG5vdCB5ZXQgYXdhcmRlZC4oU3BlbmRDb3VudAEAEBAAAAAABKQgVGhlIGNvdW50IG9mIHNwZW5kcyB0aGF0IGhhdmUgYmVlbiBtYWRlLhhTcGVuZHMAAQQFEPUJBAAE0CBTcGVuZHMgdGhhdCBoYXZlIGJlZW4gYXBwcm92ZWQgYW5kIGJlaW5nIHByb2Nlc3NlZC4BQQIBwBQsU3BlbmRQZXJpb2QQEIBRAQAEiCBQZXJpb2QgYmV0d2VlbiBzdWNjZXNzaXZlIHNwZW5kcy4QQnVybsECEAAAAAAEEQEgUGVyY2VudGFnZSBvZiBzcGFyZSBmdW5kcyAoaWYgYW55KSB0aGF0IGFyZSBidXJudCBwZXIgc3BlbmQgcGVyaW9kLiBQYWxsZXRJZP0JIHB5L3Ryc3J5BBkBIFRoZSB0cmVhc3VyeSdzIHBhbGxldCBpZCwgdXNlZCBmb3IgZGVyaXZpbmcgaXRzIHNvdmVyZWlnbiBhY2NvdW50IElELjBNYXhBcHByb3ZhbHMQEGQAAAAMFQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFwcHJvdmFscyB0aGF0IGNhbiB3YWl0IGluIHRoZSBzcGVuZGluZyBxdWV1ZS4ATQEgTk9URTogVGhpcyBwYXJhbWV0ZXIgaXMgYWxzbyB1c2VkIHdpdGhpbiB0aGUgQm91bnRpZXMgUGFsbGV0IGV4dGVuc2lvbiBpZiBlbmFibGVkLjBQYXlvdXRQZXJpb2QQEICXBgAEGQEgVGhlIHBlcmlvZCBkdXJpbmcgd2hpY2ggYW4gYXBwcm92ZWQgdHJlYXN1cnkgc3BlbmQgaGFzIHRvIGJlIGNsYWltZWQuAQEKEgBAQ29udmljdGlvblZvdGluZwFAQ29udmljdGlvblZvdGluZwgkVm90aW5nRm9yAQEIBQUFCgkK2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh1ASBBbGwgdm90aW5nIGZvciBhIHBhcnRpY3VsYXIgdm90ZXIgaW4gYSBwYXJ0aWN1bGFyIHZvdGluZyBjbGFzcy4gV2Ugc3RvcmUgdGhlIGJhbGFuY2UgZm9yIHRoZZwgbnVtYmVyIG9mIHZvdGVzIHRoYXQgd2UgaGF2ZSByZWNvcmRlZC40Q2xhc3NMb2Nrc0ZvcgEBBAUAKQoEAAxpASBUaGUgdm90aW5nIGNsYXNzZXMgd2hpY2ggaGF2ZSBhIG5vbi16ZXJvIGxvY2sgcmVxdWlyZW1lbnQgYW5kIHRoZSBsb2NrIGFtb3VudHMgd2hpY2ggdGhleW0BIHJlcXVpcmUuIFRoZSBhY3R1YWwgYW1vdW50IGxvY2tlZCBvbiBiZWhhbGYgb2YgdGhpcyBwYWxsZXQgc2hvdWxkIGFsd2F5cyBiZSB0aGUgbWF4aW11bSBvZiwgdGhpcyBsaXN0LgFJAgFNAQggTWF4Vm90ZXMQEAACAAAQ8CBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCB2b3RlcyBhbiBhY2NvdW50IG1heSBoYXZlLgBVASBBbHNvIHVzZWQgdG8gY29tcHV0ZSB3ZWlnaHQsIGFuIG92ZXJseSBsYXJnZSB2YWx1ZSBjYW4gbGVhZCB0byBleHRyaW5zaWNzIHdpdGggbGFyZ2XAIHdlaWdodCBlc3RpbWF0aW9uOiBzZWUgYGRlbGVnYXRlYCBmb3IgaW5zdGFuY2UuRFZvdGVMb2NraW5nUGVyaW9kEBDAiQEAEJAgVGhlIG1pbmltdW0gcGVyaW9kIG9mIHZvdGUgbG9ja2luZy4AZQEgSXQgc2hvdWxkIGJlIG5vIHNob3J0ZXIgdGhhbiBlbmFjdG1lbnQgcGVyaW9kIHRvIGVuc3VyZSB0aGF0IGluIHRoZSBjYXNlIG9mIGFuIGFwcHJvdmFsLEkBIHRob3NlIHN1Y2Nlc3NmdWwgdm90ZXJzIGFyZSBsb2NrZWQgaW50byB0aGUgY29uc2VxdWVuY2VzIHRoYXQgdGhlaXIgdm90ZXMgZW50YWlsLgE1ChQAJFJlZmVyZW5kYQEkUmVmZXJlbmRhFDxSZWZlcmVuZHVtQ291bnQBABAQAAAAAAQxASBUaGUgbmV4dCBmcmVlIHJlZmVyZW5kdW0gaW5kZXgsIGFrYSB0aGUgbnVtYmVyIG9mIHJlZmVyZW5kYSBzdGFydGVkIHNvIGZhci5EUmVmZXJlbmR1bUluZm9Gb3IAAQQCEDkKBAAEtCBJbmZvcm1hdGlvbiBjb25jZXJuaW5nIGFueSBnaXZlbiByZWZlcmVuZHVtLihUcmFja1F1ZXVlAQEEBV0BWQoEABBdASBUaGUgc29ydGVkIGxpc3Qgb2YgcmVmZXJlbmRhIHJlYWR5IHRvIGJlIGRlY2lkZWQgYnV0IG5vdCB5ZXQgYmVpbmcgZGVjaWRlZCwgb3JkZXJlZCBieXwgY29udmljdGlvbi13ZWlnaHRlZCBhcHByb3ZhbHMuAEEBIFRoaXMgc2hvdWxkIGJlIGVtcHR5IGlmIGBEZWNpZGluZ0NvdW50YCBpcyBsZXNzIHRoYW4gYFRyYWNrSW5mbzo6bWF4X2RlY2lkaW5nYC40RGVjaWRpbmdDb3VudAEBBAVdARAQAAAAAATEIFRoZSBudW1iZXIgb2YgcmVmZXJlbmRhIGJlaW5nIGRlY2lkZWQgY3VycmVudGx5LihNZXRhZGF0YU9mAAEEAhA0BAAYBQEgVGhlIG1ldGFkYXRhIGlzIGEgZ2VuZXJhbCBpbmZvcm1hdGlvbiBjb25jZXJuaW5nIHRoZSByZWZlcmVuZHVtLkkBIFRoZSBgSGFzaGAgcmVmZXJzIHRvIHRoZSBwcmVpbWFnZSBvZiB0aGUgYFByZWltYWdlc2AgcHJvdmlkZXIgd2hpY2ggY2FuIGJlIGEgSlNPToggZHVtcCBvciBJUEZTIGhhc2ggb2YgYSBKU09OIGZpbGUuAHUBIENvbnNpZGVyIGEgZ2FyYmFnZSBjb2xsZWN0aW9uIGZvciBhIG1ldGFkYXRhIG9mIGZpbmlzaGVkIHJlZmVyZW5kdW1zIHRvIGB1bnJlcXVlc3RgIChyZW1vdmUpRCBsYXJnZSBwcmVpbWFnZXMuAVUCAVkBFERTdWJtaXNzaW9uRGVwb3NpdBhAVU3SwgcAAAAAAAAAAAAAAAQ1ASBUaGUgbWluaW11bSBhbW91bnQgdG8gYmUgdXNlZCBhcyBhIGRlcG9zaXQgZm9yIGEgcHVibGljIHJlZmVyZW5kdW0gcHJvcG9zYWwuJE1heFF1ZXVlZBAQZAAAAATkIE1heGltdW0gc2l6ZSBvZiB0aGUgcmVmZXJlbmR1bSBxdWV1ZSBmb3IgYSBzaW5nbGUgdHJhY2suRFVuZGVjaWRpbmdUaW1lb3V0EBCAEwMACFUBIFRoZSBudW1iZXIgb2YgYmxvY2tzIGFmdGVyIHN1Ym1pc3Npb24gdGhhdCBhIHJlZmVyZW5kdW0gbXVzdCBiZWdpbiBiZWluZyBkZWNpZGVkIGJ5LuQgT25jZSB0aGlzIHBhc3NlcywgdGhlbiBhbnlvbmUgbWF5IGNhbmNlbCB0aGUgcmVmZXJlbmR1bS40QWxhcm1JbnRlcnZhbBAQAQAAAAxdASBRdWFudGl6YXRpb24gbGV2ZWwgZm9yIHRoZSByZWZlcmVuZHVtIHdha2V1cCBzY2hlZHVsZXIuIEEgaGlnaGVyIG51bWJlciB3aWxsIHJlc3VsdCBpbl0BIGZld2VyIHN0b3JhZ2UgcmVhZHMvd3JpdGVzIG5lZWRlZCBmb3Igc21hbGxlciB2b3RlcnMsIGJ1dCBhbHNvIHJlc3VsdCBpbiBkZWxheXMgdG8gdGhlVQEgYXV0b21hdGljIHJlZmVyZW5kdW0gc3RhdHVzIGNoYW5nZXMuIEV4cGxpY2l0IHNlcnZpY2luZyBpbnN0cnVjdGlvbnMgYXJlIHVuYWZmZWN0ZWQuGFRyYWNrc2UKGRdAAAAQcm9vdAEAAAAg0z8lptcLAAAAAAAAAAAAsAQAAIATAwBAOAAAQDgAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAAAAMqaOwAAAAAAZc0dAQBId2hpdGVsaXN0ZWRfY2FsbGVyZAAAAFDI7DYqLwEAAAAAAAAAAAAsAQAAgBMDAGQAAABkAAAAAuyXJRAAAAAAe1c8FwAAAABCOS8SAAAAAAIOAIQAAAAAANbmHwEAAAAAOWJ5AgAAAAACADx3aXNoX2Zvcl9jaGFuZ2UKAAAAoJDZbVReAgAAAAAAAAAAALAEAACAEwMAQDgAAGQAAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAADKmjsAAAAAAGXNHQoANHN0YWtpbmdfYWRtaW4KAAAAKGR2G5WXAAAAAAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////wsAJHRyZWFzdXJlcgoAAAAIFH4FUR4AAAAAAAAAAAAAsAQAAIATAwCAcAAAQDgAAAKQ1z4NAAAAAFdD3hMAAAAAVEPeEwAAAAAAAMqaOwAAAAAAZc0dDAAsbGVhc2VfYWRtaW4KAAAAKGR2G5WXAAAAAAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////w0AQGZlbGxvd3NoaXBfYWRtaW4KAAAAKGR2G5WXAAAAAAAAAAAAALAEAACAEwMACAcAAGQAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////w4ANGdlbmVyYWxfYWRtaW4KAAAAKGR2G5WXAAAAAAAAAAAAALAEAACAEwMACAcAAGQAAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAlmi9AIAAAAAoylrBQAAAAAua0r9/////w8ANGF1Y3Rpb25fYWRtaW4KAAAAKGR2G5WXAAAAAAAAAAAAALAEAACAEwMACAcAAGQAAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAlmi9AIAAAAAoylrBQAAAAAua0r9/////xQAUHJlZmVyZW5kdW1fY2FuY2VsbGVy6AMAAFDI7DYqLwEAAAAAAAAAAACwBAAAwIkBAAgHAABkAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////8VAERyZWZlcmVuZHVtX2tpbGxlcugDAACQ6Z8S0+sFAAAAAAAAAAAAsAQAAIATAwAIBwAAZAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////HgAwc21hbGxfdGlwcGVyyAAAAFVN0sIHAAAAAAAAAAAAAAAKAAAAwIkBAGQAAAAKAAAAAEmRSRUAZc0dAMqaOwL5uhgAAAAAACpNMQAAAAAAa1nn//////8fAChiaWdfdGlwcGVyZAAAAFIFN5xNAAAAAAAAAAAAAABkAAAAwIkBAFgCAABkAAAAAEmRSRUAZc0dAMqaOwJpTz8AAAAAADWWfQAAAAAA5TTB//////8gADRzbWFsbF9zcGVuZGVyMgAAADQ1JhoIAwAAAAAAAAAAAABgCQAAgBMDACAcAABAOAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////8hADhtZWRpdW1fc3BlbmRlcjIAAABoakw0EAYAAAAAAAAAAAAAYAkAAIATAwBAOAAAQDgAAABbAfYwAGXNHQDKmjsCEWHbAAAAAAC/0aoBAAAAACCXKv//////IgAsYmlnX3NwZW5kZXIyAAAA0NSYaCAMAAAAAAAAAAAAAGAJAACAEwMAgHAAAEA4AAAAAMqaOwBlzR0Aypo7AkE8sAEAAAAAdV00AwAAAABF0WX+/////wTgIEluZm9ybWF0aW9uIGNvbmNlcm5pbmcgdGhlIGRpZmZlcmVudCByZWZlcmVuZHVtIHRyYWNrcy4BfQoVAFBGZWxsb3dzaGlwQ29sbGVjdGl2ZQFQRmVsbG93c2hpcENvbGxlY3RpdmUYLE1lbWJlckNvdW50AQEEBV0BEBAAAAAACGkBIFRoZSBudW1iZXIgb2YgbWVtYmVycyBpbiB0aGUgY29sbGVjdGl2ZSB3aG8gaGF2ZSBhdCBsZWFzdCB0aGUgcmFuayBhY2NvcmRpbmcgdG8gdGhlIGluZGV4MCBvZiB0aGUgdmVjLhxNZW1iZXJzAAEEBQCBCgQABJwgVGhlIGN1cnJlbnQgbWVtYmVycyBvZiB0aGUgY29sbGVjdGl2ZS4kSWRUb0luZGV4AAEIBQWFChAEAARhASBUaGUgaW5kZXggb2YgZWFjaCByYW5rcydzIG1lbWJlciBpbnRvIHRoZSBncm91cCBvZiBtZW1iZXJzIHdobyBoYXZlIGF0IGxlYXN0IHRoYXQgcmFuay4kSW5kZXhUb0lkAAEIBQWJCgAEAAhdASBUaGUgbWVtYmVycyBpbiB0aGUgY29sbGVjdGl2ZSBieSBpbmRleC4gQWxsIGluZGljZXMgaW4gdGhlIHJhbmdlIGAwLi5NZW1iZXJDb3VudGAgd2lsbGUBIHJldHVybiBgU29tZWAsIGhvd2V2ZXIgYSBtZW1iZXIncyBpbmRleCBpcyBub3QgZ3VhcmFudGVlZCB0byByZW1haW4gdW5jaGFuZ2VkIG92ZXIgdGltZS4YVm90aW5nAAEIAgVtCYkHBAAEtCBWb3RlcyBvbiBhIGdpdmVuIHByb3Bvc2FsLCBpZiBpdCBpcyBvbmdvaW5nLjRWb3RpbmdDbGVhbnVwAAEEAhCNCgQAAAF9AgGFBwABkQoWAExGZWxsb3dzaGlwUmVmZXJlbmRhAUxGZWxsb3dzaGlwUmVmZXJlbmRhFDxSZWZlcmVuZHVtQ291bnQBABAQAAAAAAQxASBUaGUgbmV4dCBmcmVlIHJlZmVyZW5kdW0gaW5kZXgsIGFrYSB0aGUgbnVtYmVyIG9mIHJlZmVyZW5kYSBzdGFydGVkIHNvIGZhci5EUmVmZXJlbmR1bUluZm9Gb3IAAQQCEJUKBAAEtCBJbmZvcm1hdGlvbiBjb25jZXJuaW5nIGFueSBnaXZlbiByZWZlcmVuZHVtLihUcmFja1F1ZXVlAQEEBV0BnQoEABBdASBUaGUgc29ydGVkIGxpc3Qgb2YgcmVmZXJlbmRhIHJlYWR5IHRvIGJlIGRlY2lkZWQgYnV0IG5vdCB5ZXQgYmVpbmcgZGVjaWRlZCwgb3JkZXJlZCBieXwgY29udmljdGlvbi13ZWlnaHRlZCBhcHByb3ZhbHMuAEEBIFRoaXMgc2hvdWxkIGJlIGVtcHR5IGlmIGBEZWNpZGluZ0NvdW50YCBpcyBsZXNzIHRoYW4gYFRyYWNrSW5mbzo6bWF4X2RlY2lkaW5nYC40RGVjaWRpbmdDb3VudAEBBAVdARAQAAAAAATEIFRoZSBudW1iZXIgb2YgcmVmZXJlbmRhIGJlaW5nIGRlY2lkZWQgY3VycmVudGx5LihNZXRhZGF0YU9mAAEEAhA0BAAYBQEgVGhlIG1ldGFkYXRhIGlzIGEgZ2VuZXJhbCBpbmZvcm1hdGlvbiBjb25jZXJuaW5nIHRoZSByZWZlcmVuZHVtLkkBIFRoZSBgSGFzaGAgcmVmZXJzIHRvIHRoZSBwcmVpbWFnZSBvZiB0aGUgYFByZWltYWdlc2AgcHJvdmlkZXIgd2hpY2ggY2FuIGJlIGEgSlNPToggZHVtcCBvciBJUEZTIGhhc2ggb2YgYSBKU09OIGZpbGUuAHUBIENvbnNpZGVyIGEgZ2FyYmFnZSBjb2xsZWN0aW9uIGZvciBhIG1ldGFkYXRhIG9mIGZpbmlzaGVkIHJlZmVyZW5kdW1zIHRvIGB1bnJlcXVlc3RgIChyZW1vdmUpRCBsYXJnZSBwcmVpbWFnZXMuAYECAZEHFERTdWJtaXNzaW9uRGVwb3NpdBhAAAAAAAAAAAAAAAAAAAAAAAQ1ASBUaGUgbWluaW11bSBhbW91bnQgdG8gYmUgdXNlZCBhcyBhIGRlcG9zaXQgZm9yIGEgcHVibGljIHJlZmVyZW5kdW0gcHJvcG9zYWwuJE1heFF1ZXVlZBAQZAAAAATkIE1heGltdW0gc2l6ZSBvZiB0aGUgcmVmZXJlbmR1bSBxdWV1ZSBmb3IgYSBzaW5nbGUgdHJhY2suRFVuZGVjaWRpbmdUaW1lb3V0EBDAiQEACFUBIFRoZSBudW1iZXIgb2YgYmxvY2tzIGFmdGVyIHN1Ym1pc3Npb24gdGhhdCBhIHJlZmVyZW5kdW0gbXVzdCBiZWdpbiBiZWluZyBkZWNpZGVkIGJ5LuQgT25jZSB0aGlzIHBhc3NlcywgdGhlbiBhbnlvbmUgbWF5IGNhbmNlbCB0aGUgcmVmZXJlbmR1bS40QWxhcm1JbnRlcnZhbBAQAQAAAAxdASBRdWFudGl6YXRpb24gbGV2ZWwgZm9yIHRoZSByZWZlcmVuZHVtIHdha2V1cCBzY2hlZHVsZXIuIEEgaGlnaGVyIG51bWJlciB3aWxsIHJlc3VsdCBpbl0BIGZld2VyIHN0b3JhZ2UgcmVhZHMvd3JpdGVzIG5lZWRlZCBmb3Igc21hbGxlciB2b3RlcnMsIGJ1dCBhbHNvIHJlc3VsdCBpbiBkZWxheXMgdG8gdGhlVQEgYXV0b21hdGljIHJlZmVyZW5kdW0gc3RhdHVzIGNoYW5nZXMuIEV4cGxpY2l0IHNlcnZpY2luZyBpbnN0cnVjdGlvbnMgYXJlIHVuYWZmZWN0ZWQuGFRyYWNrc2UKzQsoAAAoY2FuZGlkYXRlcwoAAAA0NSYaCAMAAAAAAAAAAAAALAEAAMCJAQAsAQAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dAQAcbWVtYmVycwoAAABSBTecTQAAAAAAAAAAAAAALAEAAMCJAQAsAQAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dAgAscHJvZmljaWVudHMKAAAAUgU3nE0AAAAAAAAAAAAAACwBAADAiQEALAEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQMAHGZlbGxvd3MKAAAAUgU3nE0AAAAAAAAAAAAAACwBAADAiQEALAEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQQAOHNlbmlvciBmZWxsb3dzCgAAAFIFN5xNAAAAAAAAAAAAAAAsAQAAwIkBACwBAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0FABxleHBlcnRzCgAAAFVN0sIHAAAAAAAAAAAAAAAsAQAAwIkBACwBAAAKAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0GADhzZW5pb3IgZXhwZXJ0cwoAAABVTdLCBwAAAAAAAAAAAAAALAEAAMCJAQAsAQAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dBwAcbWFzdGVycwoAAABVTdLCBwAAAAAAAAAAAAAALAEAAMCJAQAsAQAACgAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dCAA4c2VuaW9yIG1hc3RlcnMKAAAAVU3SwgcAAAAAAAAAAAAAACwBAADAiQEALAEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQkANGdyYW5kIG1hc3RlcnMKAAAAVU3SwgcAAAAAAAAAAAAAACwBAADAiQEALAEAAAoAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQTgIEluZm9ybWF0aW9uIGNvbmNlcm5pbmcgdGhlIGRpZmZlcmVudCByZWZlcmVuZHVtIHRyYWNrcy4BoQoXABxPcmlnaW5zAAAAAAArACRXaGl0ZWxpc3QBJFdoaXRlbGlzdAQ8V2hpdGVsaXN0ZWRDYWxsAAEEBTSpAQQAAAGFAgGVBwABpQosAChQYXJhbWV0ZXJzAShQYXJhbWV0ZXJzBChQYXJhbWV0ZXJzAAEEAq0HvQcEAARMIFN0b3JlZCBwYXJhbWV0ZXJzLgGJAgGpBwAALgAYQ2xhaW1zARhDbGFpbXMUGENsYWltcwABBAbdAhgEAAAUVG90YWwBABhAAAAAAAAAAAAAAAAAAAAAAAAcVmVzdGluZwABBAbdAuUCBAAQeCBWZXN0aW5nIHNjaGVkdWxlIGZvciBhIGNsYWltLg0BIEZpcnN0IGJhbGFuY2UgaXMgdGhlIHRvdGFsIGFtb3VudCB0aGF0IHNob3VsZCBiZSBoZWxkIGZvciB2ZXN0aW5nLuQgU2Vjb25kIGJhbGFuY2UgaXMgaG93IG11Y2ggc2hvdWxkIGJlIHVubG9ja2VkIHBlciBibG9jay7MIFRoZSBibG9jayBudW1iZXIgaXMgd2hlbiB0aGUgdmVzdGluZyBzaG91bGQgc3RhcnQuHFNpZ25pbmcAAQQG3QLtAgQABMAgVGhlIHN0YXRlbWVudCBraW5kIHRoYXQgbXVzdCBiZSBzaWduZWQsIGlmIGFueS4kUHJlY2xhaW1zAAEEBgDdAgQABC0BIFByZS1jbGFpbWVkIEV0aGVyZXVtIGFjY291bnRzLCBieSB0aGUgQWNjb3VudCBJRCB0aGF0IHRoZXkgYXJlIGNsYWltZWQgdG8uAdECAckHBBhQcmVmaXg4gHxQYXkgS1NNcyB0byB0aGUgS3VzYW1hIGFjY291bnQ6AAGpChMAHFV0aWxpdHkAAfECAc0HBExiYXRjaGVkX2NhbGxzX2xpbWl0EBCqKgAABKggVGhlIGxpbWl0IG9uIHRoZSBudW1iZXIgb2YgYmF0Y2hlZCBjYWxscy4BrQoYABxTb2NpZXR5ARxTb2NpZXR5UChQYXJhbWV0ZXJzAADZBwQABNwgVGhlIG1heCBudW1iZXIgb2YgbWVtYmVycyBmb3IgdGhlIHNvY2lldHkgYXQgb25lIHRpbWUuDFBvdAEAGEAAAAAAAAAAAAAAAAAAAAAABEEBIEFtb3VudCBvZiBvdXIgYWNjb3VudCBiYWxhbmNlIHRoYXQgaXMgc3BlY2lmaWNhbGx5IGZvciB0aGUgbmV4dCByb3VuZCdzIGJpZChzKS4cRm91bmRlcgAAAAQABEggVGhlIGZpcnN0IG1lbWJlci4QSGVhZAAAAAQABEEBIFRoZSBtb3N0IHByaW1hcnkgZnJvbSB0aGUgbW9zdCByZWNlbnRseSBhcHByb3ZlZCByYW5rIDAgbWVtYmVycyBpbiB0aGUgc29jaWV0eS4UUnVsZXMAADQEAAhRASBBIGhhc2ggb2YgdGhlIHJ1bGVzIG9mIHRoaXMgc29jaWV0eSBjb25jZXJuaW5nIG1lbWJlcnNoaXAuIENhbiBvbmx5IGJlIHNldCBvbmNlIGFuZFQgb25seSBieSB0aGUgZm91bmRlci4cTWVtYmVycwABBAUAsQoEAAQhASBUaGUgY3VycmVudCBtZW1iZXJzIGFuZCB0aGVpciByYW5rLiBEb2Vzbid0IGluY2x1ZGUgYFN1c3BlbmRlZE1lbWJlcnNgLhxQYXlvdXRzAQEEBQC9CkQAAAAAAAAAAAAAAAAAAAAAAATcIEluZm9ybWF0aW9uIHJlZ2FyZGluZyByYW5rLTAgcGF5b3V0cywgcGFzdCBhbmQgZnV0dXJlLixNZW1iZXJDb3VudAEAEBAAAAAABEkBIFRoZSBudW1iZXIgb2YgaXRlbXMgaW4gYE1lbWJlcnNgIGN1cnJlbnRseS4gKERvZXNuJ3QgaW5jbHVkZSBgU3VzcGVuZGVkTWVtYmVyc2AuKTRNZW1iZXJCeUluZGV4AAEEBRAABAAIXQEgVGhlIGN1cnJlbnQgaXRlbXMgaW4gYE1lbWJlcnNgIGtleWVkIGJ5IHRoZWlyIHVuaXF1ZSBpbmRleC4gS2V5cyBhcmUgZGVuc2VseSBwb3B1bGF0ZWTMIGAwLi5NZW1iZXJDb3VudGAgKGRvZXMgbm90IGluY2x1ZGUgYE1lbWJlckNvdW50YCkuQFN1c3BlbmRlZE1lbWJlcnMAAQQFALEKBAAEAQEgVGhlIHNldCBvZiBzdXNwZW5kZWQgbWVtYmVycywgd2l0aCB0aGVpciBvbGQgbWVtYmVyc2hpcCByZWNvcmQuKFJvdW5kQ291bnQBABAQAAAAAASgIFRoZSBudW1iZXIgb2Ygcm91bmRzIHdoaWNoIGhhdmUgcGFzc2VkLhBCaWRzAQDFCgQABOggVGhlIGN1cnJlbnQgYmlkcywgc3RvcmVkIG9yZGVyZWQgYnkgdGhlIHZhbHVlIG9mIHRoZSBiaWQuKENhbmRpZGF0ZXMAAQQCANUKBAAAHFNrZXB0aWMAAAAEAARUIFRoZSBjdXJyZW50IHNrZXB0aWMuFFZvdGVzAAEIBQXdCuEKBAAE0CBEb3VibGUgbWFwIGZyb20gQ2FuZGlkYXRlIC0+IFZvdGVyIC0+IChNYXliZSkgVm90ZS48Vm90ZUNsZWFyQ3Vyc29yAAEEBQDlCgQABPQgQ2xlYXItY3Vyc29yIGZvciBWb3RlLCBtYXAgZnJvbSBDYW5kaWRhdGUgLT4gKE1heWJlKSBDdXJzb3IuIE5leHRIZWFkAADpCgQADHUBIEF0IHRoZSBlbmQgb2YgdGhlIGNsYWltIHBlcmlvZCwgdGhpcyBjb250YWlucyB0aGUgbW9zdCByZWNlbnRseSBhcHByb3ZlZCBtZW1iZXJzIChhbG9uZyB3aXRoZQEgdGhlaXIgYmlkIGFuZCByb3VuZCBJRCkgd2hvIGlzIGZyb20gdGhlIG1vc3QgcmVjZW50IHJvdW5kIHdpdGggdGhlIGxvd2VzdCBiaWQuIFRoZXkgd2lsbFwgYmVjb21lIHRoZSBuZXcgYEhlYWRgLkxDaGFsbGVuZ2VSb3VuZENvdW50AQAQEAAAAAAEWQEgVGhlIG51bWJlciBvZiBjaGFsbGVuZ2Ugcm91bmRzIHRoZXJlIGhhdmUgYmVlbi4gVXNlZCB0byBpZGVudGlmeSBzdGFsZSBEZWZlbmRlclZvdGVzLiREZWZlbmRpbmcAAO0KBAAEWQEgVGhlIGRlZmVuZGluZyBtZW1iZXIgY3VycmVudGx5IGJlaW5nIGNoYWxsZW5nZWQsIGFsb25nIHdpdGggYSBydW5uaW5nIHRhbGx5IG9mIHZvdGVzLjREZWZlbmRlclZvdGVzAAEIBQVtCeEKBAAEyCBWb3RlcyBmb3IgdGhlIGRlZmVuZGVyLCBrZXllZCBieSBjaGFsbGVuZ2Ugcm91bmQuAfkCAdUHJCBQYWxsZXRJZP0JIHB5L3NvY2llBGggVGhlIHNvY2lldGllcydzIHBhbGxldCBpZDBHcmFjZVN0cmlrZXMQEAoAAAAECQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0cmlrZXMgYmVmb3JlIGEgbWVtYmVyIGdldHMgZnVuZHMgc2xhc2hlZC4sUGVyaW9kU3BlbmQYQAQKv4IoDwAAAAAAAAAAAAAELQEgVGhlIGFtb3VudCBvZiBpbmNlbnRpdmUgcGFpZCB3aXRoaW4gZWFjaCBwZXJpb2QuIERvZXNuJ3QgaW5jbHVkZSBWb3RlclRpcC4wVm90aW5nUGVyaW9kEBBAGQEACD0BIFRoZSBudW1iZXIgb2YgYmxvY2tzIG9uIHdoaWNoIG5ldyBjYW5kaWRhdGVzIHNob3VsZCBiZSB2b3RlZCBvbi4gVG9nZXRoZXIgd2l0aE0BIGBDbGFpbVBlcmlvZGAsIHRoaXMgc3VtcyB0byB0aGUgbnVtYmVyIG9mIGJsb2NrcyBiZXR3ZWVuIGNhbmRpZGF0ZSBpbnRha2UgcGVyaW9kcy4sQ2xhaW1QZXJpb2QQEIBwAAAITQEgVGhlIG51bWJlciBvZiBibG9ja3Mgb24gd2hpY2ggbmV3IGNhbmRpZGF0ZXMgY2FuIGNsYWltIHRoZWlyIG1lbWJlcnNoaXAgYW5kIGJlIHRoZTAgbmFtZWQgaGVhZC48TWF4TG9ja0R1cmF0aW9uEBAATu0ABKQgVGhlIG1heGltdW0gZHVyYXRpb24gb2YgdGhlIHBheW91dCBsb2NrLjxDaGFsbGVuZ2VQZXJpb2QQEMCJAQAE0CBUaGUgbnVtYmVyIG9mIGJsb2NrcyBiZXR3ZWVuIG1lbWJlcnNoaXAgY2hhbGxlbmdlcy4oTWF4UGF5b3V0cxAQCAAAAAQNASBUaGUgbWF4aW11bSBudW1iZXIgb2YgcGF5b3V0cyBhIG1lbWJlciBtYXkgaGF2ZSB3YWl0aW5nIHVuY2xhaW1lZC4cTWF4QmlkcxAQAAIAAASQIFRoZSBtYXhpbXVtIG51bWJlciBvZiBiaWRzIGF0IG9uY2UuAfEKGgAgUmVjb3ZlcnkBIFJlY292ZXJ5DCxSZWNvdmVyYWJsZQABBAUA9QoEAAQJASBUaGUgc2V0IG9mIHJlY292ZXJhYmxlIGFjY291bnRzIGFuZCB0aGVpciByZWNvdmVyeSBjb25maWd1cmF0aW9uLkBBY3RpdmVSZWNvdmVyaWVzAAEIBQXdCv0KBAAQaCBBY3RpdmUgcmVjb3ZlcnkgYXR0ZW1wdHMuABUBIEZpcnN0IGFjY291bnQgaXMgdGhlIGFjY291bnQgdG8gYmUgcmVjb3ZlcmVkLCBhbmQgdGhlIHNlY29uZCBhY2NvdW50rCBpcyB0aGUgdXNlciB0cnlpbmcgdG8gcmVjb3ZlciB0aGUgYWNjb3VudC4UUHJveHkAAQQCAAAEAAyQIFRoZSBsaXN0IG9mIGFsbG93ZWQgcHJveHkgYWNjb3VudHMuAPggTWFwIGZyb20gdGhlIHVzZXIgd2hvIGNhbiBhY2Nlc3MgaXQgdG8gdGhlIHJlY292ZXJlZCBhY2NvdW50LgH9AgHdBxBEQ29uZmlnRGVwb3NpdEJhc2UYQASCG84mAAAAAAAAAAAAAAAQVQEgVGhlIGJhc2UgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCB0byByZXNlcnZlIGZvciBjcmVhdGluZyBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24uAAEBIFRoaXMgaXMgaGVsZCBmb3IgYW4gYWRkaXRpb25hbCBzdG9yYWdlIGl0ZW0gd2hvc2UgdmFsdWUgc2l6ZSBpc6ggYDIgKyBzaXplb2YoQmxvY2tOdW1iZXIsIEJhbGFuY2UpYCBieXRlcy5MRnJpZW5kRGVwb3NpdEZhY3RvchhAmiZp4QMAAAAAAAAAAAAAABQtASBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgYWRkaXRpb25hbCB1c2VyIHdoZW4gY3JlYXRpbmcgYSByZWNvdmVyeTwgY29uZmlndXJhdGlvbi4ATQEgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgYHNpemVvZihBY2NvdW50SWQpYCBieXRlcyBtb3JlIGludG8gYSBwcmUtZXhpc3Rpbmcgc3RvcmFnZRwgdmFsdWUuKE1heEZyaWVuZHMQEAkAAAAYDQEgVGhlIG1heGltdW0gYW1vdW50IG9mIGZyaWVuZHMgYWxsb3dlZCBpbiBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24uAA0BIE5PVEU6IFRoZSB0aHJlc2hvbGQgcHJvZ3JhbW1lZCBpbiB0aGlzIFBhbGxldCB1c2VzIHUxNiwgc28gaXQgZG9lcwkBIG5vdCByZWFsbHkgbWFrZSBzZW5zZSB0byBoYXZlIGEgbGltaXQgaGVyZSBncmVhdGVyIHRoYW4gdTE2OjpNQVguFQEgQnV0IGFsc28sIHRoYXQgaXMgYSBsb3QgbW9yZSB0aGFuIHlvdSBzaG91bGQgcHJvYmFibHkgc2V0IHRoaXMgdmFsdWU0IHRvIGFueXdheS4uLjxSZWNvdmVyeURlcG9zaXQYQASCG84mAAAAAAAAAAAAAAAcHQEgVGhlIGJhc2UgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCB0byByZXNlcnZlIGZvciBzdGFydGluZyBhIHJlY292ZXJ5LgA1ASBUaGlzIGlzIHByaW1hcmlseSBoZWxkIGZvciBkZXRlcnJpbmcgbWFsaWNpb3VzIHJlY292ZXJ5IGF0dGVtcHRzLCBhbmQgc2hvdWxkKQEgaGF2ZSBhIHZhbHVlIGxhcmdlIGVub3VnaCB0aGF0IGEgYmFkIGFjdG9yIHdvdWxkIGNob29zZSBub3QgdG8gcGxhY2UgdGhpcykBIGRlcG9zaXQuIEl0IGFsc28gYWN0cyB0byBmdW5kIGFkZGl0aW9uYWwgc3RvcmFnZSBpdGVtIHdob3NlIHZhbHVlIHNpemUgaXNBASBgc2l6ZW9mKEJsb2NrTnVtYmVyLCBCYWxhbmNlICsgVCAqIEFjY291bnRJZClgIGJ5dGVzLiBXaGVyZSBUIGlzIGEgY29uZmlndXJhYmxlLCB0aHJlc2hvbGQuAQELGwAcVmVzdGluZwEcVmVzdGluZwgcVmVzdGluZwABBAIABQsEAATYIEluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgdmVzdGluZyBvZiBhIGdpdmVuIGFjY291bnQuOFN0b3JhZ2VWZXJzaW9uAQANCwQADHwgU3RvcmFnZSB2ZXJzaW9uIG9mIHRoZSBwYWxsZXQuADEBIE5ldyBuZXR3b3JrcyBzdGFydCB3aXRoIGxhdGVzdCB2ZXJzaW9uLCBhcyBkZXRlcm1pbmVkIGJ5IHRoZSBnZW5lc2lzIGJ1aWxkLgEBAwHhBwhETWluVmVzdGVkVHJhbnNmZXIYQDRN0sIHAAAAAAAAAAAAAAAE6CBUaGUgbWluaW11bSBhbW91bnQgdHJhbnNmZXJyZWQgdG8gY2FsbCBgdmVzdGVkX3RyYW5zZmVyYC5MTWF4VmVzdGluZ1NjaGVkdWxlcxAQHAAAAAABEQscACRTY2hlZHVsZXIBJFNjaGVkdWxlchA8SW5jb21wbGV0ZVNpbmNlAAAQBAAAGEFnZW5kYQEBBAUQFQsEAARNASBJdGVtcyB0byBiZSBleGVjdXRlZCwgaW5kZXhlZCBieSB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhleSBzaG91bGQgYmUgZXhlY3V0ZWQgb24uHFJldHJpZXMAAQQCEQMlCwQABCEBIFJldHJ5IGNvbmZpZ3VyYXRpb25zIGZvciBpdGVtcyB0byBiZSBleGVjdXRlZCwgaW5kZXhlZCBieSB0YXNrIGFkZHJlc3MuGExvb2t1cAABBAUEEQMEABD4IExvb2t1cCBmcm9tIGEgbmFtZSB0byB0aGUgYmxvY2sgbnVtYmVyIGFuZCBpbmRleCBvZiB0aGUgdGFzay4AWQEgRm9yIHYzIC0+IHY0IHRoZSBwcmV2aW91c2x5IHVuYm91bmRlZCBpZGVudGl0aWVzIGFyZSBCbGFrZTItMjU2IGhhc2hlZCB0byBmb3JtIHRoZSB2NDAgaWRlbnRpdGllcy4BCQMB5QcINE1heGltdW1XZWlnaHQoQAsAgG6HdAETzMzMzMzMzMwEKQEgVGhlIG1heGltdW0gd2VpZ2h0IHRoYXQgbWF5IGJlIHNjaGVkdWxlZCBwZXIgYmxvY2sgZm9yIGFueSBkaXNwYXRjaGFibGVzLlBNYXhTY2hlZHVsZWRQZXJCbG9jaxAQMgAAABQdASBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc2NoZWR1bGVkIGNhbGxzIGluIHRoZSBxdWV1ZSBmb3IgYSBzaW5nbGUgYmxvY2suABggTk9URTpRASArIERlcGVuZGVudCBwYWxsZXRzJyBiZW5jaG1hcmtzIG1pZ2h0IHJlcXVpcmUgYSBoaWdoZXIgbGltaXQgZm9yIHRoZSBzZXR0aW5nLiBTZXQgYcQgaGlnaGVyIGxpbWl0IHVuZGVyIGBydW50aW1lLWJlbmNobWFya3NgIGZlYXR1cmUuASkLHQAUUHJveHkBFFByb3h5CBxQcm94aWVzAQEEBQAtC0QAAAAAAAAAAAAAAAAAAAAAAAhFASBUaGUgc2V0IG9mIGFjY291bnQgcHJveGllcy4gTWFwcyB0aGUgYWNjb3VudCB3aGljaCBoYXMgZGVsZWdhdGVkIHRvIHRoZSBhY2NvdW50cyEBIHdoaWNoIGFyZSBiZWluZyBkZWxlZ2F0ZWQgdG8sIHRvZ2V0aGVyIHdpdGggdGhlIGFtb3VudCBoZWxkIG9uIGRlcG9zaXQuNEFubm91bmNlbWVudHMBAQQFAD0LRAAAAAAAAAAAAAAAAAAAAAAABKwgVGhlIGFubm91bmNlbWVudHMgbWFkZSBieSB0aGUgcHJveHkgKGtleSkuARUDAe0HGEBQcm94eURlcG9zaXRCYXNlGECwCVNImwAAAAAAAAAAAAAAEBEBIFRoZSBiYXNlIGFtb3VudCBvZiBjdXJyZW5jeSBuZWVkZWQgdG8gcmVzZXJ2ZSBmb3IgY3JlYXRpbmcgYSBwcm94eS4AAQEgVGhpcyBpcyBoZWxkIGZvciBhbiBhZGRpdGlvbmFsIHN0b3JhZ2UgaXRlbSB3aG9zZSB2YWx1ZSBzaXplIGlzJQEgYHNpemVvZihCYWxhbmNlKWAgYnl0ZXMgYW5kIHdob3NlIGtleSBzaXplIGlzIGBzaXplb2YoQWNjb3VudElkKWAgYnl0ZXMuSFByb3h5RGVwb3NpdEZhY3RvchhAtKaQQQAAAAAAAAAAAAAAABS8IFRoZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHBlciBwcm94eSBhZGRlZC4ANQEgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgMzIgYnl0ZXMgcGx1cyBhbiBpbnN0YW5jZSBvZiBgUHJveHlUeXBlYCBtb3JlIGludG8gYWEBIHByZS1leGlzdGluZyBzdG9yYWdlIHZhbHVlLiBUaHVzLCB3aGVuIGNvbmZpZ3VyaW5nIGBQcm94eURlcG9zaXRGYWN0b3JgIG9uZSBzaG91bGQgdGFrZfQgaW50byBhY2NvdW50IGAzMiArIHByb3h5X3R5cGUuZW5jb2RlKCkubGVuKClgIGJ5dGVzIG9mIGRhdGEuKE1heFByb3hpZXMQECAAAAAE8CBUaGUgbWF4aW11bSBhbW91bnQgb2YgcHJveGllcyBhbGxvd2VkIGZvciBhIHNpbmdsZSBhY2NvdW50LihNYXhQZW5kaW5nEBAgAAAABEUBIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lLWRlbGF5ZWQgYW5ub3VuY2VtZW50cyB0aGF0IGFyZSBhbGxvd2VkIHRvIGJlIHBlbmRpbmcuXEFubm91bmNlbWVudERlcG9zaXRCYXNlGECwCVNImwAAAAAAAAAAAAAAEDEBIFRoZSBiYXNlIGFtb3VudCBvZiBjdXJyZW5jeSBuZWVkZWQgdG8gcmVzZXJ2ZSBmb3IgY3JlYXRpbmcgYW4gYW5ub3VuY2VtZW50LgBJASBUaGlzIGlzIGhlbGQgd2hlbiBhIG5ldyBzdG9yYWdlIGl0ZW0gaG9sZGluZyBhIGBCYWxhbmNlYCBpcyBjcmVhdGVkICh0eXBpY2FsbHkgMTYgIGJ5dGVzKS5kQW5ub3VuY2VtZW50RGVwb3NpdEZhY3RvchhAaE0hgwAAAAAAAAAAAAAAABDUIFRoZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHBlciBhbm5vdW5jZW1lbnQgbWFkZS4AWQEgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgYW4gYEFjY291bnRJZGAsIGBIYXNoYCBhbmQgYEJsb2NrTnVtYmVyYCAodHlwaWNhbGx5IDY4IGJ5dGVzKYwgaW50byBhIHByZS1leGlzdGluZyBzdG9yYWdlIHZhbHVlLgFNCx4AIE11bHRpc2lnASBNdWx0aXNpZwQkTXVsdGlzaWdzAAEIBQJRC1ULBAAElCBUaGUgc2V0IG9mIG9wZW4gbXVsdGlzaWcgb3BlcmF0aW9ucy4BIQMB8QcMLERlcG9zaXRCYXNlGEDwGUXnmwAAAAAAAAAAAAAAGFkBIFRoZSBiYXNlIGFtb3VudCBvZiBjdXJyZW5jeSBuZWVkZWQgdG8gcmVzZXJ2ZSBmb3IgY3JlYXRpbmcgYSBtdWx0aXNpZyBleGVjdXRpb24gb3IgdG+EIHN0b3JlIGEgZGlzcGF0Y2ggY2FsbCBmb3IgbGF0ZXIuAAEBIFRoaXMgaXMgaGVsZCBmb3IgYW4gYWRkaXRpb25hbCBzdG9yYWdlIGl0ZW0gd2hvc2UgdmFsdWUgc2l6ZSBpczEBIGA0ICsgc2l6ZW9mKChCbG9ja051bWJlciwgQmFsYW5jZSwgQWNjb3VudElkKSlgIGJ5dGVzIGFuZCB3aG9zZSBrZXkgc2l6ZSBpc4AgYDMyICsgc2l6ZW9mKEFjY291bnRJZClgIGJ5dGVzLjREZXBvc2l0RmFjdG9yGECABpQ/AAAAAAAAAAAAAAAADFUBIFRoZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHBlciB1bml0IHRocmVzaG9sZCB3aGVuIGNyZWF0aW5nIGEgbXVsdGlzaWcgZXhlY3V0aW9uLgAlASBUaGlzIGlzIGhlbGQgZm9yIGFkZGluZyAzMiBieXRlcyBtb3JlIGludG8gYSBwcmUtZXhpc3Rpbmcgc3RvcmFnZSB2YWx1ZS44TWF4U2lnbmF0b3JpZXMQEGQAAAAE7CBUaGUgbWF4aW11bSBhbW91bnQgb2Ygc2lnbmF0b3JpZXMgYWxsb3dlZCBpbiB0aGUgbXVsdGlzaWcuAV0LHwAgUHJlaW1hZ2UBIFByZWltYWdlDCRTdGF0dXNGb3IAAQQGNGELBAAEkCBUaGUgcmVxdWVzdCBzdGF0dXMgb2YgYSBnaXZlbiBoYXNoLkBSZXF1ZXN0U3RhdHVzRm9yAAEEBjRpCwQABJAgVGhlIHJlcXVlc3Qgc3RhdHVzIG9mIGEgZ2l2ZW4gaGFzaC4sUHJlaW1hZ2VGb3IAAQQGvQl5CwQAAAEtAwH1BwABfQsgACBCb3VudGllcwEgQm91bnRpZXMQLEJvdW50eUNvdW50AQAQEAAAAAAEwCBOdW1iZXIgb2YgYm91bnR5IHByb3Bvc2FscyB0aGF0IGhhdmUgYmVlbiBtYWRlLiBCb3VudGllcwABBAUQgQsEAAR4IEJvdW50aWVzIHRoYXQgaGF2ZSBiZWVuIG1hZGUuSEJvdW50eURlc2NyaXB0aW9ucwABBAUQiQsEAASAIFRoZSBkZXNjcmlwdGlvbiBvZiBlYWNoIGJvdW50eS48Qm91bnR5QXBwcm92YWxzAQDxCQQABOwgQm91bnR5IGluZGljZXMgdGhhdCBoYXZlIGJlZW4gYXBwcm92ZWQgYnV0IG5vdCB5ZXQgZnVuZGVkLgE1AwH5ByREQm91bnR5RGVwb3NpdEJhc2UYQDRN0sIHAAAAAAAAAAAAAAAE6CBUaGUgYW1vdW50IGhlbGQgb24gZGVwb3NpdCBmb3IgcGxhY2luZyBhIGJvdW50eSBwcm9wb3NhbC5gQm91bnR5RGVwb3NpdFBheW91dERlbGF5EBAAAAAABFkBIFRoZSBkZWxheSBwZXJpb2QgZm9yIHdoaWNoIGEgYm91bnR5IGJlbmVmaWNpYXJ5IG5lZWQgdG8gd2FpdCBiZWZvcmUgY2xhaW0gdGhlIHBheW91dC5IQm91bnR5VXBkYXRlUGVyaW9kEBCAxhMABGwgQm91bnR5IGR1cmF0aW9uIGluIGJsb2Nrcy5gQ3VyYXRvckRlcG9zaXRNdWx0aXBsaWVywQIQIKEHABAZASBUaGUgY3VyYXRvciBkZXBvc2l0IGlzIGNhbGN1bGF0ZWQgYXMgYSBwZXJjZW50YWdlIG9mIHRoZSBjdXJhdG9yIGZlZS4AOQEgVGhpcyBkZXBvc2l0IGhhcyBvcHRpb25hbCB1cHBlciBhbmQgbG93ZXIgYm91bmRzIHdpdGggYEN1cmF0b3JEZXBvc2l0TWF4YCBhbmRUIGBDdXJhdG9yRGVwb3NpdE1pbmAuREN1cmF0b3JEZXBvc2l0TWF45QFEAQSCG84mAAAAAAAAAAAAAAAESQEgTWF4aW11bSBhbW91bnQgb2YgZnVuZHMgdGhhdCBzaG91bGQgYmUgcGxhY2VkIGluIGEgZGVwb3NpdCBmb3IgbWFraW5nIGEgcHJvcG9zYWwuREN1cmF0b3JEZXBvc2l0TWlu5QFEAVKhrsYAAAAAAAAAAAAAAAAESQEgTWluaW11bSBhbW91bnQgb2YgZnVuZHMgdGhhdCBzaG91bGQgYmUgcGxhY2VkIGluIGEgZGVwb3NpdCBmb3IgbWFraW5nIGEgcHJvcG9zYWwuSEJvdW50eVZhbHVlTWluaW11bRhAaJqkhQ8AAAAAAAAAAAAAAARwIE1pbmltdW0gdmFsdWUgZm9yIGEgYm91bnR5LkhEYXRhRGVwb3NpdFBlckJ5dGUYQFWg/AEAAAAAAAAAAAAAAAAEYQEgVGhlIGFtb3VudCBoZWxkIG9uIGRlcG9zaXQgcGVyIGJ5dGUgd2l0aGluIHRoZSB0aXAgcmVwb3J0IHJlYXNvbiBvciBib3VudHkgZGVzY3JpcHRpb24uTE1heGltdW1SZWFzb25MZW5ndGgQEABAAAAMiCBNYXhpbXVtIGFjY2VwdGFibGUgcmVhc29uIGxlbmd0aC4AZQEgQmVuY2htYXJrcyBkZXBlbmQgb24gdGhpcyB2YWx1ZSwgYmUgc3VyZSB0byB1cGRhdGUgd2VpZ2h0cyBmaWxlIHdoZW4gY2hhbmdpbmcgdGhpcyB2YWx1ZQGNCyMANENoaWxkQm91bnRpZXMBNENoaWxkQm91bnRpZXMUQENoaWxkQm91bnR5Q291bnQBABAQAAAAAASAIE51bWJlciBvZiB0b3RhbCBjaGlsZCBib3VudGllcy5MUGFyZW50Q2hpbGRCb3VudGllcwEBBAUQEBAAAAAACLAgTnVtYmVyIG9mIGNoaWxkIGJvdW50aWVzIHBlciBwYXJlbnQgYm91bnR5LuAgTWFwIG9mIHBhcmVudCBib3VudHkgaW5kZXggdG8gbnVtYmVyIG9mIGNoaWxkIGJvdW50aWVzLjRDaGlsZEJvdW50aWVzAAEIBQURA5ELBAAElCBDaGlsZCBib3VudGllcyB0aGF0IGhhdmUgYmVlbiBhZGRlZC5cQ2hpbGRCb3VudHlEZXNjcmlwdGlvbnMAAQQFEIkLBAAEmCBUaGUgZGVzY3JpcHRpb24gb2YgZWFjaCBjaGlsZC1ib3VudHkuTENoaWxkcmVuQ3VyYXRvckZlZXMBAQQFEBhAAAAAAAAAAAAAAAAAAAAAAAQBASBUaGUgY3VtdWxhdGl2ZSBjaGlsZC1ib3VudHkgY3VyYXRvciBmZWUgZm9yIGVhY2ggcGFyZW50IGJvdW50eS4BOQMB/QcIZE1heEFjdGl2ZUNoaWxkQm91bnR5Q291bnQQEGQAAAAEHQEgTWF4aW11bSBudW1iZXIgb2YgY2hpbGQgYm91bnRpZXMgdGhhdCBjYW4gYmUgYWRkZWQgdG8gYSBwYXJlbnQgYm91bnR5LlxDaGlsZEJvdW50eVZhbHVlTWluaW11bRhApEJdjQEAAAAAAAAAAAAAAASIIE1pbmltdW0gdmFsdWUgZm9yIGEgY2hpbGQtYm91bnR5LgGZCygAaEVsZWN0aW9uUHJvdmlkZXJNdWx0aVBoYXNlAWhFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZSgUUm91bmQBABAQAQAAABisIEludGVybmFsIGNvdW50ZXIgZm9yIHRoZSBudW1iZXIgb2Ygcm91bmRzLgBVASBUaGlzIGlzIHVzZWZ1bCBmb3IgZGUtZHVwbGljYXRpb24gb2YgdHJhbnNhY3Rpb25zIHN1Ym1pdHRlZCB0byB0aGUgcG9vbCwgYW5kIGdlbmVyYWxsIGRpYWdub3N0aWNzIG9mIHRoZSBwYWxsZXQuAE0BIFRoaXMgaXMgbWVyZWx5IGluY3JlbWVudGVkIG9uY2UgcGVyIGV2ZXJ5IHRpbWUgdGhhdCBhbiB1cHN0cmVhbSBgZWxlY3RgIGlzIGNhbGxlZC4wQ3VycmVudFBoYXNlAQAJCAQABDwgQ3VycmVudCBwaGFzZS44UXVldWVkU29sdXRpb24AAJ0LBAAMPQEgQ3VycmVudCBiZXN0IHNvbHV0aW9uLCBzaWduZWQgb3IgdW5zaWduZWQsIHF1ZXVlZCB0byBiZSByZXR1cm5lZCB1cG9uIGBlbGVjdGAuAGAgQWx3YXlzIHNvcnRlZCBieSBzY29yZS4gU25hcHNob3QAAKULBAAQcCBTbmFwc2hvdCBkYXRhIG9mIHRoZSByb3VuZC4AXQEgVGhpcyBpcyBjcmVhdGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNpZ25lZCBwaGFzZSBhbmQgY2xlYXJlZCB1cG9uIGNhbGxpbmcgYGVsZWN0YC4pASBOb3RlOiBUaGlzIHN0b3JhZ2UgdHlwZSBtdXN0IG9ubHkgYmUgbXV0YXRlZCB0aHJvdWdoIFtgU25hcHNob3RXcmFwcGVyYF0uOERlc2lyZWRUYXJnZXRzAAAQBAAQzCBEZXNpcmVkIG51bWJlciBvZiB0YXJnZXRzIHRvIGVsZWN0IGZvciB0aGlzIHJvdW5kLgCoIE9ubHkgZXhpc3RzIHdoZW4gW2BTbmFwc2hvdGBdIGlzIHByZXNlbnQuKQEgTm90ZTogVGhpcyBzdG9yYWdlIHR5cGUgbXVzdCBvbmx5IGJlIG11dGF0ZWQgdGhyb3VnaCBbYFNuYXBzaG90V3JhcHBlcmBdLkBTbmFwc2hvdE1ldGFkYXRhAAB1BAQAEJggVGhlIG1ldGFkYXRhIG9mIHRoZSBbYFJvdW5kU25hcHNob3RgXQCoIE9ubHkgZXhpc3RzIHdoZW4gW2BTbmFwc2hvdGBdIGlzIHByZXNlbnQuKQEgTm90ZTogVGhpcyBzdG9yYWdlIHR5cGUgbXVzdCBvbmx5IGJlIG11dGF0ZWQgdGhyb3VnaCBbYFNuYXBzaG90V3JhcHBlcmBdLmRTaWduZWRTdWJtaXNzaW9uTmV4dEluZGV4AQAQEAAAAAAkAQEgVGhlIG5leHQgaW5kZXggdG8gYmUgYXNzaWduZWQgdG8gYW4gaW5jb21pbmcgc2lnbmVkIHN1Ym1pc3Npb24uAHUBIEV2ZXJ5IGFjY2VwdGVkIHN1Ym1pc3Npb24gaXMgYXNzaWduZWQgYSB1bmlxdWUgaW5kZXg7IHRoYXQgaW5kZXggaXMgYm91bmQgdG8gdGhhdCBwYXJ0aWN1bGFyZQEgc3VibWlzc2lvbiBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBlbGVjdGlvbi4gT24gZWxlY3Rpb24gZmluYWxpemF0aW9uLCB0aGUgbmV4dCBpbmRleCBpczAgcmVzZXQgdG8gMC4AaQEgV2UgY2FuJ3QganVzdCB1c2UgYFNpZ25lZFN1Ym1pc3Npb25JbmRpY2VzLmxlbigpYCwgYmVjYXVzZSB0aGF0J3MgYSBib3VuZGVkIHNldDsgcGFzdCBpdHNZASBjYXBhY2l0eSwgaXQgd2lsbCBzaW1wbHkgc2F0dXJhdGUuIFdlIGNhbid0IGp1c3QgaXRlcmF0ZSBvdmVyIGBTaWduZWRTdWJtaXNzaW9uc01hcGAs9CBiZWNhdXNlIGl0ZXJhdGlvbiBpcyBzbG93LiBJbnN0ZWFkLCB3ZSBzdG9yZSB0aGUgdmFsdWUgaGVyZS5cU2lnbmVkU3VibWlzc2lvbkluZGljZXMBALELBAAYbQEgQSBzb3J0ZWQsIGJvdW5kZWQgdmVjdG9yIG9mIGAoc2NvcmUsIGJsb2NrX251bWJlciwgaW5kZXgpYCwgd2hlcmUgZWFjaCBgaW5kZXhgIHBvaW50cyB0byBheCB2YWx1ZSBpbiBgU2lnbmVkU3VibWlzc2lvbnNgLgBxASBXZSBuZXZlciBuZWVkIHRvIHByb2Nlc3MgbW9yZSB0aGFuIGEgc2luZ2xlIHNpZ25lZCBzdWJtaXNzaW9uIGF0IGEgdGltZS4gU2lnbmVkIHN1Ym1pc3Npb25zdQEgY2FuIGJlIHF1aXRlIGxhcmdlLCBzbyB3ZSdyZSB3aWxsaW5nIHRvIHBheSB0aGUgY29zdCBvZiBtdWx0aXBsZSBkYXRhYmFzZSBhY2Nlc3NlcyB0byBhY2Nlc3MhASB0aGVtIG9uZSBhdCBhIHRpbWUgaW5zdGVhZCBvZiByZWFkaW5nIGFuZCBkZWNvZGluZyBhbGwgb2YgdGhlbSBhdCBvbmNlLlBTaWduZWRTdWJtaXNzaW9uc01hcAABBAUQvQsEABx0IFVuY2hlY2tlZCwgc2lnbmVkIHNvbHV0aW9ucy4AaQEgVG9nZXRoZXIgd2l0aCBgU3VibWlzc2lvbkluZGljZXNgLCB0aGlzIHN0b3JlcyBhIGJvdW5kZWQgc2V0IG9mIGBTaWduZWRTdWJtaXNzaW9uc2Agd2hpbGXsIGFsbG93aW5nIHVzIHRvIGtlZXAgb25seSBhIHNpbmdsZSBvbmUgaW4gbWVtb3J5IGF0IGEgdGltZS4AaQEgVHdveCBub3RlOiB0aGUga2V5IG9mIHRoZSBtYXAgaXMgYW4gYXV0by1pbmNyZW1lbnRpbmcgaW5kZXggd2hpY2ggdXNlcnMgY2Fubm90IGluc3BlY3Qgb3L0IGFmZmVjdDsgd2Ugc2hvdWxkbid0IG5lZWQgYSBjcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgaGFzaGVyLlRNaW5pbXVtVW50cnVzdGVkU2NvcmUAAHEEBAAQXQEgVGhlIG1pbmltdW0gc2NvcmUgdGhhdCBlYWNoICd1bnRydXN0ZWQnIHNvbHV0aW9uIG11c3QgYXR0YWluIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQoIGZlYXNpYmxlLgC4IENhbiBiZSBzZXQgdmlhIGBzZXRfbWluaW11bV91bnRydXN0ZWRfc2NvcmVgLgE9AwEBCDhUQmV0dGVyU2lnbmVkVGhyZXNob2xklBAAAAAACE0BIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBpbXByb3ZlbWVudCB0byB0aGUgc29sdXRpb24gc2NvcmUgdGhhdCBkZWZpbmVzIGEgc29sdXRpb24gYXN4ICJiZXR0ZXIiIGluIHRoZSBTaWduZWQgcGhhc2UuOE9mZmNoYWluUmVwZWF0EBASAAAAELQgVGhlIHJlcGVhdCB0aHJlc2hvbGQgb2YgdGhlIG9mZmNoYWluIHdvcmtlci4AYQEgRm9yIGV4YW1wbGUsIGlmIGl0IGlzIDUsIHRoYXQgbWVhbnMgdGhhdCBhdCBsZWFzdCA1IGJsb2NrcyB3aWxsIGVsYXBzZSBiZXR3ZWVuIGF0dGVtcHRzhCB0byBzdWJtaXQgdGhlIHdvcmtlcidzIHNvbHV0aW9uLjxNaW5lclR4UHJpb3JpdHkwIGVmZmZmZmbmBCUBIFRoZSBwcmlvcml0eSBvZiB0aGUgdW5zaWduZWQgdHJhbnNhY3Rpb24gc3VibWl0dGVkIGluIHRoZSB1bnNpZ25lZC1waGFzZVBTaWduZWRNYXhTdWJtaXNzaW9ucxAQEAAAABzkIE1heGltdW0gbnVtYmVyIG9mIHNpZ25lZCBzdWJtaXNzaW9ucyB0aGF0IGNhbiBiZSBxdWV1ZWQuAFUBIEl0IGlzIGJlc3QgdG8gYXZvaWQgYWRqdXN0aW5nIHRoaXMgZHVyaW5nIGFuIGVsZWN0aW9uLCBhcyBpdCBpbXBhY3RzIGRvd25zdHJlYW0gZGF0YWUBIHN0cnVjdHVyZXMuIEluIHBhcnRpY3VsYXIsIGBTaWduZWRTdWJtaXNzaW9uSW5kaWNlczxUPmAgaXMgYm91bmRlZCBvbiB0aGlzIHZhbHVlLiBJZiB5b3X0IHVwZGF0ZSB0aGlzIHZhbHVlIGR1cmluZyBhbiBlbGVjdGlvbiwgeW91IF9tdXN0XyBlbnN1cmUgdGhhdE0BIGBTaWduZWRTdWJtaXNzaW9uSW5kaWNlcy5sZW4oKWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBuZXcgdmFsdWUuIE90aGVyd2lzZSzwIGF0dGVtcHRzIHRvIHN1Ym1pdCBuZXcgc29sdXRpb25zIG1heSBjYXVzZSBhIHJ1bnRpbWUgcGFuaWMuPFNpZ25lZE1heFdlaWdodChAC4jYZjxVAROjcD0K16NwvRSUIE1heGltdW0gd2VpZ2h0IG9mIGEgc2lnbmVkIHNvbHV0aW9uLgBdASBJZiBbYENvbmZpZzo6TWluZXJDb25maWdgXSBpcyBiZWluZyBpbXBsZW1lbnRlZCB0byBzdWJtaXQgc2lnbmVkIHNvbHV0aW9ucyAob3V0c2lkZSBvZj0BIHRoaXMgcGFsbGV0KSwgdGhlbiBbYE1pbmVyQ29uZmlnOjpzb2x1dGlvbl93ZWlnaHRgXSBpcyB1c2VkIHRvIGNvbXBhcmUgYWdhaW5zdDAgdGhpcyB2YWx1ZS5AU2lnbmVkTWF4UmVmdW5kcxAQBAAAAAQZASBUaGUgbWF4aW11bSBhbW91bnQgb2YgdW5jaGVja2VkIHNvbHV0aW9ucyB0byByZWZ1bmQgdGhlIGNhbGwgZmVlIGZvci5AU2lnbmVkUmV3YXJkQmFzZRhAAOh2SBcAAAAAAAAAAAAAAASIIEJhc2UgcmV3YXJkIGZvciBhIHNpZ25lZCBzb2x1dGlvbkRTaWduZWREZXBvc2l0Qnl0ZRhAkPcEAAAAAAAAAAAAAAAAAASgIFBlci1ieXRlIGRlcG9zaXQgZm9yIGEgc2lnbmVkIHNvbHV0aW9uLkxTaWduZWREZXBvc2l0V2VpZ2h0GEAAAAAAAAAAAAAAAAAAAAAABKggUGVyLXdlaWdodCBkZXBvc2l0IGZvciBhIHNpZ25lZCBzb2x1dGlvbi4oTWF4V2lubmVycxAQ0AcAABA1ASBUaGUgbWF4aW11bSBudW1iZXIgb2Ygd2lubmVycyB0aGF0IGNhbiBiZSBlbGVjdGVkIGJ5IHRoaXMgYEVsZWN0aW9uUHJvdmlkZXJgQCBpbXBsZW1lbnRhdGlvbi4AUQEgTm90ZTogVGhpcyBtdXN0IGFsd2F5cyBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIGBUOjpEYXRhUHJvdmlkZXI6OmRlc2lyZWRfdGFyZ2V0cygpYC44TWluZXJNYXhMZW5ndGgQEAAANgAAOE1pbmVyTWF4V2VpZ2h0KEALiNhmPFUBE6NwPQrXo3C9AFRNaW5lck1heFZvdGVzUGVyVm90ZXIQEBgAAAAAPE1pbmVyTWF4V2lubmVycxAQ0AcAAAABwQslAAxOaXMBDE5pcxAsUXVldWVUb3RhbHMBAMULSZzRBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUYQEgVGhlIHRvdGFscyBvZiBpdGVtcyBhbmQgYmFsYW5jZXMgd2l0aGluIGVhY2ggcXVldWUuIFNhdmVzIGEgbG90IG9mIHN0b3JhZ2UgcmVhZHMgaW4gdGhlgCBjYXNlIG9mIHNwYXJzZWx5IHBhY2tlZCBxdWV1ZXMuAG0BIFRoZSB2ZWN0b3IgaXMgaW5kZXhlZCBieSBkdXJhdGlvbiBpbiBgUGVyaW9kYHMsIG9mZnNldCBieSBvbmUsIHNvIGluZm9ybWF0aW9uIG9uIHRoZSBxdWV1ZdQgd2hvc2UgZHVyYXRpb24gaXMgb25lIGBQZXJpb2RgIHdvdWxkIGJlIHN0b3JhZ2UgYDBgLhhRdWV1ZXMBAQQCEMkLBAAE4CBUaGUgcXVldWVzIG9mIGJpZHMuIEluZGV4ZWQgYnkgZHVyYXRpb24gKGluIGBQZXJpb2RgcykuHFN1bW1hcnkBANULoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsCBTdW1tYXJ5IGluZm9ybWF0aW9uIG92ZXIgdGhlIGdlbmVyYWwgc3RhdGUuIFJlY2VpcHRzAAEEAhDZCwQABEEBIFRoZSBjdXJyZW50bHkgb3V0c3RhbmRpbmcgcmVjZWlwdHMsIGluZGV4ZWQgYWNjb3JkaW5nIHRvIHRoZSBvcmRlciBvZiBjcmVhdGlvbi4BkQQBEQgoIFBhbGxldElk/QkgcHkvbmlzICAEGQEgVGhlIHRyZWFzdXJ5J3MgcGFsbGV0IGlkLCB1c2VkIGZvciBkZXJpdmluZyBpdHMgc292ZXJlaWduIGFjY291bnQgSUQuKFF1ZXVlQ291bnQQEPQBAAAIXQEgTnVtYmVyIG9mIGR1cmF0aW9uIHF1ZXVlcyBpbiB0b3RhbC4gVGhpcyBzZXRzIHRoZSBtYXhpbXVtIGR1cmF0aW9uIHN1cHBvcnRlZCwgd2hpY2ggaXOMIHRoaXMgdmFsdWUgbXVsdGlwbGllZCBieSBgUGVyaW9kYC4sTWF4UXVldWVMZW4QEOgDAAAM8CBNYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0aGF0IG1heSBiZSBpbiBlYWNoIGR1cmF0aW9uIHF1ZXVlLgBoIE11c3QgYmUgbGFyZ2VyIHRoYW4gemVyby4wRmlmb1F1ZXVlTGVuEBD6AAAADAkBIFBvcnRpb24gb2YgdGhlIHF1ZXVlIHdoaWNoIGlzIGZyZWUgZnJvbSBvcmRlcmluZyBhbmQganVzdCBhIEZJRk8uAJwgTXVzdCBiZSBubyBncmVhdGVyIHRoYW4gYE1heFF1ZXVlTGVuYC4oQmFzZVBlcmlvZBAQwIkBAAhBASBUaGUgYmFzZSBwZXJpb2QgZm9yIHRoZSBkdXJhdGlvbiBxdWV1ZXMuIFRoaXMgaXMgdGhlIGNvbW1vbiBtdWx0aXBsZSBhY3Jvc3MgYWxszCBzdXBwb3J0ZWQgZnJlZXppbmcgZHVyYXRpb25zIHRoYXQgY2FuIGJlIGJpZCB1cG9uLhhNaW5CaWQYQDQ1JhoIAwAAAAAAAAAAAAAYIQEgVGhlIG1pbmltdW0gYW1vdW50IG9mIGZ1bmRzIHRoYXQgbWF5IGJlIHBsYWNlZCBpbiBhIGJpZC4gTm90ZSB0aGF0IHRoaXNhASBkb2VzIG5vdCBhY3R1YWxseSBsaW1pdCB0aGUgYW1vdW50IHdoaWNoIG1heSBiZSByZXByZXNlbnRlZCBpbiBhIHJlY2VpcHQgc2luY2UgYmlkcyBtYXlsIGJlIHNwbGl0IHVwIGJ5IHRoZSBzeXN0ZW0uAGUBIEl0IHNob3VsZCBiZSBhdCBsZWFzdCBiaWcgZW5vdWdoIHRvIGVuc3VyZSB0aGF0IHRoZXJlIGlzIG5vIHBvc3NpYmxlIHN0b3JhZ2Ugc3BhbSBhdHRhY2tkIG9yIHF1ZXVlLWZpbGxpbmcgYXR0YWNrLihNaW5SZWNlaXB0nQIgAOh2SBcAAAAIVQEgVGhlIG1pbmltdW0gYW1vdW50IG9mIGZ1bmRzIHdoaWNoIG1heSBpbnRlbnRpb25hbGx5IGJlIGxlZnQgcmVtYWluaW5nIHVuZGVyIGEgc2luZ2xlJCByZWNlaXB0LjBJbnRha2VQZXJpb2QQEDIAAAAQXQEgVGhlIG51bWJlciBvZiBibG9ja3MgYmV0d2VlbiBjb25zZWN1dGl2ZSBhdHRlbXB0cyB0byBkZXF1ZXVlIGJpZHMgYW5kIGNyZWF0ZSByZWNlaXB0cy4AXQEgQSBsYXJnZXIgdmFsdWUgcmVzdWx0cyBpbiBmZXdlciBzdG9yYWdlIGhpdHMgZWFjaCBibG9jaywgYnV0IGEgc2xvd2VyIHBlcmlvZCB0byBnZXQgdG8wIHRoZSB0YXJnZXQuPE1heEludGFrZVdlaWdodCg8BwDQ7ZAuE5mZmZmZmZkZDFUBIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBiaWRzIHRoYXQgY2FuIGNvbnNvbGlkYXRlZCBpbnRvIHJlY2VpcHRzIGluIGEgc2luZ2xlIGludGFrZS4gQV0BIGxhcmdlciB2YWx1ZSBoZXJlIG1lYW5zIGxlc3Mgb2YgdGhlIGJsb2NrIGF2YWlsYWJsZSBmb3IgdHJhbnNhY3Rpb25zIHNob3VsZCB0aGVyZSBiZSBhOCBnbHV0IG9mIGJpZHMuMFRoYXdUaHJvdHRsZd0LMAAA2emsLXgDBQAAAARJASBUaGUgbWF4aW11bSBwcm9wb3J0aW9uIHdoaWNoIG1heSBiZSB0aGF3ZWQgYW5kIHRoZSBwZXJpb2Qgb3ZlciB3aGljaCBpdCBpcyByZXNldC4B4QsmAFhOaXNDb3VudGVycGFydEJhbGFuY2VzAVhOaXNDb3VudGVycGFydEJhbGFuY2VzHDRUb3RhbElzc3VhbmNlAQAYQAAAAAAAAAAAAAAAAAAAAAAEmCBUaGUgdG90YWwgdW5pdHMgaXNzdWVkIGluIHRoZSBzeXN0ZW0uQEluYWN0aXZlSXNzdWFuY2UBABhAAAAAAAAAAAAAAAAAAAAAAAQJASBUaGUgdG90YWwgdW5pdHMgb2Ygb3V0c3RhbmRpbmcgZGVhY3RpdmF0ZWQgYmFsYW5jZSBpbiB0aGUgc3lzdGVtLhxBY2NvdW50AQEEAgAUAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAYAkBIFRoZSBCYWxhbmNlcyBwYWxsZXQgZXhhbXBsZSBvZiBzdG9yaW5nIHRoZSBiYWxhbmNlIG9mIGFuIGFjY291bnQuACggIyBFeGFtcGxlADQgYGBgbm9jb21waWxlsCAgaW1wbCBwYWxsZXRfYmFsYW5jZXM6OkNvbmZpZyBmb3IgUnVudGltZSB7GQIgICAgdHlwZSBBY2NvdW50U3RvcmUgPSBTdG9yYWdlTWFwU2hpbTxTZWxmOjpBY2NvdW50PFJ1bnRpbWU+LCBmcmFtZV9zeXN0ZW06OlByb3ZpZGVyPFJ1bnRpbWU+LCBBY2NvdW50SWQsIFNlbGY6OkFjY291bnREYXRhPEJhbGFuY2U+PgwgIH0QIGBgYAAVASBZb3UgY2FuIGFsc28gc3RvcmUgdGhlIGJhbGFuY2Ugb2YgYW4gYWNjb3VudCBpbiB0aGUgYFN5c3RlbWAgcGFsbGV0LgAoICMgRXhhbXBsZQA0IGBgYG5vY29tcGlsZbAgIGltcGwgcGFsbGV0X2JhbGFuY2VzOjpDb25maWcgZm9yIFJ1bnRpbWUge3QgICB0eXBlIEFjY291bnRTdG9yZSA9IFN5c3RlbQwgIH0QIGBgYABRASBCdXQgdGhpcyBjb21lcyB3aXRoIHRyYWRlb2Zmcywgc3RvcmluZyBhY2NvdW50IGJhbGFuY2VzIGluIHRoZSBzeXN0ZW0gcGFsbGV0IHN0b3Jlc20BIGBmcmFtZV9zeXN0ZW1gIGRhdGEgYWxvbmdzaWRlIHRoZSBhY2NvdW50IGRhdGEgY29udHJhcnkgdG8gc3RvcmluZyBhY2NvdW50IGJhbGFuY2VzIGluIHRoZSkBIGBCYWxhbmNlc2AgcGFsbGV0LCB3aGljaCB1c2VzIGEgYFN0b3JhZ2VNYXBgIHRvIHN0b3JlIGJhbGFuY2VzIGRhdGEgb25seS5BASBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgY2FzZSB0aGF0IHRoaXMgcGFsbGV0IGlzIHVzZWQgdG8gc3RvcmUgYmFsYW5jZXMuFExvY2tzAQEEAgDlCwQAELggQW55IGxpcXVpZGl0eSBsb2NrcyBvbiBzb21lIGFjY291bnQgYmFsYW5jZXMuJQEgTk9URTogU2hvdWxkIG9ubHkgYmUgYWNjZXNzZWQgd2hlbiBzZXR0aW5nLCBjaGFuZ2luZyBhbmQgZnJlZWluZyBhIGxvY2suAK0BIFVzZSBvZiBsb2NrcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBmcmVlemVzLiBTZWUgYGh0dHBzOi8vZ2l0aHViLmNvbS9wYXJpdHl0ZWNoL3N1YnN0cmF0ZS9wdWxsLzEyOTUxL2AgUmVzZXJ2ZXMBAQQCAOkLBAAMpCBOYW1lZCByZXNlcnZlcyBvbiBzb21lIGFjY291bnQgYmFsYW5jZXMuALEBIFVzZSBvZiByZXNlcnZlcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBob2xkcy4gU2VlIGBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvcHVsbC8xMjk1MS9gFEhvbGRzAQEEAgAdCQQABGwgSG9sZHMgb24gYWNjb3VudCBiYWxhbmNlcy4cRnJlZXplcwEBBAIA7QsEAASIIEZyZWV6ZSBsb2NrcyBvbiBhY2NvdW50IGJhbGFuY2VzLgGVBAEVCBBIRXhpc3RlbnRpYWxEZXBvc2l0GEAA5AtUAgAAAAAAAAAAAAAAIEEBIFRoZSBtaW5pbXVtIGFtb3VudCByZXF1aXJlZCB0byBrZWVwIGFuIGFjY291bnQgb3Blbi4gTVVTVCBCRSBHUkVBVEVSIFRIQU4gWkVSTyEAWQEgSWYgeW91ICpyZWFsbHkqIG5lZWQgaXQgdG8gYmUgemVybywgeW91IGNhbiBlbmFibGUgdGhlIGZlYXR1cmUgYGluc2VjdXJlX3plcm9fZWRgIGZvcmEBIHRoaXMgcGFsbGV0LiBIb3dldmVyLCB5b3UgZG8gc28gYXQgeW91ciBvd24gcmlzazogdGhpcyB3aWxsIG9wZW4gdXAgYSBtYWpvciBEb1MgdmVjdG9yLlkBIEluIGNhc2UgeW91IGhhdmUgbXVsdGlwbGUgc291cmNlcyBvZiBwcm92aWRlciByZWZlcmVuY2VzLCB5b3UgbWF5IGFsc28gZ2V0IHVuZXhwZWN0ZWSMIGJlaGF2aW91ciBpZiB5b3Ugc2V0IHRoaXMgdG8gemVyby4A8CBCb3R0b20gbGluZTogRG8geW91cnNlbGYgYSBmYXZvdXIgYW5kIG1ha2UgaXQgYXQgbGVhc3Qgb25lISBNYXhMb2NrcxAQBAAAABD0IFRoZSBtYXhpbXVtIG51bWJlciBvZiBsb2NrcyB0aGF0IHNob3VsZCBleGlzdCBvbiBhbiBhY2NvdW50LtwgTm90IHN0cmljdGx5IGVuZm9yY2VkLCBidXQgdXNlZCBmb3Igd2VpZ2h0IGVzdGltYXRpb24uAK0BIFVzZSBvZiBsb2NrcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBmcmVlemVzLiBTZWUgYGh0dHBzOi8vZ2l0aHViLmNvbS9wYXJpdHl0ZWNoL3N1YnN0cmF0ZS9wdWxsLzEyOTUxL2AsTWF4UmVzZXJ2ZXMQEAQAAAAMDQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIG5hbWVkIHJlc2VydmVzIHRoYXQgY2FuIGV4aXN0IG9uIGFuIGFjY291bnQuALEBIFVzZSBvZiByZXNlcnZlcyBpcyBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBob2xkcy4gU2VlIGBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvcHVsbC8xMjk1MS9gKE1heEZyZWV6ZXMQEAEAAAAEYQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGl2aWR1YWwgZnJlZXplIGxvY2tzIHRoYXQgY2FuIGV4aXN0IG9uIGFuIGFjY291bnQgYXQgYW55IHRpbWUuAfkLLQAkVm90ZXJMaXN0ASRWb3Rlckxpc3QMJExpc3ROb2RlcwABBAUA/QsEAAyAIEEgc2luZ2xlIG5vZGUsIHdpdGhpbiBzb21lIGJhZy4ABQEgTm9kZXMgc3RvcmUgbGlua3MgZm9yd2FyZCBhbmQgYmFjayB3aXRoaW4gdGhlaXIgcmVzcGVjdGl2ZSBiYWdzLkxDb3VudGVyRm9yTGlzdE5vZGVzAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAgTGlzdEJhZ3MAAQQFMAEMBAAMZCBBIGJhZyBzdG9yZWQgaW4gc3RvcmFnZS4AGQEgU3RvcmVzIGEgYEJhZ2Agc3RydWN0LCB3aGljaCBzdG9yZXMgaGVhZCBhbmQgdGFpbCBwb2ludGVycyB0byBpdHNlbGYuAZkEARkIBDRCYWdUaHJlc2hvbGRzBQwJGSEDVaD8AQAAAADapkYCAAAAAG5zmwIAAAAAeZf8AgAAAADQ3msDAAAAADNY6wMAAAAADV99BAAAAACapiQFAAAAALFG5AUAAAAAZ8q/BgAAAADWQLsHAAAAAFNQ2wgAAAAAcUwlCgAAAAA2T58LAAAAAABWUA0AAAAAmGJADwAAAAAboXgRAAAAAGWTAxQAAAAAzULtFgAAAAAgeUMaAAAAAOQBFh4AAAAAHvV2IgAAAAD5DHsnAAAAAOAHOi0AAAAA6BjPMwAAAACMaFk7AAAAAC6o/EMAAAAACrvhTQAAAADDdzdZAAAAABmGM2YAAAAA6FwTdQAAAAAYZR2GAAAAAOhGopkAAAAAvmf+rwAAAACEn5vJAAAAAK0t8+YAAAAAKPePCAEAAADYFxEvAQAAAL7TLFsBAAAAwvWzjQEAAAAKrJXHAQAAACv04wkCAAAAIqzYVQIAAAAQYNusAgAAAC7whxADAAAAfC62ggMAAAArmIIFBAAAABdUWJsEAAAAnaX8RgUAAAD/CZwLBgAAAGw+2ewGAAAAxHXe7gcAAACWD3EWCQAAAKotCGkKAAAA+JLm7AsAAACMRjipDQAAAJeGNKYPAAAAbaxE7REAAAB4uTCJFAAAABZgUoYXAAAA5HnP8hoAAABAAN3eHgAAAP/DC10jAAAAgk+ggigAAAAnk/dnLgAAAKY4+ig1AAAASL+g5TwAAABH0orCRQAAAMWlrOlPAAAA9o4Vi1sAAACQg9PdaAAAAGa19yB4AAAAzxvBnIkAAAD8b/KjnQAAAB7vWZW0AAAAwCCS3c4AAACy7QP57AAAAAeJM3YPAQAA0w5j+DYBAAASUpc6ZAEAAOEjDROYAQAAoHIvd9MBAAB4ASGAFwIAAGUz729lAgAAQoWGt74CAAAo54T9JAMAALE/CiaaAwAA0BasWyAEAAAiyLYZugQAAHnH7DdqBQAA4JL79zMGAAA9BeYUGwcAAPcBrdQjCAAA2BCKHFMJAADIqxuIrgoAALLv8IM8DAAA6FjyawQOAAAPfTeuDhAAANWn7vJkEgAAWD8TShIVAAAXU8tfIxgAAFw2ZLimGwAAphoK9awfAAAz8n8iSSQAAEs6TBORKQAAKIgFx50vAAA306fgizYAAP+hIi58PgAA8MShQ5RHAADlrW8t/1EAAAduuzvuXQAAq/AG7JlrAACMbI70QnsAADrWmnYzjQAAuldpXcChAABd2iTwSrkAALZvYJ5C1AAAdlWWDyfzAAAljWx/ihYBAFFp63EUPwEAub5yzIRtAQA8Sxdit6IBAMwvNASo3wEA9yduKnclAgBICzNIb3UCAB1c9egK0QIAD2QQsPs5AwCpBHddMrIDAC3hIf3nOwQAMK+3bKjZBAD7dT5pXo4FADxE5F1hXQYALLk7NYVKBwCo+Mt3LFoIAHpIuQ1dkQkAPT3HBdj1CgANHkLSNI4MABywvnwAYg4AJHljZOF5EAAbje0vwN8SANPpQrX2nhUA6MqZtIXEGADQyIxlUl8cAML1d/lsgCAACrziYGE7JQB0vU3Sk6YqAOxLYciq2zAASLA3bQj4NwDAE4SxVR1AANwr/aEhckkAcLZF7ZciVABs/FH6UWFgAGyTCG1GaG4AnKrohtt5fgDANoN2IeKQAKBkm2U6+KUAKKNM7vYfvgA4WqKXrsvZAEgzNRZdfvkA0MrkUg7OHQEAkKeupGZHAeCdkqUGDXcBMHeO3MKirQHQC7jVOyrsAUCxjAlvyzMCgFGTAm7ZhQKg9tZjo9jjAmC7y4cBhk8DoEX4tjzfygNAgW3oNyxYBEBeIKnQCfoEgI1yRT12swWA81vAN9+HBoBO7Kg4MnsHALGYoQ7vkQiACy+bKj3RCYCiSJQFBD8LAHJMWhMH4gwA2PiXxgXCDgCYkL494OcQAENPZUbBXRMA1hz/fU4vFgCbMrhz32kZAACHddC8HB0A2lbrr2hZIQDay0KB8TMmADyInvdQwysACrfmy9ghMgA0ba1Sr205AFBH6TNeyUEAJO4Y6HVcSwA41LQASVRWAAh9drLC5GIAmBwDmVxJcQCIHlU/OMaBALDLkKFhqZQAKE/lnkBMqgDA5UowQBXDAGDNdDezed///////////6zQIFRoZSBsaXN0IG9mIHRocmVzaG9sZHMgc2VwYXJhdGluZyB0aGUgdmFyaW91cyBiYWdzLgBJASBJZHMgYXJlIHNlcGFyYXRlZCBpbnRvIHVuc29ydGVkIGJhZ3MgYWNjb3JkaW5nIHRvIHRoZWlyIHNjb3JlLiBUaGlzIHNwZWNpZmllcyB0aGVhASB0aHJlc2hvbGRzIHNlcGFyYXRpbmcgdGhlIGJhZ3MuIEFuIGlkJ3MgYmFnIGlzIHRoZSBsYXJnZXN0IGJhZyBmb3Igd2hpY2ggdGhlIGlkJ3Mgc2NvcmW4IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBpdHMgdXBwZXIgdGhyZXNob2xkLgBlASBXaGVuIGlkcyBhcmUgaXRlcmF0ZWQsIGhpZ2hlciBiYWdzIGFyZSBpdGVyYXRlZCBjb21wbGV0ZWx5IGJlZm9yZSBsb3dlciBiYWdzLiBUaGlzIG1lYW5zWQEgdGhhdCBpdGVyYXRpb24gaXMgX3NlbWktc29ydGVkXzogaWRzIG9mIGhpZ2hlciBzY29yZSB0ZW5kIHRvIGNvbWUgYmVmb3JlIGlkcyBvZiBsb3dlci0BIHNjb3JlLCBidXQgcGVlciBpZHMgd2l0aGluIGEgcGFydGljdWxhciBiYWcgYXJlIHNvcnRlZCBpbiBpbnNlcnRpb24gb3JkZXIuAGggIyBFeHByZXNzaW5nIHRoZSBjb25zdGFudABNASBUaGlzIGNvbnN0YW50IG11c3QgYmUgc29ydGVkIGluIHN0cmljdGx5IGluY3JlYXNpbmcgb3JkZXIuIER1cGxpY2F0ZSBpdGVtcyBhcmUgbm90LCBwZXJtaXR0ZWQuAEEBIFRoZXJlIGlzIGFuIGltcGxpZWQgdXBwZXIgbGltaXQgb2YgYFNjb3JlOjpNQVhgOyB0aGF0IHZhbHVlIGRvZXMgbm90IG5lZWQgdG8gYmUhASBzcGVjaWZpZWQgd2l0aGluIHRoZSBiYWcuIEZvciBhbnkgdHdvIHRocmVzaG9sZCBsaXN0cywgaWYgb25lIGVuZHMgd2l0aDEBIGBTY29yZTo6TUFYYCwgdGhlIG90aGVyIG9uZSBkb2VzIG5vdCwgYW5kIHRoZXkgYXJlIG90aGVyd2lzZSBlcXVhbCwgdGhlIHR3b3wgbGlzdHMgd2lsbCBiZWhhdmUgaWRlbnRpY2FsbHkuADggIyBDYWxjdWxhdGlvbgBVASBJdCBpcyByZWNvbW1lbmRlZCB0byBnZW5lcmF0ZSB0aGUgc2V0IG9mIHRocmVzaG9sZHMgaW4gYSBnZW9tZXRyaWMgc2VyaWVzLCBzdWNoIHRoYXRBASB0aGVyZSBleGlzdHMgc29tZSBjb25zdGFudCByYXRpbyBzdWNoIHRoYXQgYHRocmVzaG9sZFtrICsgMV0gPT0gKHRocmVzaG9sZFtrXSAq0CBjb25zdGFudF9yYXRpbykubWF4KHRocmVzaG9sZFtrXSArIDEpYCBmb3IgYWxsIGBrYC4AWQEgVGhlIGhlbHBlcnMgaW4gdGhlIGAvdXRpbHMvZnJhbWUvZ2VuZXJhdGUtYmFnc2AgbW9kdWxlIGNhbiBzaW1wbGlmeSB0aGlzIGNhbGN1bGF0aW9uLgAsICMgRXhhbXBsZXMAUQEgLSBJZiBgQmFnVGhyZXNob2xkczo6Z2V0KCkuaXNfZW1wdHkoKWAsIHRoZW4gYWxsIGlkcyBhcmUgcHV0IGludG8gdGhlIHNhbWUgYmFnLCBhbmSwICAgaXRlcmF0aW9uIGlzIHN0cmljdGx5IGluIGluc2VydGlvbiBvcmRlci5hASAtIElmIGBCYWdUaHJlc2hvbGRzOjpnZXQoKS5sZW4oKSA9PSA2NGAsIGFuZCB0aGUgdGhyZXNob2xkcyBhcmUgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8RASAgIHRoZSBwcm9jZWR1cmUgZ2l2ZW4gYWJvdmUsIHRoZW4gdGhlIGNvbnN0YW50IHJhdGlvIGlzIGVxdWFsIHRvIDIuZQEgLSBJZiBgQmFnVGhyZXNob2xkczo6Z2V0KCkubGVuKCkgPT0gMjAwYCwgYW5kIHRoZSB0aHJlc2hvbGRzIGFyZSBkZXRlcm1pbmVkIGFjY29yZGluZyB0b1kBICAgdGhlIHByb2NlZHVyZSBnaXZlbiBhYm92ZSwgdGhlbiB0aGUgY29uc3RhbnQgcmF0aW8gaXMgYXBwcm94aW1hdGVseSBlcXVhbCB0byAxLjI0OC5hASAtIElmIHRoZSB0aHJlc2hvbGQgbGlzdCBiZWdpbnMgYFsxLCAyLCAzLCAuLi5dYCwgdGhlbiBhbiBpZCB3aXRoIHNjb3JlIDAgb3IgMSB3aWxsIGZhbGzwICAgaW50byBiYWcgMCwgYW4gaWQgd2l0aCBzY29yZSAyIHdpbGwgZmFsbCBpbnRvIGJhZyAxLCBldGMuADAgIyBNaWdyYXRpb24AYQEgSW4gdGhlIGV2ZW50IHRoYXQgdGhpcyBsaXN0IGV2ZXIgY2hhbmdlcywgYSBjb3B5IG9mIHRoZSBvbGQgYmFncyBsaXN0IG11c3QgYmUgcmV0YWluZWQuXQEgV2l0aCB0aGF0IGBMaXN0OjptaWdyYXRlYCBjYW4gYmUgY2FsbGVkLCB3aGljaCB3aWxsIHBlcmZvcm0gdGhlIGFwcHJvcHJpYXRlIG1pZ3JhdGlvbi4BCQwnADxOb21pbmF0aW9uUG9vbHMBPE5vbWluYXRpb25Qb29sc1RAVG90YWxWYWx1ZUxvY2tlZAEAGEAAAAAAAAAAAAAAAAAAAAAAFIwgVGhlIHN1bSBvZiBmdW5kcyBhY3Jvc3MgYWxsIHBvb2xzLgBxASBUaGlzIG1pZ2h0IGJlIGxvd2VyIGJ1dCBuZXZlciBoaWdoZXIgdGhhbiB0aGUgc3VtIG9mIGB0b3RhbF9iYWxhbmNlYCBvZiBhbGwgW2BQb29sTWVtYmVyc2BdWQEgYmVjYXVzZSBjYWxsaW5nIGBwb29sX3dpdGhkcmF3X3VuYm9uZGVkYCBtaWdodCBkZWNyZWFzZSB0aGUgdG90YWwgc3Rha2Ugb2YgdGhlIHBvb2wncykBIGBib25kZWRfYWNjb3VudGAgd2l0aG91dCBhZGp1c3RpbmcgdGhlIHBhbGxldC1pbnRlcm5hbCBgVW5ib25kaW5nUG9vbGAncy4sTWluSm9pbkJvbmQBABhAAAAAAAAAAAAAAAAAAAAAAAScIE1pbmltdW0gYW1vdW50IHRvIGJvbmQgdG8gam9pbiBhIHBvb2wuNE1pbkNyZWF0ZUJvbmQBABhAAAAAAAAAAAAAAAAAAAAAABygIE1pbmltdW0gYm9uZCByZXF1aXJlZCB0byBjcmVhdGUgYSBwb29sLgBlASBUaGlzIGlzIHRoZSBhbW91bnQgdGhhdCB0aGUgZGVwb3NpdG9yIG11c3QgcHV0IGFzIHRoZWlyIGluaXRpYWwgc3Rha2UgaW4gdGhlIHBvb2wsIGFzIGFuiCBpbmRpY2F0aW9uIG9mICJza2luIGluIHRoZSBnYW1lIi4AaQEgVGhpcyBpcyB0aGUgdmFsdWUgdGhhdCB3aWxsIGFsd2F5cyBleGlzdCBpbiB0aGUgc3Rha2luZyBsZWRnZXIgb2YgdGhlIHBvb2wgYm9uZGVkIGFjY291bnSAIHdoaWxlIGFsbCBvdGhlciBhY2NvdW50cyBsZWF2ZS4gTWF4UG9vbHMAABAEAAhpASBNYXhpbXVtIG51bWJlciBvZiBub21pbmF0aW9uIHBvb2xzIHRoYXQgY2FuIGV4aXN0LiBJZiBgTm9uZWAsIHRoZW4gYW4gdW5ib3VuZGVkIG51bWJlciBvZkQgcG9vbHMgY2FuIGV4aXN0LjhNYXhQb29sTWVtYmVycwAAEAQACEkBIE1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgdGhhdCBjYW4gZXhpc3QgaW4gdGhlIHN5c3RlbS4gSWYgYE5vbmVgLCB0aGVuIHRoZSBjb3VudLggbWVtYmVycyBhcmUgbm90IGJvdW5kIG9uIGEgc3lzdGVtIHdpZGUgYmFzaXMuVE1heFBvb2xNZW1iZXJzUGVyUG9vbAAAEAQACEEBIE1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgdGhhdCBtYXkgYmVsb25nIHRvIHBvb2wuIElmIGBOb25lYCwgdGhlbiB0aGUgY291bnQgb2aoIG1lbWJlcnMgaXMgbm90IGJvdW5kIG9uIGEgcGVyIHBvb2wgYmFzaXMuTEdsb2JhbE1heENvbW1pc3Npb24AAJQEAAxpASBUaGUgbWF4aW11bSBjb21taXNzaW9uIHRoYXQgY2FuIGJlIGNoYXJnZWQgYnkgYSBwb29sLiBVc2VkIG9uIGNvbW1pc3Npb24gcGF5b3V0cyB0byBib3VuZCUBIHBvb2wgY29tbWlzc2lvbnMgdGhhdCBhcmUgPiBgR2xvYmFsTWF4Q29tbWlzc2lvbmAsIG5lY2Vzc2FyeSBpZiBhIGZ1dHVyZQ0BIGBHbG9iYWxNYXhDb21taXNzaW9uYCBpcyBsb3dlciB0aGFuIHNvbWUgY3VycmVudCBwb29sIGNvbW1pc3Npb25zLixQb29sTWVtYmVycwABBAUAEQwEAAxAIEFjdGl2ZSBtZW1iZXJzLgDQIFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLlRDb3VudGVyRm9yUG9vbE1lbWJlcnMBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcCxCb25kZWRQb29scwABBAUQHQwEAARoIFN0b3JhZ2UgZm9yIGJvbmRlZCBwb29scy5UQ291bnRlckZvckJvbmRlZFBvb2xzAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAsUmV3YXJkUG9vbHMAAQQFEDEMBAAIdQEgUmV3YXJkIHBvb2xzLiBUaGlzIGlzIHdoZXJlIHRoZXJlIHJld2FyZHMgZm9yIGVhY2ggcG9vbCBhY2N1bXVsYXRlLiBXaGVuIGEgbWVtYmVycyBwYXlvdXQgaXNZASBjbGFpbWVkLCB0aGUgYmFsYW5jZSBjb21lcyBvdXQgb2YgdGhlIHJld2FyZCBwb29sLiBLZXllZCBieSB0aGUgYm9uZGVkIHBvb2xzIGFjY291bnQuVENvdW50ZXJGb3JSZXdhcmRQb29scwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwPFN1YlBvb2xzU3RvcmFnZQABBAUQNQwEAAgZASBHcm91cHMgb2YgdW5ib25kaW5nIHBvb2xzLiBFYWNoIGdyb3VwIG9mIHVuYm9uZGluZyBwb29scyBiZWxvbmdzIHRvIGEpASBib25kZWQgcG9vbCwgaGVuY2UgdGhlIG5hbWUgc3ViLXBvb2xzLiBLZXllZCBieSB0aGUgYm9uZGVkIHBvb2xzIGFjY291bnQuZENvdW50ZXJGb3JTdWJQb29sc1N0b3JhZ2UBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcCBNZXRhZGF0YQEBBAUQTQwEAARcIE1ldGFkYXRhIGZvciB0aGUgcG9vbC5IQ291bnRlckZvck1ldGFkYXRhAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXAoTGFzdFBvb2xJZAEAEBAAAAAABNAgRXZlciBpbmNyZWFzaW5nIG51bWJlciBvZiBhbGwgcG9vbHMgY3JlYXRlZCBzbyBmYXIuTFJldmVyc2VQb29sSWRMb29rdXAAAQQFABAEABDcIEEgcmV2ZXJzZSBsb29rdXAgZnJvbSB0aGUgcG9vbCdzIGFjY291bnQgaWQgdG8gaXRzIGlkLgB1ASBUaGlzIGlzIG9ubHkgdXNlZCBmb3Igc2xhc2hpbmcgYW5kIG9uIGF1dG9tYXRpYyB3aXRoZHJhdyB1cGRhdGUuIEluIGFsbCBvdGhlciBpbnN0YW5jZXMsIHRoZSUBIHBvb2wgaWQgaXMgdXNlZCwgYW5kIHRoZSBhY2NvdW50cyBhcmUgZGV0ZXJtaW5pc3RpY2FsbHkgZGVyaXZlZCBmcm9tIGl0LnRDb3VudGVyRm9yUmV2ZXJzZVBvb2xJZExvb2t1cAEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwQENsYWltUGVybWlzc2lvbnMBAQQFALkEBAIEAQEgTWFwIGZyb20gYSBwb29sIG1lbWJlciBhY2NvdW50IHRvIHRoZWlyIG9wdGVkIGNsYWltIHBlcm1pc3Npb24uAZ0EAR0IDCBQYWxsZXRJZP0JIHB5L25vcGxzBIQgVGhlIG5vbWluYXRpb24gcG9vbCdzIHBhbGxldCBpZC5ITWF4UG9pbnRzVG9CYWxhbmNlCAQKMB0BIFRoZSBtYXhpbXVtIHBvb2wgcG9pbnRzLXRvLWJhbGFuY2UgcmF0aW8gdGhhdCBhbiBgb3BlbmAgcG9vbCBjYW4gaGF2ZS4AVQEgVGhpcyBpcyBpbXBvcnRhbnQgaW4gdGhlIGV2ZW50IHNsYXNoaW5nIHRha2VzIHBsYWNlIGFuZCB0aGUgcG9vbCdzIHBvaW50cy10by1iYWxhbmNlfCByYXRpbyBiZWNvbWVzIGRpc3Byb3BvcnRpb25hbC4AZQEgTW9yZW92ZXIsIHRoaXMgcmVsYXRlcyB0byB0aGUgYFJld2FyZENvdW50ZXJgIHR5cGUgYXMgd2VsbCwgYXMgdGhlIGFyaXRobWV0aWMgb3BlcmF0aW9uc1UBIGFyZSBhIGZ1bmN0aW9uIG9mIG51bWJlciBvZiBwb2ludHMsIGFuZCBieSBzZXR0aW5nIHRoaXMgdmFsdWUgdG8gZS5nLiAxMCwgeW91IGVuc3VyZWUBIHRoYXQgdGhlIHRvdGFsIG51bWJlciBvZiBwb2ludHMgaW4gdGhlIHN5c3RlbSBhcmUgYXQgbW9zdCAxMCB0aW1lcyB0aGUgdG90YWxfaXNzdWFuY2Ugb2acIHRoZSBjaGFpbiwgaW4gdGhlIGFic29sdXRlIHdvcnNlIGNhc2UuAEkBIEZvciBhIHZhbHVlIG9mIDEwLCB0aGUgdGhyZXNob2xkIHdvdWxkIGJlIGEgcG9vbCBwb2ludHMtdG8tYmFsYW5jZSByYXRpbyBvZiAxMDoxLjEBIFN1Y2ggYSBzY2VuYXJpbyB3b3VsZCBhbHNvIGJlIHRoZSBlcXVpdmFsZW50IG9mIHRoZSBwb29sIGJlaW5nIDkwJSBzbGFzaGVkLjBNYXhVbmJvbmRpbmcQECAAAAAEPQEgVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91cyB1bmJvbmRpbmcgY2h1bmtzIHRoYXQgY2FuIGV4aXN0IHBlciBtZW1iZXIuAVEMKQAsRmFzdFVuc3Rha2UBLEZhc3RVbnN0YWtlEBBIZWFkAABZDAQADMAgVGhlIGN1cnJlbnQgImhlYWQgb2YgdGhlIHF1ZXVlIiBiZWluZyB1bnN0YWtlZC4AKQEgVGhlIGhlYWQgaW4gaXRzZWxmIGNhbiBiZSBhIGJhdGNoIG9mIHVwIHRvIFtgQ29uZmlnOjpCYXRjaFNpemVgXSBzdGFrZXJzLhRRdWV1ZQABBAUAGAQADMAgVGhlIG1hcCBvZiBhbGwgYWNjb3VudHMgd2lzaGluZyB0byBiZSB1bnN0YWtlZC4AOQEgS2VlcHMgdHJhY2sgb2YgYEFjY291bnRJZGAgd2lzaGluZyB0byB1bnN0YWtlIGFuZCBpdCdzIGNvcnJlc3BvbmRpbmcgZGVwb3NpdC48Q291bnRlckZvclF1ZXVlAQAQEAAAAAAErENvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXBMRXJhc1RvQ2hlY2tQZXJCbG9jawEAEBAAAAAAIIwgTnVtYmVyIG9mIGVyYXMgdG8gY2hlY2sgcGVyIGJsb2NrLgA1ASBJZiBzZXQgdG8gMCwgdGhpcyBwYWxsZXQgZG9lcyBhYnNvbHV0ZWx5IG5vdGhpbmcuIENhbm5vdCBiZSBzZXQgdG8gbW9yZSB0aGFukCBbYENvbmZpZzo6TWF4RXJhc1RvQ2hlY2tQZXJCbG9ja2BdLgBlASBCYXNlZCBvbiB0aGUgYW1vdW50IG9mIHdlaWdodCBhdmFpbGFibGUgYXQgW2BQYWxsZXQ6Om9uX2lkbGVgXSwgdXAgdG8gdGhpcyBtYW55IGVyYXMgYXJlXQEgY2hlY2tlZC4gVGhlIGNoZWNraW5nIGlzIHJlcHJlc2VudGVkIGJ5IHVwZGF0aW5nIFtgVW5zdGFrZVJlcXVlc3Q6OmNoZWNrZWRgXSwgd2hpY2ggaXNQIHN0b3JlZCBpbiBbYEhlYWRgXS4B0QQBIQgEHERlcG9zaXQYQDRN0sIHAAAAAAAAAAAAAAAIZQEgRGVwb3NpdCB0byB0YWtlIGZvciB1bnN0YWtpbmcsIHRvIG1ha2Ugc3VyZSB3ZSdyZSBhYmxlIHRvIHNsYXNoIHRoZSBpdCBpbiBvcmRlciB0byBjb3ZlcsAgdGhlIGNvc3RzIG9mIHJlc291cmNlcyBvbiB1bnN1Y2Nlc3NmdWwgdW5zdGFrZS4BZQwqAEBEZWxlZ2F0ZWRTdGFraW5nAUBEZWxlZ2F0ZWRTdGFraW5nEChEZWxlZ2F0b3JzAAEEBQBpDAQAEKQgTWFwIG9mIERlbGVnYXRvcnMgdG8gdGhlaXIgYERlbGVnYXRpb25gLgBhASBJbXBsZW1lbnRhdGlvbiBub3RlOiBXZSBhcmUgbm90IHVzaW5nIGEgZG91YmxlIG1hcCB3aXRoIGBkZWxlZ2F0b3JgIGFuZCBgYWdlbnRgIGFjY291bnRhASBhcyBrZXlzIHNpbmNlIHdlIHdhbnQgdG8gcmVzdHJpY3QgZGVsZWdhdG9ycyB0byBkZWxlZ2F0ZSBvbmx5IHRvIG9uZSBhY2NvdW50IGF0IGEgdGltZS5QQ291bnRlckZvckRlbGVnYXRvcnMBABAQAAAAAASsQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcBhBZ2VudHMAAQQFAG0MBAAEiCBNYXAgb2YgYEFnZW50YCB0byB0aGVpciBgTGVkZ2VyYC5AQ291bnRlckZvckFnZW50cwEAEBAAAAAABKxDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFwAAElCAggUGFsbGV0SWT9CSBweS9kbHN0awSQIEluamVjdGVkIGlkZW50aWZpZXIgZm9yIHRoZSBwYWxsZXQuTFNsYXNoUmV3YXJkRnJhY3Rpb26UEICWmAAEUQEgRnJhY3Rpb24gb2YgdGhlIHNsYXNoIHRoYXQgaXMgcmV3YXJkZWQgdG8gdGhlIGNhbGxlciBvZiBwZW5kaW5nIHNsYXNoIHRvIHRoZSBhZ2VudC4BcQwvAEBQYXJhY2hhaW5zT3JpZ2luAAAAAAAyEHkBIFRoZXJlIGlzIG5vIHdheSB0byByZWdpc3RlciBhbiBvcmlnaW4gdHlwZSBpbiBgY29uc3RydWN0X3J1bnRpbWVgIHdpdGhvdXQgYSBwYWxsZXQgdGhlIG9yaWdpbjAgYmVsb25ncyB0by4AdQEgVGhpcyBtb2R1bGUgZnVsZmlsbHMgb25seSB0aGUgc2luZ2xlIHB1cnBvc2Ugb2YgaG91c2luZyB0aGUgYE9yaWdpbmAgaW4gYGNvbnN0cnVjdF9ydW50aW1lYC40Q29uZmlndXJhdGlvbgE0Q29uZmlndXJhdGlvbgwwQWN0aXZlQ29uZmlnAQB1DEEDAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAZAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAAAAAAEAAAABAAAAAQAAAAABAAAAAAAAAAAAAAAQJwAAgLLmDoDDyQGAlpgAAAAAAAAAAAAAAAAABQAAAATIIFRoZSBhY3RpdmUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbi44UGVuZGluZ0NvbmZpZ3MBAHkMBAAcfCBQZW5kaW5nIGNvbmZpZ3VyYXRpb24gY2hhbmdlcy4AWQEgVGhpcyBpcyBhIGxpc3Qgb2YgY29uZmlndXJhdGlvbiBjaGFuZ2VzLCBlYWNoIHdpdGggYSBzZXNzaW9uIGluZGV4IGF0IHdoaWNoIGl0IHNob3VsZDAgYmUgYXBwbGllZC4AYQEgVGhlIGxpc3QgaXMgc29ydGVkIGFzY2VuZGluZyBieSBzZXNzaW9uIGluZGV4LiBBbHNvLCB0aGlzIGxpc3QgY2FuIG9ubHkgY29udGFpbiBhdCBtb3N0/CAyIGl0ZW1zOiBmb3IgdGhlIG5leHQgc2Vzc2lvbiBhbmQgZm9yIHRoZSBgc2NoZWR1bGVkX3Nlc3Npb25gLlhCeXBhc3NDb25zaXN0ZW5jeUNoZWNrAQAgBAAIYQEgSWYgdGhpcyBpcyBzZXQsIHRoZW4gdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGVycyB3aWxsIGJ5cGFzcyB0aGUgY29uc2lzdGVuY3kgY2hlY2tzLiBUaGlztCBpcyBtZWFudCB0byBiZSB1c2VkIG9ubHkgYXMgdGhlIGxhc3QgcmVzb3J0LgHVBAAAAYEMMwAsUGFyYXNTaGFyZWQBLFBhcmFzU2hhcmVkEExDdXJyZW50U2Vzc2lvbkluZGV4AQAQEAAAAAAEbCBUaGUgY3VycmVudCBzZXNzaW9uIGluZGV4LlhBY3RpdmVWYWxpZGF0b3JJbmRpY2VzAQCFDAQACAkBIEFsbCB0aGUgdmFsaWRhdG9ycyBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHBhcmFjaGFpbiBjb25zZW5zdXMusCBJbmRpY2VzIGFyZSBpbnRvIHRoZSBicm9hZGVyIHZhbGlkYXRvciBzZXQuTEFjdGl2ZVZhbGlkYXRvcktleXMBAIkMBAAIVQEgVGhlIHBhcmFjaGFpbiBhdHRlc3RhdGlvbiBrZXlzIG9mIHRoZSB2YWxpZGF0b3JzIGFjdGl2ZWx5IHBhcnRpY2lwYXRpbmcgaW4gcGFyYWNoYWluHQEgY29uc2Vuc3VzLiBUaGlzIHNob3VsZCBiZSB0aGUgc2FtZSBsZW5ndGggYXMgYEFjdGl2ZVZhbGlkYXRvckluZGljZXNgLkxBbGxvd2VkUmVsYXlQYXJlbnRzAQCNDBQAAAAAAARsIEFsbCBhbGxvd2VkIHJlbGF5LXBhcmVudHMuAfkEAAAANAA0UGFyYUluY2x1c2lvbgE0UGFyYUluY2x1c2lvbgQIVjEAAQQFaQKZDAQAFGEBIENhbmRpZGF0ZXMgcGVuZGluZyBhdmFpbGFiaWxpdHkgYnkgYFBhcmFJZGAuIFRoZXkgZm9ybSBhIGNoYWluIHN0YXJ0aW5nIGZyb20gdGhlIGxhdGVzdGwgaW5jbHVkZWQgaGVhZCBvZiB0aGUgcGFyYS5hASBVc2UgYSBkaWZmZXJlbnQgcHJlZml4IHBvc3QtbWlncmF0aW9uIHRvIHYxLCBzaW5jZSB0aGUgdjAgYFBlbmRpbmdBdmFpbGFiaWxpdHlgIHN0b3JhZ2VxASB3b3VsZCBvdGhlcndpc2UgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBwcmVmaXggd2hpY2ggY291bGQgY2F1c2UgdW5kZWZpbmVkIGJlaGF2aW91ciB3aGVuIGRvaW5nPCB0aGUgbWlncmF0aW9uLgH9BAEpCAABoQw1ADBQYXJhSW5oZXJlbnQBMFBhcmFJbmhlcmVudAggSW5jbHVkZWQAAKkBBAAY7CBXaGV0aGVyIHRoZSBwYXJhcyBpbmhlcmVudCB3YXMgaW5jbHVkZWQgd2l0aGluIHRoaXMgYmxvY2suAGkBIFRoZSBgT3B0aW9uPCgpPmAgaXMgZWZmZWN0aXZlbHkgYSBgYm9vbGAsIGJ1dCBpdCBuZXZlciBoaXRzIHN0b3JhZ2UgaW4gdGhlIGBOb25lYCB2YXJpYW50vCBkdWUgdG8gdGhlIGd1YXJhbnRlZXMgb2YgRlJBTUUncyBzdG9yYWdlIEFQSXMuAEkBIElmIHRoaXMgaXMgYE5vbmVgIGF0IHRoZSBlbmQgb2YgdGhlIGJsb2NrLCB3ZSBwYW5pYyBhbmQgcmVuZGVyIHRoZSBibG9jayBpbnZhbGlkLjBPbkNoYWluVm90ZXMAAKUMBAAERQEgU2NyYXBlZCBvbiBjaGFpbiBkYXRhIGZvciBleHRyYWN0aW5nIHJlc29sdmVkIGRpc3B1dGVzIGFzIHdlbGwgYXMgYmFja2luZyB2b3Rlcy4BAQUAAAG5DDYANFBhcmFTY2hlZHVsZXIBNFBhcmFTY2hlZHVsZXIQPFZhbGlkYXRvckdyb3VwcwEAvQwEABxtASBBbGwgdGhlIHZhbGlkYXRvciBncm91cHMuIE9uZSBmb3IgZWFjaCBjb3JlLiBJbmRpY2VzIGFyZSBpbnRvIGBBY3RpdmVWYWxpZGF0b3JzYCAtIG5vdCB0aGVtASBicm9hZGVyIHNldCBvZiBQb2xrYWRvdCB2YWxpZGF0b3JzLCBidXQgaW5zdGVhZCBqdXN0IHRoZSBzdWJzZXQgdXNlZCBmb3IgcGFyYWNoYWlucyBkdXJpbmc4IHRoaXMgc2Vzc2lvbi4ASQEgQm91bmQ6IFRoZSBudW1iZXIgb2YgY29yZXMgaXMgdGhlIHN1bSBvZiB0aGUgbnVtYmVycyBvZiBwYXJhY2hhaW5zIGFuZCBwYXJhdGhyZWFkaQEgbXVsdGlwbGV4ZXJzLiBSZWFzb25hYmx5LCAxMDAtMTAwMC4gVGhlIGRvbWluYW50IGZhY3RvciBpcyB0aGUgbnVtYmVyIG9mIHZhbGlkYXRvcnM6IHNhZmVQIHVwcGVyIGJvdW5kIGF0IDEway5EQXZhaWxhYmlsaXR5Q29yZXMBAMEMBAAYcQEgT25lIGVudHJ5IGZvciBlYWNoIGF2YWlsYWJpbGl0eSBjb3JlLiBUaGUgaSd0aCBwYXJhY2hhaW4gYmVsb25ncyB0byB0aGUgaSd0aCBjb3JlLCB3aXRoIHRoZfAgcmVtYWluaW5nIGNvcmVzIGFsbCBiZWluZyBvbiBkZW1hbmQgcGFyYWNoYWluIG11bHRpcGxleGVycy4A2CBCb3VuZGVkIGJ5IHRoZSBtYXhpbXVtIG9mIGVpdGhlciBvZiB0aGVzZSB0d28gdmFsdWVzOuQgICAqIFRoZSBudW1iZXIgb2YgcGFyYWNoYWlucyBhbmQgcGFyYXRocmVhZCBtdWx0aXBsZXhlcnNFASAgICogVGhlIG51bWJlciBvZiB2YWxpZGF0b3JzIGRpdmlkZWQgYnkgYGNvbmZpZ3VyYXRpb24ubWF4X3ZhbGlkYXRvcnNfcGVyX2NvcmVgLkRTZXNzaW9uU3RhcnRCbG9jawEAEBAAAAAAHGkBIFRoZSBibG9jayBudW1iZXIgd2hlcmUgdGhlIHNlc3Npb24gc3RhcnQgb2NjdXJyZWQuIFVzZWQgdG8gdHJhY2sgaG93IG1hbnkgZ3JvdXAgcm90YXRpb25zPCBoYXZlIG9jY3VycmVkLgBVASBOb3RlIHRoYXQgaW4gdGhlIGNvbnRleHQgb2YgcGFyYWNoYWlucyBtb2R1bGVzIHRoZSBzZXNzaW9uIGNoYW5nZSBpcyBzaWduYWxlZCBkdXJpbmdhASB0aGUgYmxvY2sgYW5kIGVuYWN0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgYmxvY2sgKGF0IHRoZSBmaW5hbGl6YXRpb24gc3RhZ2UsIHRvIGJlIGV4YWN0KS5ZASBUaHVzIGZvciBhbGwgaW50ZW50cyBhbmQgcHVycG9zZXMgdGhlIGVmZmVjdCBvZiB0aGUgc2Vzc2lvbiBjaGFuZ2UgaXMgb2JzZXJ2ZWQgYXQgdGhlZQEgYmxvY2sgZm9sbG93aW5nIHRoZSBzZXNzaW9uIGNoYW5nZSwgYmxvY2sgbnVtYmVyIG9mIHdoaWNoIHdlIHNhdmUgaW4gdGhpcyBzdG9yYWdlIHZhbHVlLihDbGFpbVF1ZXVlAQDRDAQADFkBIE9uZSBlbnRyeSBmb3IgZWFjaCBhdmFpbGFiaWxpdHkgY29yZS4gVGhlIGBWZWNEZXF1ZWAgcmVwcmVzZW50cyB0aGUgYXNzaWdubWVudHMgdG8gYmVRASBzY2hlZHVsZWQgb24gdGhhdCBjb3JlLiBUaGUgdmFsdWUgY29udGFpbmVkIGhlcmUgd2lsbCBub3QgYmUgdmFsaWQgYWZ0ZXIgdGhlIGVuZCBvZmkBIGEgYmxvY2suIFJ1bnRpbWUgQVBJcyBzaG91bGQgYmUgdXNlZCB0byBkZXRlcm1pbmUgc2NoZWR1bGVkIGNvcmVzIGZvciB0aGUgdXBjb21pbmcgYmxvY2suAAAAADcAFFBhcmFzARRQYXJhc1RAUHZmQWN0aXZlVm90ZU1hcAABBAU9BeEMBAAQtCBBbGwgY3VycmVudGx5IGFjdGl2ZSBQVkYgcHJlLWNoZWNraW5nIHZvdGVzLgAsIEludmFyaWFudDp1ASAtIFRoZXJlIGFyZSBubyBQVkYgcHJlLWNoZWNraW5nIHZvdGVzIHRoYXQgZXhpc3RzIGluIGxpc3QgYnV0IG5vdCBpbiB0aGUgc2V0IGFuZCB2aWNlIHZlcnNhLkRQdmZBY3RpdmVWb3RlTGlzdAEA8QwEAAQ1ASBUaGUgbGlzdCBvZiBhbGwgY3VycmVudGx5IGFjdGl2ZSBQVkYgdm90ZXMuIEF1eGlsaWFyeSB0byBgUHZmQWN0aXZlVm90ZU1hcGAuKFBhcmFjaGFpbnMBAPUMBAAQaQEgQWxsIGxlYXNlIGhvbGRpbmcgcGFyYWNoYWlucy4gT3JkZXJlZCBhc2NlbmRpbmcgYnkgYFBhcmFJZGAuIE9uIGRlbWFuZCBwYXJhY2hhaW5zIGFyZSBub3QoIGluY2x1ZGVkLgDoIENvbnNpZGVyIHVzaW5nIHRoZSBbYFBhcmFjaGFpbnNDYWNoZWBdIHR5cGUgb2YgbW9kaWZ5aW5nLjhQYXJhTGlmZWN5Y2xlcwABBAVpAvkMBAAEvCBUaGUgY3VycmVudCBsaWZlY3ljbGUgb2YgYSBhbGwga25vd24gUGFyYSBJRHMuFEhlYWRzAAEEBWkCXQUEAASgIFRoZSBoZWFkLWRhdGEgb2YgZXZlcnkgcmVnaXN0ZXJlZCBwYXJhLkRNb3N0UmVjZW50Q29udGV4dAABBAVpAhAEAAQpASBUaGUgY29udGV4dCAocmVsYXktY2hhaW4gYmxvY2sgbnVtYmVyKSBvZiB0aGUgbW9zdCByZWNlbnQgcGFyYWNoYWluIGhlYWQuPEN1cnJlbnRDb2RlSGFzaAABBAVpAj0FBAAMtCBUaGUgdmFsaWRhdGlvbiBjb2RlIGhhc2ggb2YgZXZlcnkgbGl2ZSBwYXJhLgDkIENvcnJlc3BvbmRpbmcgY29kZSBjYW4gYmUgcmV0cmlldmVkIHdpdGggW2BDb2RlQnlIYXNoYF0uMFBhc3RDb2RlSGFzaAABBAX9DD0FBAAQYQEgQWN0dWFsIHBhc3QgY29kZSBoYXNoLCBpbmRpY2F0ZWQgYnkgdGhlIHBhcmEgaWQgYXMgd2VsbCBhcyB0aGUgYmxvY2sgbnVtYmVyIGF0IHdoaWNoIGl0RCBiZWNhbWUgb3V0ZGF0ZWQuAOQgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS4wUGFzdENvZGVNZXRhAQEEBWkCAQ0IAAAMSQEgUGFzdCBjb2RlIG9mIHBhcmFjaGFpbnMuIFRoZSBwYXJhY2hhaW5zIHRoZW1zZWx2ZXMgbWF5IG5vdCBiZSByZWdpc3RlcmVkIGFueW1vcmUsSQEgYnV0IHdlIGFsc28ga2VlcCB0aGVpciBjb2RlIG9uLWNoYWluIGZvciB0aGUgc2FtZSBhbW91bnQgb2YgdGltZSBhcyBvdXRkYXRlZCBjb2RlsCB0byBrZWVwIGl0IGF2YWlsYWJsZSBmb3IgYXBwcm92YWwgY2hlY2tlcnMuPFBhc3RDb2RlUHJ1bmluZwEADQ0EABhpASBXaGljaCBwYXJhcyBoYXZlIHBhc3QgY29kZSB0aGF0IG5lZWRzIHBydW5pbmcgYW5kIHRoZSByZWxheS1jaGFpbiBibG9jayBhdCB3aGljaCB0aGUgY29kZWkBIHdhcyByZXBsYWNlZC4gTm90ZSB0aGF0IHRoaXMgaXMgdGhlIGFjdHVhbCBoZWlnaHQgb2YgdGhlIGluY2x1ZGVkIGJsb2NrLCBub3QgdGhlIGV4cGVjdGVkPQEgaGVpZ2h0IGF0IHdoaWNoIHRoZSBjb2RlIHVwZ3JhZGUgd291bGQgYmUgYXBwbGllZCwgYWx0aG91Z2ggdGhleSBtYXkgYmUgZXF1YWwubQEgVGhpcyBpcyB0byBlbnN1cmUgdGhlIGVudGlyZSBhY2NlcHRhbmNlIHBlcmlvZCBpcyBjb3ZlcmVkLCBub3QgYW4gb2Zmc2V0IGFjY2VwdGFuY2UgcGVyaW9kbQEgc3RhcnRpbmcgZnJvbSB0aGUgdGltZSBhdCB3aGljaCB0aGUgcGFyYWNoYWluIHBlcmNlaXZlcyBhIGNvZGUgdXBncmFkZSBhcyBoYXZpbmcgb2NjdXJyZWQuVQEgTXVsdGlwbGUgZW50cmllcyBmb3IgYSBzaW5nbGUgcGFyYSBhcmUgcGVybWl0dGVkLiBPcmRlcmVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIuSEZ1dHVyZUNvZGVVcGdyYWRlcwABBAVpAhAEABA9ASBUaGUgYmxvY2sgbnVtYmVyIGF0IHdoaWNoIHRoZSBwbGFubmVkIGNvZGUgY2hhbmdlIGlzIGV4cGVjdGVkIGZvciBhIHBhcmFjaGFpbi4AZQEgVGhlIGNoYW5nZSB3aWxsIGJlIGFwcGxpZWQgYWZ0ZXIgdGhlIGZpcnN0IHBhcmFibG9jayBmb3IgdGhpcyBJRCBpbmNsdWRlZCB3aGljaCBleGVjdXRlcxkBIGluIHRoZSBjb250ZXh0IG9mIGEgcmVsYXkgY2hhaW4gYmxvY2sgd2l0aCBhIG51bWJlciA+PSBgZXhwZWN0ZWRfYXRgLlBGdXR1cmVDb2RlVXBncmFkZXNBdAEADQ0EACCsIFRoZSBsaXN0IG9mIHVwY29taW5nIGZ1dHVyZSBjb2RlIHVwZ3JhZGVzLgBtASBFYWNoIGl0ZW0gaXMgYSBwYWlyIG9mIHRoZSBwYXJhY2hhaW4gYW5kIHRoZSBleHBlY3RlZCBibG9jayBhdCB3aGljaCB0aGUgdXBncmFkZSBzaG91bGQgYmVRASBhcHBsaWVkLiBUaGUgdXBncmFkZSB3aWxsIGJlIGFwcGxpZWQgYXQgdGhlIGdpdmVuIHJlbGF5IGNoYWluIGJsb2NrLiBJbiBjb250cmFzdCB0b3UBIFtgRnV0dXJlQ29kZVVwZ3JhZGVzYF0gdGhpcyBjb2RlIHVwZ3JhZGUgd2lsbCBiZSBhcHBsaWVkIHJlZ2FyZGxlc3MgdGhlIHBhcmFjaGFpbiBtYWtpbmcgYW55RCBwcm9ncmVzcyBvciBub3QuAIwgT3JkZXJlZCBhc2NlbmRpbmcgYnkgYmxvY2sgbnVtYmVyLjhGdXR1cmVDb2RlSGFzaAABBAVpAj0FBAAMnCBUaGUgYWN0dWFsIGZ1dHVyZSBjb2RlIGhhc2ggb2YgYSBwYXJhLgDkIENvcnJlc3BvbmRpbmcgY29kZSBjYW4gYmUgcmV0cmlldmVkIHdpdGggW2BDb2RlQnlIYXNoYF0uUFVwZ3JhZGVHb0FoZWFkU2lnbmFsAAEEBWkCEQ0EACh1ASBUaGlzIGlzIHVzZWQgYnkgdGhlIHJlbGF5LWNoYWluIHRvIGNvbW11bmljYXRlIHRvIGEgcGFyYWNoYWluIGEgZ28tYWhlYWQgd2l0aCBpbiB0aGUgdXBncmFkZSwgcHJvY2VkdXJlLgB1ASBUaGlzIHZhbHVlIGlzIGFic2VudCB3aGVuIHRoZXJlIGFyZSBubyB1cGdyYWRlcyBzY2hlZHVsZWQgb3IgZHVyaW5nIHRoZSB0aW1lIHRoZSByZWxheSBjaGFpblUBIHBlcmZvcm1zIHRoZSBjaGVja3MuIEl0IGlzIHNldCBhdCB0aGUgZmlyc3QgcmVsYXktY2hhaW4gYmxvY2sgd2hlbiB0aGUgY29ycmVzcG9uZGluZ3UBIHBhcmFjaGFpbiBjYW4gc3dpdGNoIGl0cyB1cGdyYWRlIGZ1bmN0aW9uLiBBcyBzb29uIGFzIHRoZSBwYXJhY2hhaW4ncyBibG9jayBpcyBpbmNsdWRlZCwgdGhlcCB2YWx1ZSBnZXRzIHJlc2V0IHRvIGBOb25lYC4AZQEgTk9URSB0aGF0IHRoaXMgZmllbGQgaXMgdXNlZCBieSBwYXJhY2hhaW5zIHZpYSBtZXJrbGUgc3RvcmFnZSBwcm9vZnMsIHRoZXJlZm9yZSBjaGFuZ2luZ8QgdGhlIGZvcm1hdCB3aWxsIHJlcXVpcmUgbWlncmF0aW9uIG9mIHBhcmFjaGFpbnMuYFVwZ3JhZGVSZXN0cmljdGlvblNpZ25hbAABBAVpAhUNBAAkaQEgVGhpcyBpcyB1c2VkIGJ5IHRoZSByZWxheS1jaGFpbiB0byBjb21tdW5pY2F0ZSB0aGF0IHRoZXJlIGFyZSByZXN0cmljdGlvbnMgZm9yIHBlcmZvcm1pbmd8IGFuIHVwZ3JhZGUgZm9yIHRoaXMgcGFyYWNoYWluLgBZASBUaGlzIG1heSBiZSBhIGJlY2F1c2UgdGhlIHBhcmFjaGFpbiB3YWl0cyBmb3IgdGhlIHVwZ3JhZGUgY29vbGRvd24gdG8gZXhwaXJlLiBBbm90aGVybQEgcG90ZW50aWFsIHVzZSBjYXNlIGlzIHdoZW4gd2Ugd2FudCB0byBwZXJmb3JtIHNvbWUgbWFpbnRlbmFuY2UgKHN1Y2ggYXMgc3RvcmFnZSBtaWdyYXRpb24p4CB3ZSBjb3VsZCByZXN0cmljdCB1cGdyYWRlcyB0byBtYWtlIHRoZSBwcm9jZXNzIHNpbXBsZXIuAGUBIE5PVEUgdGhhdCB0aGlzIGZpZWxkIGlzIHVzZWQgYnkgcGFyYWNoYWlucyB2aWEgbWVya2xlIHN0b3JhZ2UgcHJvb2ZzLCB0aGVyZWZvcmUgY2hhbmdpbmfEIHRoZSBmb3JtYXQgd2lsbCByZXF1aXJlIG1pZ3JhdGlvbiBvZiBwYXJhY2hhaW5zLkBVcGdyYWRlQ29vbGRvd25zAQANDQQADFEBIFRoZSBsaXN0IG9mIHBhcmFjaGFpbnMgdGhhdCBhcmUgYXdhaXRpbmcgZm9yIHRoZWlyIHVwZ3JhZGUgcmVzdHJpY3Rpb24gdG8gY29vbGRvd24uAIwgT3JkZXJlZCBhc2NlbmRpbmcgYnkgYmxvY2sgbnVtYmVyLkBVcGNvbWluZ1VwZ3JhZGVzAQANDQQAGJAgVGhlIGxpc3Qgb2YgdXBjb21pbmcgY29kZSB1cGdyYWRlcy4AcQEgRWFjaCBpdGVtIGlzIGEgcGFpciBvZiB3aGljaCBwYXJhIHBlcmZvcm1zIGEgY29kZSB1cGdyYWRlIGFuZCBhdCB3aGljaCByZWxheS1jaGFpbiBibG9jayBpdEAgaXMgZXhwZWN0ZWQgYXQuAIwgT3JkZXJlZCBhc2NlbmRpbmcgYnkgYmxvY2sgbnVtYmVyLjBBY3Rpb25zUXVldWUBAQQFEPUMBAAEFQEgVGhlIGFjdGlvbnMgdG8gcGVyZm9ybSBkdXJpbmcgdGhlIHN0YXJ0IG9mIGEgc3BlY2lmaWMgc2Vzc2lvbiBpbmRleC5QVXBjb21pbmdQYXJhc0dlbmVzaXMAAQQFaQIZDQQAEKAgVXBjb21pbmcgcGFyYXMgaW5zdGFudGlhdGlvbiBhcmd1bWVudHMuAGUBIE5PVEUgdGhhdCBhZnRlciBQVkYgcHJlLWNoZWNraW5nIGlzIGVuYWJsZWQgdGhlIHBhcmEgZ2VuZXNpcyBhcmcgd2lsbCBoYXZlIGl0J3MgY29kZSBzZXRhASB0byBlbXB0eS4gSW5zdGVhZCwgdGhlIGNvZGUgd2lsbCBiZSBzYXZlZCBpbnRvIHRoZSBzdG9yYWdlIHJpZ2h0IGF3YXkgdmlhIGBDb2RlQnlIYXNoYC44Q29kZUJ5SGFzaFJlZnMBAQQGPQUQEAAAAAAEKQEgVGhlIG51bWJlciBvZiByZWZlcmVuY2Ugb24gdGhlIHZhbGlkYXRpb24gY29kZSBpbiBbYENvZGVCeUhhc2hgXSBzdG9yYWdlLihDb2RlQnlIYXNoAAEEBj0FWQUEABCQIFZhbGlkYXRpb24gY29kZSBzdG9yZWQgYnkgaXRzIGhhc2guADEBIFRoaXMgc3RvcmFnZSBpcyBjb25zaXN0ZW50IHdpdGggW2BGdXR1cmVDb2RlSGFzaGBdLCBbYEN1cnJlbnRDb2RlSGFzaGBdIGFuZEggW2BQYXN0Q29kZUhhc2hgXS4BjQUBOQgEQFVuc2lnbmVkUHJpb3JpdHkwIP//////////AAEdDTgALEluaXRpYWxpemVyASxJbml0aWFsaXplcgg4SGFzSW5pdGlhbGl6ZWQAAKkBBAAgIQEgV2hldGhlciB0aGUgcGFyYWNoYWlucyBtb2R1bGVzIGhhdmUgYmVlbiBpbml0aWFsaXplZCB3aXRoaW4gdGhpcyBibG9jay4AJQEgU2VtYW50aWNhbGx5IGEgYGJvb2xgLCBidXQgdGhpcyBndWFyYW50ZWVzIGl0IHNob3VsZCBuZXZlciBoaXQgdGhlIHRyaWUsaQEgYXMgdGhpcyBpcyBjbGVhcmVkIGluIGBvbl9maW5hbGl6ZWAgYW5kIEZyYW1lIG9wdGltaXplcyBgTm9uZWAgdmFsdWVzIHRvIGJlIGVtcHR5IHZhbHVlcy4AcQEgQXMgYSBgYm9vbGAsIGBzZXQoZmFsc2UpYCBhbmQgYHJlbW92ZSgpYCBib3RoIGxlYWQgdG8gdGhlIG5leHQgYGdldCgpYCBiZWluZyBmYWxzZSwgYnV0IG9uZXUBIG9mIHRoZW0gd3JpdGVzIHRvIHRoZSB0cmllIGFuZCBvbmUgZG9lcyBub3QuIFRoaXMgY29uZnVzaW9uIG1ha2VzIGBPcHRpb248KCk+YCBtb3JlIHN1aXRhYmxlkCBmb3IgdGhlIHNlbWFudGljcyBvZiB0aGlzIHZhcmlhYmxlLlhCdWZmZXJlZFNlc3Npb25DaGFuZ2VzAQAhDQQAHFkBIEJ1ZmZlcmVkIHNlc3Npb24gY2hhbmdlcyBhbG9uZyB3aXRoIHRoZSBibG9jayBudW1iZXIgYXQgd2hpY2ggdGhleSBzaG91bGQgYmUgYXBwbGllZC4AXQEgVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSBlbXB0eSBvciBvbmUgZWxlbWVudCBsb25nLiBBcGFydCBmcm9tIHRoYXQgdGhpcyBpdGVtIG5ldmVyIGhpdHM0IHRoZSBzdG9yYWdlLgBpASBIb3dldmVyIHRoaXMgaXMgYSBgVmVjYCByZWdhcmRsZXNzIHRvIGhhbmRsZSB2YXJpb3VzIGVkZ2UgY2FzZXMgdGhhdCBtYXkgb2NjdXIgYXQgcnVudGltZcAgdXBncmFkZSBib3VuZGFyaWVzIG9yIGlmIGdvdmVybmFuY2UgaW50ZXJ2ZW5lcy4BlQUAAAA5AAxEbXABDERtcAxURG93bndhcmRNZXNzYWdlUXVldWVzAQEEBWkCKQ0EAATQIFRoZSBkb3dud2FyZCBtZXNzYWdlcyBhZGRyZXNzZWQgZm9yIGEgY2VydGFpbiBwYXJhLmREb3dud2FyZE1lc3NhZ2VRdWV1ZUhlYWRzAQEEBWkCNIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlASBBIG1hcHBpbmcgdGhhdCBzdG9yZXMgdGhlIGRvd253YXJkIG1lc3NhZ2UgcXVldWUgTVFDIGhlYWQgZm9yIGVhY2ggcGFyYS4AkCBFYWNoIGxpbmsgaW4gdGhpcyBjaGFpbiBoYXMgYSBmb3JtOnggYChwcmV2X2hlYWQsIEIsIEgoTSkpYCwgd2hlcmXoIC0gYHByZXZfaGVhZGA6IGlzIHRoZSBwcmV2aW91cyBoZWFkIGhhc2ggb3IgemVybyBpZiBub25lLiEBIC0gYEJgOiBpcyB0aGUgcmVsYXktY2hhaW4gYmxvY2sgbnVtYmVyIGluIHdoaWNoIGEgbWVzc2FnZSB3YXMgYXBwZW5kZWQu1CAtIGBIKE0pYDogaXMgdGhlIGhhc2ggb2YgdGhlIG1lc3NhZ2UgYmVpbmcgYXBwZW5kZWQuRERlbGl2ZXJ5RmVlRmFjdG9yAQEEBWkCPQdAAABkp7O24A0AAAAAAAAAAATEIFRoZSBmYWN0b3IgdG8gbXVsdGlwbHkgdGhlIGJhc2UgZGVsaXZlcnkgZmVlIGJ5LgAAAAA6ABBIcm1wARBIcm1wMFxIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0cwABBAWdBTENBAAYvCBUaGUgc2V0IG9mIHBlbmRpbmcgSFJNUCBvcGVuIGNoYW5uZWwgcmVxdWVzdHMuAMAgVGhlIHNldCBpcyBhY2NvbXBhbmllZCBieSBhIGxpc3QgZm9yIGl0ZXJhdGlvbi4ALCBJbnZhcmlhbnQ6PQEgLSBUaGVyZSBhcmUgbm8gY2hhbm5lbHMgdGhhdCBleGlzdHMgaW4gbGlzdCBidXQgbm90IGluIHRoZSBzZXQgYW5kIHZpY2UgdmVyc2EubEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RzTGlzdAEANQ0EAABsSHJtcE9wZW5DaGFubmVsUmVxdWVzdENvdW50AQEEBWkCEBAAAAAADGUBIFRoaXMgbWFwcGluZyB0cmFja3MgaG93IG1hbnkgb3BlbiBjaGFubmVsIHJlcXVlc3RzIGFyZSBpbml0aWF0ZWQgYnkgYSBnaXZlbiBzZW5kZXIgcGFyYS5ZASBJbnZhcmlhbnQ6IGBIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0c2Agc2hvdWxkIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIGl0ZW1zIHRoYXQgaGFzBQEgYChYLCBfKWAgYXMgdGhlIG51bWJlciBvZiBgSHJtcE9wZW5DaGFubmVsUmVxdWVzdENvdW50YCBmb3IgYFhgLnxIcm1wQWNjZXB0ZWRDaGFubmVsUmVxdWVzdENvdW50AQEEBWkCEBAAAAAADHEBIFRoaXMgbWFwcGluZyB0cmFja3MgaG93IG1hbnkgb3BlbiBjaGFubmVsIHJlcXVlc3RzIHdlcmUgYWNjZXB0ZWQgYnkgYSBnaXZlbiByZWNpcGllbnQgcGFyYS5tASBJbnZhcmlhbnQ6IGBIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0c2Agc2hvdWxkIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIGl0ZW1zIGAoXywgWClgIHdpdGhVASBgY29uZmlybWVkYCBzZXQgdG8gdHJ1ZSwgYXMgdGhlIG51bWJlciBvZiBgSHJtcEFjY2VwdGVkQ2hhbm5lbFJlcXVlc3RDb3VudGAgZm9yIGBYYC5gSHJtcENsb3NlQ2hhbm5lbFJlcXVlc3RzAAEEBZ0FqQEEABxxASBBIHNldCBvZiBwZW5kaW5nIEhSTVAgY2xvc2UgY2hhbm5lbCByZXF1ZXN0cyB0aGF0IGFyZSBnb2luZyB0byBiZSBjbG9zZWQgZHVyaW5nIHRoZSBzZXNzaW9uIQEgY2hhbmdlLiBVc2VkIGZvciBjaGVja2luZyBpZiBhIGdpdmVuIGNoYW5uZWwgaXMgcmVnaXN0ZXJlZCBmb3IgY2xvc3VyZS4AwCBUaGUgc2V0IGlzIGFjY29tcGFuaWVkIGJ5IGEgbGlzdCBmb3IgaXRlcmF0aW9uLgAsIEludmFyaWFudDo9ASAtIFRoZXJlIGFyZSBubyBjaGFubmVscyB0aGF0IGV4aXN0cyBpbiBsaXN0IGJ1dCBub3QgaW4gdGhlIHNldCBhbmQgdmljZSB2ZXJzYS5wSHJtcENsb3NlQ2hhbm5lbFJlcXVlc3RzTGlzdAEANQ0EAAA4SHJtcFdhdGVybWFya3MAAQQFaQIQBAAQuCBUaGUgSFJNUCB3YXRlcm1hcmsgYXNzb2NpYXRlZCB3aXRoIGVhY2ggcGFyYS4sIEludmFyaWFudDpVASAtIGVhY2ggcGFyYSBgUGAgdXNlZCBoZXJlIGFzIGEga2V5IHNob3VsZCBzYXRpc2Z5IGBQYXJhczo6aXNfdmFsaWRfcGFyYShQKWAgd2l0aGluIGEsICAgc2Vzc2lvbi4wSHJtcENoYW5uZWxzAAEEBZ0FOQ0EAAy0IEhSTVAgY2hhbm5lbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHBhcmEuLCBJbnZhcmlhbnQ6dQEgLSBlYWNoIHBhcnRpY2lwYW50IGluIHRoZSBjaGFubmVsIHNob3VsZCBzYXRpc2Z5IGBQYXJhczo6aXNfdmFsaWRfcGFyYShQKWAgd2l0aGluIGEgc2Vzc2lvbi5gSHJtcEluZ3Jlc3NDaGFubmVsc0luZGV4AQEEBWkC9QwEADRxASBJbmdyZXNzL2VncmVzcyBpbmRleGVzIGFsbG93IHRvIGZpbmQgYWxsIHRoZSBzZW5kZXJzIGFuZCByZWNlaXZlcnMgZ2l2ZW4gdGhlIG9wcG9zaXRlIHNpZGUuFCBJLmUuACEBIChhKSBpbmdyZXNzIGluZGV4IGFsbG93cyB0byBmaW5kIGFsbCB0aGUgc2VuZGVycyBmb3IgYSBnaXZlbiByZWNpcGllbnQuHQEgKGIpIGVncmVzcyBpbmRleCBhbGxvd3MgdG8gZmluZCBhbGwgdGhlIHJlY2lwaWVudHMgZm9yIGEgZ2l2ZW4gc2VuZGVyLgAwIEludmFyaWFudHM6UQEgLSBmb3IgZWFjaCBpbmdyZXNzIGluZGV4IGVudHJ5IGZvciBgUGAgZWFjaCBpdGVtIGBJYCBpbiB0aGUgaW5kZXggc2hvdWxkIHByZXNlbnQgaW54ICAgYEhybXBDaGFubmVsc2AgYXMgYChJLCBQKWAuTQEgLSBmb3IgZWFjaCBlZ3Jlc3MgaW5kZXggZW50cnkgZm9yIGBQYCBlYWNoIGl0ZW0gYEVgIGluIHRoZSBpbmRleCBzaG91bGQgcHJlc2VudCBpbnggICBgSHJtcENoYW5uZWxzYCBhcyBgKFAsIEUpYC4BASAtIHRoZXJlIHNob3VsZCBiZSBubyBvdGhlciBkYW5nbGluZyBjaGFubmVscyBpbiBgSHJtcENoYW5uZWxzYC5oIC0gdGhlIHZlY3RvcnMgYXJlIHNvcnRlZC5cSHJtcEVncmVzc0NoYW5uZWxzSW5kZXgBAQQFaQL1DAQAAExIcm1wQ2hhbm5lbENvbnRlbnRzAQEEBZ0FPQ0EAAisIFN0b3JhZ2UgZm9yIHRoZSBtZXNzYWdlcyBmb3IgZWFjaCBjaGFubmVsLmUBIEludmFyaWFudDogY2Fubm90IGJlIG5vbi1lbXB0eSBpZiB0aGUgY29ycmVzcG9uZGluZyBjaGFubmVsIGluIGBIcm1wQ2hhbm5lbHNgIGlzIGBOb25lYC5ISHJtcENoYW5uZWxEaWdlc3RzAQEEBWkCRQ0EABhpASBNYWludGFpbnMgYSBtYXBwaW5nIHRoYXQgY2FuIGJlIHVzZWQgdG8gYW5zd2VyIHRoZSBxdWVzdGlvbjogV2hhdCBwYXJhcyBzZW50IGEgbWVzc2FnZSBhdOQgdGhlIGdpdmVuIGJsb2NrIG51bWJlciBmb3IgYSBnaXZlbiByZWNlaXZlci4gSW52YXJpYW50czqoIC0gVGhlIGlubmVyIGBWZWM8UGFyYUlkPmAgaXMgbmV2ZXIgZW1wdHku6CAtIFRoZSBpbm5lciBgVmVjPFBhcmFJZD5gIGNhbm5vdCBzdG9yZSB0d28gc2FtZSBgUGFyYUlkYC5tASAtIFRoZSBvdXRlciB2ZWN0b3IgaXMgc29ydGVkIGFzY2VuZGluZyBieSBibG9jayBudW1iZXIgYW5kIGNhbm5vdCBzdG9yZSB0d28gaXRlbXMgd2l0aCB0aGVUICAgc2FtZSBibG9jayBudW1iZXIuAZkFAT0IAAFNDTwAPFBhcmFTZXNzaW9uSW5mbwE8UGFyYVNlc3Npb25JbmZvFFBBc3NpZ25tZW50S2V5c1Vuc2FmZQEAUQ0EAAykIEFzc2lnbm1lbnQga2V5cyBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbi5tASBOb3RlIHRoYXQgdGhpcyBBUEkgaXMgcHJpdmF0ZSBkdWUgdG8gaXQgYmVpbmcgcHJvbmUgdG8gJ29mZi1ieS1vbmUnIGF0IHNlc3Npb24gYm91bmRhcmllcy6sIFdoZW4gaW4gZG91YnQsIHVzZSBgU2Vzc2lvbnNgIEFQSSBpbnN0ZWFkLlRFYXJsaWVzdFN0b3JlZFNlc3Npb24BABAQAAAAAAQBASBUaGUgZWFybGllc3Qgc2Vzc2lvbiBmb3Igd2hpY2ggcHJldmlvdXMgc2Vzc2lvbiBpbmZvIGlzIHN0b3JlZC4gU2Vzc2lvbnMAAQQGEFUNBAAMpCBTZXNzaW9uIGluZm9ybWF0aW9uIGluIGEgcm9sbGluZyB3aW5kb3cuNQEgU2hvdWxkIGhhdmUgYW4gZW50cnkgaW4gcmFuZ2UgYEVhcmxpZXN0U3RvcmVkU2Vzc2lvbi4uPUN1cnJlbnRTZXNzaW9uSW5kZXhgLnUBIERvZXMgbm90IGhhdmUgYW55IGVudHJpZXMgYmVmb3JlIHRoZSBzZXNzaW9uIGluZGV4IGluIHRoZSBmaXJzdCBzZXNzaW9uIGNoYW5nZSBub3RpZmljYXRpb24uLEFjY291bnRLZXlzAAEEBhC1AQQABHEBIFRoZSB2YWxpZGF0b3IgYWNjb3VudCBrZXlzIG9mIHRoZSB2YWxpZGF0b3JzIGFjdGl2ZWx5IHBhcnRpY2lwYXRpbmcgaW4gcGFyYWNoYWluIGNvbnNlbnN1cy5UU2Vzc2lvbkV4ZWN1dG9yUGFyYW1zAAEEBhDdBAQABMQgRXhlY3V0b3IgcGFyYW1ldGVyIHNldCBmb3IgYSBnaXZlbiBzZXNzaW9uIGluZGV4AAAAAD0ANFBhcmFzRGlzcHV0ZXMBNFBhcmFzRGlzcHV0ZXMURExhc3RQcnVuZWRTZXNzaW9uAAAQBAAIAQEgVGhlIGxhc3QgcHJ1bmVkIHNlc3Npb24sIGlmIGFueS4gQWxsIGRhdGEgc3RvcmVkIGJ5IHRoaXMgbW9kdWxlVCByZWZlcmVuY2VzIHNlc3Npb25zLiBEaXNwdXRlcwABCAUCYQ1lDQQABAUBIEFsbCBvbmdvaW5nIG9yIGNvbmNsdWRlZCBkaXNwdXRlcyBmb3IgdGhlIGxhc3Qgc2V2ZXJhbCBzZXNzaW9ucy5EQmFja2Vyc09uRGlzcHV0ZXMAAQgFAmENaQ0EAAicIEJhY2tpbmcgdm90ZXMgc3RvcmVkIGZvciBlYWNoIGRpc3B1dGUujCBUaGlzIHN0b3JhZ2UgaXMgdXNlZCBmb3Igc2xhc2hpbmcuIEluY2x1ZGVkAAEIBQJhDRAEAAhFASBBbGwgaW5jbHVkZWQgYmxvY2tzIG9uIHRoZSBjaGFpbiwgYXMgd2VsbCBhcyB0aGUgYmxvY2sgbnVtYmVyIGluIHRoaXMgY2hhaW4gdGhhdFkBIHNob3VsZCBiZSByZXZlcnRlZCBiYWNrIHRvIGlmIHRoZSBjYW5kaWRhdGUgaXMgZGlzcHV0ZWQgYW5kIGRldGVybWluZWQgdG8gYmUgaW52YWxpZC4YRnJvemVuAQBFAgQAEBEBIFdoZXRoZXIgdGhlIGNoYWluIGlzIGZyb3plbi4gU3RhcnRzIGFzIGBOb25lYC4gV2hlbiB0aGlzIGlzIGBTb21lYCw1ASB0aGUgY2hhaW4gd2lsbCBub3QgYWNjZXB0IGFueSBuZXcgcGFyYWNoYWluIGJsb2NrcyBmb3IgYmFja2luZyBvciBpbmNsdXNpb24sCQEgYW5kIGl0cyB2YWx1ZSBpbmRpY2F0ZXMgdGhlIGxhc3QgdmFsaWQgYmxvY2sgbnVtYmVyIGluIHRoZSBjaGFpbi74IEl0IGNhbiBvbmx5IGJlIHNldCBiYWNrIHRvIGBOb25lYCBieSBnb3Zlcm5hbmNlIGludGVydmVudGlvbi4BoQUBQQgAAW0NPgA0UGFyYXNTbGFzaGluZwE0UGFyYXNTbGFzaGluZwhAVW5hcHBsaWVkU2xhc2hlcwABCAUCYQ1xDQQABJAgVmFsaWRhdG9ycyBwZW5kaW5nIGRpc3B1dGUgc2xhc2hlcy5IVmFsaWRhdG9yU2V0Q291bnRzAAEEBRAQBAAEhCBgVmFsaWRhdG9yU2V0Q291bnRgIHBlciBzZXNzaW9uLgGlBQAAAYENPwBoT25EZW1hbmRBc3NpZ25tZW50UHJvdmlkZXIBaE9uRGVtYW5kQXNzaWdubWVudFByb3ZpZGVyFDhQYXJhSWRBZmZpbml0eQABBAVpAoUNBAAMcQEgTWFwcyBhIGBQYXJhSWRgIHRvIGBDb3JlSW5kZXhgIGFuZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSBhc3NpZ25tZW50cyB0aGUgc2NoZWR1bGVyIGhhcyBpbl0BIGl0J3MgbG9va2FoZWFkLiBLZWVwaW5nIHRyYWNrIG9mIHRoaXMgYWZmaW5pdHkgcHJldmVudHMgcGFyYWxsZWwgZXhlY3V0aW9uIG9mIHRoZSBzYW1lnCBgUGFyYUlkYCBvbiB0d28gb3IgbW9yZSBgQ29yZUluZGV4YGVzLixRdWV1ZVN0YXR1cwEAiQ1kAABkp7O24A0AAAAAAAAAAAAAAAAAAAAAAATcIE92ZXJhbGwgc3RhdHVzIG9mIHF1ZXVlIChib3RoIGZyZWUgKyBhZmZpbml0eSBlbnRyaWVzKSxGcmVlRW50cmllcwEAnQ0EAARhASBQcmlvcml0eSBxdWV1ZSBmb3IgYWxsIG9yZGVycyB3aGljaCBkb24ndCB5ZXQgKG9yIG5vdCBhbnkgbW9yZSkgaGF2ZSBhbnkgY29yZSBhZmZpbml0eS48QWZmaW5pdHlFbnRyaWVzAQEEBTEInQ0EAARJASBRdWV1ZSBlbnRyaWVzIHRoYXQgYXJlIGN1cnJlbnRseSBib3VuZCB0byBhIHBhcnRpY3VsYXIgY29yZSBkdWUgdG8gY29yZSBhZmZpbml0eS4cUmV2ZW51ZQEAqQ0EAAT8IEtlZXBzIHRyYWNrIG9mIGFjY3VtdWxhdGVkIHJldmVudWUgZnJvbSBvbiBkZW1hbmQgb3JkZXIgc2FsZXMuAbUFAU0IDExUcmFmZmljRGVmYXVsdFZhbHVlPQdAAABkp7O24A0AAAAAAAAAAATMIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgc3BvdCB0cmFmZmljIG11bHRpcGxpZXIuUE1heEhpc3RvcmljYWxSZXZlbnVlEBCgAAAACNQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGJsb2NrcyBzb21lIGhpc3RvcmljYWwgcmV2ZW51ZWAgaW5mb3JtYXRpb24gc3RvcmVkIGZvci4gUGFsbGV0SWT9CSBweS9vbmRtZAS0IElkZW50aWZpZXIgZm9yIHRoZSBpbnRlcm5hbCByZXZlbnVlIGJhbGFuY2UuAbENQABoQ29yZXRpbWVBc3NpZ25tZW50UHJvdmlkZXIBaENvcmV0aW1lQXNzaWdubWVudFByb3ZpZGVyCDRDb3JlU2NoZWR1bGVzAAEEBLUNuQ0EABBsIFNjaGVkdWxlZCBhc3NpZ25tZW50IHNldHMuAG0BIEFzc2lnbm1lbnRzIGFzIG9mIHRoZSBnaXZlbiBibG9jayBudW1iZXIuIFRoZXkgd2lsbCBnbyBpbnRvIHN0YXRlIG9uY2UgdGhlIGJsb2NrIG51bWJlciBpc9AgcmVhY2hlZCAoYW5kIHJlcGxhY2Ugd2hhdGV2ZXIgd2FzIGluIHRoZXJlIGJlZm9yZSkuPENvcmVEZXNjcmlwdG9ycwEBBAQxCL0NCAAAEKAgQXNzaWdubWVudHMgd2hpY2ggYXJlIGN1cnJlbnRseSBhY3RpdmUuAGkBIFRoZXkgd2lsbCBiZSBwaWNrZWQgZnJvbSBgUGVuZGluZ0Fzc2lnbm1lbnRzYCBvbmNlIHdlIHJlYWNoIHRoZSBzY2hlZHVsZWQgYmxvY2sgbnVtYmVyIGluWCBgUGVuZGluZ0Fzc2lnbm1lbnRzYC4AAAAB3Q1BACRSZWdpc3RyYXIBJFJlZ2lzdHJhcgwsUGVuZGluZ1N3YXAAAQQFaQJpAgQABGQgUGVuZGluZyBzd2FwIG9wZXJhdGlvbnMuFFBhcmFzAAEEBWkC4Q0EABAFASBBbW91bnQgaGVsZCBvbiBkZXBvc2l0IGZvciBlYWNoIHBhcmEgYW5kIHRoZSBvcmlnaW5hbCBkZXBvc2l0b3IuAHEBIFRoZSBnaXZlbiBhY2NvdW50IElEIGlzIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyB0aGUgY29kZSBhbmQgaW5pdGlhbCBoZWFkIGRhdGEsIGJ1dCBtYXlVASBvbmx5IGRvIHNvIGlmIGl0IGlzbid0IHlldCByZWdpc3RlcmVkLiAoQWZ0ZXIgdGhhdCwgaXQncyB1cCB0byBnb3Zlcm5hbmNlIHRvIGRvIHNvLik4TmV4dEZyZWVQYXJhSWQBAGkCEAAAAAAEYCBUaGUgbmV4dCBmcmVlIGBQYXJhSWRgLgG5BQFRCAgsUGFyYURlcG9zaXQYQABAlFKjAwAAAAAAAAAAAAAI1CBUaGUgZGVwb3NpdCB0byBiZSBwYWlkIHRvIHJ1biBhIG9uLWRlbWFuZCBwYXJhY2hhaW4uPQEgVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgY29zdCBmb3Igc3RvcmluZyB0aGUgZ2VuZXNpcyBoZWFkIGFuZCB2YWxpZGF0aW9uIGNvZGUuSERhdGFEZXBvc2l0UGVyQnl0ZRhAVaD8AQAAAAAAAAAAAAAAAATEIFRoZSBkZXBvc2l0IHRvIGJlIHBhaWQgcGVyIGJ5dGUgc3RvcmVkIG9uIGNoYWluLgHlDUYAFFNsb3RzARRTbG90cwQYTGVhc2VzAQEEBWkC6Q0EAEAVASBBbW91bnRzIGhlbGQgb24gZGVwb3NpdCBmb3IgZWFjaCAocG9zc2libHkgZnV0dXJlKSBsZWFzZWQgcGFyYWNoYWluLgBhASBUaGUgYWN0dWFsIGFtb3VudCBsb2NrZWQgb24gaXRzIGJlaGFsZiBieSBhbnkgYWNjb3VudCBhdCBhbnkgdGltZSBpcyB0aGUgbWF4aW11bSBvZiB0aGUpASBzZWNvbmQgdmFsdWVzIG9mIHRoZSBpdGVtcyBpbiB0aGlzIGxpc3Qgd2hvc2UgZmlyc3QgdmFsdWUgaXMgdGhlIGFjY291bnQuAGEBIFRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBhbW91bnQgbG9ja2VkIGZvciB0aGUgY3VycmVudCBMZWFzZSBQZXJpb2QuIEZvbGxvd2luZ7AgaXRlbXMgYXJlIGZvciB0aGUgc3Vic2VxdWVudCBsZWFzZSBwZXJpb2RzLgBhASBUaGUgZGVmYXVsdCB2YWx1ZSAoYW4gZW1wdHkgbGlzdCkgaW1wbGllcyB0aGF0IHRoZSBwYXJhY2hhaW4gbm8gbG9uZ2VyIGV4aXN0cyAob3IgbmV2ZXK0IGV4aXN0ZWQpIGFzIGZhciBhcyB0aGlzIHBhbGxldCBpcyBjb25jZXJuZWQuAFEBIElmIGEgcGFyYWNoYWluIGRvZXNuJ3QgZXhpc3QgKnlldCogYnV0IGlzIHNjaGVkdWxlZCB0byBleGlzdCBpbiB0aGUgZnV0dXJlLCB0aGVuIGl0YQEgd2lsbCBiZSBsZWZ0LXBhZGRlZCB3aXRoIG9uZSBvciBtb3JlIGBOb25lYHMgdG8gZGVub3RlIHRoZSBmYWN0IHRoYXQgbm90aGluZyBpcyBoZWxkIG9uXQEgZGVwb3NpdCBmb3IgdGhlIG5vbi1leGlzdGVudCBjaGFpbiBjdXJyZW50bHksIGJ1dCBpcyBoZWxkIGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZS4A3CBJdCBpcyBpbGxlZ2FsIGZvciBhIGBOb25lYCB2YWx1ZSB0byB0cmFpbCBpbiB0aGUgbGlzdC4BvQUBVQgILExlYXNlUGVyaW9kEBCAOgkABNwgVGhlIG51bWJlciBvZiBibG9ja3Mgb3ZlciB3aGljaCBhIHNpbmdsZSBwZXJpb2QgbGFzdHMuLExlYXNlT2Zmc2V0EBAAAAAABNQgVGhlIG51bWJlciBvZiBibG9ja3MgdG8gb2Zmc2V0IGVhY2ggbGVhc2UgcGVyaW9kIGJ5LgHtDUcAIEF1Y3Rpb25zASBBdWN0aW9ucxA4QXVjdGlvbkNvdW50ZXIBABAQAAAAAASMIE51bWJlciBvZiBhdWN0aW9ucyBzdGFydGVkIHNvIGZhci4sQXVjdGlvbkluZm8AABEDBAAU+CBJbmZvcm1hdGlvbiByZWxhdGluZyB0byB0aGUgY3VycmVudCBhdWN0aW9uLCBpZiB0aGVyZSBpcyBvbmUuAEUBIFRoZSBmaXJzdCBpdGVtIGluIHRoZSB0dXBsZSBpcyB0aGUgbGVhc2UgcGVyaW9kIGluZGV4IHRoYXQgdGhlIGZpcnN0IG9mIHRoZSBmb3VyUQEgY29udGlndW91cyBsZWFzZSBwZXJpb2RzIG9uIGF1Y3Rpb24gaXMgZm9yLiBUaGUgc2Vjb25kIGlzIHRoZSBibG9jayBudW1iZXIgd2hlbiB0aGVdASBhdWN0aW9uIHdpbGwgImJlZ2luIHRvIGVuZCIsIGkuZS4gdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBFbmRpbmcgUGVyaW9kIG9mIHRoZSBhdWN0aW9uLjxSZXNlcnZlZEFtb3VudHMAAQQF8Q0YBAAIMQEgQW1vdW50cyBjdXJyZW50bHkgcmVzZXJ2ZWQgaW4gdGhlIGFjY291bnRzIG9mIHRoZSBiaWRkZXJzIGN1cnJlbnRseSB3aW5uaW5nOCAoc3ViLSlyYW5nZXMuHFdpbm5pbmcAAQQFEPUNBAAMYQEgVGhlIHdpbm5pbmcgYmlkcyBmb3IgZWFjaCBvZiB0aGUgMTAgcmFuZ2VzIGF0IGVhY2ggc2FtcGxlIGluIHRoZSBmaW5hbCBFbmRpbmcgUGVyaW9kIG9mSQEgdGhlIGN1cnJlbnQgYXVjdGlvbi4gVGhlIG1hcCdzIGtleSBpcyB0aGUgMC1iYXNlZCBpbmRleCBpbnRvIHRoZSBTYW1wbGUgU2l6ZS4gVGhlHQEgZmlyc3Qgc2FtcGxlIG9mIHRoZSBlbmRpbmcgcGVyaW9kIGlzIDA7IHRoZSBsYXN0IGlzIGBTYW1wbGUgU2l6ZSAtIDFgLgHBBQFZCBAwRW5kaW5nUGVyaW9kEBBAGQEABB0BIFRoZSBudW1iZXIgb2YgYmxvY2tzIG92ZXIgd2hpY2ggYW4gYXVjdGlvbiBtYXkgYmUgcmV0cm9hY3RpdmVseSBlbmRlZC4wU2FtcGxlTGVuZ3RoEBAUAAAADPAgVGhlIGxlbmd0aCBvZiBlYWNoIHNhbXBsZSB0byB0YWtlIGR1cmluZyB0aGUgZW5kaW5nIHBlcmlvZC4A1CBgRW5kaW5nUGVyaW9kYCAvIGBTYW1wbGVMZW5ndGhgID0gVG90YWwgIyBvZiBTYW1wbGVzOFNsb3RSYW5nZUNvdW50EBAkAAAAAExMZWFzZVBlcmlvZHNQZXJTbG90EBAIAAAAAAEBDkgAJENyb3dkbG9hbgEkQ3Jvd2Rsb2FuEBRGdW5kcwABBAVpAgUOBAAEaCBJbmZvIG9uIGFsbCBvZiB0aGUgZnVuZHMuIE5ld1JhaXNlAQD1DAQACFUBIFRoZSBmdW5kcyB0aGF0IGhhdmUgaGFkIGFkZGl0aW9uYWwgY29udHJpYnV0aW9ucyBkdXJpbmcgdGhlIGxhc3QgYmxvY2suIFRoaXMgaXMgdXNlZBUBIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGljaCBmdW5kcyBzaG91bGQgc3VibWl0IG5ldyBvciB1cGRhdGVkIGJpZHMuMEVuZGluZ3NDb3VudAEAEBAAAAAABCkBIFRoZSBudW1iZXIgb2YgYXVjdGlvbnMgdGhhdCBoYXZlIGVudGVyZWQgaW50byB0aGVpciBlbmRpbmcgcGVyaW9kIHNvIGZhci40TmV4dEZ1bmRJbmRleAEAEBAAAAAABKggVHJhY2tlciBmb3IgdGhlIG5leHQgYXZhaWxhYmxlIGZ1bmQgaW5kZXgByQUBXQgMIFBhbGxldElk/QkgcHkvY2Z1bmQIDQEgYFBhbGxldElkYCBmb3IgdGhlIGNyb3dkbG9hbiBwYWxsZXQuIEFuIGFwcHJvcHJpYXRlIHZhbHVlIGNvdWxkIGJlZCBgUGFsbGV0SWQoKmIicHkvY2Z1bmQiKWA8TWluQ29udHJpYnV0aW9uGEAYDKXU6AAAAAAAAAAAAAAACGEBIFRoZSBtaW5pbXVtIGFtb3VudCB0aGF0IG1heSBiZSBjb250cmlidXRlZCBpbnRvIGEgY3Jvd2Rsb2FuLiBTaG91bGQgYWxtb3N0IGNlcnRhaW5seSBiZXwgYXQgbGVhc3QgYEV4aXN0ZW50aWFsRGVwb3NpdGAuPFJlbW92ZUtleXNMaW1pdBAQ6AMAAATkIE1heCBudW1iZXIgb2Ygc3RvcmFnZSBrZXlzIHRvIHJlbW92ZSBwZXIgZXh0cmluc2ljIGNhbGwuAQ0OSQAgQ29yZXRpbWUAAd0FAWEICCBCcm9rZXJJZBAQ7QMAAASIIFRoZSBQYXJhSWQgb2YgdGhlIGNvcmV0aW1lIGNoYWluLkRCcm9rZXJQb3RMb2NhdGlvbviMAQEAbW9kbHB5L2Jyb2tlAAAAAAAAAAAAAAAAAAAAAAAAAAAEhCBUaGUgY29yZXRpbWUgY2hhaW4gcG90IGxvY2F0aW9uLgERDkoAJFhjbVBhbGxldAEkWGNtUGFsbGV0ODBRdWVyeUNvdW50ZXIBADAgAAAAAAAAAAAEiCBUaGUgbGF0ZXN0IGF2YWlsYWJsZSBxdWVyeSBpbmRleC4cUXVlcmllcwABBAIwFQ4EAARUIFRoZSBvbmdvaW5nIHF1ZXJpZXMuKEFzc2V0VHJhcHMBAQQGNBAQAAAAABBoIFRoZSBleGlzdGluZyBhc3NldCB0cmFwcy4AYQEgS2V5IGlzIHRoZSBibGFrZTIgMjU2IGhhc2ggb2YgKG9yaWdpbiwgdmVyc2lvbmVkIGBBc3NldHNgKSBwYWlyLiBWYWx1ZSBpcyB0aGUgbnVtYmVyIG9mHQEgdGltZXMgdGhpcyBwYWlyIGhhcyBiZWVuIHRyYXBwZWQgKHVzdWFsbHkganVzdCAxIGlmIGl0IGV4aXN0cyBhdCBhbGwpLjhTYWZlWGNtVmVyc2lvbgAAEAQACGEBIERlZmF1bHQgdmVyc2lvbiB0byBlbmNvZGUgWENNIHdoZW4gbGF0ZXN0IHZlcnNpb24gb2YgZGVzdGluYXRpb24gaXMgdW5rbm93bi4gSWYgYE5vbmVgLD0BIHRoZW4gdGhlIGRlc3RpbmF0aW9ucyB3aG9zZSBYQ00gdmVyc2lvbiBpcyB1bmtub3duIGFyZSBjb25zaWRlcmVkIHVucmVhY2hhYmxlLkBTdXBwb3J0ZWRWZXJzaW9uAAEIBQIpDhAEAATwIFRoZSBMYXRlc3QgdmVyc2lvbnMgdGhhdCB3ZSBrbm93IHZhcmlvdXMgbG9jYXRpb25zIHN1cHBvcnQuQFZlcnNpb25Ob3RpZmllcnMAAQgFAikOMAQABAUBIEFsbCBsb2NhdGlvbnMgdGhhdCB3ZSBoYXZlIHJlcXVlc3RlZCB2ZXJzaW9uIG5vdGlmaWNhdGlvbnMgZnJvbS5QVmVyc2lvbk5vdGlmeVRhcmdldHMAAQgFAikOLQ4EAAhxASBUaGUgdGFyZ2V0IGxvY2F0aW9ucyB0aGF0IGFyZSBzdWJzY3JpYmVkIHRvIG91ciB2ZXJzaW9uIGNoYW5nZXMsIGFzIHdlbGwgYXMgdGhlIG1vc3QgcmVjZW50lCBvZiBvdXIgdmVyc2lvbnMgd2UgaW5mb3JtZWQgdGhlbSBvZi5UVmVyc2lvbkRpc2NvdmVyeVF1ZXVlAQAxDgQADGUBIERlc3RpbmF0aW9ucyB3aG9zZSBsYXRlc3QgWENNIHZlcnNpb24gd2Ugd291bGQgbGlrZSB0byBrbm93LiBEdXBsaWNhdGVzIG5vdCBhbGxvd2VkLCBhbmRxASB0aGUgYHUzMmAgY291bnRlciBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoYXQgYSBzZW5kIHRvIHRoZSBkZXN0aW5hdGlvbiBoYXMgYmVlbiBhdHRlbXB0ZWQsjCB3aGljaCBpcyB1c2VkIGFzIGEgcHJpb3JpdGl6YXRpb24uQEN1cnJlbnRNaWdyYXRpb24AAD0OBAAEnCBUaGUgY3VycmVudCBtaWdyYXRpb24ncyBzdGFnZSwgaWYgYW55LlRSZW1vdGVMb2NrZWRGdW5naWJsZXMAAQwFAgJFDkkOBAAE8CBGdW5naWJsZSBhc3NldHMgd2hpY2ggd2Uga25vdyBhcmUgbG9ja2VkIG9uIGEgcmVtb3RlIGNoYWluLjxMb2NrZWRGdW5naWJsZXMAAQQCAFkOBAAE4CBGdW5naWJsZSBhc3NldHMgd2hpY2ggd2Uga25vdyBhcmUgbG9ja2VkIG9uIHRoaXMgY2hhaW4uVFhjbUV4ZWN1dGlvblN1c3BlbmRlZAEAIAQABLQgR2xvYmFsIHN1c3BlbnNpb24gc3RhdGUgb2YgdGhlIFhDTSBleGVjdXRvci48U2hvdWxkUmVjb3JkWGNtAQAgBAAcWQEgV2hldGhlciBvciBub3QgaW5jb21pbmcgWENNcyAoYm90aCBleGVjdXRlZCBsb2NhbGx5IGFuZCByZWNlaXZlZCkgc2hvdWxkIGJlIHJlY29yZGVkLsQgT25seSBvbmUgWENNIHByb2dyYW0gd2lsbCBiZSByZWNvcmRlZCBhdCBhIHRpbWUuKQEgVGhpcyBpcyBtZWFudCB0byBiZSB1c2VkIGluIHJ1bnRpbWUgQVBJcywgYW5kIGl0J3MgYWR2aXNlZCBpdCBzdGF5cyBmYWxzZQ0BIGZvciBhbGwgb3RoZXIgdXNlIGNhc2VzLCBzbyBhcyB0byBub3QgZGVncmFkZSByZWd1bGFyIHBlcmZvcm1hbmNlLgBZASBPbmx5IHJlbGV2YW50IGlmIHRoaXMgcGFsbGV0IGlzIGJlaW5nIHVzZWQgYXMgdGhlIFtgeGNtX2V4ZWN1dG9yOjp0cmFpdHM6OlJlY29yZFhjbWBdyCBpbXBsZW1lbnRhdGlvbiBpbiB0aGUgWENNIGV4ZWN1dG9yIGNvbmZpZ3VyYXRpb24uLFJlY29yZGVkWGNtAACtBgQAGEkBIElmIFtgU2hvdWxkUmVjb3JkWGNtYF0gaXMgc2V0IHRvIHRydWUsIHRoZW4gdGhlIGxhc3QgWENNIHByb2dyYW0gZXhlY3V0ZWQgbG9jYWxseVQgd2lsbCBiZSBzdG9yZWQgaGVyZS4pASBSdW50aW1lIEFQSXMgY2FuIGZldGNoIHRoZSBYQ00gdGhhdCB3YXMgZXhlY3V0ZWQgYnkgYWNjZXNzaW5nIHRoaXMgdmFsdWUuAFkBIE9ubHkgcmVsZXZhbnQgaWYgdGhpcyBwYWxsZXQgaXMgYmVpbmcgdXNlZCBhcyB0aGUgW2B4Y21fZXhlY3V0b3I6OnRyYWl0czo6UmVjb3JkWGNtYF3IIGltcGxlbWVudGF0aW9uIGluIHRoZSBYQ00gZXhlY3V0b3IgY29uZmlndXJhdGlvbi4B8QUBZQgAAWUOYwAwTWVzc2FnZVF1ZXVlATBNZXNzYWdlUXVldWUMMEJvb2tTdGF0ZUZvcgEBBAUxB2kOdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBhbmQgbGFzdCAobm9uLWVtcHR5KSBwYWdlcy4sU2VydmljZUhlYWQAADEHBAAEvCBUaGUgb3JpZ2luIGF0IHdoaWNoIHdlIHNob3VsZCBiZWdpbiBzZXJ2aWNpbmcuFFBhZ2VzAAEIBQV1DnkOBAAEiCBUaGUgbWFwIG9mIHBhZ2UgaW5kaWNlcyB0byBwYWdlcy4BLQcBbQgQIEhlYXBTaXplEBAAAAEAFD0BIFRoZSBzaXplIG9mIHRoZSBwYWdlOyB0aGlzIGltcGxpZXMgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIHdoaWNoIGNhbiBiZSBzZW50LgBZASBBIGdvb2QgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZXhwZWN0ZWQgbWVzc2FnZSBzaXplcywgdGhlaXIgd2VpZ2h0cywgdGhlIHdlaWdodCB0aGF0IGlzXQEgYXZhaWxhYmxlIGZvciBwcm9jZXNzaW5nIHRoZW0gYW5kIHRoZSBtYXhpbWFsIG5lZWRlZCBtZXNzYWdlIHNpemUuIFRoZSBtYXhpbWFsIG1lc3NhZ2URASBzaXplIGlzIHNsaWdodGx5IGxvd2VyIHRoYW4gdGhpcyBhcyBkZWZpbmVkIGJ5IFtgTWF4TWVzc2FnZUxlbk9mYF0uIE1heFN0YWxlEBAQAAAADF0BIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzdGFsZSBwYWdlcyAoaS5lLiBvZiBvdmVyd2VpZ2h0IG1lc3NhZ2VzKSBhbGxvd2VkIGJlZm9yZSBjdWxsaW5nUQEgY2FuIGhhcHBlbi4gT25jZSB0aGVyZSBhcmUgbW9yZSBzdGFsZSBwYWdlcyB0aGFuIHRoaXMsIHRoZW4gaGlzdG9yaWNhbCBwYWdlcyBtYXkgYmX8IGRyb3BwZWQsIGV2ZW4gaWYgdGhleSBjb250YWluIHVucHJvY2Vzc2VkIG92ZXJ3ZWlnaHQgbWVzc2FnZXMuNFNlcnZpY2VXZWlnaHShB0ABBwCg2yFdEzMzMzMzMzMzGEEBIFRoZSBhbW91bnQgb2Ygd2VpZ2h0IChpZiBhbnkpIHdoaWNoIHNob3VsZCBiZSBwcm92aWRlZCB0byB0aGUgbWVzc2FnZSBxdWV1ZSBmb3KoIHNlcnZpY2luZyBlbnF1ZXVlZCBpdGVtcyBgb25faW5pdGlhbGl6ZWAuAPwgVGhpcyBtYXkgYmUgbGVnaXRpbWF0ZWx5IGBOb25lYCBpbiB0aGUgY2FzZSB0aGF0IHlvdSB3aWxsIGNhbGxdASBgU2VydmljZVF1ZXVlczo6c2VydmljZV9xdWV1ZXNgIG1hbnVhbGx5IG9yIHNldCBbYFNlbGY6OklkbGVNYXhTZXJ2aWNlV2VpZ2h0YF0gdG8gaGF2ZVQgaXQgcnVuIGluIGBvbl9pZGxlYC5QSWRsZU1heFNlcnZpY2VXZWlnaHShB0ABBwCg2yFdEzMzMzMzMzMzFF0BIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB3ZWlnaHQgKGlmIGFueSkgdG8gYmUgdXNlZCBmcm9tIHJlbWFpbmluZyB3ZWlnaHQgYG9uX2lkbGVgIHdoaWNoQQEgc2hvdWxkIGJlIHByb3ZpZGVkIHRvIHRoZSBtZXNzYWdlIHF1ZXVlIGZvciBzZXJ2aWNpbmcgZW5xdWV1ZWQgaXRlbXMgYG9uX2lkbGVgLj0BIFVzZWZ1bCBmb3IgcGFyYWNoYWlucyB0byBwcm9jZXNzIG1lc3NhZ2VzIGF0IHRoZSBzYW1lIGJsb2NrIHRoZXkgYXJlIHJlY2VpdmVkLgApASBJZiBgTm9uZWAsIGl0IHdpbGwgbm90IGNhbGwgYFNlcnZpY2VRdWV1ZXM6OnNlcnZpY2VfcXVldWVzYCBpbiBgb25faWRsZWAuAYEOZAAkQXNzZXRSYXRlASRBc3NldFJhdGUEWENvbnZlcnNpb25SYXRlVG9OYXRpdmUAAQQCxD0HBAAMHQEgTWFwcyBhbiBhc3NldCB0byBpdHMgZml4ZWQgcG9pbnQgcmVwcmVzZW50YXRpb24gaW4gdGhlIG5hdGl2ZSBiYWxhbmNlLgBNASBFLmcuIGBuYXRpdmVfYW1vdW50ID0gYXNzZXRfYW1vdW50ICogQ29udmVyc2lvblJhdGVUb05hdGl2ZTo6PFQ+OjpnZXQoYXNzZXRfa2luZClgATkHAXUIAAGFDmUAFEJlZWZ5ARRCZWVmeRQsQXV0aG9yaXRpZXMBAIkOBAAEcCBUaGUgY3VycmVudCBhdXRob3JpdGllcyBzZXQ4VmFsaWRhdG9yU2V0SWQBADAgAAAAAAAAAAAEdCBUaGUgY3VycmVudCB2YWxpZGF0b3Igc2V0IGlkPE5leHRBdXRob3JpdGllcwEAiQ4EAATsIEF1dGhvcml0aWVzIHNldCBzY2hlZHVsZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBuZXh0IHNlc3Npb24wU2V0SWRTZXNzaW9uAAEEBTAQBAAoUQEgQSBtYXBwaW5nIGZyb20gQkVFRlkgc2V0IElEIHRvIHRoZSBpbmRleCBvZiB0aGUgKm1vc3QgcmVjZW50KiBzZXNzaW9uIGZvciB3aGljaCBpdHNoIG1lbWJlcnMgd2VyZSByZXNwb25zaWJsZS4ARQEgVGhpcyBpcyBvbmx5IHVzZWQgZm9yIHZhbGlkYXRpbmcgZXF1aXZvY2F0aW9uIHByb29mcy4gQW4gZXF1aXZvY2F0aW9uIHByb29mIG11c3RNASBjb250YWlucyBhIGtleS1vd25lcnNoaXAgcHJvb2YgZm9yIGEgZ2l2ZW4gc2Vzc2lvbiwgdGhlcmVmb3JlIHdlIG5lZWQgYSB3YXkgdG8gdGllPQEgdG9nZXRoZXIgc2Vzc2lvbnMgYW5kIEJFRUZZIHNldCBpZHMsIGkuZS4gd2UgbmVlZCB0byB2YWxpZGF0ZSB0aGF0IGEgdmFsaWRhdG9yQQEgd2FzIHRoZSBvd25lciBvZiBhIGdpdmVuIGtleSBvbiBhIGdpdmVuIHNlc3Npb24sIGFuZCB3aGF0IHRoZSBhY3RpdmUgc2V0IElEIHdhc1QgZHVyaW5nIHRoYXQgc2Vzc2lvbi4A3CBUV09YLU5PVEU6IGBWYWxpZGF0b3JTZXRJZGAgaXMgbm90IHVuZGVyIHVzZXIgY29udHJvbC4wR2VuZXNpc0Jsb2NrAQBFAgQADNwgQmxvY2sgbnVtYmVyIHdoZXJlIEJFRUZZIGNvbnNlbnN1cyBpcyBlbmFibGVkL3N0YXJ0ZWQuaQEgQnkgY2hhbmdpbmcgdGhpcyAodGhyb3VnaCBwcml2aWxlZ2VkIGBzZXRfbmV3X2dlbmVzaXMoKWApLCBCRUVGWSBjb25zZW5zdXMgaXMgZWZmZWN0aXZlbHmsIHJlc3RhcnRlZCBmcm9tIHRoZSBuZXdseSBzZXQgYmxvY2sgbnVtYmVyLgFBBwAMOE1heEF1dGhvcml0aWVzEBCghgEABNQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGF1dGhvcml0aWVzIHRoYXQgY2FuIGJlIGFkZGVkLjRNYXhOb21pbmF0b3JzEBAAAgAABNQgVGhlIG1heGltdW0gbnVtYmVyIG9mIG5vbWluYXRvcnMgZm9yIGVhY2ggdmFsaWRhdG9yLlhNYXhTZXRJZFNlc3Npb25FbnRyaWVzMCCoAAAAAAAAABg5ASBUaGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyB0byBrZWVwIGluIHRoZSBzZXQgaWQgdG8gc2Vzc2lvbiBpbmRleCBtYXBwaW5nLgAxASBTaW5jZSB0aGUgYFNldElkU2Vzc2lvbmAgbWFwIGlzIG9ubHkgdXNlZCBmb3IgdmFsaWRhdGluZyBlcXVpdm9jYXRpb25zIHRoaXMpASB2YWx1ZSBzaG91bGQgcmVsYXRlIHRvIHRoZSBib25kaW5nIGR1cmF0aW9uIG9mIHdoYXRldmVyIHN0YWtpbmcgc3lzdGVtIGlzNQEgYmVpbmcgdXNlZCAoaWYgYW55KS4gSWYgZXF1aXZvY2F0aW9uIGhhbmRsaW5nIGlzIG5vdCBlbmFibGVkIHRoZW4gdGhpcyB2YWx1ZTQgY2FuIGJlIHplcm8uAZEOyAAMTW1yAQxNbXIMIFJvb3RIYXNoAQA0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFggTGF0ZXN0IE1NUiBSb290IGhhc2guOE51bWJlck9mTGVhdmVzAQAwIAAAAAAAAAAABLAgQ3VycmVudCBzaXplIG9mIHRoZSBNTVIgKG51bWJlciBvZiBsZWF2ZXMpLhROb2RlcwABBAYwNAQAEIAgSGFzaGVzIG9mIHRoZSBub2RlcyBpbiB0aGUgTU1SLgAtASBOb3RlIHRoaXMgY29sbGVjdGlvbiBvbmx5IGNvbnRhaW5zIE1NUiBwZWFrcywgdGhlIGlubmVyIG5vZGVzIChhbmQgbGVhdmVzKbwgYXJlIHBydW5lZCBhbmQgb25seSBzdG9yZWQgaW4gdGhlIE9mZmNoYWluIERCLgAAAADJADBCZWVmeU1tckxlYWYBMEJlZWZ5TW1yTGVhZghAQmVlZnlBdXRob3JpdGllcwEAlQ6wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEoCBEZXRhaWxzIG9mIGN1cnJlbnQgQkVFRlkgYXV0aG9yaXR5IHNldC5QQmVlZnlOZXh0QXV0aG9yaXRpZXMBAJUOsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJQgRGV0YWlscyBvZiBuZXh0IEJFRUZZIGF1dGhvcml0eSBzZXQuAFEBIFRoaXMgc3RvcmFnZSBlbnRyeSBpcyB1c2VkIGFzIGNhY2hlIGZvciBjYWxscyB0byBgdXBkYXRlX2JlZWZ5X25leHRfYXV0aG9yaXR5X3NldGAuAAAAAMoABKUBZQHZBZkOJEhDaGVja05vblplcm9TZW5kZXKdDqkBQENoZWNrU3BlY1ZlcnNpb26hDhA4Q2hlY2tUeFZlcnNpb26lDhAwQ2hlY2tHZW5lc2lzqQ40OENoZWNrTW9ydGFsaXR5rQ40KENoZWNrTm9uY2W1DqkBLENoZWNrV2VpZ2h0uQ6pAWBDaGFyZ2VUcmFuc2FjdGlvblBheW1lbnS9DqkBRENoZWNrTWV0YWRhdGFIYXNowQ7pB8kOXCRJbmZsYXRpb24EmGV4cGVyaW1lbnRhbF9pbmZsYXRpb25fcHJlZGljdGlvbl9pbmZvAM0OENggUmV0dXJuIHRoZSBjdXJyZW50IGVzdGltYXRlcyBvZiB0aGUgaW5mbGF0aW9uIGFtb3VudC4AUQEgVGhpcyBpcyBtYXJrZWQgYXMgZXhwZXJpbWVudGFsIGluIGxpZ2h0IG9mIFJGQyM4OS4gTm9uZXRoZWxlc3MsIGl0cyB1c2FnZSBpcyBoaWdobHklASByZWNvbW1lbmRlZCBvdmVyIHRyeWluZyB0byByZWFkLXN0b3JhZ2UsIG9yIHJlLWNyZWF0ZSB0aGUgb25jaGFpbiBsb2dpYy4AEENvcmUMHHZlcnNpb24ApQgEkCBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIHRoZSBydW50aW1lLjRleGVjdXRlX2Jsb2NrBBRibG9ja9UOqQEEZCBFeGVjdXRlIHRoZSBnaXZlbiBibG9jay5AaW5pdGlhbGl6ZV9ibG9jawQYaGVhZGVygQHhDgRBASBJbml0aWFsaXplIGEgYmxvY2sgd2l0aCB0aGUgZ2l2ZW4gaGVhZGVyIGFuZCByZXR1cm4gdGhlIHJ1bnRpbWUgZXhlY3V0aXZlIG1vZGUuBCEBIFRoZSBgQ29yZWAgcnVudGltZSBhcGkgdGhhdCBldmVyeSBTdWJzdHJhdGUgcnVudGltZSBuZWVkcyB0byBpbXBsZW1lbnQuIE1ldGFkYXRhDCBtZXRhZGF0YQDlDgSMIFJldHVybnMgdGhlIG1ldGFkYXRhIG9mIGEgcnVudGltZS5MbWV0YWRhdGFfYXRfdmVyc2lvbgQcdmVyc2lvbhDpDhCkIFJldHVybnMgdGhlIG1ldGFkYXRhIGF0IGEgZ2l2ZW4gdmVyc2lvbi4ABQEgSWYgdGhlIGdpdmVuIGB2ZXJzaW9uYCBpc24ndCBzdXBwb3J0ZWQsIHRoaXMgd2lsbCByZXR1cm4gYE5vbmVgLnUBIFVzZSBbYFNlbGY6Om1ldGFkYXRhX3ZlcnNpb25zYF0gdG8gZmluZCBvdXQgYWJvdXQgc3VwcG9ydGVkIG1ldGFkYXRhIHZlcnNpb24gb2YgdGhlIHJ1bnRpbWUuRG1ldGFkYXRhX3ZlcnNpb25zAMkBDKQgUmV0dXJucyB0aGUgc3VwcG9ydGVkIG1ldGFkYXRhIHZlcnNpb25zLgDAIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2FsbCBgbWV0YWRhdGFfYXRfdmVyc2lvbmAuBAEBIFRoZSBgTWV0YWRhdGFgIGFwaSB0cmFpdCB0aGF0IHJldHVybnMgbWV0YWRhdGEgZm9yIHRoZSBydW50aW1lLjBCbG9ja0J1aWxkZXIQPGFwcGx5X2V4dHJpbnNpYwQkZXh0cmluc2lj2Q7tDhBsIEFwcGx5IHRoZSBnaXZlbiBleHRyaW5zaWMuADkBIFJldHVybnMgYW4gaW5jbHVzaW9uIG91dGNvbWUgd2hpY2ggc3BlY2lmaWVzIGlmIHRoaXMgZXh0cmluc2ljIGlzIGluY2x1ZGVkIGluTCB0aGlzIGJsb2NrIG9yIG5vdC44ZmluYWxpemVfYmxvY2sAgQEEaCBGaW5pc2ggdGhlIGN1cnJlbnQgYmxvY2suTGluaGVyZW50X2V4dHJpbnNpY3MEIGluaGVyZW50/Q7dDgQ9ASBHZW5lcmF0ZSBpbmhlcmVudCBleHRyaW5zaWNzLiBUaGUgaW5oZXJlbnQgZGF0YSB3aWxsIHZhcnkgZnJvbSBjaGFpbiB0byBjaGFpbi48Y2hlY2tfaW5oZXJlbnRzCBRibG9ja9UOEGRhdGH9Dg0PBFUBIENoZWNrIHRoYXQgdGhlIGluaGVyZW50cyBhcmUgdmFsaWQuIFRoZSBpbmhlcmVudCBkYXRhIHdpbGwgdmFyeSBmcm9tIGNoYWluIHRvIGNoYWluLgRxASBUaGUgYEJsb2NrQnVpbGRlcmAgYXBpIHRyYWl0IHRoYXQgcHJvdmlkZXMgdGhlIHJlcXVpcmVkIGZ1bmN0aW9uYWxpdHkgZm9yIGJ1aWxkaW5nIGEgYmxvY2suWFRhZ2dlZFRyYW5zYWN0aW9uUXVldWUEUHZhbGlkYXRlX3RyYW5zYWN0aW9uDBhzb3VyY2URDwh0eNkOKGJsb2NrX2hhc2g0FQ8kaCBWYWxpZGF0ZSB0aGUgdHJhbnNhY3Rpb24uAGUBIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgYnkgdGhlIHRyYW5zYWN0aW9uIHBvb2wgdG8gbGVhcm4gZGV0YWlscyBhYm91dCBnaXZlbiB0cmFuc2FjdGlvbi5FASBUaGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIG1ha2Ugc3VyZSB0byB2ZXJpZnkgdGhlIGNvcnJlY3RuZXNzIG9mIHRoZSB0cmFuc2FjdGlvbk0BIGFnYWluc3QgY3VycmVudCBzdGF0ZS4gVGhlIGdpdmVuIGBibG9ja19oYXNoYCBjb3JyZXNwb25kcyB0byB0aGUgaGFzaCBvZiB0aGUgYmxvY2t8IHRoYXQgaXMgdXNlZCBhcyBjdXJyZW50IHN0YXRlLgBFASBOb3RlIHRoYXQgdGhpcyBjYWxsIG1heSBiZSBwZXJmb3JtZWQgYnkgdGhlIHBvb2wgbXVsdGlwbGUgdGltZXMgYW5kIHRyYW5zYWN0aW9uc6QgbWlnaHQgYmUgdmVyaWZpZWQgaW4gYW55IHBvc3NpYmxlIG9yZGVyLgRNASBUaGUgYFRhZ2dlZFRyYW5zYWN0aW9uUXVldWVgIGFwaSB0cmFpdCBmb3IgaW50ZXJmZXJpbmcgd2l0aCB0aGUgdHJhbnNhY3Rpb24gcXVldWUuRE9mZmNoYWluV29ya2VyQXBpBDxvZmZjaGFpbl93b3JrZXIEGGhlYWRlcoEBqQEEyCBTdGFydHMgdGhlIG9mZi1jaGFpbiB0YXNrIGZvciBnaXZlbiBibG9jayBoZWFkZXIuBGQgVGhlIG9mZmNoYWluIHdvcmtlciBhcGkuNFBhcmFjaGFpbkhvc3R8KHZhbGlkYXRvcnMAiQwEcCBHZXQgdGhlIGN1cnJlbnQgdmFsaWRhdG9ycy5AdmFsaWRhdG9yX2dyb3VwcwAdDwxlASBSZXR1cm5zIHRoZSB2YWxpZGF0b3IgZ3JvdXBzIGFuZCByb3RhdGlvbiBpbmZvIGxvY2FsaXplZCBiYXNlZCBvbiB0aGUgaHlwb3RoZXRpY2FsIGNoaWxkYQEgIG9mIGEgYmxvY2sgd2hvc2Ugc3RhdGUgIHRoaXMgaXMgaW52b2tlZCBvbi4gTm90ZSB0aGF0IGBub3dgIGluIHRoZSBgR3JvdXBSb3RhdGlvbkluZm9g0CBzaG91bGQgYmUgdGhlIHN1Y2Nlc3NvciBvZiB0aGUgbnVtYmVyIG9mIHRoZSBibG9jay5IYXZhaWxhYmlsaXR5X2NvcmVzACUPCDUBIFlpZWxkcyBpbmZvcm1hdGlvbiBvbiBhbGwgYXZhaWxhYmlsaXR5IGNvcmVzIGFzIHJlbGV2YW50IHRvIHRoZSBjaGlsZCBibG9jay49ASBDb3JlcyBhcmUgZWl0aGVyIGZyZWUgb3Igb2NjdXBpZWQuIEZyZWUgY29yZXMgY2FuIGhhdmUgcGFyYXMgYXNzaWduZWQgdG8gdGhlbS5kcGVyc2lzdGVkX3ZhbGlkYXRpb25fZGF0YQgccGFyYV9pZGkCKGFzc3VtcHRpb249D0EPFGkBIFlpZWxkcyB0aGUgcGVyc2lzdGVkIHZhbGlkYXRpb24gZGF0YSBmb3IgdGhlIGdpdmVuIGBQYXJhSWRgIGFsb25nIHdpdGggYW4gYXNzdW1wdGlvbiB0aGF02CBzaG91bGQgYmUgdXNlZCBpZiB0aGUgcGFyYSBjdXJyZW50bHkgb2NjdXBpZXMgYSBjb3JlLgBFASBSZXR1cm5zIGBOb25lYCBpZiBlaXRoZXIgdGhlIHBhcmEgaXMgbm90IHJlZ2lzdGVyZWQgb3IgdGhlIGFzc3VtcHRpb24gaXMgYEZyZWVkYJggYW5kIHRoZSBwYXJhIGFscmVhZHkgb2NjdXBpZXMgYSBjb3JlLlxhc3N1bWVkX3ZhbGlkYXRpb25fZGF0YQgccGFyYV9pZGkCnGV4cGVjdGVkX3BlcnNpc3RlZF92YWxpZGF0aW9uX2RhdGFfaGFzaDRJDwxpASBSZXR1cm5zIHRoZSBwZXJzaXN0ZWQgdmFsaWRhdGlvbiBkYXRhIGZvciB0aGUgZ2l2ZW4gYFBhcmFJZGAgYWxvbmcgd2l0aCB0aGUgY29ycmVzcG9uZGluZ3UBIHZhbGlkYXRpb24gY29kZSBoYXNoLiBJbnN0ZWFkIG9mIGFjY2VwdGluZyBhc3N1bXB0aW9uIGFib3V0IHRoZSBwYXJhLCBtYXRjaGVzIHRoZSB2YWxpZGF0aW9uKQEgZGF0YSBoYXNoIGFnYWluc3QgYW4gZXhwZWN0ZWQgb25lIGFuZCB5aWVsZHMgYE5vbmVgIGlmIHRoZXkncmUgbm90IGVxdWFsLmBjaGVja192YWxpZGF0aW9uX291dHB1dHMIHHBhcmFfaWRpAhxvdXRwdXRzQQUgBBUBIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdmFsaWRhdGlvbiBvdXRwdXRzIHBhc3MgdGhlIGFjY2VwdGFuY2UgY3JpdGVyaWEuXHNlc3Npb25faW5kZXhfZm9yX2NoaWxkABAM8CBSZXR1cm5zIHRoZSBzZXNzaW9uIGluZGV4IGV4cGVjdGVkIGF0IGEgY2hpbGQgb2YgdGhlIGJsb2NrLgDQIFRoaXMgY2FuIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgYSBgU2lnbmluZ0NvbnRleHRgLjx2YWxpZGF0aW9uX2NvZGUIHHBhcmFfaWRpAihhc3N1bXB0aW9uPQ9VBRBVASBGZXRjaCB0aGUgdmFsaWRhdGlvbiBjb2RlIHVzZWQgYnkgYSBwYXJhLCBtYWtpbmcgdGhlIGdpdmVuIGBPY2N1cGllZENvcmVBc3N1bXB0aW9uYC4ARQEgUmV0dXJucyBgTm9uZWAgaWYgZWl0aGVyIHRoZSBwYXJhIGlzIG5vdCByZWdpc3RlcmVkIG9yIHRoZSBhc3N1bXB0aW9uIGlzIGBGcmVlZGCYIGFuZCB0aGUgcGFyYSBhbHJlYWR5IG9jY3VwaWVzIGEgY29yZS54Y2FuZGlkYXRlX3BlbmRpbmdfYXZhaWxhYmlsaXR5BBxwYXJhX2lkaQJRDwhdASBHZXQgdGhlIHJlY2VpcHQgb2YgYSBjYW5kaWRhdGUgcGVuZGluZyBhdmFpbGFiaWxpdHkuIFRoaXMgcmV0dXJucyBgU29tZWAgZm9yIGFueSBwYXJhcyUBIGFzc2lnbmVkIHRvIG9jY3VwaWVkIGNvcmVzIGluIGBhdmFpbGFiaWxpdHlfY29yZXNgIGFuZCBgTm9uZWAgb3RoZXJ3aXNlLkBjYW5kaWRhdGVfZXZlbnRzAFUPBC0BIEdldCBhIHZlY3RvciBvZiBldmVudHMgY29uY2VybmluZyBjYW5kaWRhdGVzIHRoYXQgb2NjdXJyZWQgd2l0aGluIGEgYmxvY2suMGRtcV9jb250ZW50cwQkcmVjaXBpZW50aQIpDQQ9ASBHZXQgYWxsIHRoZSBwZW5kaW5nIGluYm91bmQgbWVzc2FnZXMgaW4gdGhlIGRvd253YXJkIG1lc3NhZ2UgcXVldWUgZm9yIGEgcGFyYS54aW5ib3VuZF9ocm1wX2NoYW5uZWxzX2NvbnRlbnRzBCRyZWNpcGllbnRpAl0PCGUBIEdldCB0aGUgY29udGVudHMgb2YgYWxsIGNoYW5uZWxzIGFkZHJlc3NlZCB0byB0aGUgZ2l2ZW4gcmVjaXBpZW50LiBDaGFubmVscyB0aGF0IGhhdmUgbm+QIG1lc3NhZ2VzIGluIHRoZW0gYXJlIGFsc28gaW5jbHVkZWQuXHZhbGlkYXRpb25fY29kZV9ieV9oYXNoBBBoYXNoPQVVBQScIEdldCB0aGUgdmFsaWRhdGlvbiBjb2RlIGZyb20gaXRzIGhhc2guOG9uX2NoYWluX3ZvdGVzAGkPBDEBIFNjcmFwZSBkaXNwdXRlIHJlbGV2YW50IGZyb20gb24tY2hhaW4sIGJhY2tpbmcgdm90ZXMgYW5kIHJlc29sdmVkIGRpc3B1dGVzLjBzZXNzaW9uX2luZm8EFGluZGV4EG0PDNwgR2V0IHRoZSBzZXNzaW9uIGluZm8gZm9yIHRoZSBnaXZlbiBzZXNzaW9uLCBpZiBzdG9yZWQuABkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiAyLmhzdWJtaXRfcHZmX2NoZWNrX3N0YXRlbWVudAgQc3RtdJEFJHNpZ25hdHVyZSEFqQEMAQEgU3VibWl0cyBhIFBWRiBwcmUtY2hlY2tpbmcgc3RhdGVtZW50IGludG8gdGhlIHRyYW5zYWN0aW9uIHBvb2wuABkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiAyLlRwdmZzX3JlcXVpcmVfcHJlY2hlY2sA8QwMXQEgUmV0dXJucyBjb2RlIGhhc2hlcyBvZiBQVkZzIHRoYXQgcmVxdWlyZSBwcmUtY2hlY2tpbmcgYnkgdmFsaWRhdG9ycyBpbiB0aGUgYWN0aXZlIHNldC4AGQEgTk9URTogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBzaW5jZSBwYXJhY2hhaW4gaG9zdCB2ZXJzaW9uIDIuUHZhbGlkYXRpb25fY29kZV9oYXNoCBxwYXJhX2lkaQIoYXNzdW1wdGlvbj0PcQ8MhQEgRmV0Y2ggdGhlIGhhc2ggb2YgdGhlIHZhbGlkYXRpb24gY29kZSB1c2VkIGJ5IGEgcGFyYSwgbWFraW5nIHRoZSBnaXZlbiBgT2NjdXBpZWRDb3JlQXNzdW1wdGlvbmAuABkBIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgc2luY2UgcGFyYWNoYWluIGhvc3QgdmVyc2lvbiAyLiBkaXNwdXRlcwB1DwR4IFJldHVybnMgYWxsIG9uY2hhaW4gZGlzcHV0ZXMuXHNlc3Npb25fZXhlY3V0b3JfcGFyYW1zBDRzZXNzaW9uX2luZGV4EH0PBLggUmV0dXJucyBleGVjdXRpb24gcGFyYW1ldGVycyBmb3IgdGhlIHNlc3Npb24uRHVuYXBwbGllZF9zbGFzaGVzAIEPCFkBIFJldHVybnMgYSBsaXN0IG9mIHZhbGlkYXRvcnMgdGhhdCBsb3N0IGEgcGFzdCBzZXNzaW9uIGRpc3B1dGUgYW5kIG5lZWQgdG8gYmUgc2xhc2hlZC4ZASBOT1RFOiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHNpbmNlIHBhcmFjaGFpbiBob3N0IHZlcnNpb24gNS5Ma2V5X293bmVyc2hpcF9wcm9vZgQwdmFsaWRhdG9yX2lkAQKJDwjMIFJldHVybnMgYSBtZXJrbGUgcHJvb2Ygb2YgYSB2YWxpZGF0b3Igc2Vzc2lvbiBrZXkuGQEgTk9URTogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBzaW5jZSBwYXJhY2hhaW4gaG9zdCB2ZXJzaW9uIDUuaHN1Ym1pdF9yZXBvcnRfZGlzcHV0ZV9sb3N0CDRkaXNwdXRlX3Byb29mqQVMa2V5X293bmVyc2hpcF9wcm9vZo0PkQ8MKQEgU3VibWl0IGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byBzbGFzaCB2YWxpZGF0b3JzIHdobyBsb3N0IGEgZGlzcHV0ZSBhYm91dHwgYSBjYW5kaWRhdGUgb2YgYSBwYXN0IHNlc3Npb24uGQEgTk9URTogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBzaW5jZSBwYXJhY2hhaW4gaG9zdCB2ZXJzaW9uIDUuVG1pbmltdW1fYmFja2luZ192b3RlcwAQCA0BIEdldCB0aGUgbWluaW11bSBudW1iZXIgb2YgYmFja2luZyB2b3RlcyBmb3IgYSBwYXJhY2hhaW4gY2FuZGlkYXRlLvQgVGhpcyBpcyBhIHN0YWdpbmcgbWV0aG9kISBEbyBub3QgdXNlIG9uIHByb2R1Y3Rpb24gcnVudGltZXMhSHBhcmFfYmFja2luZ19zdGF0ZQQEX2kClQ8E5CBSZXR1cm5zIHRoZSBzdGF0ZSBvZiBwYXJhY2hhaW4gYmFja2luZyBmb3IgYSBnaXZlbiBwYXJhLlBhc3luY19iYWNraW5nX3BhcmFtcwDZBARhASBSZXR1cm5zIGNhbmRpZGF0ZSdzIGFjY2VwdGFuY2UgbGltaXRhdGlvbnMgZm9yIGFzeW5jaHJvbm91cyBiYWNraW5nIGZvciBhIHJlbGF5IHBhcmVudC5MZGlzYWJsZWRfdmFsaWRhdG9ycwCFDAT4IFJldHVybnMgYSBsaXN0IG9mIGFsbCBkaXNhYmxlZCB2YWxpZGF0b3JzIGF0IHRoZSBnaXZlbiBibG9jay40bm9kZV9mZWF0dXJlcwAVBQhMIEdldCBub2RlIGZlYXR1cmVzLvQgVGhpcyBpcyBhIHN0YWdpbmcgbWV0aG9kISBEbyBub3QgdXNlIG9uIHByb2R1Y3Rpb24gcnVudGltZXMhWGFwcHJvdmFsX3ZvdGluZ19wYXJhbXMA8QQEpCBBcHByb3ZhbCB2b3RpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzLGNsYWltX3F1ZXVlAMUPBDAgQ2xhaW0gcXVldWV8Y2FuZGlkYXRlc19wZW5kaW5nX2F2YWlsYWJpbGl0eQQccGFyYV9pZGkC0Q8EYCBFbGFzdGljIHNjYWxpbmcgc3VwcG9ydATcIFRoZSBBUEkgZm9yIHF1ZXJ5aW5nIHRoZSBzdGF0ZSBvZiBwYXJhY2hhaW5zIG9uLWNoYWluLiBCZWVmeUFwaRw0YmVlZnlfZ2VuZXNpcwBFAgQFASBSZXR1cm4gdGhlIGJsb2NrIG51bWJlciB3aGVyZSBCRUVGWSBjb25zZW5zdXMgaXMgZW5hYmxlZC9zdGFydGVkNHZhbGlkYXRvcl9zZXQA1Q8EuCBSZXR1cm4gdGhlIGN1cnJlbnQgYWN0aXZlIEJFRUZZIHZhbGlkYXRvciBzZXS4c3VibWl0X3JlcG9ydF9kb3VibGVfdm90aW5nX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29mRQc8a2V5X293bmVyX3Byb29m3Q+RDyBFASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYSBkb3VibGUgdm90aW5nIGVxdWl2b2NhdGlvbi4gVGhlIGNhbGxlcvwgbXVzdCBwcm92aWRlIHRoZSBkb3VibGUgdm90aW5nIHByb29mIGFuZCBhIGtleSBvd25lcnNoaXAgcHJvb2b8IChzaG91bGQgYmUgb2J0YWluZWQgdXNpbmcgYGdlbmVyYXRlX2tleV9vd25lcnNoaXBfcHJvb2ZgKS4gVGhlBQEgZXh0cmluc2ljIHdpbGwgYmUgdW5zaWduZWQgYW5kIHNob3VsZCBvbmx5IGJlIGFjY2VwdGVkIGZvciBsb2NhbBUBIGF1dGhvcnNoaXAgKG5vdCB0byBiZSBicm9hZGNhc3QgdG8gdGhlIG5ldHdvcmspLiBUaGlzIG1ldGhvZCByZXR1cm5zCQEgYE5vbmVgIHdoZW4gY3JlYXRpb24gb2YgdGhlIGV4dHJpbnNpYyBmYWlscywgZS5nLiBpZiBlcXVpdm9jYXRpb24FASByZXBvcnRpbmcgaXMgZGlzYWJsZWQgZm9yIHRoZSBnaXZlbiBydW50aW1lIChpLmUuIHRoaXMgbWV0aG9kIGlzBQEgaGFyZGNvZGVkIHRvIHJldHVybiBgTm9uZWApLiBPbmx5IHVzZWZ1bCBpbiBhbiBvZmZjaGFpbiBjb250ZXh0LrBzdWJtaXRfcmVwb3J0X2Zvcmtfdm90aW5nX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29m4Q88a2V5X293bmVyX3Byb29m3Q+RDyA9ASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYSBmb3JrIHZvdGluZyBlcXVpdm9jYXRpb24uIFRoZSBjYWxsZXJBASBtdXN0IHByb3ZpZGUgdGhlIGZvcmsgdm90aW5nIHByb29mICh0aGUgYW5jZXN0cnkgcHJvb2Ygc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nPQEgYGdlbmVyYXRlX2FuY2VzdHJ5X3Byb29mYCkgYW5kIGEga2V5IG93bmVyc2hpcCBwcm9vZiAoc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nQQEgYGdlbmVyYXRlX2tleV9vd25lcnNoaXBfcHJvb2ZgKS4gVGhlIGV4dHJpbnNpYyB3aWxsIGJlIHVuc2lnbmVkIGFuZCBzaG91bGQgb25seU0BIGJlIGFjY2VwdGVkIGZvciBsb2NhbCBhdXRob3JzaGlwIChub3QgdG8gYmUgYnJvYWRjYXN0IHRvIHRoZSBuZXR3b3JrKS4gVGhpcyBtZXRob2QpASByZXR1cm5zIGBOb25lYCB3aGVuIGNyZWF0aW9uIG9mIHRoZSBleHRyaW5zaWMgZmFpbHMsIGUuZy4gaWYgZXF1aXZvY2F0aW9uBQEgcmVwb3J0aW5nIGlzIGRpc2FibGVkIGZvciB0aGUgZ2l2ZW4gcnVudGltZSAoaS5lLiB0aGlzIG1ldGhvZCBpcwUBIGhhcmRjb2RlZCB0byByZXR1cm4gYE5vbmVgKS4gT25seSB1c2VmdWwgaW4gYW4gb2ZmY2hhaW4gY29udGV4dC7Qc3VibWl0X3JlcG9ydF9mdXR1cmVfYmxvY2tfdm90aW5nX3Vuc2lnbmVkX2V4dHJpbnNpYwhIZXF1aXZvY2F0aW9uX3Byb29mdQc8a2V5X293bmVyX3Byb29m3Q+RDyBdASBTdWJtaXRzIGFuIHVuc2lnbmVkIGV4dHJpbnNpYyB0byByZXBvcnQgYSBmdXR1cmUgYmxvY2sgdm90aW5nIGVxdWl2b2NhdGlvbi4gVGhlIGNhbGxlchUBIG11c3QgcHJvdmlkZSB0aGUgZnV0dXJlIGJsb2NrIHZvdGluZyBwcm9vZiBhbmQgYSBrZXkgb3duZXJzaGlwIHByb29m7CAoc2hvdWxkIGJlIG9idGFpbmVkIHVzaW5nIGBnZW5lcmF0ZV9rZXlfb3duZXJzaGlwX3Byb29mYCkuFQEgVGhlIGV4dHJpbnNpYyB3aWxsIGJlIHVuc2lnbmVkIGFuZCBzaG91bGQgb25seSBiZSBhY2NlcHRlZCBmb3IgbG9jYWwVASBhdXRob3JzaGlwIChub3QgdG8gYmUgYnJvYWRjYXN0IHRvIHRoZSBuZXR3b3JrKS4gVGhpcyBtZXRob2QgcmV0dXJucwkBIGBOb25lYCB3aGVuIGNyZWF0aW9uIG9mIHRoZSBleHRyaW5zaWMgZmFpbHMsIGUuZy4gaWYgZXF1aXZvY2F0aW9uBQEgcmVwb3J0aW5nIGlzIGRpc2FibGVkIGZvciB0aGUgZ2l2ZW4gcnVudGltZSAoaS5lLiB0aGlzIG1ldGhvZCBpcwUBIGhhcmRjb2RlZCB0byByZXR1cm4gYE5vbmVgKS4gT25seSB1c2VmdWwgaW4gYW4gb2ZmY2hhaW4gY29udGV4dC5wZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZggYc2V0X2lkMDBhdXRob3JpdHlfaWQNAuUPLAkBIEdlbmVyYXRlcyBhIHByb29mIG9mIGtleSBvd25lcnNoaXAgZm9yIHRoZSBnaXZlbiBhdXRob3JpdHkgaW4gdGhl/CBnaXZlbiBzZXQuIEFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhpcyBtb2R1bGUgaXMgY291cGxlZCB3aXRoIHRoZQUBIHNlc3Npb24gaGlzdG9yaWNhbCBtb2R1bGUgdG8gcHJvdmUgdGhhdCBhIGdpdmVuIGF1dGhvcml0eSBrZXkgaXMNASB0aWVkIHRvIGEgZ2l2ZW4gc3Rha2luZyBpZGVudGl0eSBkdXJpbmcgYSBzcGVjaWZpYyBzZXNzaW9uLiBQcm9vZnMRASBvZiBrZXkgb3duZXJzaGlwIGFyZSBuZWNlc3NhcnkgZm9yIHN1Ym1pdHRpbmcgZXF1aXZvY2F0aW9uIHJlcG9ydHMuEQEgTk9URTogZXZlbiB0aG91Z2ggdGhlIEFQSSB0YWtlcyBhIGBzZXRfaWRgIGFzIHBhcmFtZXRlciB0aGUgY3VycmVudAkBIGltcGxlbWVudGF0aW9ucyBpZ25vcmVzIHRoaXMgcGFyYW1ldGVyIGFuZCBpbnN0ZWFkIHJlbGllcyBvbiB0aGlzDQEgbWV0aG9kIGJlaW5nIGNhbGxlZCBhdCB0aGUgY29ycmVjdCBibG9jayBoZWlnaHQsIGkuZS4gYW55IHBvaW50IGF0FQEgd2hpY2ggdGhlIGdpdmVuIHNldCBpZCBpcyBsaXZlIG9uLWNoYWluLiBGdXR1cmUgaW1wbGVtZW50YXRpb25zIHdpbGwNASBpbnN0ZWFkIHVzZSBpbmRleGVkIGRhdGEgdGhyb3VnaCBhbiBvZmZjaGFpbiB3b3JrZXIsIG5vdCByZXF1aXJpbmd4IG9sZGVyIHN0YXRlcyB0byBiZSBhdmFpbGFibGUuXGdlbmVyYXRlX2FuY2VzdHJ5X3Byb29mCERwcmV2X2Jsb2NrX251bWJlchBcYmVzdF9rbm93bl9ibG9ja19udW1iZXJFAuUPCEUBIEdlbmVyYXRlcyBhIHByb29mIHRoYXQgdGhlIGBwcmV2X2Jsb2NrX251bWJlcmAgaXMgcGFydCBvZiB0aGUgY2Fub25pY2FsIGNoYWluIGF0bCBgYmVzdF9rbm93bl9ibG9ja19udW1iZXJgLgSAIEFQSSBuZWNlc3NhcnkgZm9yIEJFRUZZIHZvdGVycy4YTW1yQXBpFCBtbXJfcm9vdADpDwSMIFJldHVybiB0aGUgb24tY2hhaW4gTU1SIHJvb3QgaGFzaC44bW1yX2xlYWZfY291bnQA8Q8EuCBSZXR1cm4gdGhlIG51bWJlciBvZiBNTVIgYmxvY2tzIGluIHRoZSBjaGFpbi44Z2VuZXJhdGVfcHJvb2YINGJsb2NrX251bWJlcnPJAVxiZXN0X2tub3duX2Jsb2NrX251bWJlckUC9Q8IaQEgR2VuZXJhdGUgTU1SIHByb29mIGZvciBhIHNlcmllcyBvZiBibG9jayBudW1iZXJzLiBJZiBgYmVzdF9rbm93bl9ibG9ja19udW1iZXIgPSBTb21lKG4pYCxFASB1c2UgaGlzdG9yaWNhbCBNTVIgc3RhdGUgYXQgZ2l2ZW4gYmxvY2sgaGVpZ2h0IGBuYC4gRWxzZSwgdXNlIGN1cnJlbnQgTU1SIHN0YXRlLjB2ZXJpZnlfcHJvb2YIGGxlYXZlc/0PFHByb29mBRAJEBT0IFZlcmlmeSBNTVIgcHJvb2YgYWdhaW5zdCBvbi1jaGFpbiBNTVIgZm9yIGEgYmF0Y2ggb2YgbGVhdmVzLgBxASBOb3RlIHRoaXMgZnVuY3Rpb24gd2lsbCB1c2Ugb24tY2hhaW4gTU1SIHJvb3QgaGFzaCBhbmQgY2hlY2sgaWYgdGhlIHByb29mIG1hdGNoZXMgdGhlIGhhc2gubQEgTm90ZSwgdGhlIGxlYXZlcyBzaG91bGQgYmUgc29ydGVkIHN1Y2ggdGhhdCBjb3JyZXNwb25kaW5nIGxlYXZlcyBhbmQgbGVhZiBpbmRpY2VzIGhhdmUgdGhllQEgc2FtZSBwb3NpdGlvbiBpbiBib3RoIHRoZSBgbGVhdmVzYCB2ZWN0b3IgYW5kIHRoZSBgbGVhZl9pbmRpY2VzYCB2ZWN0b3IgY29udGFpbmVkIGluIHRoZSBbTGVhZlByb29mXVh2ZXJpZnlfcHJvb2Zfc3RhdGVsZXNzDBByb290NBhsZWF2ZXP9DxRwcm9vZgUQCRAcAQEgVmVyaWZ5IE1NUiBwcm9vZiBhZ2FpbnN0IGdpdmVuIHJvb3QgaGFzaCBmb3IgYSBiYXRjaCBvZiBsZWF2ZXMuAPwgTm90ZSB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHJlcXVpcmUgYW55IG9uLWNoYWluIHN0b3JhZ2UgLSB0aGW8IHByb29mIGlzIHZlcmlmaWVkIGFnYWluc3QgZ2l2ZW4gTU1SIHJvb3QgaGFzaC4AbQEgTm90ZSwgdGhlIGxlYXZlcyBzaG91bGQgYmUgc29ydGVkIHN1Y2ggdGhhdCBjb3JyZXNwb25kaW5nIGxlYXZlcyBhbmQgbGVhZiBpbmRpY2VzIGhhdmUgdGhllQEgc2FtZSBwb3NpdGlvbiBpbiBib3RoIHRoZSBgbGVhdmVzYCB2ZWN0b3IgYW5kIHRoZSBgbGVhZl9pbmRpY2VzYCB2ZWN0b3IgY29udGFpbmVkIGluIHRoZSBbTGVhZlByb29mXQSEIEFQSSB0byBpbnRlcmFjdCB3aXRoIE1NUiBwYWxsZXQuLEJlZWZ5TW1yQXBpCExhdXRob3JpdHlfc2V0X3Byb29mAJUOBNwgUmV0dXJuIHRoZSBjdXJyZW50bHkgYWN0aXZlIEJFRUZZIGF1dGhvcml0eSBzZXQgcHJvb2YuYG5leHRfYXV0aG9yaXR5X3NldF9wcm9vZgCVDgTIIFJldHVybiB0aGUgbmV4dC9xdWV1ZWQgQkVFRlkgYXV0aG9yaXR5IHNldCBwcm9vZi4EkCBBUEkgdXNlZnVsIGZvciBCRUVGWSBsaWdodCBjbGllbnRzLihHcmFuZHBhQXBpEExncmFuZHBhX2F1dGhvcml0aWVzALQYPQEgR2V0IHRoZSBjdXJyZW50IEdSQU5EUEEgYXV0aG9yaXRpZXMgYW5kIHdlaWdodHMuIFRoaXMgc2hvdWxkIG5vdCBjaGFuZ2UgZXhjZXB0HQEgZm9yIHdoZW4gY2hhbmdlcyBhcmUgc2NoZWR1bGVkIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkZWxheSBoYXMgcGFzc2VkLgA1ASBXaGVuIGNhbGxlZCBhdCBibG9jayBCLCBpdCB3aWxsIHJldHVybiB0aGUgc2V0IG9mIGF1dGhvcml0aWVzIHRoYXQgc2hvdWxkIGJlPQEgdXNlZCB0byBmaW5hbGl6ZSBkZXNjZW5kYW50cyBvZiB0aGlzIGJsb2NrIChCKzEsIEIrMiwgLi4uKS4gVGhlIGJsb2NrIEIgaXRzZWxmwCBpcyBmaW5hbGl6ZWQgYnkgdGhlIGF1dGhvcml0aWVzIGZyb20gYmxvY2sgQi0xLrRzdWJtaXRfcmVwb3J0X2VxdWl2b2NhdGlvbl91bnNpZ25lZF9leHRyaW5zaWMISGVxdWl2b2NhdGlvbl9wcm9vZhkCPGtleV9vd25lcl9wcm9vZt0PkQ8gEQEgU3VibWl0cyBhbiB1bnNpZ25lZCBleHRyaW5zaWMgdG8gcmVwb3J0IGFuIGVxdWl2b2NhdGlvbi4gVGhlIGNhbGxlcvggbXVzdCBwcm92aWRlIHRoZSBlcXVpdm9jYXRpb24gcHJvb2YgYW5kIGEga2V5IG93bmVyc2hpcCBwcm9vZvwgKHNob3VsZCBiZSBvYnRhaW5lZCB1c2luZyBgZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZmApLiBUaGUFASBleHRyaW5zaWMgd2lsbCBiZSB1bnNpZ25lZCBhbmQgc2hvdWxkIG9ubHkgYmUgYWNjZXB0ZWQgZm9yIGxvY2FsFQEgYXV0aG9yc2hpcCAobm90IHRvIGJlIGJyb2FkY2FzdCB0byB0aGUgbmV0d29yaykuIFRoaXMgbWV0aG9kIHJldHVybnMJASBgTm9uZWAgd2hlbiBjcmVhdGlvbiBvZiB0aGUgZXh0cmluc2ljIGZhaWxzLCBlLmcuIGlmIGVxdWl2b2NhdGlvbgUBIHJlcG9ydGluZyBpcyBkaXNhYmxlZCBmb3IgdGhlIGdpdmVuIHJ1bnRpbWUgKGkuZS4gdGhpcyBtZXRob2QgaXMFASBoYXJkY29kZWQgdG8gcmV0dXJuIGBOb25lYCkuIE9ubHkgdXNlZnVsIGluIGFuIG9mZmNoYWluIGNvbnRleHQucGdlbmVyYXRlX2tleV9vd25lcnNoaXBfcHJvb2YIGHNldF9pZDAwYXV0aG9yaXR5X2lkvOUPLAkBIEdlbmVyYXRlcyBhIHByb29mIG9mIGtleSBvd25lcnNoaXAgZm9yIHRoZSBnaXZlbiBhdXRob3JpdHkgaW4gdGhl/CBnaXZlbiBzZXQuIEFuIGV4YW1wbGUgdXNhZ2Ugb2YgdGhpcyBtb2R1bGUgaXMgY291cGxlZCB3aXRoIHRoZQUBIHNlc3Npb24gaGlzdG9yaWNhbCBtb2R1bGUgdG8gcHJvdmUgdGhhdCBhIGdpdmVuIGF1dGhvcml0eSBrZXkgaXMNASB0aWVkIHRvIGEgZ2l2ZW4gc3Rha2luZyBpZGVudGl0eSBkdXJpbmcgYSBzcGVjaWZpYyBzZXNzaW9uLiBQcm9vZnMRASBvZiBrZXkgb3duZXJzaGlwIGFyZSBuZWNlc3NhcnkgZm9yIHN1Ym1pdHRpbmcgZXF1aXZvY2F0aW9uIHJlcG9ydHMuEQEgTk9URTogZXZlbiB0aG91Z2ggdGhlIEFQSSB0YWtlcyBhIGBzZXRfaWRgIGFzIHBhcmFtZXRlciB0aGUgY3VycmVudPwgaW1wbGVtZW50YXRpb25zIGlnbm9yZSB0aGlzIHBhcmFtZXRlciBhbmQgaW5zdGVhZCByZWx5IG9uIHRoaXMNASBtZXRob2QgYmVpbmcgY2FsbGVkIGF0IHRoZSBjb3JyZWN0IGJsb2NrIGhlaWdodCwgaS5lLiBhbnkgcG9pbnQgYXQVASB3aGljaCB0aGUgZ2l2ZW4gc2V0IGlkIGlzIGxpdmUgb24tY2hhaW4uIEZ1dHVyZSBpbXBsZW1lbnRhdGlvbnMgd2lsbA0BIGluc3RlYWQgdXNlIGluZGV4ZWQgZGF0YSB0aHJvdWdoIGFuIG9mZmNoYWluIHdvcmtlciwgbm90IHJlcXVpcmluZ3ggb2xkZXIgc3RhdGVzIHRvIGJlIGF2YWlsYWJsZS44Y3VycmVudF9zZXRfaWQAMASYIEdldCBjdXJyZW50IEdSQU5EUEEgYXV0aG9yaXR5IHNldCBpZC4kAQEgQVBJcyBmb3IgaW50ZWdyYXRpbmcgdGhlIEdSQU5EUEEgZmluYWxpdHkgZ2FkZ2V0IGludG8gcnVudGltZXMuwCBUaGlzIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBvbiB0aGUgcnVudGltZSBzaWRlLgAVASBUaGlzIGlzIHByaW1hcmlseSB1c2VkIGZvciBuZWdvdGlhdGluZyBhdXRob3JpdHktc2V0IGNoYW5nZXMgZm9yIHRoZQ0BIGdhZGdldC4gR1JBTkRQQSB1c2VzIGEgc2lnbmFsaW5nIG1vZGVsIG9mIGNoYW5naW5nIGF1dGhvcml0eSBzZXRzOjEBIGNoYW5nZXMgc2hvdWxkIGJlIHNpZ25hbGVkIHdpdGggYSBkZWxheSBvZiBOIGJsb2NrcywgYW5kIHRoZW4gYXV0b21hdGljYWxseeQgYXBwbGllZCBpbiB0aGUgcnVudGltZSBhZnRlciB0aG9zZSBOIGJsb2NrcyBoYXZlIHBhc3NlZC4A/CBUaGUgY29uc2Vuc3VzIHByb3RvY29sIHdpbGwgY29vcmRpbmF0ZSB0aGUgaGFuZG9mZiBleHRlcm5hbGx5LhxCYWJlQXBpGDRjb25maWd1cmF0aW9uAA0QBIwgUmV0dXJuIHRoZSBjb25maWd1cmF0aW9uIGZvciBCQUJFLkxjdXJyZW50X2Vwb2NoX3N0YXJ0AIkBBMQgUmV0dXJucyB0aGUgc2xvdCB0aGF0IHN0YXJ0ZWQgdGhlIGN1cnJlbnQgZXBvY2guNGN1cnJlbnRfZXBvY2gAERAExCBSZXR1cm5zIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgY3VycmVudCBlcG9jaC4obmV4dF9lcG9jaAAREAgBASBSZXR1cm5zIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgbmV4dCBlcG9jaCAod2hpY2ggd2FzIGFscmVhZHlcIHByZXZpb3VzbHkgYW5ub3VuY2VkKS5wZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZggQc2xvdIkBMGF1dGhvcml0eV9pZIUBFRAsCQEgR2VuZXJhdGVzIGEgcHJvb2Ygb2Yga2V5IG93bmVyc2hpcCBmb3IgdGhlIGdpdmVuIGF1dGhvcml0eSBpbiB0aGUNASBjdXJyZW50IGVwb2NoLiBBbiBleGFtcGxlIHVzYWdlIG9mIHRoaXMgbW9kdWxlIGlzIGNvdXBsZWQgd2l0aCB0aGUFASBzZXNzaW9uIGhpc3RvcmljYWwgbW9kdWxlIHRvIHByb3ZlIHRoYXQgYSBnaXZlbiBhdXRob3JpdHkga2V5IGlzDQEgdGllZCB0byBhIGdpdmVuIHN0YWtpbmcgaWRlbnRpdHkgZHVyaW5nIGEgc3BlY2lmaWMgc2Vzc2lvbi4gUHJvb2ZzEQEgb2Yga2V5IG93bmVyc2hpcCBhcmUgbmVjZXNzYXJ5IGZvciBzdWJtaXR0aW5nIGVxdWl2b2NhdGlvbiByZXBvcnRzLgkBIE5PVEU6IGV2ZW4gdGhvdWdoIHRoZSBBUEkgdGFrZXMgYSBgc2xvdGAgYXMgcGFyYW1ldGVyIHRoZSBjdXJyZW50CQEgaW1wbGVtZW50YXRpb25zIGlnbm9yZXMgdGhpcyBwYXJhbWV0ZXIgYW5kIGluc3RlYWQgcmVsaWVzIG9uIHRoaXMNASBtZXRob2QgYmVpbmcgY2FsbGVkIGF0IHRoZSBjb3JyZWN0IGJsb2NrIGhlaWdodCwgaS5lLiBhbnkgcG9pbnQgYXTwIHdoaWNoIHRoZSBlcG9jaCBmb3IgdGhlIGdpdmVuIHNsb3QgaXMgbGl2ZSBvbi1jaGFpbi4gRnV0dXJlCQEgaW1wbGVtZW50YXRpb25zIHdpbGwgaW5zdGVhZCB1c2UgaW5kZXhlZCBkYXRhIHRocm91Z2ggYW4gb2ZmY2hhaW7QIHdvcmtlciwgbm90IHJlcXVpcmluZyBvbGRlciBzdGF0ZXMgdG8gYmUgYXZhaWxhYmxlLrRzdWJtaXRfcmVwb3J0X2VxdWl2b2NhdGlvbl91bnNpZ25lZF9leHRyaW5zaWMISGVxdWl2b2NhdGlvbl9wcm9vZn0BPGtleV9vd25lcl9wcm9vZhkQkQ8gEQEgU3VibWl0cyBhbiB1bnNpZ25lZCBleHRyaW5zaWMgdG8gcmVwb3J0IGFuIGVxdWl2b2NhdGlvbi4gVGhlIGNhbGxlcvggbXVzdCBwcm92aWRlIHRoZSBlcXVpdm9jYXRpb24gcHJvb2YgYW5kIGEga2V5IG93bmVyc2hpcCBwcm9vZvwgKHNob3VsZCBiZSBvYnRhaW5lZCB1c2luZyBgZ2VuZXJhdGVfa2V5X293bmVyc2hpcF9wcm9vZmApLiBUaGUFASBleHRyaW5zaWMgd2lsbCBiZSB1bnNpZ25lZCBhbmQgc2hvdWxkIG9ubHkgYmUgYWNjZXB0ZWQgZm9yIGxvY2FsFQEgYXV0aG9yc2hpcCAobm90IHRvIGJlIGJyb2FkY2FzdCB0byB0aGUgbmV0d29yaykuIFRoaXMgbWV0aG9kIHJldHVybnMJASBgTm9uZWAgd2hlbiBjcmVhdGlvbiBvZiB0aGUgZXh0cmluc2ljIGZhaWxzLCBlLmcuIGlmIGVxdWl2b2NhdGlvbgUBIHJlcG9ydGluZyBpcyBkaXNhYmxlZCBmb3IgdGhlIGdpdmVuIHJ1bnRpbWUgKGkuZS4gdGhpcyBtZXRob2QgaXMFASBoYXJkY29kZWQgdG8gcmV0dXJuIGBOb25lYCkuIE9ubHkgdXNlZnVsIGluIGFuIG9mZmNoYWluIGNvbnRleHQuBLggQVBJIG5lY2Vzc2FyeSBmb3IgYmxvY2sgYXV0aG9yc2hpcCB3aXRoIEJBQkUuVEF1dGhvcml0eURpc2NvdmVyeUFwaQQsYXV0aG9yaXRpZXMA6QkEGQEgUmV0cmlldmUgYXV0aG9yaXR5IGlkZW50aWZpZXJzIG9mIHRoZSBjdXJyZW50IGFuZCBuZXh0IGF1dGhvcml0eSBzZXQuEHQgVGhlIGF1dGhvcml0eSBkaXNjb3ZlcnkgYXBpLgBRASBUaGlzIGFwaSBpcyB1c2VkIGJ5IHRoZSBgY2xpZW50L2F1dGhvcml0eS1kaXNjb3ZlcnlgIG1vZHVsZSB0byByZXRyaWV2ZSBpZGVudGlmaWVyc5wgb2YgdGhlIGN1cnJlbnQgYW5kIG5leHQgYXV0aG9yaXR5IHNldC4sU2Vzc2lvbktleXMIVGdlbmVyYXRlX3Nlc3Npb25fa2V5cwQQc2VlZEEOOBwVASBHZW5lcmF0ZSBhIHNldCBvZiBzZXNzaW9uIGtleXMgd2l0aCBvcHRpb25hbGx5IHVzaW5nIHRoZSBnaXZlbiBzZWVkLgkBIFRoZSBrZXlzIHNob3VsZCBiZSBzdG9yZWQgd2l0aGluIHRoZSBrZXlzdG9yZSBleHBvc2VkIHZpYSBydW50aW1lPCBleHRlcm5hbGl0aWVzLgCwIFRoZSBzZWVkIG5lZWRzIHRvIGJlIGEgdmFsaWQgYHV0ZjhgIHN0cmluZy4A0CBSZXR1cm5zIHRoZSBjb25jYXRlbmF0ZWQgU0NBTEUgZW5jb2RlZCBwdWJsaWMga2V5cy5MZGVjb2RlX3Nlc3Npb25fa2V5cwQcZW5jb2RlZDgdEAyYIERlY29kZSB0aGUgZ2l2ZW4gcHVibGljIHNlc3Npb24ga2V5cy4A3CBSZXR1cm5zIHRoZSBsaXN0IG9mIHB1YmxpYyByYXcgcHVibGljIGtleXMgKyBrZXkgdHlwZS4EaCBTZXNzaW9uIGtleXMgcnVudGltZSBhcGkuPEFjY291bnROb25jZUFwaQQ0YWNjb3VudF9ub25jZQQcYWNjb3VudAAQBMAgR2V0IGN1cnJlbnQgYWNjb3VudCBub25jZSBvZiBnaXZlbiBgQWNjb3VudElkYC4EgCBUaGUgQVBJIHRvIHF1ZXJ5IGFjY291bnQgbm9uY2UuVFRyYW5zYWN0aW9uUGF5bWVudEFwaRAocXVlcnlfaW5mbwgMdXh02Q4MbGVuECkQAERxdWVyeV9mZWVfZGV0YWlscwgMdXh02Q4MbGVuEC0QAExxdWVyeV93ZWlnaHRfdG9fZmVlBBh3ZWlnaHQoGABMcXVlcnlfbGVuZ3RoX3RvX2ZlZQQYbGVuZ3RoEBgAAGRUcmFuc2FjdGlvblBheW1lbnRDYWxsQXBpEDxxdWVyeV9jYWxsX2luZm8IEGNhbGxlAQxsZW4QKRAESQEgUXVlcnkgaW5mb3JtYXRpb24gb2YgYSBkaXNwYXRjaCBjbGFzcywgd2VpZ2h0LCBhbmQgZmVlIG9mIGEgZ2l2ZW4gZW5jb2RlZCBgQ2FsbGAuWHF1ZXJ5X2NhbGxfZmVlX2RldGFpbHMIEGNhbGxlAQxsZW4QLRAEtCBRdWVyeSBmZWUgZGV0YWlscyBvZiBhIGdpdmVuIGVuY29kZWQgYENhbGxgLkxxdWVyeV93ZWlnaHRfdG9fZmVlBBh3ZWlnaHQoGAQBASBRdWVyeSB0aGUgb3V0cHV0IG9mIHRoZSBjdXJyZW50IGBXZWlnaHRUb0ZlZWAgZ2l2ZW4gc29tZSBpbnB1dC5McXVlcnlfbGVuZ3RoX3RvX2ZlZQQYbGVuZ3RoEBgEAQEgUXVlcnkgdGhlIG91dHB1dCBvZiB0aGUgY3VycmVudCBgTGVuZ3RoVG9GZWVgIGdpdmVuIHNvbWUgaW5wdXQuADRYY21QYXltZW50QXBpEHxxdWVyeV9hY2NlcHRhYmxlX3BheW1lbnRfYXNzZXRzBCx4Y21fdmVyc2lvbhA5EBS0IFJldHVybnMgYSBsaXN0IG9mIGFjY2VwdGFibGUgcGF5bWVudCBhc3NldHMuADAgIyBBcmd1bWVudHMAaCAqIGB4Y21fdmVyc2lvbmA6IFZlcnNpb24uQHF1ZXJ5X3hjbV93ZWlnaHQEHG1lc3NhZ2X1BUUQFKggUmV0dXJucyBhIHdlaWdodCBuZWVkZWQgdG8gZXhlY3V0ZSBhIFhDTS4AMCAjIEFyZ3VtZW50cwB0ICogYG1lc3NhZ2VgOiBgVmVyc2lvbmVkWGNtYC5kcXVlcnlfd2VpZ2h0X3RvX2Fzc2V0X2ZlZQgYd2VpZ2h0KBRhc3NldCkHSRAY6CBDb252ZXJ0cyBhIHdlaWdodCBpbnRvIGEgZmVlIGZvciB0aGUgc3BlY2lmaWVkIGBBc3NldElkYC4AMCAjIEFyZ3VtZW50cwCIICogYHdlaWdodGA6IGNvbnZlcnRpYmxlIGBXZWlnaHRgLnwgKiBgYXNzZXRgOiBgVmVyc2lvbmVkQXNzZXRJZGAuTHF1ZXJ5X2RlbGl2ZXJ5X2ZlZXMILGRlc3RpbmF0aW9uLQEcbWVzc2FnZfUFTRAgHQEgR2V0IGRlbGl2ZXJ5IGZlZXMgZm9yIHNlbmRpbmcgYSBzcGVjaWZpYyBgbWVzc2FnZWAgdG8gYSBgZGVzdGluYXRpb25gLvQgVGhlc2UgYWx3YXlzIGNvbWUgaW4gYSBzcGVjaWZpYyBhc3NldCwgZGVmaW5lZCBieSB0aGUgY2hhaW4uADAgIyBBcmd1bWVudHOBASAqIGBtZXNzYWdlYDogVGhlIG1lc3NhZ2UgdGhhdCdsbCBiZSBzZW50LCBuZWNlc3NhcnkgYmVjYXVzZSBtb3N0IGRlbGl2ZXJ5IGZlZXMgYXJlIGJhc2VkIG9uIHRoZVwgICBzaXplIG9mIHRoZSBtZXNzYWdlLmEBICogYGRlc3RpbmF0aW9uYDogVGhlIGRlc3RpbmF0aW9uIHRvIHNlbmQgdGhlIG1lc3NhZ2UgdG8uIERpZmZlcmVudCBkZXN0aW5hdGlvbnMgbWF5IHVzZcAgICBkaWZmZXJlbnQgc2VuZGVycyB0aGF0IGNoYXJnZSBkaWZmZXJlbnQgZmVlcy4scCBBIHRyYWl0IG9mIFhDTSBwYXltZW50IEFQSS4AqCBBUEkgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSBmb3Igb2J0YWluaW5nOgDEICogdGhlIHdlaWdodCByZXF1aXJlZCB0byBleGVjdXRlIGFuIFhDTSBtZXNzYWdlLAUBICogYSBsaXN0IG9mIGFjY2VwdGFibGUgYEFzc2V0SWRgcyBmb3IgbWVzc2FnZSBleGVjdXRpb24gcGF5bWVudCwBASAqIHRoZSBjb3N0IG9mIHRoZSB3ZWlnaHQgaW4gdGhlIHNwZWNpZmllZCBhY2NlcHRhYmxlIGBBc3NldElkYC6gICogdGhlIGZlZXMgZm9yIGFuIFhDTSBtZXNzYWdlIGRlbGl2ZXJ5LgDwIFRvIGRldGVybWluZSB0aGUgZXhlY3V0aW9uIHdlaWdodCBvZiB0aGUgY2FsbHMgcmVxdWlyZWQgZm9ydQEgW2B4Y206OmxhdGVzdDo6SW5zdHJ1Y3Rpb246OlRyYW5zYWN0YF0gaW5zdHJ1Y3Rpb24sIGBUcmFuc2FjdGlvblBheW1lbnRDYWxsQXBpYCBjYW4gYmUgdXNlZC4kRHJ5UnVuQXBpCDBkcnlfcnVuX2NhbGwIGG9yaWdpblkCEGNhbGxlAVEQBDggRHJ5IHJ1biBjYWxsLixkcnlfcnVuX3hjbQg8b3JpZ2luX2xvY2F0aW9uLQEMeGNt+QZxEARQIERyeSBydW4gWENNIHByb2dyYW0ksQEgQVBJIGZvciBkcnktcnVubmluZyBleHRyaW5zaWNzIGFuZCBYQ00gcHJvZ3JhbXMgdG8gZ2V0IHRoZSBwcm9ncmFtcyB0aGF0IG5lZWQgdG8gYmUgcGFzc2VkIHRvIHRoZSBmZWVzIEFQSS4AgQEgQWxsIGNhbGxzIHJldHVybiBhIHZlY3RvciBvZiB0dXBsZXMgKGxvY2F0aW9uLCB4Y20pIHdoZXJlIGVhY2ggInhjbSIgaXMgZXhlY3V0ZWQgaW4gImxvY2F0aW9uIi7kIElmIHRoZXJlJ3MgbG9jYWwgZXhlY3V0aW9uLCB0aGUgbG9jYXRpb24gd2lsbCBiZSAiSGVyZSIuHQEgVGhpcyB2ZWN0b3IgY2FuIGJlIHVzZWQgdG8gY2FsY3VsYXRlIGJvdGggZXhlY3V0aW9uIGFuZCBkZWxpdmVyeSBmZWVzLgCZASBDYWxscyBvciBYQ01zIG1pZ2h0IGZhaWwgd2hlbiBleGVjdXRlZCwgdGhpcyBkb2Vzbid0IG1lYW4gdGhlIHJlc3VsdCBvZiB0aGVzZSBjYWxscyB3aWxsIGJlIGFuIGBFcnJgLmUBIEluIHRob3NlIGNhc2VzLCB0aGVyZSBtaWdodCBzdGlsbCBiZSBhIHZhbGlkIHJlc3VsdCwgd2l0aCB0aGUgZXhlY3V0aW9uIGVycm9yIGluc2lkZSBpdC5lASBUaGUgb25seSByZWFzb25zIHdoeSB0aGVzZSBjYWxscyBtaWdodCByZXR1cm4gYW4gZXJyb3IgYXJlIGxpc3RlZCBpbiB0aGUgW2BFcnJvcmBdIGVudW0uUExvY2F0aW9uVG9BY2NvdW50QXBpBEBjb252ZXJ0X2xvY2F0aW9uBCBsb2NhdGlvbi0BeRAEkCBDb252ZXJ0cyBgTG9jYXRpb25gIHRvIGBBY2NvdW50SWRgLgQNASBBUEkgZm9yIHVzZWZ1bCBjb252ZXJzaW9ucyBiZXR3ZWVuIFhDTSBgTG9jYXRpb25gIGFuZCBgQWNjb3VudElkYC5ITm9taW5hdGlvblBvb2xzQXBpJDxwZW5kaW5nX3Jld2FyZHMEDHdobwAYBDUBIFJldHVybnMgdGhlIHBlbmRpbmcgcmV3YXJkcyBmb3IgdGhlIG1lbWJlciB0aGF0IHRoZSBBY2NvdW50SWQgd2FzIGdpdmVuIGZvci5EcG9pbnRzX3RvX2JhbGFuY2UIHHBvb2xfaWQQGHBvaW50cxgYBPQgUmV0dXJucyB0aGUgZXF1aXZhbGVudCBiYWxhbmNlIG9mIGBwb2ludHNgIGZvciBhIGdpdmVuIHBvb2wuRGJhbGFuY2VfdG9fcG9pbnRzCBxwb29sX2lkECRuZXdfZnVuZHMYGAT8IFJldHVybnMgdGhlIGVxdWl2YWxlbnQgcG9pbnRzIG9mIGBuZXdfZnVuZHNgIGZvciBhIGdpdmVuIHBvb2wuSHBvb2xfcGVuZGluZ19zbGFzaAQccG9vbF9pZBAYBLAgUmV0dXJucyB0aGUgcGVuZGluZyBzbGFzaCBmb3IgYSBnaXZlbiBwb29sLlBtZW1iZXJfcGVuZGluZ19zbGFzaAQYbWVtYmVyABgQzCBSZXR1cm5zIHRoZSBwZW5kaW5nIHNsYXNoIGZvciBhIGdpdmVuIHBvb2wgbWVtYmVyLgBNASBJZiBwZW5kaW5nIHNsYXNoIG9mIHRoZSBtZW1iZXIgZXhjZWVkcyBgRXhpc3RlbnRpYWxEZXBvc2l0YCwgaXQgY2FuIGJlIHJlcG9ydGVkIG9uHCBjaGFpbi50cG9vbF9uZWVkc19kZWxlZ2F0ZV9taWdyYXRpb24EHHBvb2xfaWQQICDkIFJldHVybnMgdHJ1ZSBpZiB0aGUgcG9vbCB3aXRoIGBwb29sX2lkYCBuZWVkcyBtaWdyYXRpb24uAEkBIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHRoZSBgcGFsbGV0LW5vbWluYXRpb24tcG9vbHNgIGhhcyBzd2l0Y2hlZCB0byB1c2luZyBzdHJhdGVneUEBIFtgRGVsZWdhdGVTdGFrZWBdKHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzOjphZGFwdGVyOjpEZWxlZ2F0ZVN0YWtlKSBidXQgdGhlIHBvb2zoIHN0aWxsIGhhcyBmdW5kcyB0aGF0IHdlcmUgc3Rha2VkIHVzaW5nIHRoZSBvbGRlciBzdHJhdGVneRkBIFtUcmFuc2ZlclN0YWtlXShwYWxsZXRfbm9taW5hdGlvbl9wb29sczo6YWRhcHRlcjo6VHJhbnNmZXJTdGFrZSkuIFVzZYkBIFtgbWlncmF0ZV9wb29sX3RvX2RlbGVnYXRlX3N0YWtlYF0ocGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkNhbGw6Om1pZ3JhdGVfcG9vbF90b19kZWxlZ2F0ZV9zdGFrZSlUIHRvIG1pZ3JhdGUgdGhlIHBvb2wufG1lbWJlcl9uZWVkc19kZWxlZ2F0ZV9taWdyYXRpb24EGG1lbWJlcgAgHCkBIFJldHVybnMgdHJ1ZSBpZiB0aGUgZGVsZWdhdGVkIGZ1bmRzIG9mIHRoZSBwb29sIGBtZW1iZXJgIG5lZWRzIG1pZ3JhdGlvbi4A2CBPbmNlIGEgcG9vbCBoYXMgc3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkIHRvIHRoZSBzdHJhdGVneVUBIFtgRGVsZWdhdGVTdGFrZWBdKHBhbGxldF9ub21pbmF0aW9uX3Bvb2xzOjphZGFwdGVyOjpEZWxlZ2F0ZVN0YWtlKSwgdGhlIGZ1bmRzIG9mIHRoZRkBIG1lbWJlciBjYW4gYmUgbWlncmF0ZWQgZnJvbSBwb29sIGFjY291bnQgdG8gdGhlIG1lbWJlcidzIGFjY291bnQuIFVzZSkBIFtgbWlncmF0ZV9kZWxlZ2F0aW9uYF0ocGFsbGV0X25vbWluYXRpb25fcG9vbHM6OkNhbGw6Om1pZ3JhdGVfZGVsZWdhdGlvbimkIHRvIG1pZ3JhdGUgdGhlIGZ1bmRzIG9mIHRoZSBwb29sIG1lbWJlci5QbWVtYmVyX3RvdGFsX2JhbGFuY2UEDHdobwAYBGUBIFJldHVybnMgdGhlIHRvdGFsIGNvbnRyaWJ1dGlvbiBvZiBhIHBvb2wgbWVtYmVyIGluY2x1ZGluZyBhbnkgYmFsYW5jZSB0aGF0IGlzIHVuYm9uZGluZy4wcG9vbF9iYWxhbmNlBBxwb29sX2lkEBgEnCBUb3RhbCBiYWxhbmNlIGNvbnRyaWJ1dGVkIHRvIHRoZSBwb29sLgT4IFJ1bnRpbWUgYXBpIGZvciBhY2Nlc3NpbmcgaW5mb3JtYXRpb24gYWJvdXQgbm9taW5hdGlvbiBwb29scy4oU3Rha2luZ0FwaQxEbm9taW5hdGlvbnNfcXVvdGEEHGJhbGFuY2UYEAQRASBSZXR1cm5zIHRoZSBub21pbmF0aW9ucyBxdW90YSBmb3IgYSBub21pbmF0b3Igd2l0aCBhIGdpdmVuIGJhbGFuY2UuXGVyYXNfc3Rha2Vyc19wYWdlX2NvdW50CAxlcmEQHGFjY291bnQAEAQ5ASBSZXR1cm5zIHRoZSBwYWdlIGNvdW50IG9mIGV4cG9zdXJlcyBmb3IgYSB2YWxpZGF0b3IgYGFjY291bnRgIGluIGEgZ2l2ZW4gZXJhLjxwZW5kaW5nX3Jld2FyZHMIDGVyYRAcYWNjb3VudAAgBD0BIFJldHVybnMgdHJ1ZSBpZiB2YWxpZGF0b3IgYGFjY291bnRgIGhhcyBwYWdlcyB0byBiZSBjbGFpbWVkIGZvciB0aGUgZ2l2ZW4gZXJhLgA4R2VuZXNpc0J1aWxkZXIMLGJ1aWxkX3N0YXRlBBBqc29uOIEQJGUBIEJ1aWxkIGBSdW50aW1lR2VuZXNpc0NvbmZpZ2AgZnJvbSBhIEpTT04gYmxvYiBub3QgdXNpbmcgYW55IGRlZmF1bHRzIGFuZCBzdG9yZSBpdCBpbiB0aGUkIHN0b3JhZ2UuAPkBIEluIHRoZSBjYXNlIG9mIGEgRlJBTUUtYmFzZWQgcnVudGltZSwgdGhpcyBmdW5jdGlvbiBkZXNlcmlhbGl6ZXMgdGhlIGZ1bGwgYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBmcm9tIHRoZSBnaXZlbiBKU09OIGJsb2IgYW5kWQEgcHV0cyBpdCBpbnRvIHRoZSBzdG9yYWdlLiBJZiB0aGUgcHJvdmlkZWQgSlNPTiBibG9iIGlzIGluY29ycmVjdCBvciBpbmNvbXBsZXRlIG9yIHRoZbQgZGVzZXJpYWxpemF0aW9uIGZhaWxzLCBhbiBlcnJvciBpcyByZXR1cm5lZC4AXQEgUGxlYXNlIG5vdGUgdGhhdCBwcm92aWRlZCBKU09OIGJsb2IgbXVzdCBjb250YWluIGFsbCBgUnVudGltZUdlbmVzaXNDb25maWdgIGZpZWxkcywgbm9cIGRlZmF1bHRzIHdpbGwgYmUgdXNlZC4oZ2V0X3ByZXNldAQIaWSFEEEOOGEBIFJldHVybnMgYSBKU09OIGJsb2IgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJ1aWx0LWluIGBSdW50aW1lR2VuZXNpc0NvbmZpZ2AgaWRlbnRpZmllZCBieRggYGlkYC4APQEgSWYgYGlkYCBpcyBgTm9uZWAgdGhlIGZ1bmN0aW9uIHJldHVybnMgSlNPTiBibG9iIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkZWZhdWx0SQEgYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBzdHJ1Y3Qgb2YgdGhlIHJ1bnRpbWUuIEltcGxlbWVudGF0aW9uIG11c3QgcHJvdmlkZSBkZWZhdWx0YCBgUnVudGltZUdlbmVzaXNDb25maWdgLgAhASBPdGhlcndpc2UgZnVuY3Rpb24gcmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGJ1aWx0LWluLCBuYW1lZFEBIGBSdW50aW1lR2VuZXNpc0NvbmZpZ2AgcHJlc2V0IGlkZW50aWZpZWQgYnkgYGlkYCwgb3IgYE5vbmVgIGlmIHN1Y2ggcHJlc2V0IGRvZXMgbm90YQEgZXhpc3QuIFJldHVybmVkIGBWZWM8dTg+YCBjb250YWlucyBieXRlcyBvZiBKU09OIGJsb2IgKHBhdGNoKSB3aGljaCBjb21wcmlzZXMgYSBsaXN0IG9mTQEgKHBvdGVudGlhbGx5IG5lc3RlZCkga2V5LXZhbHVlIHBhaXJzIHRoYXQgYXJlIGludGVuZGVkIGZvciBjdXN0b21pemluZyB0aGUgZGVmYXVsdGUBIHJ1bnRpbWUgZ2VuZXNpcyBjb25maWcuIFRoZSBwYXRjaCBzaGFsbCBiZSBtZXJnZWQgKHJmYzczODYpIHdpdGggdGhlIEpTT04gcmVwcmVzZW50YXRpb25hASBvZiB0aGUgZGVmYXVsdCBgUnVudGltZUdlbmVzaXNDb25maWdgIHRvIGNyZWF0ZSBhIGNvbXByZWhlbnNpdmUgZ2VuZXNpcyBjb25maWcgdGhhdCBjYW6EIGJlIHVzZWQgaW4gYGJ1aWxkX3N0YXRlYCBtZXRob2QuMHByZXNldF9uYW1lcwCJEBBRASBSZXR1cm5zIGEgbGlzdCBvZiBpZGVudGlmaWVycyBmb3IgYXZhaWxhYmxlIGJ1aWx0aW4gYFJ1bnRpbWVHZW5lc2lzQ29uZmlnYCBwcmVzZXRzLgBhASBUaGUgcHJlc2V0cyBmcm9tIHRoZSBsaXN0IGNhbiBiZSBxdWVyaWVkIHdpdGggW2BHZW5lc2lzQnVpbGRlcjo6Z2V0X3ByZXNldGBdIG1ldGhvZC4gSWYBASBubyBuYW1lZCBwcmVzZXRzIGFyZSBwcm92aWRlZCBieSB0aGUgcnVudGltZSB0aGUgbGlzdCBpcyBlbXB0eS4E6CBBUEkgdG8gaW50ZXJhY3Qgd2l0aCBSdW50aW1lR2VuZXNpc0NvbmZpZyBmb3IgdGhlIHJ1bnRpbWVlAVSNEAA=";
    ksm_metadata_default = binMeta2;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  AssetRateEvent: () => AssetRateEvent,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesBountyStatus: () => BountiesBountyStatus,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  CandidateEvent: () => CandidateEvent,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  CoreState: () => CoreState,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IndicesEvent: () => IndicesEvent,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionEvent: () => ParachainsInclusionEvent,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeOriginCaller: () => PolkadotRuntimeOriginCaller,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: () => PolkadotRuntimeParachainsSchedulerPalletCoreOccupied,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  RecoveryEvent: () => RecoveryEvent,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingEvent: () => StakingEvent,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityError: () => TransactionValidityError,
  TransactionValidityInvalidTransaction: () => TransactionValidityInvalidTransaction,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VersionedLocatableAsset: () => VersionedLocatableAsset,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  XcmPalletOrigin: () => XcmPalletOrigin,
  XcmPalletQueryStatus: () => XcmPalletQueryStatus,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2BodyId: () => XcmV2BodyId,
  XcmV2Instruction: () => XcmV2Instruction,
  XcmV2Junction: () => XcmV2Junction,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiAssetFilter: () => XcmV2MultiAssetFilter,
  XcmV2MultiassetAssetId: () => XcmV2MultiassetAssetId,
  XcmV2MultiassetAssetInstance: () => XcmV2MultiassetAssetInstance,
  XcmV2MultiassetFungibility: () => XcmV2MultiassetFungibility,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2MultiassetWildMultiAsset: () => XcmV2MultiassetWildMultiAsset,
  XcmV2MultilocationJunctions: () => XcmV2MultilocationJunctions,
  XcmV2NetworkId: () => XcmV2NetworkId,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV2Response: () => XcmV2Response,
  XcmV2TraitsError: () => XcmV2TraitsError,
  XcmV2WeightLimit: () => XcmV2WeightLimit,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV4TraitsOutcome: () => XcmV4TraitsOutcome,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedResponse: () => XcmVersionedResponse,
  XcmVersionedXcm: () => XcmVersionedXcm,
  dot: () => dot_default,
  ksm: () => ksm_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/dot.ts
var import_polkadot_api2 = require("polkadot-api");

// .papi/descriptors/src/common-types.ts
var import_polkadot_api = require("polkadot-api");
var DigestItem = import_polkadot_api._Enum;
var Phase = import_polkadot_api._Enum;
var DispatchClass = import_polkadot_api._Enum;
var BagsListListListError = import_polkadot_api._Enum;
var TokenError = import_polkadot_api._Enum;
var ArithmeticError = import_polkadot_api._Enum;
var TransactionalError = import_polkadot_api._Enum;
var PreimageEvent = import_polkadot_api._Enum;
var IndicesEvent = import_polkadot_api._Enum;
var BalanceStatus = import_polkadot_api._Enum;
var TransactionPaymentEvent = import_polkadot_api._Enum;
var StakingEvent = import_polkadot_api._Enum;
var StakingRewardDestination = import_polkadot_api._Enum;
var StakingForcing = import_polkadot_api._Enum;
var OffencesEvent = import_polkadot_api._Enum;
var SessionEvent = import_polkadot_api._Enum;
var GrandpaEvent = import_polkadot_api._Enum;
var VersionedLocatableAsset = import_polkadot_api._Enum;
var XcmV3Junctions = import_polkadot_api._Enum;
var XcmV3Junction = import_polkadot_api._Enum;
var XcmV3JunctionNetworkId = import_polkadot_api._Enum;
var XcmV3JunctionBodyId = import_polkadot_api._Enum;
var XcmV2JunctionBodyPart = import_polkadot_api._Enum;
var XcmV3MultiassetAssetId = import_polkadot_api._Enum;
var XcmVersionedLocation = import_polkadot_api._Enum;
var XcmV2MultilocationJunctions = import_polkadot_api._Enum;
var XcmV2Junction = import_polkadot_api._Enum;
var XcmV2NetworkId = import_polkadot_api._Enum;
var XcmV2BodyId = import_polkadot_api._Enum;
var ConvictionVotingVoteAccountVote = import_polkadot_api._Enum;
var PreimagesBounded = import_polkadot_api._Enum;
var CommonClaimsEvent = import_polkadot_api._Enum;
var VestingEvent = import_polkadot_api._Enum;
var BountiesEvent = import_polkadot_api._Enum;
var ChildBountiesEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseEvent = import_polkadot_api._Enum;
var ElectionProviderMultiPhaseElectionCompute = import_polkadot_api._Enum;
var ElectionProviderMultiPhasePhase = import_polkadot_api._Enum;
var BagsListEvent = import_polkadot_api._Enum;
var NominationPoolsPoolState = import_polkadot_api._Enum;
var NominationPoolsCommissionClaimPermission = import_polkadot_api._Enum;
var ParachainsInclusionEvent = import_polkadot_api._Enum;
var ParachainsParasEvent = import_polkadot_api._Enum;
var ParachainsHrmpEvent = import_polkadot_api._Enum;
var ParachainsDisputesEvent = import_polkadot_api._Enum;
var ParachainsDisputeLocation = import_polkadot_api._Enum;
var ParachainsDisputeResult = import_polkadot_api._Enum;
var CommonParasRegistrarEvent = import_polkadot_api._Enum;
var CommonSlotsEvent = import_polkadot_api._Enum;
var CommonAuctionsEvent = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsCoretimeEvent = import_polkadot_api._Enum;
var XcmV4TraitsOutcome = import_polkadot_api._Enum;
var XcmV3TraitsError = import_polkadot_api._Enum;
var XcmV4Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetFungibility = import_polkadot_api._Enum;
var XcmV3MultiassetAssetInstance = import_polkadot_api._Enum;
var XcmV4Response = import_polkadot_api._Enum;
var XcmV3MaybeErrorCode = import_polkadot_api._Enum;
var XcmV2OriginKind = import_polkadot_api._Enum;
var XcmV4AssetAssetFilter = import_polkadot_api._Enum;
var XcmV4AssetWildAsset = import_polkadot_api._Enum;
var XcmV2MultiassetWildFungibility = import_polkadot_api._Enum;
var XcmV3WeightLimit = import_polkadot_api._Enum;
var XcmVersionedAssets = import_polkadot_api._Enum;
var XcmV2MultiassetAssetId = import_polkadot_api._Enum;
var XcmV2MultiassetFungibility = import_polkadot_api._Enum;
var XcmV2MultiassetAssetInstance = import_polkadot_api._Enum;
var ParachainsInclusionAggregateMessageOrigin = import_polkadot_api._Enum;
var ParachainsInclusionUmpQueueId = import_polkadot_api._Enum;
var AssetRateEvent = import_polkadot_api._Enum;
var PolkadotRuntimeOriginCaller = import_polkadot_api._Enum;
var DispatchRawOrigin = import_polkadot_api._Enum;
var GovernanceOrigin = import_polkadot_api._Enum;
var ParachainsOrigin = import_polkadot_api._Enum;
var XcmPalletOrigin = import_polkadot_api._Enum;
var PreimageOldRequestStatus = import_polkadot_api._Enum;
var PreimageRequestStatus = import_polkadot_api._Enum;
var BabeDigestsNextConfigDescriptor = import_polkadot_api._Enum;
var BabeAllowedSlots = import_polkadot_api._Enum;
var BabeDigestsPreDigest = import_polkadot_api._Enum;
var BalancesTypesReasons = import_polkadot_api._Enum;
var PreimagePalletHoldReason = import_polkadot_api._Enum;
var WestendRuntimeRuntimeFreezeReason = import_polkadot_api._Enum;
var NominationPoolsPalletFreezeReason = import_polkadot_api._Enum;
var TransactionPaymentReleases = import_polkadot_api._Enum;
var GrandpaStoredState = import_polkadot_api._Enum;
var TreasuryPaymentState = import_polkadot_api._Enum;
var ConvictionVotingVoteVoting = import_polkadot_api._Enum;
var VotingConviction = import_polkadot_api._Enum;
var TraitsScheduleDispatchTime = import_polkadot_api._Enum;
var ClaimsStatementKind = import_polkadot_api._Enum;
var Version = import_polkadot_api._Enum;
var BountiesBountyStatus = import_polkadot_api._Enum;
var ChildBountyStatus = import_polkadot_api._Enum;
var NominationPoolsClaimPermission = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = import_polkadot_api._Enum;
var PolkadotPrimitivesV6PvfPrepKind = import_polkadot_api._Enum;
var PvfExecKind = import_polkadot_api._Enum;
var ValidityAttestation = import_polkadot_api._Enum;
var PolkadotPrimitivesV6DisputeStatement = import_polkadot_api._Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = import_polkadot_api._Enum;
var InvalidDisputeStatementKind = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = import_polkadot_api._Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = import_polkadot_api._Enum;
var ParachainsParasParaLifecycle = import_polkadot_api._Enum;
var UpgradeGoAhead = import_polkadot_api._Enum;
var UpgradeRestriction = import_polkadot_api._Enum;
var SlashingOffenceKind = import_polkadot_api._Enum;
var BrokerCoretimeInterfaceCoreAssignment = import_polkadot_api._Enum;
var MultiSigner = import_polkadot_api._Enum;
var CommonCrowdloanLastContribution = import_polkadot_api._Enum;
var XcmPalletQueryStatus = import_polkadot_api._Enum;
var XcmVersionedResponse = import_polkadot_api._Enum;
var XcmV2Response = import_polkadot_api._Enum;
var XcmV2TraitsError = import_polkadot_api._Enum;
var XcmV3Response = import_polkadot_api._Enum;
var XcmPalletVersionMigrationStage = import_polkadot_api._Enum;
var XcmVersionedAssetId = import_polkadot_api._Enum;
var ReferendaTypesCurve = import_polkadot_api._Enum;
var MultiAddress = import_polkadot_api._Enum;
var BalancesAdjustmentDirection = import_polkadot_api._Enum;
var StakingPalletConfigOpBig = import_polkadot_api._Enum;
var StakingPalletConfigOp = import_polkadot_api._Enum;
var GrandpaEquivocation = import_polkadot_api._Enum;
var NominationPoolsBondExtra = import_polkadot_api._Enum;
var NominationPoolsConfigOp = import_polkadot_api._Enum;
var MultiSignature = import_polkadot_api._Enum;
var XcmVersionedXcm = import_polkadot_api._Enum;
var XcmV2Instruction = import_polkadot_api._Enum;
var XcmV2MultiAssetFilter = import_polkadot_api._Enum;
var XcmV2MultiassetWildMultiAsset = import_polkadot_api._Enum;
var XcmV2WeightLimit = import_polkadot_api._Enum;
var XcmV3Instruction = import_polkadot_api._Enum;
var XcmV3MultiassetMultiAssetFilter = import_polkadot_api._Enum;
var XcmV3MultiassetWildMultiAsset = import_polkadot_api._Enum;
var TransactionValidityError = import_polkadot_api._Enum;
var TransactionValidityInvalidTransaction = import_polkadot_api._Enum;
var TransactionValidityUnknownTransaction = import_polkadot_api._Enum;
var TransactionValidityTransactionSource = import_polkadot_api._Enum;
var CoreState = import_polkadot_api._Enum;
var OccupiedCoreAssumption = import_polkadot_api._Enum;
var CandidateEvent = import_polkadot_api._Enum;
var MmrPrimitivesError = import_polkadot_api._Enum;
var RecoveryEvent = import_polkadot_api._Enum;

// .papi/descriptors/src/dot.ts
var toBinary = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Dot"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var getMetadata = () => Promise.resolve().then(() => (init_dot_metadata(), dot_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis = "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3";
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis };
var dot_default = _allDescriptors;

// .papi/descriptors/src/ksm.ts
var import_polkadot_api3 = require("polkadot-api");
var toBinary2 = (() => {
  const table = new Uint8Array(128);
  for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
    for (let i2 = 0, j = 0; i2 < n; ) {
      const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Ksm"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var getMetadata2 = () => Promise.resolve().then(() => (init_ksm_metadata(), ksm_metadata_exports)).then(
  (module2) => toBinary2("default" in module2 ? module2.default : module2)
);
var genesis2 = "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe";
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2, getMetadata: getMetadata2, genesis: genesis2 };
var ksm_default = _allDescriptors2;
