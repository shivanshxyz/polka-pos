"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeNumber = encodeNumber;
exports.encodeString = encodeString;
exports.decodeString = decodeString;
exports.createAddressPayload = createAddressPayload;
exports.createSignPayload = createSignPayload;
exports.createFrames = createFrames;
exports.createImgSize = createImgSize;
const util_1 = require("@polkadot/util");
const util_crypto_1 = require("@polkadot/util-crypto");
const constants_js_1 = require("./constants.js");
const MULTIPART = new Uint8Array([0]);
function encodeNumber(value) {
    return new Uint8Array([value >> 8, value & 0xff]);
}
function encodeString(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
        u8a[i] = value.charCodeAt(i);
    }
    return u8a;
}
function decodeString(value) {
    return value.reduce((str, code) => {
        return str + String.fromCharCode(code);
    }, '');
}
function createAddressPayload(address, genesisHash) {
    return encodeString(`${constants_js_1.ADDRESS_PREFIX}:${address}:${genesisHash}`);
}
function createSignPayload(address, cmd, payload, genesisHash) {
    return (0, util_1.u8aConcat)(constants_js_1.SUBSTRATE_ID, constants_js_1.CRYPTO_SR25519, new Uint8Array([cmd]), (0, util_crypto_1.decodeAddress)(address), (0, util_1.u8aToU8a)(payload), (0, util_1.u8aToU8a)(genesisHash));
}
function createFrames(input) {
    const frames = [];
    let idx = 0;
    while (idx < input.length) {
        frames.push(input.subarray(idx, idx + constants_js_1.FRAME_SIZE));
        idx += constants_js_1.FRAME_SIZE;
    }
    return frames.map((frame, index) => (0, util_1.u8aConcat)(MULTIPART, encodeNumber(frames.length), encodeNumber(index), frame));
}
function createImgSize(size) {
    if (!size) {
        return {
            height: 'auto',
            width: '100%'
        };
    }
    const height = (0, util_1.isString)(size)
        ? size
        : `${size}px`;
    return {
        height,
        width: height
    };
}
