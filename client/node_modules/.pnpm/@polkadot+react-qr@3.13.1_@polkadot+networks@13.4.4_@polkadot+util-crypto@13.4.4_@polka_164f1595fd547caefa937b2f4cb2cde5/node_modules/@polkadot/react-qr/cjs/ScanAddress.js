"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QrScanAddress = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importStar(require("react"));
const util_crypto_1 = require("@polkadot/util-crypto");
const constants_js_1 = require("./constants.js");
const Scan_js_1 = require("./Scan.js");
function ScanAddress({ className, isEthereum, onError, onScan, size, style }) {
    const _onScan = (0, react_1.useCallback)((data) => {
        if (data) {
            try {
                let prefix;
                let content;
                let genesisHash;
                let name;
                if (!isEthereum) {
                    [prefix, content, genesisHash, ...name] = data.split(':');
                }
                else {
                    [prefix, content, ...name] = data.split(':');
                    genesisHash = null;
                    content = content.substring(0, 42);
                }
                const expectedPrefix = (isEthereum ? 'ethereum' : constants_js_1.ADDRESS_PREFIX);
                const isValidPrefix = (prefix === expectedPrefix) || (prefix === constants_js_1.SEED_PREFIX);
                if (!isValidPrefix) {
                    throw new Error(`Invalid prefix received, expected '${expectedPrefix} or ${constants_js_1.SEED_PREFIX}' , found '${prefix}'`);
                }
                const isAddress = prefix === expectedPrefix;
                if (isAddress && !isEthereum) {
                    (0, util_crypto_1.decodeAddress)(content);
                }
                onScan({ content, genesisHash: genesisHash, isAddress, name: name?.length ? name.join(':') : undefined });
            }
            catch (error) {
                onError && onError(error);
                console.error('@polkadot/react-qr:QrScanAddress', error.message, data);
            }
        }
    }, [onScan, onError, isEthereum]);
    return ((0, jsx_runtime_1.jsx)(Scan_js_1.QrScan, { className: className, onError: onError, onScan: _onScan, size: size, style: style }));
}
exports.QrScanAddress = react_1.default.memo(ScanAddress);
