"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QrScan = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const browser_1 = require("@zxing/browser");
const react_1 = tslib_1.__importStar(require("react"));
const styled_js_1 = require("./styled.js");
const util_js_1 = require("./util.js");
const DEFAULT_DELAY = 150;
const DEFAULT_ERROR = (error) => {
    console.error('@polkadot/react-qr:Scan', error.message);
};
function Scan({ className = '', delay = DEFAULT_DELAY, onError = DEFAULT_ERROR, onScan, size, style = {} }) {
    const videoRef = (0, react_1.useRef)(null);
    const controlsRef = (0, react_1.useRef)(null);
    const containerStyle = (0, react_1.useMemo)(() => (0, util_js_1.createImgSize)(size), [size]);
    const _onError = (0, react_1.useCallback)((error) => onError(error), [onError]);
    (0, react_1.useEffect)(() => {
        const codeReader = new browser_1.BrowserQRCodeReader();
        const startScanning = async () => {
            try {
                const videoInputDevices = await browser_1.BrowserQRCodeReader.listVideoInputDevices();
                const selectedDeviceId = videoInputDevices[0].deviceId;
                controlsRef.current = await codeReader.decodeFromVideoDevice(selectedDeviceId, videoRef.current ?? undefined, (result, error) => {
                    if (result) {
                        onScan(result.getText());
                    }
                    if (error && !(error instanceof Error)) {
                        _onError(new Error(error));
                    }
                });
            }
            catch (error) {
                _onError(error instanceof Error ? error : new Error('Unknown error occurred'));
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        const timeoutId = setTimeout(startScanning, delay);
        return () => {
            clearTimeout(timeoutId);
            if (controlsRef.current) {
                controlsRef.current.stop();
            }
        };
    }, [onScan, _onError, delay]);
    return ((0, jsx_runtime_1.jsx)(StyledDiv, { className: className, style: containerStyle, children: (0, jsx_runtime_1.jsx)("video", { className: 'ui--qr-Scan', ref: videoRef, style: style }) }));
}
const StyledDiv = styled_js_1.styled.div `
  .ui--qr-Scan {
    display: inline-block;
    height: 100%;
    transform: matrix(-1, 0, 0, 1, 0, 0);
    width: 100%;
  }
`;
exports.QrScan = react_1.default.memo(Scan);
