import { jsx as _jsx } from "react/jsx-runtime";
import { BrowserQRCodeReader } from '@zxing/browser';
import React, { useCallback, useEffect, useMemo, useRef } from 'react';
import { styled } from './styled.js';
import { createImgSize } from './util.js';
const DEFAULT_DELAY = 150;
const DEFAULT_ERROR = (error) => {
    console.error('@polkadot/react-qr:Scan', error.message);
};
function Scan({ className = '', delay = DEFAULT_DELAY, onError = DEFAULT_ERROR, onScan, size, style = {} }) {
    const videoRef = useRef(null);
    const controlsRef = useRef(null);
    const containerStyle = useMemo(() => createImgSize(size), [size]);
    const _onError = useCallback((error) => onError(error), [onError]);
    useEffect(() => {
        const codeReader = new BrowserQRCodeReader();
        const startScanning = async () => {
            try {
                const videoInputDevices = await BrowserQRCodeReader.listVideoInputDevices();
                const selectedDeviceId = videoInputDevices[0].deviceId;
                controlsRef.current = await codeReader.decodeFromVideoDevice(selectedDeviceId, videoRef.current ?? undefined, (result, error) => {
                    if (result) {
                        onScan(result.getText());
                    }
                    if (error && !(error instanceof Error)) {
                        _onError(new Error(error));
                    }
                });
            }
            catch (error) {
                _onError(error instanceof Error ? error : new Error('Unknown error occurred'));
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        const timeoutId = setTimeout(startScanning, delay);
        return () => {
            clearTimeout(timeoutId);
            if (controlsRef.current) {
                controlsRef.current.stop();
            }
        };
    }, [onScan, _onError, delay]);
    return (_jsx(StyledDiv, { className: className, style: containerStyle, children: _jsx("video", { className: 'ui--qr-Scan', ref: videoRef, style: style }) }));
}
const StyledDiv = styled.div `
  .ui--qr-Scan {
    display: inline-block;
    height: 100%;
    transform: matrix(-1, 0, 0, 1, 0, 0);
    width: 100%;
  }
`;
export const QrScan = React.memo(Scan);
