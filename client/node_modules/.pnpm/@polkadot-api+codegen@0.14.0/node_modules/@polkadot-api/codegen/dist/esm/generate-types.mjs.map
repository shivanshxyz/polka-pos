{"version":3,"file":"generate-types.mjs","sources":["../../src/generate-types.ts"],"sourcesContent":["import { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { CodeDeclarations, Variable } from \"./types-builder\"\n\nconst getTypeDependencies = (input: string) =>\n  new Set([...input.matchAll(/Anonymize<(I\\w*)>/gm)].map((x) => x[1].slice(1)))\n\nconst optimizeVariables = (\n  variables: Map<string, Variable>,\n  commonTypeImports: Set<string>,\n) => {\n  const dependants = new Map<string, Set<string>>()\n  const dependencies = new Map<string, Set<string>>()\n\n  const toRemove = new Set<string>()\n\n  ;[...variables.entries()].forEach(([checksum, { type }]) => {\n    const iDependencies = getTypeDependencies(type)\n    dependencies.set(checksum, iDependencies)\n    iDependencies.forEach((dependencyChecksum) => {\n      const s = dependants.get(dependencyChecksum)\n      if (s) {\n        s.add(checksum)\n        toRemove.delete(dependencyChecksum)\n      } else {\n        dependants.set(dependencyChecksum, new Set([checksum]))\n        if (!commonTypeImports.has(variables.get(dependencyChecksum)!.name))\n          toRemove.add(dependencyChecksum)\n      }\n    })\n  })\n\n  while (true) {\n    const nonDependants = [...toRemove].filter((item) =>\n      [...(dependencies.get(item) ?? [])].every((x) => !toRemove.has(x)),\n    )\n\n    if (!nonDependants.length) break\n\n    nonDependants.forEach((checksum) => {\n      const variableToInline = variables.get(checksum)!\n      const [target] = [...dependants.get(checksum)!]\n      const variable = variables.get(target)!\n\n      const newType = variableToInline.type.startsWith(\"AnonymousEnum<\")\n        ? variableToInline.type.slice(9) // \"Anonymous\".length\n        : variableToInline.type\n\n      variable.type = variable.type.replaceAll(\n        `Anonymize<${variableToInline.name}>`,\n        newType,\n      )\n      variables.delete(checksum)\n      toRemove.delete(checksum)\n    })\n  }\n\n  return variables\n}\n\nexport const generateTypes = (\n  declarations: CodeDeclarations,\n  paths: {\n    client: string\n  },\n  commonTypeImports: Set<string>,\n) => {\n  const clientImports = [\n    ...new Set([\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      ...declarations.imports,\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";`\n  const variables = optimizeVariables(declarations.variables, commonTypeImports)\n\n  const baseTypes = [...variables.values()]\n    .map(({ name, type }) =>\n      type.startsWith(\"Enum<\")\n        ? `export type ${name} = ${type};\\nexport const ${name} = _Enum as unknown as GetEnum<${name}>;`\n        : `export type ${name} = ${type};`,\n    )\n    .join(\"\\n\\n\")\n\n  return `${imports}\n\n  ${anonymizeType}\n\n  ${baseTypes}\n  `\n}\n"],"names":[],"mappings":"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"}