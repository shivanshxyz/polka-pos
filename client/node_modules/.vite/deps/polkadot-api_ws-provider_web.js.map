{
  "version": 3,
  "sources": ["../../.pnpm/@polkadot-api+ws-provider@0.4.0/node_modules/@polkadot-api/ws-provider/src/types.ts", "../../.pnpm/@polkadot-api+ws-provider@0.4.0/node_modules/@polkadot-api/ws-provider/src/follow-enhancer.ts", "../../.pnpm/@polkadot-api+ws-provider@0.4.0/node_modules/@polkadot-api/ws-provider/src/ws-provider.ts", "../../.pnpm/@polkadot-api+ws-provider@0.4.0/node_modules/@polkadot-api/ws-provider/src/web.ts"],
  "sourcesContent": ["import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nexport enum WsEvent {\n  CONNECTING,\n  CONNECTED,\n  ERROR,\n  CLOSE,\n}\n\nexport type WsConnecting = {\n  type: WsEvent.CONNECTING\n  uri: string\n  protocols?: string | string[]\n}\nexport type WsConnected = {\n  type: WsEvent.CONNECTED\n  uri: string\n  protocols?: string | string[]\n}\nexport type WsError = {\n  type: WsEvent.ERROR\n  event: any\n}\nexport type WsClose = {\n  type: WsEvent.CLOSE\n  event: any\n}\nexport type StatusChange = WsConnecting | WsConnected | WsError | WsClose\nexport type WsJsonRpcProvider = JsonRpcProvider & {\n  switch: (uri?: string, protocol?: string[]) => void\n  getStatus: () => StatusChange\n}\n\nexport interface WsProviderConfig {\n  endpoints: Array<string | { uri: string; protocol: string[] }>\n  onStatusChanged?: (status: StatusChange) => void\n  timeout?: number\n}\n\nexport interface GetWsProviderInput {\n  (\n    uri: string,\n    protocols?: string | string[],\n    onStatusChanged?: (status: StatusChange) => void,\n  ): WsJsonRpcProvider\n  (\n    uri: string,\n    onStatusChanged?: (status: StatusChange) => void,\n  ): WsJsonRpcProvider\n  (\n    endpoints: Array<string | { uri: string; protocol: string[] }>,\n    onStatusChanged?: (status: StatusChange) => void,\n  ): WsJsonRpcProvider\n  (wsProviderConfig: WsProviderConfig): WsJsonRpcProvider\n}\n", "import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nconst methods: Record<string, \"follow\" | \"unfollow\"> = {}\n;[\"v1\", \"unstable\"].forEach((version) => {\n  methods[`chainHead_${version}_follow`] = \"follow\"\n  methods[`chainHead_${version}_unfollow`] = \"unfollow\"\n})\n\nexport const followEnhancer: (\n  input: JsonRpcProvider,\n  forceDisconnect: () => void,\n) => JsonRpcProvider & {\n  cleanup: () => void\n} = (base, forceDisconnect) => {\n  const prematureStops = new Set<string>()\n  const preOpId = new Map<string, string>()\n  const onGoing = new Set<string>()\n  let methodsRequestId: string | undefined\n\n  const result: JsonRpcProvider = (onMsg) => {\n    const { send, disconnect } = base((fromProvider) => {\n      const parsed = JSON.parse(fromProvider)\n      // it's a response\n      if (\"id\" in parsed) {\n        const { id, result } = parsed\n        if (id === methodsRequestId) {\n          methodsRequestId = undefined\n          if (\n            result &&\n            !(result.methods as string[]).some((x) => {\n              const [group, , name] = x.split(\"_\")\n              return group === \"chainHead\" && name === \"follow\"\n            })\n          ) {\n            onMsg(fromProvider)\n            forceDisconnect()\n            return\n          }\n        }\n\n        const msg = preOpId.get(id)\n        if (msg) {\n          preOpId.delete(id)\n          if (prematureStops.has(result)) {\n            prematureStops.delete(result)\n            return\n          }\n\n          onGoing.add(result)\n          const currentSize = onGoing.size + preOpId.size\n          if (currentSize > 2)\n            console.warn(\n              `Too many chainHead follow subscriptions (${currentSize})`,\n            )\n          else if (parsed.error) {\n            console.warn(`chainHead follow failed on the ${currentSize} sub`)\n            forceDisconnect()\n            preOpId.set(id, msg)\n            send(msg)\n            return\n          }\n        }\n      } else {\n        // it's a notifiaction\n        const { subscription, result } = (parsed as any).params\n        if (result?.event === \"stop\") {\n          if (onGoing.has(subscription)) onGoing.delete(subscription)\n          else prematureStops.add(subscription)\n        }\n      }\n      onMsg(fromProvider)\n    })\n\n    return {\n      send(toProvider) {\n        const parsed = JSON.parse(toProvider)\n        if (parsed.method === \"rpc_methods\") methodsRequestId = parsed.id\n\n        const method = methods[parsed.method]\n        if (method === \"follow\") {\n          preOpId.set(parsed.id, toProvider)\n        } else if (method === \"unfollow\") {\n          onGoing.delete(parsed.params[0])\n        }\n        send(toProvider)\n      },\n      disconnect,\n    }\n  }\n\n  return Object.assign(result, {\n    cleanup: () => {\n      prematureStops.clear()\n      preOpId.clear()\n      onGoing.clear()\n    },\n  })\n}\n", "import { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\nimport {\n  GetWsProviderInput,\n  StatusChange,\n  WsJsonRpcProvider,\n  WsEvent,\n  WsProviderConfig,\n} from \"./types\"\nimport { followEnhancer } from \"./follow-enhancer\"\n\nconst timeoutError: StatusChange = {\n  type: WsEvent.ERROR,\n  event: { type: \"timeout\" },\n}\n\nconst noop = () => {}\n\nconst mapEndpoints = (\n  endpoints: WsProviderConfig[\"endpoints\"],\n): Array<[string, string | string[]] | [string]> =>\n  endpoints.map((x) => (typeof x === \"string\" ? [x] : [x.uri, x.protocol]))\n\nexport const getInternalWsProvider = (\n  WebsocketClass: typeof WebSocket,\n): GetWsProviderInput => {\n  return (...args): WsJsonRpcProvider => {\n    let endpoints: Array<[string, string | string[]] | [string]> = []\n    let onStatusChanged: (status: StatusChange) => void = noop\n    let timeout = 3_500\n\n    const [firstArg] = args\n    if (\n      args.length === 1 &&\n      typeof firstArg === \"object\" &&\n      !Array.isArray(firstArg)\n    ) {\n      endpoints = mapEndpoints(firstArg.endpoints)\n      onStatusChanged = firstArg.onStatusChanged ?? noop\n      timeout = firstArg.timeout ?? timeout\n    } else {\n      if (typeof args[1] === \"function\")\n        onStatusChanged = args[1] as (status: StatusChange) => void\n      if (Array.isArray(firstArg)) endpoints = mapEndpoints(firstArg)\n      else {\n        endpoints = [[firstArg as string]]\n        if (args[1] && args[1] !== onStatusChanged)\n          endpoints[0][1] = args[1] as any\n        if (args[2]) onStatusChanged = args[2] as any\n      }\n    }\n\n    let idx = 0\n    let status: StatusChange\n    let switchTo: [string] | [string, string | string[]] | null = null\n    let disconnect: (withHalt?: boolean) => void = noop\n\n    let outerCleanup: () => void = noop\n    const result = followEnhancer(\n      getSyncProvider(async () => {\n        const [uri, protocols] = switchTo || endpoints[idx++ % endpoints.length]\n        switchTo = null\n        const socket = new WebsocketClass(uri, protocols)\n        const forceSocketClose = () => {\n          try {\n            socket.addEventListener(\"error\", noop, { once: true })\n            socket.close()\n          } catch {}\n        }\n        onStatusChanged(\n          (status = {\n            type: WsEvent.CONNECTING,\n            uri,\n            protocols,\n          }),\n        )\n\n        await new Promise<void>((resolve, reject) => {\n          const onOpen = () => {\n            initialCleanup()\n            resolve()\n          }\n\n          const onError = (e: Event | null) => {\n            initialCleanup()\n            if (e == null) forceSocketClose()\n            console.error(\n              `Unable to connect to ${uri}${\n                protocols ? \", protocols: \" + protocols : \"\"\n              }`,\n            )\n            onStatusChanged(\n              (status = {\n                type: e ? WsEvent.ERROR : WsEvent.CLOSE,\n                event: e,\n              }),\n            )\n            setTimeout(reject, e ? 300 : 0, e)\n          }\n\n          const timeoutToken =\n            timeout !== Infinity\n              ? setTimeout(() => {\n                  initialCleanup()\n                  forceSocketClose()\n                  onStatusChanged((status = timeoutError))\n                  reject(timeoutError.event)\n                }, timeout)\n              : undefined\n\n          const initialCleanup = () => {\n            clearTimeout(timeoutToken)\n            socket.removeEventListener(\"error\", onError)\n            socket.removeEventListener(\"open\", onOpen)\n          }\n          socket.addEventListener(\"open\", onOpen)\n          socket.addEventListener(\"error\", onError)\n          disconnect = () => {\n            onError(null)\n          }\n        })\n\n        onStatusChanged(\n          (status = {\n            type: WsEvent.CONNECTED,\n            uri,\n            protocols,\n          }),\n        )\n\n        return (onMessage, onHalt) => {\n          const _onMessage = (e: MessageEvent) => {\n            if (typeof e.data === \"string\") onMessage(e.data)\n          }\n          const innerHalt =\n            (reason: WsEvent.CLOSE | WsEvent.ERROR) => (e: any) => {\n              console.warn(`WS halt (${reason})`)\n              onStatusChanged(\n                (status = {\n                  type: reason,\n                  event: e,\n                }),\n              )\n              onHalt()\n            }\n          const onError = innerHalt(WsEvent.ERROR)\n          const onClose = innerHalt(WsEvent.CLOSE)\n\n          socket.addEventListener(\"message\", _onMessage)\n          socket.addEventListener(\"error\", onError)\n          socket.addEventListener(\"close\", onClose)\n          disconnect = (withHalt) => {\n            outerCleanup()\n            disconnect = noop\n            socket.removeEventListener(\"message\", _onMessage)\n            socket.removeEventListener(\"error\", onError)\n            socket.removeEventListener(\"close\", onClose)\n            forceSocketClose()\n            if (withHalt) onClose({})\n          }\n\n          return {\n            send: (msg) => {\n              socket.send(msg)\n            },\n            disconnect,\n          }\n        }\n      }),\n      () => {\n        switchFn()\n      },\n    )\n    outerCleanup = result.cleanup\n    delete (result as any).cleanup\n\n    const switchFn: WsJsonRpcProvider[\"switch\"] = (...args) => {\n      if (status.type === WsEvent.CLOSE) return\n      if (args.length) switchTo = args as any\n      if (status.type !== WsEvent.ERROR) disconnect(true)\n    }\n\n    return Object.assign(result, { switch: switchFn, getStatus: () => status })\n  }\n}\n", "import { getInternalWsProvider } from \"./ws-provider\"\n\nexport * from \"./types\"\n\nexport type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nexport const getWsProvider = getInternalWsProvider(WebSocket)\n"],
  "mappings": "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",
  "names": ["WsEvent", "result", "args"]
}
